[
 {
  "repo": "dickreuter/Poker",
  "language": "Python",
  "readme_contents": "Deep mind pokerbot for pokerstars, partypoker and GGPoker\n==========================================================\n\nThis pokerbot plays automatically on Pokerstars, Partypoker and GG Poker. Any other table can be mapped as well.\nIt works with image recognition, montecarlo simulation and a basic genetic algorithm.\nThe mouse is moved automatically and the bot can potentially play for hours based on a large number of parameters.\n\nYou can download the binaries and run the executable directly from here:\nhttps://sourceforge.net/projects/partypoker-pokerstars-pokerbot/\n\nRunning the bot:\n----------------\n\nPartypoker:\n~~~~~~~~~~~\n* Use Fast Forward Tables\n* Select Official PartyPoker table scraper\n\n.. figure:: doc/partypoker.gif\n\nPokerstars:\n~~~~~~~~~~~\n* Use Zoom Tables\n* Select Official Poker Stars table scraper\n* For Pokerstars you will need to make some adjustments to the client. It needs to look exactly as the below, in order to run it with the Official Pokerstars Table scraper:\n* Make sure to match the card styles (4 color), covered card styles, and table styles.\n\n.. figure:: doc/ps-example.png\n\nGGPoker:\n~~~~~~~~~~~\nMake sure your GGPoker setup looks as follows when using it with the Official GGPoker Table:\n\n.. figure:: doc/ggpk2.png\n\n\nGeneral setup:\n~~~~~~~~~~~~~~\n\nIf you just want to run the bot, please do the following:\n\nInstall the binearies of the bot from here: https://sourceforge.net/projects/partypoker-pokerstars-pokerbot/\n\nYou can then immediately run the bot. It will analyze the poker client, move the mouse and play in accordance\nwith one of its pre-programmed strategies. Most of the strategies are based on zoom or Fast Forward tables.\nYou are welcome to edit and imporve any strategies to optmize the play of the bot for your needs.\n\nIn most cases it may be useful to put the poker client inside a virtual machine to avoid it from interfering\nwith the bot. Also, the bot will then be able to control the mouse inside the virtual machine, without blocking\nthe whole computer:\n\n* Download Virtualbox: https://www.virtualbox.org/\n* Download Windows 10 Iso File for example from here https://www.softlay.com/apps/operating-system\n* Create a new virtual box environment and use the ISO file as a startup\n* Make sure to give the Virtualbox only 1 CPU as the computing power is needed for the bot (mainly for OCR)\n* Install Partypoker or Pokerstars in the virtual box environment\n* Install the pokerbot directly onto your computer (outside of the virtual box)\n* In the Setup select your virtual box instance (instead of direct mouse control)\n* Join the telegram chat by pressing the chat button\n\n* The current version Only works on windows\n* Do not obstruct the view of the table as the bot is based on image recognition\n* Only one table window should be visible.\n* For best performance minimize all windows in the vm, except the table window itself\n* Don't use any dpi scaling in the virtualbox\n* In setup, try to select your virtual machine instead of direct mouse control. That way mouse movements won't obstruct you.\n\n\nStrategy Analyzer\n-----------------\n\n- You can see the profitability of each strategy in the strategy analyzer.\n- The bar chart indicates what action types have led to wins or losses at each stage (preflop, flop turn and river)\n\nLooking at the stacked bar chart in more detail, gives you clues how to adjust the strategy to maximize your wins:\n\n.. figure:: doc/analyzer_bar2.png\n\nAnalyze individual rounds within each stage:\n\n.. figure:: doc/analyzer_bar3.png\n\nAnalyze individual hands:\n\n.. figure:: doc/strategy_analyzer.gif\n\n\nStrategy editor\n---------------\nA variety of factors are taken into consideration when the bot makes decisions and they can be adjusted in the strategy editor:\n\n- Equity (winning probability), which is calculated by a montecarlo simulation\n- Equity and minimum call/bet value need to be on the left of the corresponding curve in order for the bot not to fold\n- Various other factors, such as behaviour in the previous rounds are taken into consideration. Check out the strategy editor for more details.\n- Hover over each item to see a more detailed description\n\n.. figure:: doc/strategy2.png\n\nA variety of other options can be edited for each strategy:\n\n.. figure:: doc/strategy_editor.gif\n\nAdvice how to improve strategies:\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* You will generally require at least 2000 hands played with a strategy to draw any conclusions. Even better 5000 hands. Anything less than 1000 hands is completely random.\n* Best buy in more than the minimum, this will improve the bots performance as it has more leeway to play. For example on a 0.01/0.02 table, buy in more than the minimum of $2. Ideally start with $4 or even more.\n* Look at the strategy analyzer and work your way backwards. First improve the River play, then once this is good move on to the Turn, then to the Flop etc. This is because the game is path dependent.\n* If you make changes in the ranges, you may need to adapt all minimum equities as it changes the equity calculation.\n* Good Luck!\n\nFull version:\n~~~~~~~~~~~~~\n\nThe full version allows you to:\n\n* Edit and create new Strategies\n* View all Strategies of all users\n\nTo purchase, please follow this link. You'll then receive a password within 24 hours.\nhttps://www.paypal.com/webapps/billing/plans/subscribe?plan_id=P-910576034F790373KMC6UZOQ\n\nAlternatively you can contact me via email or telegram and request a password directly and pay bitcoin to:\n1Py5o4WLYMizXc8pFPqzD4yeCAm53BhJit\n\nYou can also get a free subscription if you make some meaningful contribution to the codebase.\n\nThe easiest way to contribute is by:\n\n- Adding new tables\n- Adding new strategies\n- Directly add fixes to the code and create a pull request\n\n\n\nMapping new tables\n------------------\n\nThe bot can learn to read new tables, either by using templates or by training a neural network that uses data augmentation based on the given templates.\n\n`Click here to see a Video description how to add a new table <https://www.dropbox.com/s/txpbtsi1drncq4x/20200531_194837.mp4?dl=0>`_\n\nThe setup to add new tables looks like this:\n\n.. figure:: doc/scraper.png\n\n- Open the pokerbot and click on table setup to open the window that helps you create new tables.\n- Open the poker client next to it, make sure it's not dpi scaled, so the pokerbot can take screenshots.\n- Start with creating a new template, you can do this by entering a name for your template, for example Pokerstars 1-2 zoom poker. Click on 'Blank new'.\n- Now the first think you want to do is to take a screenshot of the pokerstars window with the table. You can do this by pressing on the Take screenshot button. You should not see in the lower window a full screenshot of what is on your screen.\n- The first step is now to mark the top left corner of the poker tables window, which will be the point of reference for everything else that will follow. To mark the top left corner, you need to mark it by first clicking on the top left part of it and then on the right lower part of it. once you have done this, it will appear in the second window. You can save it by clicking on the \"save newly selected top left corner\" button.\n- Now you can crop it by pressing on the crop from top left corner button. This will discard most of the screenshot and only keep the screenshot from the top left corner and everything a few hundred pixels to the right of it and below.\n- Next you will want to mark everything else in the window. Start with the Buttons search area. You can do this again by clicking on the top left area of the buttons and then on the bottom right area of where the buttons appear. Once you are happy with the selection, click on the \"Buttons search area\".\n- If you hover over the buttons, you will get a more detailed description of what you need to pay attention to.\n- Note that you will need to take many screenshots, crop them (don't select the top left corner again, as this you should only do once), instead load it and then crop the image. After that make your selection of the different images and save them by pressing on the corresponding button. You'll need to teach it every card and every button etc.\n\n\nRunning via python source code\n------------------------------\n- Download pycharm communite edition as an IDE from here: https://www.jetbrains.com/pycharm/download/#section=windows\n- Install python 3.7 or Anaconda (=python with packages) from here: https://www.python.org/downloads/release/python-379/\n- Create an environment with ``conda create -n poker python=3.7`` or use pycharm's functionality to create a new virtual environment. Check youtube for details.\n- Install all the packages with ``pip install -r requirements.txt``\n- Install tesserocr: `pip install https://github.com/simonflueckiger/tesserocr-windows_build/releases/download/tesserocr-v2.4.0-tesseract-4.0.0/tesserocr-2.4.0-cp37-cp37m-win_amd64.whl`\n- You also may need to get c++ runtime distributable: https://visualstudio.microsoft.com/downloads/\n- Install virtualbox from https://www.virtualbox.org/wiki/Downloads and put the poker client into the virtual box. That way it can be controlled without having to use the mouse in your main window.\n- Run ``main.py`` from pycharm after setting up the above created virtual environment as interpreter (check youtube)\n\n\nPackages and modules:\n~~~~~~~~~~~~~~~~~~~~~\n\nmain.py: entry point\n\npoker.scraper\n^^^^^^^^^^^^^\n\nContains user interface and routines that help map new tables\n\n- ``recognize_table``: Functions to recognize the different items on the table, based on the created mapping\n- ``screen_operations``: Various routines, such as taking screen shots, cropping etc\n- ``table_setup``: Routines in relation to the gui\n- ``ui_table_setup``: QT user interface. Corresponding py file is created with makegui.bat in the parent folder. To edit the gui download QT Designer and open the .ui file.\n\n\npoker.decisionmaker\n^^^^^^^^^^^^^^^^^^^\n\n-  ``decisionmaker.py``: The ultimate decision what action should be taken based on the input\n-  ``montecarlo_numpy2.py``: fast numpy based montecarlo simulation to\n   calculate equity. Not yet working correctly. Some tests are failing. Feel free to fix them.\n-  ``montecarlo_python.py``: relatively slow python based montecarlo for equity calculation. Supports\n   preflop ranges for other players.\n\npoker.tests\n^^^^^^^^^^^\n\n-  ``test_montecarlo_numpy.py``: tests for the numpy montecarlo\n-  ``test_pylint.py``: pylint and pydoc tests to ensure pep8 standards and static code analysis\n\n\nGraphical user interface (gui)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Download QT for open source project: https://www.qt.io/download-open-source\n- Use the qt designer to edit any of the .ui files in gui/ui\n\n\nNext Priorities\n---------------\n\n\n- [ ] Update tests. Some are currently outdated. More tests are needed\n- [ ] Add more strategies\n- [ ] Switch from using pytesseract to tesserocr to speed up OCR, this should considerably speed up the bot\n- [ ] Better Analyze the collected data to improve strategies\n\n\nMaking fixes in the code\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n- Fixing code and making a pull request back into the origin/master:\n\nIt will be hard for one person alone to beat the world at poker. That's\nwhy this repo aims to have a collaborative environment, where models can\nbe added and evaluated.\n\nTo contribute do the following:\n\n- Get Pycharm and build the virtual python environment. Use can do: ``pip install -r requirements.txt`` (see above)\n- Clone your fork to your local machine. You can do this directly from pycharm: VCS --> check out from version control --> git\n- Add as remote the original repository where you created the fork from and call it upstream (the connection to your fork should be called origin). This can be done with vcs --> git --> remotes\n- Create a new branch: click on master at the bottom right, and then click on 'new branch'\n- Make your edits.\n- Ensure all tests pass. Under file --> settings --> python integrated tools switch to pytest. You can then just right click on the tests folder and run all tests. All tests need to pass. Make sure to add your own tests by simply naming the funtion test\\_... \\\n- Make sure all the tests are passing. Best run pytest as described above (in pycharm just right click on the tests folder and run it). If a test fails, you can debug the test, by right clicking on it and put breakpoints, or even open a console at the breakpoint: https://stackoverflow.com/questions/19329601/interactive-shell-debugging-with-pycharm\n- Commit your changes (CTRL+K}\n- Push your changes to your origin (your fork) (CTRL+SHIFT+K)\n- To bring your branch up to date with upstream master, if it has moved on: rebase onto upstream master: click on your branch name at the bottom right of pycharm, then click on upstream/master, then rebase onto. You may need to resolve soe conflicts. Once this is done, make sure to always force-push (ctrl+shift+k), (not just push). This can be done by selecting the dropdown next to push and choose force-push (important: don't push and merge a rebased branch with your remote)\n- Create a pull request on your github.com to merge your branch with the upstream master.\n- When your pull request is approved, it will be merged into the upstream/master.\n- Please make sure that all tests are passing, including the pylint test. You can either run them locally on your machine, or when you push check the travis log on github. [currently many are failing, feel free to help fixing them!]\n\n\n\nFAQ\n---\n\nNo top left corner\n~~~~~~~~~~~~~~~~~~\n\n- Make sure everything looks exactly like in the picture at the top of this documentation.\n    * The buttons need to look exactly like this and it needs to be in English and not scaled. Colours need to be standard.\n    * Most tables are mapped to real money. They won't work with play money.\n    * The poker table window has to be fully visible and cannot be scaled, otherwise it won't be detected properly.\n    * In Partypoker, when you open the table, choose table options and then choose **back to default size** to make sure the table is in default size.\n\n- Tables are mapped for fast forward and zoom games with real money. Use the Supersonic3 table for Partypoker or McNaught table in Pokerstars.\n- If things still don't work, consider teaching it a new table as described above.\n\nCards not recognized\n~~~~~~~~~~~~~~~~~~~~~\n\n- Make sure everything looks exactly like in the picture at the top of this documentation.\n    * Make sure to use real money. Tables are different for play money.\n    * Ensure you are seated at the position as shown in the picture above.\n    * Currently the bot only works for tables with 6 players.\n\n\nDo I need to use a virtual machine?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n- For Pokerstars you definitely do, otherwise you will be blocked and your account will be frozen within minutes. For Partypoker I'm not sure. But best check the terms and conditions.\n\n\nAnalyzing the log and reporting problems\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n- In the folder where you installed the pokerbot, there is a subfolder with the log files in /log. There are also screenshots in /log/screenshots that may be able to help debug the problem.\n- Create a issue on the link at the top of this github page https://github.com/dickreuter/Poker/issues or email dickreuter@gmail.com.\n\n\nRelated projects\n----------------\nTraining the bot by playing against itself is a separate project which can be found here:\nhttps://github.com/dickreuter/neuron_poker"
 },
 {
  "repo": "pret/pokered",
  "language": "Assembly",
  "readme_contents": "# Pok\u00e9mon Red and Blue [![Build Status][ci-badge]][ci]\n\nThis is a disassembly of Pok\u00e9mon Red and Blue.\n\nIt builds the following ROMs:\n\n- Pokemon Red (UE) [S][!].gb `sha1: ea9bcae617fdf159b045185467ae58b2e4a48b9a`\n- Pokemon Blue (UE) [S][!].gb `sha1: d7037c83e1ae5b39bde3c30787637ba1d4c48ce2`\n- BLUEMONS.GB (debug build) `sha1: 5b1456177671b79b263c614ea0e7cc9ac542e9c4`\n- dmgapae0.e69.patch `sha1: 0fb5f743696adfe1dbb2e062111f08f9bc5a293a`\n- dmgapee0.e68.patch `sha1: ed4be94dc29c64271942c87f2157bca9ca1019c7`\n\nTo set up the repository, see [**INSTALL.md**](INSTALL.md).\n\n\n## See also\n\n- **Discord:** [pret][discord]\n- **IRC:** [libera#pret][irc]\n\nOther disassembly projects:\n\n- [**Pok\u00e9mon Yellow**][pokeyellow]\n- [**Pok\u00e9mon Gold/Silver**][pokegold]\n- [**Pok\u00e9mon Crystal**][pokecrystal]\n- [**Pok\u00e9mon Pinball**][pokepinball]\n- [**Pok\u00e9mon TCG**][poketcg]\n- [**Pok\u00e9mon Ruby**][pokeruby]\n- [**Pok\u00e9mon FireRed**][pokefirered]\n- [**Pok\u00e9mon Emerald**][pokeemerald]\n\n[pokeyellow]: https://github.com/pret/pokeyellow\n[pokegold]: https://github.com/pret/pokegold\n[pokecrystal]: https://github.com/pret/pokecrystal\n[pokepinball]: https://github.com/pret/pokepinball\n[poketcg]: https://github.com/pret/poketcg\n[pokeruby]: https://github.com/pret/pokeruby\n[pokefirered]: https://github.com/pret/pokefirered\n[pokeemerald]: https://github.com/pret/pokeemerald\n[discord]: https://discord.gg/d5dubZ3\n[irc]: https://web.libera.chat/?#pret\n[ci]: https://github.com/pret/pokered/actions\n[ci-badge]: https://github.com/pret/pokered/actions/workflows/main.yml/badge.svg\n"
 },
 {
  "repo": "ishikota/PyPokerEngine",
  "language": "Python",
  "readme_contents": "# PyPokerEngine\n\n[![Build Status](https://travis-ci.org/ishikota/PyPokerEngine.svg?branch=master)](https://travis-ci.org/ishikota/PyPokerEngine)\n[![Coverage Status](https://coveralls.io/repos/github/ishikota/PyPokerEngine/badge.svg?branch=master)](https://coveralls.io/github/ishikota/PyPokerEngine?branch=master)\n[![PyPI](https://img.shields.io/pypi/v/PyPokerEngine.svg?maxAge=2592000)](https://badge.fury.io/py/PyPokerEngine)\n[![license](https://img.shields.io/github/license/mashape/apistatus.svg?maxAge=2592000)](https://github.com/ishikota/kyoka/blob/master/LICENSE.md)\n\nPoker engine for AI development in Python\n\n# Tutorial\nThis tutorial leads you to start point of poker AI development!!\n#### Outline of Tutorial\n1. Create simple AI which always returns same action.\n2. Play AI vs AI poker game and see its result.\n\n#### Installation\nBefore start AI development, we need to install *PyPokerEngine*.  \nYou can use pip like this.\n```\npip install PyPokerEngine\n```\nThis library supports Python 2 (2.7) and Python3 (3.5).\n\n## Create first AI\nIn this section, we create simple AI which always declares *CALL* action.  \nTo create poker AI, what we do is following\n\n1. Create PokerPlayer class which is subclass of [`PypokerEngine.players.BasePokerPlayer`](https://github.com/ishikota/PyPokerEngine/blob/master/pypokerengine/players/base_poker_player.py).\n2. Implement abstract methods which inherit from `BasePokerPlayer` class.\n\n\nHere is the code of our first AI. (We assume you saved this file at `~/dev/fish_player.py`)  \n\n```python\nfrom pypokerengine.players import BasePokerPlayer\n\nclass FishPlayer(BasePokerPlayer):  # Do not forget to make parent class as \"BasePokerPlayer\"\n\n    #  we define the logic to make an action through this method. (so this method would be the core of your AI)\n    def declare_action(self, valid_actions, hole_card, round_state):\n        # valid_actions format => [raise_action_info, call_action_info, fold_action_info]\n        call_action_info = valid_actions[1]\n        action, amount = call_action_info[\"action\"], call_action_info[\"amount\"]\n        return action, amount   # action returned here is sent to the poker engine\n\n    def receive_game_start_message(self, game_info):\n        pass\n\n    def receive_round_start_message(self, round_count, hole_card, seats):\n        pass\n\n    def receive_street_start_message(self, street, round_state):\n        pass\n\n    def receive_game_update_message(self, action, round_state):\n        pass\n\n    def receive_round_result_message(self, winners, hand_info, round_state):\n        pass\n\n\n```\nIf you are interested in what each callback method receives, See [AI_CALLBACK_FORMAT.md](https://github.com/ishikota/PyPokerEngine/blob/master/AI_CALLBACK_FORMAT.md).\n\n## Play AI vs AI poker game\nOk, let's play the poker game by using our created `FishPlayer`.  \nTo start the game, what we need to do is following\n\n1. Define game rule through `Config` object (ex. start stack, blind amount, ante, blind_structures)\n2. Register your AI with `Config` object.\n3. Start the game and get game result\n\nHere is the code to play poker for 10 round with our created `FishPlayer`.\n```python\nfrom pypokerengine.api.game import setup_config, start_poker\n\nconfig = setup_config(max_round=10, initial_stack=100, small_blind_amount=5)\nconfig.register_player(name=\"p1\", algorithm=FishPlayer())\nconfig.register_player(name=\"p2\", algorithm=FishPlayer())\nconfig.register_player(name=\"p3\", algorithm=FishPlayer())\ngame_result = start_poker(config, verbose=1)\n```\nWe set `verbose=1`, so simple game logs are output after `start_poker` call.\n```\nStarted the round 1\nStreet \"preflop\" started. (community card = [])\n\"p1\" declared \"call:10\"\n\"p2\" declared \"call:10\"\n\"p3\" declared \"call:10\"\nStreet \"flop\" started. (community card = ['C4', 'C6', 'CA'])\n\"p2\" declared \"call:0\"\n\"p3\" declared \"call:0\"\n\"p1\" declared \"call:0\"\nStreet \"turn\" started. (community card = ['C4', 'C6', 'CA', 'D4'])\n\"p2\" declared \"call:0\"\n\"p3\" declared \"call:0\"\n\"p1\" declared \"call:0\"\nStreet \"river\" started. (community card = ['C4', 'C6', 'CA', 'D4', 'H2'])\n\"p2\" declared \"call:0\"\n\"p3\" declared \"call:0\"\n\"p1\" declared \"call:0\"\n\"['p3']\" won the round 1 (stack = {'p2': 90, 'p3': 120, 'p1': 90})\nStarted the round 2\n...\n\"['p1']\" won the round 10 (stack = {'p2': 30, 'p3': 120, 'p1': 150})\n```\nFinally, let's check the game result !!\n```python\n>>> print game_result\n{\n  'rule': {'ante': 0, 'blind_structure': {}, 'max_round': 10, 'initial_stack': 100, 'small_blind_amount': 5},\n  'players': [\n    {'stack': 150, 'state': 'participating', 'name': 'p1', 'uuid': 'ijaukuognlkplasfspehcp'},\n    {'stack': 30, 'state': 'participating', 'name': 'p2', 'uuid': 'uadjzyetdwsaxzflrdsysj'},\n    {'stack': 120, 'state': 'participating', 'name': 'p3', 'uuid': 'tmnkoazoqitkzcreihrhao'}\n  ]\n}\n```\n\n## GUI support\nWe also provide GUI application. You can play poker with your AI on browser.  \nPlease check [PyPokerGUI](https://github.com/ishikota/PyPokerGUI).\n\n<img src=\"https://github.com/ishikota/PyPokerGUI/blob/master/screenshot/poker_demo.gif\" width=500 />\n\n# for Reinforcement Learning users\n`PyPokerEngine` is developed for Reinforcement Learning usecase.  \nSo we also provide `Emulator` class which has convinient methods for Reinforcement Learning.  \nCommon usage of `Emulator` would be like below.  \n\n```python\nfrom pypokerengine.players import BasePokerPlayer\nfrom pypokerengine.api.emulator import Emulator\nfrom pypokerengine.utils.game_state_utils import restore_game_state\n\nfrom mymodule.poker_ai.player_model import SomePlayerModel\n\nclass RLPLayer(BasePokerPlayer):\n\n    # Setup Emulator object by registering game information\n    def receive_game_start_message(self, game_info):\n        player_num = game_info[\"player_num\"]\n        max_round = game_info[\"rule\"][\"max_round\"]\n        small_blind_amount = game_info[\"rule\"][\"small_blind_amount\"]\n        ante_amount = game_info[\"rule\"][\"ante\"]\n        blind_structure = game_info[\"rule\"][\"blind_structure\"]\n        \n        self.emulator = Emulator()\n        self.emulator.set_game_rule(player_num, max_round, small_blind_amount, ante_amount)\n        self.emulator.set_blind_structure(blind_structure)\n        \n        # Register algorithm of each player which used in the simulation.\n        for player_info in game_info[\"seats\"][\"players\"]:\n            self.emulator.register_player(player_info[\"uuid\"], SomePlayerModel())\n\n    def declare_action(self, valid_actions, hole_card, round_state):\n        game_state = restore_game_state(round_state)\n        # decide action by using some simulation result\n        # updated_state, events = self.emulator.apply_action(game_state, \"fold\")\n        # updated_state, events = self.emulator.run_until_round_finish(game_state)\n        # updated_state, events = self.emulator.run_until_game_finish(game_state)\n        if self.is_good_simulation_result(updated_state):\n            return # you would declare CALL or RAISE action\n        else:\n            return \"fold\", 0\n    \n```\n\n# Documentation\nFor mode detail, please checkout [doc site](https://ishikota.github.io/PyPokerEngine/)\n\n"
 },
 {
  "repo": "andrewprock/pokerstove",
  "language": "C++",
  "readme_contents": "PokerStove\n==========\n\n[![OpenHUB Metrics](https://www.openhub.net/p/pokerstove/widgets/project_thin_badge.gif)](https://www.openhub.net/p/pokerstove)\n\nPokerStove is a highly hand optimized C++ poker hand evaluation library.  The Win32 Hold'em\nGUI was first released in 2002, and has been available as freeware since\nit's first release.\n\nThe core libraries of pokerstove are being open sourced.  The project is\ncurrently in the process of reviewing and publishing the code.  As code is\nreviewed and code sanitized further commits will be added.\n\nPlease find the old installer in the win32 directory.  That installer should\ninstall a version of PokerStove which will not expire at any time.  You can also\nfind the apk file for the Android version of the utility in the android folder.\n\n## Libraries\n\n### peval\n\nThis is a c++ poker hand evaluation library.  The main design goals of the library\nare generality, extensibility, and ease of use.  There are evaluators for fourteen\nvariants of poker.  Additionally, there are various card manipulation and query tools built\ninto the CardSet class.\n\n## Programs\n\n### ps-eval\n\nA tool for poker hand evaluation.  It demonstrates how to use the peval library, and to create\nevaluators for the different variants of poker.\n\n### ps-colex\n\nA utility for viewing colexicographical index for sets of cards.\n\n## Building\n\nThe pokerstove libraries come with build scripts for cmake.  This\nshould allow you to build it on any platform with minimal\ntweaking.  This project has been successfully build under linux/g++,\nwindows/vc2010 and OSX/XCode so far.\n\nIn order to build the libraries you'll need the following\ninstalled on your platform of choice:\n\n* boost, version 1.46 or higher\n* cmake, version 2.4 or higher\n\n### Linux\n\nTo install the dependencies with apt get:\n\n    apt-get install libboost-all-dev cmake\n\nTo build under linux using cmake, create a build directory,\ninvoke cmake on the programs directory, then build.\n\n    git clone https://github.com/andrewprock/pokerstove.git\n    mkdir pokerstove/build\n    cd pokerstove/build\n    cmake -DCMAKE_BUILD_TYPE=Release ..\n    make && make test\n\nYou should then be able to execute the simple command line\nexample:\n\n    ~/cmake/programs$ ./programs/ps-eval/ps-eval\n    Allowed options:\n      -? [ --help ]          produce help message\n      -g [ --game ] arg (=h) game to use for evaluation\n      -b [ --board ] arg     community cards for he/o/o8\n      -h [ --hand ] arg      a hand for evaluation\n      -q [ --quiet ]         produce no output\n\n       For the --game option, one of the follwing games may be\n       specified.\n         h     hold'em\n         o     omaha/8\n         O     omaha high\n         r     razz\n         s     stud\n         e     stud/8\n         q     stud high/low no qualifier\n         d     draw high\n         l     lowball (A-5)\n         k     Kansas City lowball (2-7)\n         t     triple draw lowball (2-7)\n         T     triple draw lowball (A-5)\n         b     badugi\n         3     three-card poker\n\n       examples:\n           ps-eval acas\n           ps-eval AcAs Kh4d --board 5c8s9h\n           ps-eval AcAs Kh4d --board 5c8s9h\n           ps-eval --game l 7c5c4c3c2c\n           ps-eval --game k 7c5c4c3c2c\n           ps-eval --game kansas-city-lowball 7c5c4c3c2c\n\n\n### Windows\n\nGetting boost to work under windows can be a bit of a challenge.\nOne of the easier ways is to install precompiled librares.  There\nis a batch of them available at sourceforge. If you're working\nwith Visual Studio 2010, you will probably need the 32 bit\nlibraries.  [boost precomplied libraries]\n(http://sourceforge.net/projects/boost/files/boost-binaries/1.53.0/)\n\nUnder windows, the cmake gui can be used to construct solution\nand project files for Visual Studio 2010.  To do this, browse\nsource to locate the programs directory git/pokerstove/programs.\nThen create a build dir for the project.  At the bottom of the\ngui click Configure, then Generate.  You may have to edit the\ngit/pokerstove/programs/CMakeLists.txt to point cmake to your\ninstallation of boost.\n\nOnce you've done that, you should be able to select\n\n    Menu->Build->Build Solution\n\nto build the sample program.\n\n\n### OSX\n\nIn order to build under Max OSX, you'll need to install XCode,\ngit, cmake, macports, and boost.  The first four can be installed\nin the conventional manner, with XCode coming form the App Store, cmake,\ngit and macports downloaded from the web.  The macports package is a\ntypical unix package management utility and is required to install boost.\nOnce you've installed and selfupdate'd macports, you can install boost:\n\n    sudo port install boost -no_static\n\nFrom there you can run the cmake gui as in windows.  This will create\nan XCode project which should compile the sample utility. Alternatively,\nfollow the command  line `cmake` instructions in the [Linux section](#linux).\n"
 },
 {
  "repo": "pokerregion/poker",
  "language": "Python",
  "readme_contents": "Poker framework for Python\n==========================\n\n|travis| |coveralls| |pythons| |release| |license| |wheel| |downloads|\n\nA Python framework for poker related operations.\n\nIt contains classes for parsing card Suits, Cards, Hand combinations (called Combos),\nconstruct hand Ranges and check for syntax, parse Hand histories.\n\nIt can get information from poker related websites like\nPocketfives, TwoplusTwo Forum, or PokerStars website by scraping them.\nIn the long term, it will have a fast hand evaluator and an equity calculator.\n\nIt uses the MIT license, so its code can be used in any product without legal consequences.\n\nIt aims for quality, fully tested code and easy usability with nice APIs, suitable for beginners\nto play with.\n\n\nDocumentation\n-------------\n\nhttps://poker.readthedocs.org/\n\nState of the project\n--------------------\n\nAs you can see, there is not much activity from me, because I don't play poker anymore and \nI don't have motivation to develop this library. The PokerStars parser is broken because \na small change in PokerStars hand history format. A serious investment/donation would be\nrequired to allow me to work on this library.\n\n\nLicense\n-------\n\nThe MIT License (MIT)\n\nCopyright (c) 2013-2019 Kiss Gy\u00f6rgy\n\n\nRepo and contact\n----------------\n\n| Repo: https://github.com/pokerregion/poker\n| `@kissgyorgy <https://twitter.com/kissgyorgy>`_ on twitter\n| or you can reach me on my `public Github e-mail <https://github.com/kissgyorgy>`_.\n\n\n.. |travis| image:: https://travis-ci.org/pokerregion/poker.svg?branch=master\n   :target: https://travis-ci.org/pokerregion/poker\n\n.. |coveralls| image:: https://coveralls.io/repos/pokerregion/poker/badge.png?branch=master\n  :target: https://coveralls.io/r/pokerregion/poker?branch=master\n\n.. |pythons| image:: https://img.shields.io/pypi/pyversions/poker.svg\n   :target: https://pypi.python.org/pypi/poker/\n   :alt: Supported Python versions\n\n.. |release| image:: https://img.shields.io/pypi/v/poker.svg\n   :target: https://pypi.python.org/pypi/poker/\n   :alt: Latest Version\n\n.. |license| image:: https://img.shields.io/badge/license-MIT-blue.svg\n   :target: https://github.com/pokerregion/poker/blob/master/LICENSE\n   :alt: MIT License\n\n.. |downloads| image:: https://img.shields.io/pypi/dm/poker.svg\n   :target: https://pypi.python.org/pypi/poker/\n   :alt: Downloads\n\n.. |wheel| image:: https://img.shields.io/pypi/wheel/poker.svg\n   :target: https://pypi.python.org/pypi/poker/\n   :alt: Wheel package\n"
 },
 {
  "repo": "geobalas/Poker",
  "language": "JavaScript",
  "readme_contents": "Poker\n=====\n\nA poker application running on node.js with socket.io, using angularJS on the front-end for data binding.\n\nView a demo of the work in progress [here](http://dev.tableflippoker.com/)"
 },
 {
  "repo": "pret/pokeruby",
  "language": "C",
  "readme_contents": "# Pok\u00e9mon Ruby and Sapphire [![Build Status][travis-badge]][travis]\n\nThis is a disassembly of Pok\u00e9mon Ruby and Sapphire.\n\nIt builds the following roms:\n\n* pokeruby.gba `sha1: f28b6ffc97847e94a6c21a63cacf633ee5c8df1e`\n* pokesapphire.gba `sha1: 3ccbbd45f8553c36463f13b938e833f652b793e4`\n\nTo set up the repository, see [INSTALL.md](INSTALL.md).\n\n## See also\n\n* Disassembly of [**Pok\u00e9mon Red/Blue**][pokered]\n* Disassembly of [**Pok\u00e9mon Yellow**][pokeyellow]\n* Disassembly of [**Pok\u00e9mon Gold**][pokegold]\n* Disassembly of [**Pok\u00e9mon Crystal**][pokecrystal]\n* Disassembly of [**Pok\u00e9mon Pinball**][pokepinball]\n* Disassembly of [**Pok\u00e9mon TCG**][poketcg]\n* Disassembly of [**Pok\u00e9mon Fire Red**][pokefirered]\n* Disassembly of [**Pok\u00e9mon Emerald**][pokeemerald]\n* Discord: [**pret**][Discord]\n* irc: **irc.libera.net** [**#pret**][irc]\n\n[pokered]: https://github.com/pret/pokered\n[pokeyellow]: https://github.com/pret/pokeyellow\n[pokegold]: https://github.com/pret/pokegold\n[pokecrystal]: https://github.com/pret/pokecrystal\n[pokepinball]: https://github.com/pret/pokepinball\n[poketcg]: https://github.com/pret/poketcg\n[pokefirered]: https://github.com/pret/pokefirered\n[pokeemerald]: https://github.com/pret/pokeemerald\n[Discord]: https://discord.gg/d5dubZ3\n[irc]: https://web.libera.chat/?#pret\n[travis]: https://travis-ci.org/pret/pokeruby\n[travis-badge]: https://travis-ci.org/pret/pokeruby.svg?branch=master\n"
 },
 {
  "repo": "fedden/poker_ai",
  "language": "Python",
  "readme_contents": "| code-thing      | status        |\n| --------------- | ------------- |\n| master          | [![Build Status](https://travis-ci.org/fedden/poker_ai.svg?branch=master)](https://travis-ci.org/fedden/poker_ai)  |\n| develop         | [![Build Status](https://travis-ci.org/fedden/poker_ai.svg?branch=develop)](https://travis-ci.org/fedden/poker_ai) |\n| maintainability | [![Maintainability](https://api.codeclimate.com/v1/badges/c5a556dae097b809b4d9/maintainability)](https://codeclimate.com/github/fedden/poker_ai/maintainability) |\n| coverage        | [![Test Coverage](https://api.codeclimate.com/v1/badges/c5a556dae097b809b4d9/test_coverage)](https://codeclimate.com/github/fedden/poker_ai/test_coverage) |\n| license         | [![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0) |\n\n[Read the documentation]()\n\n# \ud83e\udd16 Poker AI\n\nThis repository will contain a best effort open source implementation of a poker AI using the ideas of Counterfactual Regret.\n\n<p align=\"center\">\n  <img src=\"https://github.com/fedden/poker_ai/blob/develop/assets/poker.jpg\">\n</p>\n\n_Made with love from the developers [Leon](https://www.leonfedden.co.uk) and [Colin](http://www.colinmanko.com/)._\n\n_A special thank you to [worldveil](https://github.com/worldveil) for originally writing [this awesome hand evaluator python2 module](https://github.com/worldveil/deuces), which was ported to python3 and [maintained here](https://github.com/fedden/poker_ai/tree/master/poker_ai/poker/evaluation)._\n\n## Join the Community\n[https://thepoker.ai](https://thepoker.ai)\n\n## Prerequisites\n\nThis repository assumes Python 3.7 or newer is used.\n\n## Installing\n\nEither install from pypi:\n```bash\npip install poker_ai \n```\n\nOr if you want to dev on our code, install the Python package from source by cloning this repo and `pip -e` installing it:\n```bash\ngit clone https://github.com/fedden/poker_ai.git # Though really we should use ssh here!\ncd /path/to/poker_ai\npip install .\n```\n\n## Command Line Interface (CLI)\n\nWe have a CLI that will be installed when you pip install the package. To get help on any option, just add the `--help` flag when invoking the CLI.\n\nHow to get a list of commands that can be run:\n```bash\npoker_ai --help\n``` \n\nYou will need to produce some lookup tables that cluster the various information sets. Here is more information on that:\n```bash\npoker_ai cluster --help\n```\n\nHow to get information on training an agent:\n```bash\npoker_ai train start --help\n```\n\nHow to get information on resuming training:\n```bash\npoker_ai train resume --help\n```\n\nOnce you have an agent, and want to play against it, you can do the following:\n```bash\npoker_ai play --help\n```\n\n## Build a Bot\n\n### Cluster Hero Information\n\nIn poker, the number of card combinations for one player on the river can exceed 56 billion combinations. In order to make this information tractable, we must group together strategically similar situations. We do this with two types of compression: lossy and lossless compression. Currently we only support a 20 card deck without modification.\n\n```bash\npoker_ai cluster\n```\n\nYou'll save the combinations of public information in a file called card_info_lut.joblib located in your project directory.\n\n### Train your bot\n\nWe use MCCFR to learn strategies. The MCCFR algorithm uses iterative self-play to adjust strategy based on regret. \n\n```bash\npoker_ai train start\n```\n\nYou'll create a folder in your project directory with the learned strategy and configuration files, in case you need to resume later.\n\n### Play your bot\n\nFinally, you can play your bot with the following command:\n\n```bash\npoker_ai play\n```\n\nYou'll create a results.yaml file in ~/.poker/. So be sure to see how you stack up against your bot.\n \n## Running tests\n\nWe are working hard on testing our components, but contributions here are always welcome. You can run the tests by cloning the code, changing directory to this repositories root directory (i.e `poker_ai/`) and call the python test library `pytest`:\n```bash\ncd /path/to/poker_ai\npip install pytest\npytest\n```\n\nSee below on how to run the tests from the docker image.\n\n## Building the docker image\n\nWe use a custom docker image for our testing suite. \n\nYou'll need to have computed the pickled card information lookup tables first (the cluster command for poker_ai). We build the images like below, in this case the luts are in './research/blueprint_algo'. First we build the parent image, with all of the dependancies.\n```bash\ndocker build --build-arg LUT_DIR=research/blueprint_algo -f ParentDockerfile -t pokerai .\n```\n\nThen we build the test image.\n```bash\ndocker build -t pokeraitest .\n```\n\nWe then can run the tests with:\n```bash\ndocker run -it pokeraitest pytest \n```\n\nThis is just a note for the developers, but we can push the parent image to the registry with the following (please ensure the version tag that comes after the colon is correct). We want to do this because we need various dependancies for the remote tests, and travis builds the `pokeraitest` image with the current git commit that has just been pushed.\n```bash\ndocker tag pokerai pokerai/pokerai:1.0.0rc1\ndocker push pokerai/pokerai:1.0.0rc1\n```\n\n## Building documentation\n\nDocumentation is hosted, but you can build it yourself if you wish:\n```bash\n# Build the documentation.\ncd /path/to/poker_ai/docs\nmake html\ncd ./_build/html \n# Run a webserver and navigate to localhost and the port (usually 8000) in your browser.\npython -m http.server \n```\n\n## Repository Structure\n\nBelow is a rough structure of the codebase. \n\n```\n\u251c\u2500\u2500 applications   # Larger applications like the state visualiser sever.\n\u251c\u2500\u2500 paper          # Main source of info and documentation :)\n\u251c\u2500\u2500 poker_ai       # Main Python library.\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ai         # Stub functions for ai algorithms.\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 games      # Implementations of poker games as node based objects that\n\u2502   \u2502              # can be traversed in a depth-first recursive manner.\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 poker      # WIP general code for managing a hand of poker.\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 terminal   # Code to play against the AI from your console.\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 utils      # Utility code like seed setting.\n\u251c\u2500\u2500 research       # A directory for research/development scripts \n\u2502                  # to help formulate understanding and ideas.\n\u2514\u2500\u2500 test           # Python tests.\n    \u251c\u2500\u2500 functional # Functional tests that test multiple components \n    \u2502              # together.\n    \u2514\u2500\u2500 unit       # Individual tests for functions and objects.\n```\n\n## Code Examples\n\nHere are some assorted examples of things that are being built in this repo.\n\n### State based poker traversal\n\nTo perform MCCFR, the core algorithm of poker_ai, we need a class that encodes all of the poker rules, that we can apply an action to which then creates a new game state.\n\n```python\npot = Pot()\nplayers = [\n    ShortDeckPokerPlayer(player_i=player_i, initial_chips=10000, pot=pot)\n    for player_i in range(n_players)\n]\nstate = ShortDeckPokerState(players=players)\nfor action in state.legal_actions:\n    new_state: ShortDeckPokerState = state.apply_action(action)\n```\n\n### Playing against AI in your terminal\n\nWe also have some code to play a round of poker against the AI agents, inside your terminal.\n\nThe characters are a little broken when captured in `asciinema`, but you'll get the idea by watching this video below. Results should be better in your actual terminal!\n\n<p align=\"center\">\n  <a href=\"https://asciinema.org/a/331234\" target=\"_blank\">\n    <img src=\"https://asciinema.org/a/331234.svg\" width=\"500\" />\n  </a>\n</p>\nTo invoke the code, either call the `run_terminal_app` method directly from the `poker_ai.terminal.runner` module, or call from python like so:\n\n```bash\ncd /path/to/poker_ai/dir\npython -m poker_ai.terminal.runner       \\\n  --agent offline                        \\ \n  --pickle_dir ./research/blueprint_algo \\\n  --strategy_path ./research/blueprint_algo/offline_strategy_285800.gz \n```\n\n### Web visualisation code\n\nWe are also working on code to visualise a given instance of the `ShortDeckPokerState`, which looks like this:\n<p align=\"center\">\n  <img src=\"https://github.com/fedden/poker_ai-poker-AI/blob/develop/assets/visualisation.png\">\n</p>\n\nIt is so we can visualise the AI as it plays, and also debug particular situations visually. The idea as it stands, is a live web-visualisation server like TensorBoard, so you'll just push your current poker game state, and this will be reflected in the visualisations, so you can see what the agents are doing. \n\n[_The frontend code is based on this codepen._](https://codepen.io/Rovak/pen/ExYeQar)\n\nHere is an example of how you could plot the poker game state:\n```python\nfrom plot import PokerPlot\nfrom poker_ai.games.short_deck.player import ShortDeckPokerPlayer\nfrom poker_ai.games.short_deck.state import ShortDeckPokerState\nfrom poker_ai.poker.pot import Pot\n\n\ndef get_state() -> ShortDeckPokerState:\n    \"\"\"Gets a state to visualise\"\"\"\n    n_players = 6\n    pot = Pot()\n    players = [\n        ShortDeckPokerPlayer(player_i=player_i, initial_chips=10000, pot=pot)\n        for player_i in range(n_players)\n    ]\n    return ShortDeckPokerState(\n        players=players, \n        pickle_dir=\"../../research/blueprint_algo/\"\n    )\n\n\npp: PokerPlot = PokerPlot()\n# If you visit http://localhost:5000/ now you will see an empty table.\n\n# ... later on in the code, as proxy for some code that obtains a new state ...\n# Obtain a new state.\nstate: ShortDeckPokerState = get_state()\n# Update the state to be plotted, this is sent via websockets to the frontend.\npp.update_state(state)\n# http://localhost:5000/ will now display a table with 6 players.\n```\n\n### Playing a game of poker\n\nThere are two parts to this repository, the code to manage a game of poker, and the code to train an AI algorithm to play the game of poker. A low level thing to first to is to implement a poker engine class that can manage a game of poker.\n\nThe reason the poker engine is implemented is because it is useful to have a well-integrated poker environment available during the development of the AI algorithm, incase there are tweaks that must be made to accomadate things like the history of state or the replay of a scenario during Monte Carlo Counterfactual Regret Minimisation. \n\nThe following code is how one might program a round of poker that is deterministic using the engine. This engine is now the first pass that will be used support self play.\n\n```python\nfrom poker_ai import utils\nfrom poker_ai.ai.dummy import RandomPlayer\nfrom poker_ai.poker.table import PokerTable\nfrom poker_ai.poker.engine import PokerEngine\nfrom poker_ai.poker.pot import Pot\n\n# Seed so things are deterministic.\nutils.random.seed(42)\n\n# Some settings for the amount of chips.\ninitial_chips_amount = 10000\nsmall_blind_amount = 50\nbig_blind_amount = 100\n\n# Create the pot.\npot = Pot()\n# Instanciate six players that will make random moves, make sure \n# they can reference the pot so they can add chips to it.\nplayers = [\n    RandomPlayer(\n        name=f'player {player_i}',\n        initial_chips=initial_chips_amount,\n        pot=pot)\n    for player_i in range(6)\n]\n# Create the table with the players on it.\ntable = PokerTable(players=players, pot=pot)\n# Create the engine that will manage the poker game lifecycle.\nengine = PokerEngine(\n    table=table,\n    small_blind=small_blind_amount,\n    big_blind=big_blind_amount)\n# Play a round of Texas Hold'em Poker!\nengine.play_one_round()\n```\n\n## Roadmap\n\nThe following todo will change dynamically as my understanding of the algorithms and the poker_ai project evolves. \n\nAt first, the goal is to prototype in Python as iteration will be much easier and quicker. Once there is a working prototype, write in a systems level language like C++ and optimise for performance. \n\n### 1. Game engine iteration.\n_Implement a multiplayer working heads up no limit poker game engine to support the self-play._\n- [x] Lay down the foundation of game objects (player, card etc).\n- [x] Add poker hand evaluation code to the engine.\n- [x] Support a player going all in during betting.\n- [x] Support a player going all in during payouts.\n- [x] Lots of testing for various scenarios to ensure logic is working as expected.\n\n### 2. AI iteration.\n_Iterate on the AI algorithms and the integration into the poker engine._\n- [x] Integrate the AI strategy to support self-play in the multiplayer poker game engine.\n- [x] In the game-engine, allow the replay of any round the current hand to support MCCFR. \n- [x] Implement the creation of the blueprint strategy using Monte Carlo CFR miminisation.\n- [x] Add the real-time search for better strategies during the game.\n\n### 3. Game engine iteration.\n_Strengthen the game engine with more tests and allow users to see live visualisation of game state._\n- [x] Start work on a visualisation server to allow a game state to be displayed. \n- [ ] Triple check that the rules are implemented in the poker engine as described in the supplimentary material.\n- [ ] Work through the coverage, adding more tests, can never have enough.\n\n<p align=\"center\">\n  <img src=\"https://github.com/fedden/poker_ai/blob/develop/assets/regret.jpeg\">\n</p>\n\n## Contributing\n\nThis is an open effort and help, criticisms and ideas are all welcome. \n\nFirst of all, please check out the [CONTRIBUTING](/CONTRIBUTING.md) guide.\n\nFeel free to start a discussion on the github issues or to reach out to me at leonfedden at gmail dot com. \n\n## License\n\nThe code is provided under the copy-left GPL licence. If you need it under a more permissive license then please contact me at leonfedden at gmail dot com.\n\n## Stargazers over time\n\nWe appreciate you getting this far in the README file! If you like what we are doing, please give us a star and share with your friends! \n\n[![Stargazers over time](https://starchart.cc/fedden/poker_ai.svg)](https://starchart.cc/fedden/poker_ai)\n"
 },
 {
  "repo": "pokerth/pokerth",
  "language": "C++",
  "readme_contents": ""
 },
 {
  "repo": "CharlieHess/slack-poker-bot",
  "language": "JavaScript",
  "readme_contents": "## Slack Poker Bot [![Build Status](https://travis-ci.org/CharlieHess/slack-poker-bot.png)](https://travis-ci.org/CharlieHess/slack-poker-bot)\n\nA bot that turns Slack into a legitimate Texas Hold'em client. Start a game in any channel or private group with 2-10 players. PokerBot will deal hands, direct message players with their hole cards, query players for their action, determine the winning hand, and handle the pot.\n\n![](https://s3.amazonaws.com/f.cl.ly/items/3w3k222T0A1o2e0d033Q/Image%202015-09-01%20at%2011.41.33%20PM.png)\n![](https://s3.amazonaws.com/f.cl.ly/items/2a073W0Q1Y2N0O2U1i3p/Image%202015-09-01%20at%2011.39.28%20PM.png)\n\nSee it [in action](https://www.youtube.com/watch?v=Joku-PKUObE).\n\n## Getting Started\n1. Create a new [bot integration](https://my.slack.com/services/new/bot)\n1. Follow the steps to deploy the bot to Heroku or run it locally\n1. Once the bot is running, start a game with: `@<your-bot-name>: deal`\n\n#### One-Click Heroku\nClick this button:\n\n[![Deploy](https://www.herokucdn.com/deploy/button.png)](https://heroku.com/deploy)\n\n#### Manual Heroku\n1. Install [Heroku toolbelt](https://devcenter.heroku.com/articles/getting-started-with-nodejs#set-up)\n1. Create a new bot integration (as above)\n1. `heroku create`\n1. `heroku config:set SLACK_POKER_BOT_TOKEN=[Your API token]`\n1. `git push heroku master`\n\n#### To Run Locally\n1. Create a `token.txt` file and paste your API token there\n1. `npm install`\n1. `node src/main.js`\n\n## Directions\n* To start a game, `@<your-bot-name>: deal`.\n* To end a game, `@<your-bot-name>: quit game`. The game will end once the current hand finishes.\nNote that any player can end a game at any time with this command, so Be Honorable\u2122.\n* To configure some bot options, `@<your-bot-name>: config <name-of-option>=<value>`. The supported options are:\n```\ntimeout: Sets the duration (in seconds) before a player times out. \nSet to 0 to specify no timeout.\n```\nSo, to start a game without any player timeout, say:\n```\n@<your-bot-name>: config timeout=0\n@<your-bot-name>: deal\n```\n\nCheck the open issues for some planned enhancements.\n\n### AI Players\nAlthough this client was built for managing human players in a Slack channel, it has some support for AI players. To add a bot player:\n\n1. Add a bot class under the `ai/` folder\n1. Implement `getAction`, which is called whenever it is the bot's turn\n1. Modify the `addBotPlayers` method in `src/bot.js` to add your bot to every game\n\n### Test All The Things\nTo run tests, simply do:\n\n1. `gulp`\n\nThe tests produce legible output that matches what users in Slack would see. This is the same test suite that is run on each pull request. This is very helpful when diagnosing a logic bug:\n![](https://s3.amazonaws.com/f.cl.ly/items/2L0Y2Y3d3g0i1x171n2V/Image%202015-09-08%20at%207.00.40%20PM.png)\n\n### Dependencies\n* [NodeJS Slack Client](https://github.com/slackhq/node-slack-client)\n`node-slack-client` abstracts the basics of a Slack bot, including authentication, getting messages from players, and posting messages or attachments to the channel.\n\n* [RxJS](https://github.com/Reactive-Extensions/RxJS)\nThe majority of this client is written using `RxJS`. It simplifies many of the complex player polling interactions, that would otherwise be Death By Timers, into very legible code.\n\n* [Imgur](https://github.com/kaimallea/node-imgur) / [Lightweight Image Processor](https://github.com/EyalAr/lwip)\nEach card is a separate image, and board images are created on the fly by pasting several cards onto a single canvas (with the help of  `lwip`). The resulting image is than uploaded to `imgur`, which gives us a single URL that can be passed as an attachment to the Slack API. This route was chosen to avoid uploading 318,505,200 images to the cloud, and allows us to modify the card assets easily.\n\n* [Poker Evaluator](https://github.com/chenosaurus/poker-evaluator)\n`poker-evaluator` is used for evaluating the winning hand when it comes time to show down. Here it has been extended to calculate the best 5-card hand from any 7-card hand.\n\n* [MochaJS](http://mochajs.org/)\nMost of the tricky client logic is backed up by tests, which were written using `MochaJS`.\n\n* [Vector Playing Cards](https://code.google.com/p/vector-playing-cards/)\n"
 },
 {
  "repo": "EricSteinberger/PokerRL",
  "language": "Python",
  "readme_contents": "# PokerRL\n\nFramework for Multi-Agent Deep Reinforcement Learning in Poker games.\n\n\n## Background\nResearch on solving imperfect information games has largely revolved around methods that traverse the full game-tree\nuntil very recently (see\n[[0]](http://martin.zinkevich.org/publications/regretpoker.pdf),\n[[1]](http://poker.cs.ualberta.ca/publications/2015-ijcai-cfrplus.pdf),\n[[2]](https://papers.nips.cc/paper/3713-monte-carlo-sampling-for-regret-minimization-in-extensive-games.pdf),\nfor examples).\nNew algorithms such as Neural Fictitious Self-Play (NFSP)\n[[3]](http://discovery.ucl.ac.uk/1549658/1/Heinrich_phd_FINAL.pdf),\nRegret Policy Gradients (RPG) [[4]](https://arxiv.org/pdf/1810.09026.pdf),\nDeep Counterfactual Regret Minimization (Deep CFR) [[5]](https://arxiv.org/pdf/1811.00164.pdf),\nand Single Deep CFR [[8]](https://arxiv.org/pdf/1901.07621.pdf)\nhave recently combined Deep (Reinforcement) Learning with conventional methods like CFR and Fictitious-Play to learn\napproximate Nash equilibria while only ever visiting a fraction of the game's states.\n\n\n## PokerRL Framework\n\n### Components of a PokerRL Algorithm\n![FrameWork](img/PokerRL_AgentArchitecture.png)\nYour algorithm consists of workers (green) that interact with each other. Arguments for a training run are \npassed through an instance of a _TrainingProfile_ (`.../rl/base_cls/TrainingProfileBase`).\nCommon metrics like best-response or head-to-head performance can be measured periodically by separate\nworkers (red). Your trained agent is wrapped in an EvalAgent (`.../rl/base_cls/EvalAgentBase`).\nYour EvalAgent can battle other AIs in an AgentTournament (`.../game/AgentTournament`)\nor play against humans in an InteractiveGame (`.../game/InteractiveGame`). All local workers (just classes)\ncan be wrapped with ~4 lines of code to work as an independent distributed worker. \n\nSome parts of PokerRL work only for 2-player games since they don't make sense in other settings. However,\nthe game engine itself and the agent modules are general to N>1 players.\n\n### Evaluation of Algorithms\nWe provide four metrics to evaluate algorithms:\n\n- **Best Response (BR)**  - Computes the exact exploitability (for small games).\n- **Local Best Response (LBR) [[7]](https://arxiv.org/pdf/1612.07547.pdf)** approximates a lower bound of BR.\n- **RL Best Response (RL-BR)** approximates BR by training DDQN [[9]](https://arxiv.org/pdf/1511.06581.pdf)\nagainst the AI.\n- **Head-To-Head (H2H)** - Let's two modes of an Agent play against each other.\n\nOur current implementation of Best Response is only meant to be run in small games, but LBR and QBR are optimized\nfor distributed computing in (very) large games. As a baseline comparison in small games, there are (unoptimized)\nimplementations of\nvanilla CFR [[10]](http://martin.zinkevich.org/publications/regretpoker.pdf),\nCFR+ [[11]](https://arxiv.org/abs/1407.5042)\nand Linear CFR [[12]](https://arxiv.org/pdf/1809.04040.pdf)\nthat can be run just like a Deep RL agent and will plot their exploitability to TensorBoard.\n\n### Performance & Scalability\nWhilst past algorithms had performance concerns mostly related to computations on the game-tree, these sampling \nbased approaches have most of their overhead in querying neural networks. PokerRL provides an RL environment and a \nframework ontop of which algorithms based on Deep Learning can be built and run to solve poker games. PokerRL provides\na wrapper for ray [[6]](https://github.com/ray-project/ray) to allow the same code to run locally, on many cores, or\neven on a cluster of CPU and potentially GPU workers.\n\n\n\n\n\n\n## Installation\nThese instructions will guide you through getting PokerRL up and running on your local machine and\nexplain how to seamlessly deploy the same code you developed and tested locally onto an AWS cluster.\n\n### Prerequisites\nThis codebase is OS agnostic for local runs but supports only Linux for distributed runs due to limitations of\n [ray](https://github.com/ray-project/ray).\n\n### Installation on your Local Machine\nFirst, please install Anaconda/Miniconda and Docker. Then run the following commands (insert details where needed):\n```\nconda create -n CHOOSE_A_NAME python=3.6 -y\nsource activate THE_NAME_YOU_CHOSE\npip install requests\nconda install pytorch=0.4.1 -c pytorch\n```\nand then\n```\npip install PokerRL\n```\nNote: For distributed runs you would need Linux and also `pip install PokerRL[distributed]`. This is not required for\nlocal-only usage.\n\nThis framework uses [PyCrayon](https://github.com/torrvision/crayon), a language-agnostic wrapper around\nTensorboard. Please follow the instructions on their GitHub page to set it up. After you have installed PyCrayon, you\ncan run and start the log server via\n```\ndocker run -d -p 8888:8888 -p 8889:8889 --name crayon alband/crayon\ndocker start crayon\n```\nNow try to access Tensorboard in your browser at `localhost:8888`.\n\n#### Running some Tests\nRun this command in the directory containing PokerRL to check whether all unittests pass. \n```\npython -m unittest discover PokerRL/test\n``` \nA more fun way to test whether your installation was successful, is running `examples/interactive_user_v_user.py` to\nplay poker against yourself and `examples/run_cfrp_example.py` to train a CFR+ agent in a small poker game.\n\n## Cloud & Cluster\nPokerRL provides an interface that allows the exact same code to run locally and on a cluster by utilizing\n[ray](https://github.com/ray-project/ray). PokerRL supports two modes:\n1. _Distributed_: Run many worker processes on a single machine with many cores\n2. _Cluster_: Run many workers on many machines\n\nYou can enable/disable distributed and cluster mode by switching a boolean in the TrainingProfile.\nThis section assumes you developed your algorithm using a pip-installed version of PokerRL.\n\nExamples of algorithms compatible with distributed PokerRL are this\n[implementation of Neural Fictitious Self-Play](https://github.com/TinkeringCode/Neural-Fictitous-Self-Play) [8].\nand this\n[implementation of Single Deep CFR](https://github.com/TinkeringCode/Single-Deep-CFR) [3]\n\n### Local or Distributed Mode on an AWS instance\n1. Fire up any AWS instance that suits your needs over the management console. This tutorial assumes your base AMI is\n\"Amazon Linux 2 AMI (HVM), SSD Volume Type\". Note: It is important that you add the following allowance to your security group to be able to view logs:\n    ```\n    Custom TCP Rule   |   TCP   |   8888   |   Your_IP   |   Tensorboard\n    ```\n1. Run the following commands on the instance:\n    ```\n    sudo yum update -y\n    sudo yum install git gcc g++ polkit -y\n    sudo amazon-linux-extras install docker -y\n    sudo service docker start\n    sudo docker pull alband/crayon \n    wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\n    bash Miniconda3-latest-Linux-x86_64.sh -b -p /home/ec2-user/miniconda\n    export PATH=/home/ec2-user/miniconda/bin:$PATH\n    conda create -n PokerAI python=3.6 -y\n    source activate PokerAI\n    pip install requests\n    conda install pytorch=0.4.1 -c pytorch -y\n    pip install PokerRL[distributed]\n    ```\n1. Grant your instance access to your codebase so that it can `git pull` later on.\n\n1. Create an AMI (i.e. Image of your instance) to be able to skip the past steps in the future.\n\n1. Every time you fire up a new instance with your AMI, execute\n    ```\n    sudo service docker start\n    sudo docker inspect -f {{.State.Running}} crayon || sudo docker run -d -p 8888:8888 -p 8889:8889 --name crayon alband/crayon\n    sudo docker start crayon\n    \n    screen\n    export OMP_NUM_THREADS=1\n    export PATH=/home/ec2-user/miniconda/bin:$PATH\n    source activate PokerAI\n    source deactivate\n    source activate PokerAI\n    ```\n    You have to set `OMP_NUM_THREADS=1` because of a bug in PyTorch 0.4.1 that ignores core/process limits. This is\n    fixed in PyTorch 1.0, but 1.0 is actually slower for the recurrent networks than 0.4.1 in many cases.\n\n1. The usual syntax to start any algorithm run should be something like\n    ```\n    cd PATH/TO/PROJECT\n    git pull\n    python YOUR_SCRIPT.py\n    ```\n    \n1.  In your browser (locally), please go to `AWS_INSTANCE_PUBLIC_IP:8888` to view logs and results.\n\n### Deploy on a cluster\nThe step from distributed to cluster only requires changes as documented by [ray](https://github.com/ray-project/ray).\nOnce you have your cluster specification file (`.yaml`) and your AWS account is set up, just enable the `cluster`\noption in your TrainingProfile and start your cluster via ray over the command line.\n\n## Notes\nAn optional debugging tool that can plot the full game-tree with an agent's strategy in tiny games.\nThe code for that (authored by Sebastian De Ro) can be downloaded from\n[here](https://drive.google.com/file/d/1Oo4OyKZuO46GGnTQgWTqvX9z-BW_iShJ/view?usp=sharing).\nTo install it, just drag the PokerViz folder directly onto your `C:/` drive (Windows) or in your `home` directory\n(Linux). PokerRL will then detect that it is installed and export visualizations when you run Best Response on small\ngames. To view the trees, go into the `data` directory and rename the tree you want to view to `data.js` and then open\n`index.html`.\n\n\nNote that the Python code imports small bits of functionality exported from C++ to .dll and .so files, for Win and Linux\nrespectively. Only the binaries are included with this repository.\n\n## Citing\nIf you use PokerRL in your research, you can cite it as follows:\n```\n@misc{steinberger2019pokerrl,\n    author = {Eric Steinberger},\n    title = {PokerRL},\n    year = {2019},\n    publisher = {GitHub},\n    journal = {GitHub repository},\n    howpublished = {\\url{https://github.com/TinkeringCode/PokerRL}},\n}\n```\n\n\n\n\n\n## Authors\n* **Eric Steinberger**\n\n\n\n\n\n## License\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n\n\n\n\n## Acknowledgments\nI want to thank Alexander Mandt for getting ray to run on our local cluster of 64 workers and HTL Spengergasse for\nproviding it. Sebastian De Ro developed a game tree visualisation\n[tool](https://github.com/sebastiandero/js-visualize-best-response-tree) that we integrated into PokerRL and\ncontributed to our batched poker hand evaluator written in C++.\n\n## References\n[0] Zinkevich, Martin, et al. \"Regret minimization in games with incomplete information.\" Advances in neural information\nprocessing systems. 2008.\n\n[1] Tammelin, Oskari, et al. \"Solving Heads-Up Limit Texas Hold'em.\" IJCAI.dc 2015.\n\n[2] Lanctot, Marc, et al. \"Monte Carlo sampling for regret minimization in extensive games.\" Advances in neural\ninformation processing systems. 2009.\n\n[3] Heinrich, Johannes, and David Silver. \"Deep reinforcement learning from self-play in imperfect-information games.\"\narXiv preprint arXiv:1603.01121 (2016).\n\n[4] Srinivasan, Sriram, et al. \"Actor-critic policy optimization in partially observable multiagent environments.\"\nAdvances in Neural Information Processing Systems. 2018.\n\n[5] Brown, Noam, et al. \"Deep Counterfactual Regret Minimization.\" arXiv preprint arXiv:1811.00164 (2018).\n\n[6] https://github.com/ray-project/ray\n\n[7] Lisy, Viliam, and Michael Bowling. \"Equilibrium Approximation Quality of Current No-Limit Poker Bots.\" arXiv\npreprint arXiv:1612.07547 (2016).\n\n[8] Steinberger, Eric. \"Single Deep Counterfactual Regret Minimization.\" arXiv preprint arXiv:1901.07621 (2019).\n\n[9] Wang, Ziyu, et al. \"Dueling network architectures for deep reinforcement learning.\"\narXiv preprint arXiv:1511.06581 (2015).\n\n[10] Zinkevich, Martin, et al. \"Regret minimization in games with incomplete information.\" Advances in neural\ninformation processing systems. 2008.\n\n[11] Tammelin, Oskari. \"Solving large imperfect information games using CFR+.\" arXiv preprint arXiv:1407.5042 (2014).\n\n[12] Brown, Noam, and Tuomas Sandholm. \"Solving Imperfect-Information Games via Discounted Regret Minimization.\"\narXiv preprint arXiv:1809.04040 (2018).\n"
 },
 {
  "repo": "Toxantron/scrumonline",
  "language": "PHP",
  "readme_contents": "# ScrumOnline\n\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/scrumonline/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nPHP web app for planning poker. It includes a master view for the ScrumMaster and a simple responsive card view for the team. A deployed demo is available at http://www.scrumpoker.online\n\n## Idea\nEveryone who ever managed a software project using scrum will have either heard of or played planning poker. It is a simple tool to determine a stories/features complexity. For the detailed process refer to https://en.wikipedia.org/wiki/Planning_poker. So far there are a couple of apps where you can select a card and display it on the screen - but none of them offer a network collaboration mode. Some of the existing web apps are nowhere near responsive or come with too overloaded UIs. I want to create a simple web app where the Scrum Master can start a named session and all team members can join the session.\n\n## Deployment\nYou can find a detailed deployment how-to in the [documentation](/doc/Deployment.md) or use the docker image over at [chrisns/scrumonline](https://github.com/chrisns/scrumonline).\n\n## Setup\nThe \"deployment\" is a general scrum meeting where the ScrumMaster has a laptop connected to a beamer while all team members have an internet connected device (phone, tablet, laptop, ... - smartwatch would be awesome). The meeting starts with the ScrumMaster creating a named session and all team members joining that session. The beamer should now show the list of joined members.\n\n## Estimation workflow\nFor every story the Scrum Master will than start a poll and each member of the session must select a card. As they select a card the main screen will show a card over their name, but without showing the number. Once everyone selected a card the main page (beamer) flips all the cards. According to planning poker it will than highlight the minimum and maximum estimation for colleagues to bring their arguments. A demonstration using the Redmine plugin is available [on youtube](https://www.youtube.com/watch?v=faRYrNz8MYw).\n\n## Road Map\n* Include vote history of previous stories at the bottom of the master view\n* Statistics tab in navigation bar\n* Mobile apps with watch support. Imagine voting on Android Wear or Apple Watch. Wouldn't that be cool? :D\n\n## Contribute\nIf you want to contribute you can just clone the repository and follow the deployment instructions. Any changes must be commited to a fork and then merged by issuing a pull request. For information on the REST API or ticketing plugins please have a look at the [wiki documentation](https://github.com/Toxantron/scrumonline/blob/master/doc/).\n\nYou can also use the [REST API](https://github.com/Toxantron/scrumonline/blob/master/doc/Developer-Documentation.md) to build a mobile for iOS or Android. In that case I am happy to link your app in the README and on the page.\n"
 },
 {
  "repo": "richarcher/Hatjitsu",
  "language": "JavaScript",
  "readme_contents": "Hatjitsu\n========\n\nCreate disposable online [Planning Poker](http://en.wikipedia.org/wiki/Planning_poker) rooms for quick and easy estimations.\n\nFeatures\n========\n\n* Simple interface\n* No login/signup required\n* Votes are kept hidden until all have voted to prevent coercion\n* 'Observer feature' - watch the planning session without having to vote\n* Multiple planning card decks\n* Adaptive design allows to work on desktop, tablet and mobile\n\nInstallation\n============\n\n    npm install -d\n    node server\n\n[http://localhost:5000](http://localhost:5000)\n\nInstallation (Docker)\n=====================\n\nJust checkout the repository and run:\n\n    docker-compose up -d\n\nTODOs\n=====\n\n* [x] Collapsible card view / jump to votes on vote\n* [x] Update favicon, iOS splash page, Twitter avatar etc with new design\n* [ ] Unicode symbol fallback (coffee/ace/king)\n* [x] Improve CTA buttons\n* [ ] Testing harness\n"
 },
 {
  "repo": "jacobhyphenated/PokerServer",
  "language": "Java",
  "readme_contents": "Poker Server\n=============\n\nThis project is a server designed to run a friendly game of Texas Holdem Poker.  This is the server only, not the front-end or User Interface.  The server exposes a REST API for client side functionality.\n\nWhat This Project Is\n--------------------\nThis is a server program designed to facilitate a home game of Texas Holdem Poker. Some features:\n\n* Dealing every hand and performing a proper random suffle of the deck\n* Tracking the dealer button, small blind, and big blind\n* Tracking chip stacks for every player\n* Tracking each player's hole cards as well as the community cards\n* Tracking which player is currently supposed to act as well as what actions are legal for that player\n* Handling the evaluation of the poker hands, determining who wins and loses, handling split pots, and handling side pots when there are multiple all in players\n* Handling the blind structure and timers\n* Exposing all of this functionality in a REST service.\n\nThis software is for use with friendly games of poker, for home games where everyone is in the same room.  This was my thought when I designed it, and my thinking when I wrote it. \n\nWhat This Project Is Not\n-------------------------\n* This is not professional online poker software\n* This is not designed to be used in highly competative situations with large amounts of money at risk\n* There is no guarantee of security, and I'm not promising anything. I doubt I can stress this enough\n* This is not an infrustructre project. This is just the java server. To use it, you can set it up however you like, with apache/tomcat or jboss or whatever, but it does not come pre-configured. \n* This is not designed to replace the normal interaction between players in a poker game, it is designed to augment it.\n* This is not a UI. Some simple front-end projects that consume the service this project provides are available on my github page (http://github.com/jacobhyphenated).\n\nSome Background\n----------------\nI created this project for a couple of reasons. For one thing, it sounded fun, and was a good way to keep my Java/Spring skillset up to date and sharp. But also, I felt that it might be a cool and useful tool for running poker games.\n\nGenerally when I play a friendly home game of poker, there are a couple of things that can have negative impacts on the experience of the game. Sometimes people are new to the game, and the inexperience can slow down the pace of play. Sometimes people are not paying close attention, so they act out of turn, or take too much time to act. Sometimes people make mistakes, flip their cards up, or misdeal and the hand has to start over. Lastly, dealing takes a lot of time, and not everyone is very good at shuffling.\n\nNone of these issues are a big deal. It's a friendly game; no need to be stressed out about the little things. But a program like this might go a long way to making the game run more smoothly by eliminating some of these mistakes and streamlining the gameplay.\n\nI also invision this as a good learning tool. It is easier to learn the game without being distracted by chipstacks, dealing, maintaining the blinds, moving the dealer button, and remembering whose turn it is.\n\nA lot of these ideas were floating around in my mind when I started development on this project, so this is the background info that influenced a lot of my design and architecture decisions.\n\n\nTechnical Things\n-------------------\nThis is a java server project using Java 1.6 with Spring(3.2) for IOC and Hibernate(4.1) for ORM and Maven for dependency management/deployment. I used Spring for unit tests as well.  \n\nThe database is MySQL. \n\nThe API was build using Spring MVC and Jackson for JSON marshalling. \n\nSpring Cache Abstraction is used to cache the Player Status API calls (as this will be by far the most commonly called API function). The caching is invalidated on any method that changes the game state (player actions, dealing cards, new hand, etc). The current implementation uses spring's ConcurrentMapCacheFactoryBean, but the caching strategy will scale if using a properly configured ehcache setup. \n\nThe algorithm used for Texas Holdem hand evaluation uses a precomputed table of values. This is very memory intensive and will overflow some of the default java heap space allocations, specifically eclipse servers and JUnit testing. I find that adding the VM Arguments: _-Xms512m -Xmx1524m_ was more than sufficient to solve the problem.\n\nSetup and Installation\n----------------------\nSpinning up this server will largely depend on what your setup is. I had originally intended to include a war file in the repository, but it was too big and made pull/push times impractical. To get a working war file, you will have to set up and build the project.\n\nSetting up the development will depend on your IDE and various plugins. I used eclipse, so my instructions will be mostly centered around that.\n\nThis project was built on Maven, so you will need maven properly installed to pull the libraries and build the war file.\n\n1. Clone the repository\n * If you have a git eclipse plugin, use that to clone the repository and import the project into eclipse\n * If you do not have a plugin, clone the repository then import the project as an existing project\n2. Run maven.  Use maven build or maven install or an eclipse plugin. This will pull all the jar files needed for the project.\n* Set up the database. I used mysql and you will have to make some configuration changes if you are wanting to use a different database.\n * There is a mysql dump of the database structure in the scripts folder\n * The file hibernate-context.xml in the WEB-INF/spring/ folder contains the configuration for the database (username,password,etc).\n* Deploy the eclipse project to an eclipse server\n * If you don't have an eclipse server set up, just create a new server (ex. Tomcat V7.0) and deploy the project to that.\n* Change the server vm args (Overview --> open launch configurations --> arguments --> VM arguments), adding -Xms512m -Xmx1524m\n* Publish and start the server.\n* There you go, should be working.\n\nI get that this might be a bit much, and I have obviously not spent a lot of time on the configuraion side of things, so I welcome pull requests that make the initial set up easier.\n\n\nOutstanding issues, Quality, Polish\n--------------------------------\nThis is still a work in progress. What is currently here on github should work successfully with no major bugs, but there are some known issues that need to be worked on, or issues that have simple work-arounds and do not detract too much from the overall process.\n\nThe issues that I know about I have added to the Issues Tab. You can probably find a few //TODO messages throughout my code pointing out things that need additional work as well.\n\nBecause this is still a work in progress, I will likely be making periodic changes. The plan is to make sure any functionality change is backward compatible with the API, but I cannot guarantee that will happen with 100% certainty.  However, I do plan on tagging all major releases of functionality, so it should be easy to switch back to a working version if new changes create new issues.\n\n\nAPI\n======\nThe API consists of two components. The game component, and the player compomant. The way I envision it, there will be a device (say for example, an iPad) that sits in the center of the table and displays the blind time, the community cards, and other game information, that is the Game Controller.  Each player will have their own device, and will use the player section of the API.\n\nRequests to the server are made using http request parameters. The response is properly formatted JSON.\n\n### Current Version: 0.5\n\n**New in Version 0.5**: The Player Status API call now returns the small and big blind, giving the player client easier access to the blind information. Version 0.5 is completely backwards compatible with Version 0.4.\n\n**New in Version 0.4**: Sitting out of the game, and sitting back in.  There are new API calls that allow the game controller to \"sit out\" an idle player.  This player will be skipped in the game action order. In a tournament, the player will still post blinds, but will fold to any bet or raise.  A second API call is added to the player controller, allowing that player to sit back in.\n\nVersion 0.4 is backwards compatible with 0.1 as only new API calls were added, and no other API calls changed. The exception is Player Status. There is now a new status called ```SIT_OUT_GAME``` that represents a player who has been sat out.  If a client targeting an earlier version of the API cannot handle the new status, then it will not be able to use a Server running 0.4.\n\n**New in Version 0.3**: UUID identifiers for player ID.  The playerId API parameter is now a longer more unique string, making the id next to impossible to guess. \n\nVersion 0.3 is backward compatible through 0.1. The catch is that the playerId is now a guaranteed String type, so any implementation that used an integer for playerId may no longer work.  The type was never specified as an integer in the previous API specifications, but an integer would have worked in previous versions; only String will work moving forward. \n\n**New in Version 0.2**: JSONP.  Simply add a parameter named callback to the query, with the value of the javascript function.\n\n```http://your-url.com/ping?callback=test``` Results in ```test({\"success\":true\"});```\n\nVersion 0.2 is completely backwards compatible with Version 0.1. All that was added was JSONP support.\n\nGame Controller\n---------------------\n\n### List Structure (/structures)\n\nGet a list of currently available structures for the poker game. These game structures represent the blind structure, the blind length, starting chip stacks, etc.\n\n#### _request_\n\nNo parameters\n\n#### _response_\n\n* Array of Game Structures:\n * *name* - A unique identifier for the game structure type\n * *description* - a short description of structure and the game situation it was designed for\n * *startingChips* - the number of chips each player will start with\n * *blindLevels* - an array of blind levels, each value a string with the format BLIND_SB_BB\n * *blindLength* - integer representing the length of each blind level in minutes\n\n### Create Game (/create)\n\nCreate a new game. The game will be put in an unstarted state until players join.\n\n#### _request_\n\n* *gameName* - Name for the game.  There are no major restrictions on this value. It does not have to be unique\n* *gameStructure* - The type of structure your game will follow.  This is a string that corresponsds to the _name_ field of the Game Structure object, like the type you get from the List Structures request\n\n#### _response_\n\n* *gameId* - unique identifier for the game you created. Use this value to reference this particular game for future API calls.\n\n### Game Status (/gamestatus)\n\nGet the status of an existing game. Contains information about the current game state and the players involved in the game.\n\n#### _request_\n\n* *gameId* - unique ID for the game\n\n#### _response_\n\n* *gameStatus* - status representing the current state of the game. Possible values are:\n * NOT\\_STARTED\n * SEATING\n * PREFLOP\n * FLOP\n * TURN\n * RIVER\n * END\\_HAND\n* *smallBlind* - current small blind (optional)\n* *bigBlind* - current big blind (optional)\n* *blindTime* - amount of time remaining in the current blind level, in milliseconds (optional)\n* *pot* - number of chips in the pot for the current hand (optional)\n* *board* - Array of cards, representing the community cards in the hand (optional)\n * Cards are represented by a 2 character string. The first character is value, the second is suit. [2-9,T,J,Q,K,A][c,d,h,s]\n* *players* - Array of player objects\n * *name* - name of the player\n * *chips* - number of chips the player has remaining\n * *finishPosition* - if the player is out of the game, this is the position they finished in. This will be zero for players still in the game. \n * *gamePosition* - the seating position.  This determines the order of action for every hand, and should determine the seating.  This is randomized at the start of a tournament.\n\n### Start Game (/startgame)\n\nStart the game. For tournaments, all players have joined and it is time to begin the game. Players should not be able to join tournaments after the game is started.\n\n#### _request_\n\n* *gameId* - unique ID for the game to be started\n\n#### _response_\n\n* *success* - true if the game was successfully placed in a started state. False otherwise.\n\n### Start Hand (/starthand)\n\nStarts a new hand.  This should be called to trigger the dealing of the hand.  After this, players will be assigned cards and the hand will go to preflop actions.\n\n#### _request_\n\n* *gameId* - unique ID of the game where the hand is being dealt\n\n#### _response_\n\n* *handId* - unique ID for the hand that was dealt.  Use this id to reference this particular hand.\n\n### Deal Flop (/flop)\n\nDeal the three flop community cards.\n\n#### _request_\n\n* *handId* - unique ID for the hand where the flop is dealt\n\n#### _response_\n\n* *card1* - first flop card\n* *card2* - second flop card\n* *card3* - third flop card\n\n### Deal Turn (/turn)\n\nDeal the turn card for the hand\n\n#### _request_\n\n* *handId* - unique ID for the hand where the turn card is dealt\n\n#### _response_\n\n* *card4* - turn card\n\n### Deal Rivier (/river)\n\nDeal the river card for the hand\n\n#### _request_\n\n* *handId* - unique ID for the hand where the river card is dealt\n\n#### _response_\n\n* *card5* - river card\n\n### End Hand (/endhand)\n\nEnds the current hand.  This method should be called after the river card and when all players have taken actions. This should also be called when all players except one have folded.\n\nThis ends the current hand, making further operations on the hand impossible. Chips are distributed from the pot to the winning player(s).\n\n#### _request_\n\n* *handId* - unique ID for the hand to be ended\n\n#### _response_\n\n* *success* - true/false\n\n### Sit Out Current Player (/sitoutcurrent) [new in 0.4]\n\nSits the current player to act out of the game. This player's action will be skipped until the player is sat back into the game. The player's blinds will still be posted in a tournament, and the player will fold to any bet or raise.\n\n#### _request_\n\n* *handId* - unique ID for the hand with the player that needs to be sat out.\n\n#### _response_\n\n* *success* - true/false\n\n### Ping (/ping)\n\nSometimes it is nice to know that your configuration is correct and everything is working.  This is a simple convenience method to see if you can hit the server.\n\n#### _request_\n\nno request parameters\n\n#### _response_\n\n* *success* - true\n\nPlayer Controller\n------------------\n\n### Join Game (/join)\n\nJoin a game. If the game is a tournament, you can only join before the game is started.\n\n#### _request_\n\n* *gameId* - unique ID of the game to join\n* *playerName* - your name. This name will be the display name for your player.\n\n#### _response_\n\n* *playerId* - unique ID of the player that was created.  Use this to reference the player in the future.\n\n### Player Status (/status)\n\n#### _request_\n\n* *gameId* - unique ID of the game\n* *playerId* - unique ID of the player\n\n#### _response_\n\n* *status* - current status of the player\n * NOT_STARTED - game is not started\n * SEATING - game is started but no hand is dealt.  Find a seat based on the player's gamePosition (see game status)\n * WAITING - waiting on other players to act\n * ALL_IN - player is all in and can take no more actions this hand\n * LOST_HAND - at the end of the hand, the player has lost at showdown\n * WON_HAND - at the end of the hand, the player has won at least part of the pot\n * POST_SB - the player has posted the small blind for this hand. This status will only be shown preflop\n * POST_BB - the player has posted the big blind for this hand. This status will only be shown preflop\n * ACTION_TO_CALL - The player is the current player to act and must call a bet to continue\n * ACTION_TO_CHECK - The player is the current player to act and has the option to check the action\n * SIT_OUT - The player is out of the current hand\n * SIT_OUT_GAME - The player has left the table and is sitting out of the game. The player could come back and resume later. [new in 0.4]\n * ELIMINATED - the player has been eliminated from the game\n* *chips* - number of chips the player has remaining. This does not include chips already bet in the current hand.\n* *card1* - first hole card (optional)\n* *card2* - second hole card (optional)\n* *amountBetRound* - the amount of chips the player has contributed to the pot in the current betting round (optional)\n* *amountToCall* - If there is an outstanding bet, this is the number of chips the player must call to continue (optional)\n* *smallBlind* - the current small blind (optional). [new in 0.5]\n* *bigBlind* - the current big blind (optional). [new in 0.5]\n\n### Fold (/fold)\n\nThe player folds their hand\n\n#### _request_\n\n* *gameId* - unique ID for the game\n* *playerId* - unique ID for the player\n\n#### _response_\n\n* *success* - true if the player folds, false if the action is not allowed.\n\n\n### Call (/call)\n\nThe player calls the current bet\n\n#### _request_\n\n* *gameId* - unique ID for the game\n* *playerId* - unique ID for the player\n\n#### _response_\n\n* *success* - true if the player called the bet, false if the action is not allowed\n* *chips* - the amount of chips the player has remaining after this action\n\n### Check (/check)\n\nThe player checks their action\n\n#### _request_\n\n* *gameId* - unique ID for the game\n* *playerId* - unique ID for the player\n\n#### _response_\n\n* *success* - true if the player checks, false if the action is not allowed\n\n### Bet (/bet)\n\nThe player places a bet or makes a raise\n\n#### _request_\n\n* *gameId* - unique ID for the game\n* *playerId* - uniqueID for the player\n* *betAmount* - the amount the player bets/raises\n * This value represents the amount bet in addition to what has already been bet in this round of action\n * For example: Player 1 bets 100, then Player 2 raises to 300 total. The betAmount field would be 200.\n * Example 2: in the previous example, Player 1 re-raises to 900 total, the betAmount is 600 (100 + 200 to call + 600 = 900)\n\n#### _response_\n* *success* - true if the bet was placed, false if the action is not allowed\n* *chips* - the amount of chips the player has remaining after this action\n\n### Sit In (/sitin) [new in 0.4]\n\nThe player sits back into the game. If the player has been sat out for inactivity or because they were away from the table, this call will allow them to re-join the game.\n\n#### _request_\n\n* *playerId* - unique ID for the player\n\n#### _response_\n\n* *success* - true/false\n\n\nError Handling\n-------------\nIf the URL is not a valid API endpoint, expect a 404.\n\nIf there is an error on the server side, you will get back JSON that describes the error. The 2 fields will be:\n\n* *error* - A quick message about the error\n* *errorDetails* - A more detailed message about what caused the error.\n\nThe status code will be a version of 400 error code that most correctly describes the error that took place (such as 400 or 403)\n\nOne example of a situation where you might expect the error json response would be if you tried to call the Turn method before the flop was dealt. This would give you an error message telling you that the opporation is not allowed given the current state of the hand. The HTTP Response code would be 403.\n\n\nSecurity\n==========\nThis app does not currently have any industry grade security and is not intended for use with any significant amount of real money at stake.\n\nThere are some obvious steps that need to be taken to make the app more secure, such as putting the poker server behind an apache server with SSL, securing the database, etc.\n\nI point this out because I do not want anyone to think that they can just pull down this project and start putting real money at stake.\n\nLicense\n===========\n\nThe MIT License (MIT)\n\nCopyright (c) 2013 Jacob Kanipe-Illig\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
 },
 {
  "repo": "goldfire/pokersolver",
  "language": "JavaScript",
  "readme_contents": "## Description\npokersolver is a poker hand solver and comparison tool written in Javascript. It was written for and is being used in production on [**CasinoRPG**](http://casinorpg.com), an HTML5 MMORPG that features Texas Hold'em as one of its main casino games. It is designed for use on either the client (browser) or the server (Node.js). This library is capable of:\n\n* Evaluating a hand of up to 7 cards\n* Calculating the score of the hand (0-9)\n* Returning the name of the hand (Pair, Flush, etc)\n* Returning a detailed description (Two Pair, A's & 8's)\n* Comparing an array of hands and returning the winner(s)\n* Identifying all cards involved in creating the winning hand\n* Support for wilds and other game types\n* Works in both the browser and Node.js\n\n## Installation\n```\nnpm install pokersolver\n```\n\n## Examples\n#### Server Usage\n```javascript\nvar Hand = require('pokersolver').Hand;\n```\n\n#### Browser Usage\n```javascript\n<script src=\"/path/to/pokersolver.js\"></script>\n<script>\n  var hand = Hand.solve(['...']);\n  ...\n</script>\n```\n\nSolve two hands and then determine the winner between the two of them.\n```javascript\nvar hand1 = Hand.solve(['Ad', 'As', 'Jc', 'Th', '2d', '3c', 'Kd']);\nvar hand2 = Hand.solve(['Ad', 'As', 'Jc', 'Th', '2d', 'Qs', 'Qd']);\nvar winner = Hand.winners([hand1, hand2]); // hand2\n```\n\nSolve a hand and return the type and the description.\n```javascript\nvar hand = Hand.solve(['Ad', 'As', 'Jc', 'Th', '2d', 'Qs', 'Qd']);\nconsole.log(hand.name); // Two Pair\nconsole.log(hand.descr); // Two Pair, A's & Q's\n```\n\n## API\n### Hand Methods\n#### solve(cards, game, canDisqualify)\nSolves the hand passed in, whether 3 cards or 7. Returns various information such as name, description, score and cards involved.\n* **cards**: `Array` All cards involved in the hand, example: `['Ad', '2d', '3d', '4d', 'Qc', 'Ks', '7h']`. Note that a `10` should be passed as a `T` (`Th` for example).\n* **game**: `String` Which rule set is used, based on the game being played. Default: 'standard'\n* **canDisqualify**: `Boolean` Is this hand subject to qualification rules, which some games have? Default: false\n\n#### winners(hands)\nCompare the passed hands and determine which is the best hand(s). Can return multiple if there is a tie.\n* **hands** `Array` All hands solved with `Hand.solve` that should be compared.\n\n#### toString()\nReturns a formatted string of all cards involved in the identified hand type (maximum of 5 cards).\n\n### Solved Hand Properties\n#### cardPool `Array`\nAll of the cards passed into the hand.\n#### cards `Array`\nAll of the cards involved in the identified hand type.\n#### descr `String`\nDetailed description of the identified hand type (`Two Pair, A's & Q's` for example).\n#### name `String`\nType of hand identified (`Two Pair` for example).\n#### rank `Number`\nRanking of the hand type (Varies from game to game; 0 being the lowest hand).\n\n### PaiGowPokerHelper Methods\n#### solve(cards)\nSolves the hand passed in, sets it according to House Way, and solves both hands.\n* **cards**: `Array` All cards involved in the hand, example: `['Ad', '2d', '3d', '4d', 'Qc', 'Ks', '7h']`.\n\n#### setHands(hiHand, loHand)\nSets the hands according to the input, and solves both hands.\n* **hiHand** `Array` Five cards involved in the high hand, example: `['Ad', '2d', '3d', '4d', '7h']`.\n* **loHand** `Array` Two cards involved in the low hand, example: `['Qc', 'Ks']`.\n\n#### winners(player, banker)\nCompare the passed PaiGowPokerHelper hands and determine who wins. 1 = Player, -1 = Banker, 0 = Push.\n* **player** `PaiGowPokerHelper` Non-banking hand solved with `PaiGowPokerHelper.solve` or `PaiGowPokerHelper.setHands`.\n* **banker** `PaiGowPokerHelper` Banking hand solved with `PaiGowPokerHelper.solve` or `PaiGowPokerHelper.setHands`.\n\n### Solved PaiGowPokerHelper Properties\n#### baseHand `Hand`\nAll of the cards passed into the helper, run against `Hand.solve`.\n#### hiHand `Hand`\nFive card high hand, whether calculated or passed into the helper, run against `Hand.solve`.\n#### loHand `Hand`\nTwo card low hand, whether calculated or passed into the helper, run against `Hand.solve`.\n\n### Games Available\n#### standard\nUseful for Texas Hold'em, Seven Card Stud, Five Card Draw, and other Standard Poker Games.\n#### jacksbetter\nUseful for Jacks or Better Video Poker. Use qualification to determine if a hand is a Pair of Jacks or better.\n#### joker\nUseful for Joker Video Poker. Jokers are notated as `'Or'` and may be anything. Qualification: Kings or better.\n#### deuceswild\nUseful for Deuces Wild Video Poker. Deuces may be anything. Hands lower than Three of a Kind are `High Card` and not paying hands.\n#### threecard\nUseful for Three Card Poker. Qualification: Dealer must have Queen High or better.\n#### fourcard\nUseful for Four Card Poker. No qualifying hand.\n#### fourcardbonus\nUseful for calculating the Aces Up Bonus for Four Card Poker. Qualification: Pair of Aces or better.\n#### paigowpokerfull\nHELPER GAME: Used by `PaiGowPokerHelper` to create a hand that will eventually be split.\n#### paigowpokeralt\nHELPER GAME: Used by `PaiGowPokerHelper` on a straight and/or flush to create another possible hand.\n#### paigowpokersf6\nHELPER GAME: Used by `PaiGowPokerHelper` to determine if a six-card straight and/or flush is possible.\n#### paigowpokersf7\nHELPER GAME: Used by `PaiGowPokerHelper` to determine if a seven-card straight and/or flush is possible.\n#### paigowpokerhi\nUseful for Pai Gow Poker's High Hand. A2345 is the second highest straight. One joker in the deck as `'Or'`; it may be used to complete a straight and/or flush, else is counted as an Ace.\n#### paigowpokerlo\nUseful for Pai Gow Poker's Low Hand. One joker in the deck as `'Or'`; it is counted as an Ace.\n\n## Testing\n```\nnpm install\nnpm test\n```\n\n## License\nCopyright (c) 2016 James Simpson and GoldFire Studios, Inc.\n\nReleased under the MIT License.\n"
 },
 {
  "repo": "worldveil/deuces",
  "language": "Python",
  "readme_contents": "Deuces\n========\n\nA pure Python poker hand evaluation library\n\n    [ 2 \u2764 ] , [ 2 \u2660 ]\n    \n## Installation\n\n```\n$ pip install deuces\n```\n\n## Implementation notes\n\nDeuces, originally written for the MIT Pokerbots Competition, is lightweight and fast. All lookups are done with bit arithmetic and dictionary lookups. That said, Deuces won't beat a C implemenation (~250k eval/s) but it is useful for situations where Python is required or where bots are allocated reasonable thinking time (human time scale).\n\nDeuces handles 5, 6, and 7 card hand lookups. The 6 and 7 card lookups are done by combinatorially evaluating the 5 card choices, but later releases may have dedicated and faster algorithms for these. \n\nI also have lookup tables for 2 card rollouts, which is particularly handy in evaluating Texas Hold'em preflop pot equity, but they are forthcoming as well. \n\nSee my blog for an explanation of how the library works and how the lookup table generation is done:\nhttp://willdrevo.com/ (haven't posted yet)\n\n## Usage\n\nDeuces is easy to set up and use. \n\n```python\n>>> from deuces import Card\n>>> card = Card.new('Qh')\n```\n\nCard objects are represented as integers to keep Deuces performant and lightweight. \n\nNow let's create the board and an example Texas Hold'em hand:\n\n```python\n>>> board = [\n>>>     Card.new('Ah'),\n>>>     Card.new('Kd'),\n>>>     Card.new('Jc')\n>>> ]\n>>> hand = [\n>>>    Card.new('Qs'),\n>>>    Card.new('Th')\n>>> ]\n```\n\nPretty print card integers to the terminal: \n\n    >>> Card.print_pretty_cards(board + hand)\n      [ A \u2764 ] , [ K \u2666 ] , [ J \u2663 ] , [ Q \u2660 ] , [ T \u2764 ] \n\nIf you have [`termacolor`](http://pypi.python.org/pypi/termcolor) installed, they will be colored as well. \n\nOtherwise move straight to evaluating your hand strength:\n```python\n>>> from deuces import Evaluator\n>>> evaluator = Evaluator()\n>>> print evaluator.evaluate(board, hand)\n1600\n```\n\nHand strength is valued on a scale of 1 to 7462, where 1 is a Royal Flush and 7462 is unsuited 7-5-4-3-2, as there are only 7642 distinctly ranked hands in poker. Once again, refer to my blog post for a more mathematically complete explanation of why this is so. \n\nIf you want to deal out cards randomly from a deck, you can also do that with Deuces:\n```python\n>>> from deuces import Deck\n>>> deck = Deck()\n>>> board = deck.draw(5)\n>>> player1_hand = deck.draw(2)\n>>> player2_hand = deck.draw(2)\n```\nand print them:\n\n    >>> Card.print_pretty_cards(board)\n      [ 4 \u2663 ] , [ A \u2660 ] , [ 5 \u2666 ] , [ K \u2663 ] , [ 2 \u2660 ]\n    >>> Card.print_pretty_cards(player1_hand)\n      [ 6 \u2663 ] , [ 7 \u2764 ] \n    >>> Card.print_pretty_cards(player2_hand)\n      [ A \u2663 ] , [ 3 \u2764 ] \n\nLet's evaluate both hands strength, and then bin them into classes, one for each hand type (High Card, Pair, etc)\n```python\n>>> p1_score = evaluator.evaluate(board, player1_hand)\n>>> p2_score = evaluator.evaluate(board, player2_hand)\n>>> p1_class = evaluator.get_rank_class(p1_score)\n>>> p2_class = evaluator.get_rank_class(p2_score)\n```\nor get a human-friendly string to describe the score,\n\n    >>> print \"Player 1 hand rank = %d (%s)\\n\" % (p1_score, evaluator.class_to_string(p1_class))\n    Player 1 hand rank = 6330 (High Card)\n\n    >>> print \"Player 2 hand rank = %d (%s)\\n\" % (p2_score, evaluator.class_to_string(p2_class))\n    Player 2 hand rank = 1609 (Straight)\n\nor, coolest of all, get a blow-by-blow analysis of the stages of the game with relation to hand strength:\n\n    >>> hands = [player1_hand, player2_hand]\n    >>> evaluator.hand_summary(board, hands)\n\n    ========== FLOP ==========\n    Player 1 hand = High Card, percentage rank among all hands = 0.893192\n    Player 2 hand = Pair, percentage rank among all hands = 0.474672\n    Player 2 hand is currently winning.\n\n    ========== TURN ==========\n    Player 1 hand = High Card, percentage rank among all hands = 0.848298\n    Player 2 hand = Pair, percentage rank among all hands = 0.452292\n    Player 2 hand is currently winning.\n\n    ========== RIVER ==========\n    Player 1 hand = High Card, percentage rank among all hands = 0.848298\n    Player 2 hand = Straight, percentage rank among all hands = 0.215626\n\n    ========== HAND OVER ==========\n    Player 2 is the winner with a Straight\n\nAnd that's Deuces, yo. \n\n## Performance\n\nJust how fast is Deuces? Check out `performance` folder for a couple of tests comparing Deuces to other pure Python hand evaluators.\n\nHere are the results evaluating 10,000 random 5, 6, and 7 card boards:\n\n    5 card evaluation:\n    [*] Pokerhand-eval: Evaluations per second = 83.577580\n    [*] Deuces: Evaluations per second = 235722.458889\n    [*] SpecialK: Evaluations per second = 376833.177604\n\n    6 card evaluation:\n    [*] Pokerhand-eval: Evaluations per second = 55.519042\n    [*] Deuces: Evaluations per second = 45677.395466\n    [*] SpecialK: N/A\n\n    7 card evaluation:\n    [*] Pokerhand-eval: Evaluations per second = 51.529784\n    [*] Deuces: Evaluations per second = 15220.969303\n    [*] SpecialK: Evaluations per second = 142698.833384\n\nCompared to [`pokerhand-eval`](https://github.com/aliang/pokerhand-eval), Deuces is 2400x faster on 5 card evaluation, and drops to 300x faster on 7 card evaluation.\n\nHowever, [`SpecialKEval`](https://github.com/SpecialK/SpecialKEval/) reigns supreme, with an impressive nearly 400k evals / sec (a factor of ~1.7 improvement over Deuces) for 5 cards, and an impressive 140k /sec on 7 cards (factor of 10). \n\nFor poker hand evaluation in Python, if you desire a cleaner user interface and more readable and adaptable code, I recommend Deuces, because if you *really* need speed, you should be using C anyway. The extra 10x on 7 cards with SpecialK won't get you much more in terms of Monte Carlo simulations, and SpecialK's 5 card evals are within a factor of 2 of Deuces's evals/s. \n\nFor C/C++, I'd recommand [`pokerstove`](https://github.com/andrewprock/pokerstove), as its hyperoptimized C++ Boost routines can do 10+ million evals/s. \n\n## License\n\nCopyright (c) 2013 Will Drevo\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
 },
 {
  "repo": "kwai/DouZero",
  "language": "Python",
  "readme_contents": "# [ICML 2021] DouZero: Mastering DouDizhu with Self-Play Deep Reinforcement Learning\n<img width=\"500\" src=\"https://raw.githubusercontent.com/kwai/DouZero/main/imgs/douzero_logo.jpg\" alt=\"Logo\" />\n\n[![Building](https://github.com/kwai/DouZero/actions/workflows/python-package.yml/badge.svg)](https://github.com/kwai/DouZero/actions/workflows/python-package.yml)\n[![PyPI version](https://badge.fury.io/py/douzero.svg)](https://badge.fury.io/py/douzero)\n[![Downloads](https://pepy.tech/badge/douzero)](https://pepy.tech/project/douzero)\n[![Downloads](https://pepy.tech/badge/douzero/month)](https://pepy.tech/project/douzero)\n[![License](https://img.shields.io/badge/License-Apache_2.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/daochenzha/douzero-colab/blob/main/douzero-colab.ipynb)\n\n[\u4e2d\u6587\u6587\u6863](README.zh-CN.md)\n\nDouZero is a reinforcement learning framework for [DouDizhu](https://en.wikipedia.org/wiki/Dou_dizhu) ([\u6597\u5730\u4e3b](https://baike.baidu.com/item/%E6%96%97%E5%9C%B0%E4%B8%BB/177997)), the most popular card game in China. It is a shedding-type game where the player\u2019s objective is to empty one\u2019s hand of all cards before other players. DouDizhu is a very challenging domain with competition, collaboration, imperfect information, large state space, and particularly a massive set of possible actions where the legal actions vary significantly from turn to turn. DouZero is developed by AI Platform, Kwai Inc. (\u5feb\u624b).\n\n*   Online Demo: [https://www.douzero.org/](https://www.douzero.org/)\n       * :loudspeaker: New Version with Bid\uff08\u53eb\u724c\u7248\u672c\uff09: [https://www.douzero.org/bid](https://www.douzero.org/bid)\n*   Run the Demo Locally: [https://github.com/datamllab/rlcard-showdown](https://github.com/datamllab/rlcard-showdown)\n*   Paper: [https://arxiv.org/abs/2106.06135](https://arxiv.org/abs/2106.06135) \n*   Related Project: [RLCard Project](https://github.com/datamllab/rlcard)\n*   Related Resources: [Awesome-Game-AI](https://github.com/datamllab/awesome-game-ai)\n*   Google Colab: [jupyter notebook](https://github.com/daochenzha/douzero-colab/blob/main/douzero-colab.ipynb)\n*   Unofficial improved versions of DouZero by the community: [[DouZero ResNet]](https://github.com/Vincentzyx/Douzero_Resnet) [[DouZero FullAuto]](https://github.com/Vincentzyx/DouZero_For_HLDDZ_FullAuto)\n*   Zhihu: [https://zhuanlan.zhihu.com/p/526723604](https://zhuanlan.zhihu.com/p/526723604)\n\n**Community:**\n*  **Slack**: Discuss in [DouZero](https://join.slack.com/t/douzero/shared_invite/zt-rg3rygcw-ouxxDk5o4O0bPZ23vpdwxA) channel.\n*  **QQ Group**: Join our QQ group to discuss. Password: douzeroqqgroup\n\n\t*  Group 1: 819204202\n\t*  Group 2: 954183174\n\t*  Group 3: 834954839\n\t*  Group 4: 211434658\n\n**News:**\n*   Thanks for the contribution of [@Vincentzyx](https://github.com/Vincentzyx) for enabling CPU training. Now Windows users can train with CPUs.\n\n<img width=\"500\" src=\"https://douzero.org/public/demo.gif\" alt=\"Demo\" />\n\n## Cite this Work\nIf you find this project helpful in your research, please cite our paper:\n\nZha, Daochen et al. \u201cDouZero: Mastering DouDizhu with Self-Play Deep Reinforcement Learning.\u201d ICML (2021).\n\n```bibtex\n@InProceedings{pmlr-v139-zha21a,\n  title = \t {DouZero: Mastering DouDizhu with Self-Play Deep Reinforcement Learning},\n  author =       {Zha, Daochen and Xie, Jingru and Ma, Wenye and Zhang, Sheng and Lian, Xiangru and Hu, Xia and Liu, Ji},\n  booktitle = \t {Proceedings of the 38th International Conference on Machine Learning},\n  pages = \t {12333--12344},\n  year = \t {2021},\n  editor = \t {Meila, Marina and Zhang, Tong},\n  volume = \t {139},\n  series = \t {Proceedings of Machine Learning Research},\n  month = \t {18--24 Jul},\n  publisher =    {PMLR},\n  pdf = \t {http://proceedings.mlr.press/v139/zha21a/zha21a.pdf},\n  url = \t {http://proceedings.mlr.press/v139/zha21a.html},\n  abstract = \t {Games are abstractions of the real world, where artificial agents learn to compete and cooperate with other agents. While significant achievements have been made in various perfect- and imperfect-information games, DouDizhu (a.k.a. Fighting the Landlord), a three-player card game, is still unsolved. DouDizhu is a very challenging domain with competition, collaboration, imperfect information, large state space, and particularly a massive set of possible actions where the legal actions vary significantly from turn to turn. Unfortunately, modern reinforcement learning algorithms mainly focus on simple and small action spaces, and not surprisingly, are shown not to make satisfactory progress in DouDizhu. In this work, we propose a conceptually simple yet effective DouDizhu AI system, namely DouZero, which enhances traditional Monte-Carlo methods with deep neural networks, action encoding, and parallel actors. Starting from scratch in a single server with four GPUs, DouZero outperformed all the existing DouDizhu AI programs in days of training and was ranked the first in the Botzone leaderboard among 344 AI agents. Through building DouZero, we show that classic Monte-Carlo methods can be made to deliver strong results in a hard domain with a complex action space. The code and an online demo are released at https://github.com/kwai/DouZero with the hope that this insight could motivate future work.}\n}\n```\n\n## What Makes DouDizhu Challenging?\nIn addition to the challenge of imperfect information, DouDizhu has huge state and action spaces. In particular, the action space of DouDizhu is 10^4 (see [this table](https://github.com/datamllab/rlcard#available-environments)). Unfortunately, most reinforcement learning algorithms can only handle very small action spaces. Moreover, the players in DouDizhu need to both compete and cooperate with others in a partially-observable environment with limited communication, i.e., two Peasants players will play as a team to fight against the Landlord player. Modeling both competing and cooperation is an open research challenge.\n\nIn this work, we propose Deep Monte Carlo (DMC) algorithm with action encoding and parallel actors. This leads to a very simple yet surprisingly effective solution for DouDizhu. Please read [our paper](https://arxiv.org/abs/2106.06135) for more details.\n\n## Installation\nThe training code is designed for GPUs. Thus, you need to first install CUDA if you want to train models. You may refer to [this guide](https://docs.nvidia.com/cuda/index.html#installation-guides). For evaluation, CUDA is optional and you can use CPU for evaluation.\n\nFirst, clone the repo with (if you are in China and Github is slow, you can use the mirror in [Gitee](https://gitee.com/daochenzha/DouZero)):\n```\ngit clone https://github.com/kwai/DouZero.git\n```\nMake sure you have python 3.6+ installed. Install dependencies:\n```\ncd douzero\npip3 install -r requirements.txt\n```\nWe recommend installing the stable version of DouZero with\n```\npip3 install douzero\n```\nIf you are in China and the above command is too slow, you can use the mirror provided by Tsinghua University:\n```\npip3 install douzero -i https://pypi.tuna.tsinghua.edu.cn/simple\n```\nor install the up-to-date version (it could be not stable) with\n```\npip3 install -e .\n```\nNote that Windows users can only use CPU as actors. See [Issues in Windows](README.md#issues-in-windows) about why GPUs are not supported. Nonetheless, Windows users can still [run the demo locally](https://github.com/datamllab/rlcard-showdown).  \n\n## Training\nTo use GPU for training, run\n```\npython3 train.py\n```\nThis will train DouZero on one GPU. To train DouZero on multiple GPUs. Use the following arguments.\n*   `--gpu_devices`: what gpu devices are visible\n*   `--num_actor_devices`: how many of the GPU deveices will be used for simulation, i.e., self-play\n*   `--num_actors`: how many actor processes will be used for each device\n*   `--training_device`: which device will be used for training DouZero\n\nFor example, if we have 4 GPUs, where we want to use the first 3 GPUs to have 15 actors each for simulating and the 4th GPU for training, we can run the following command:\n```\npython3 train.py --gpu_devices 0,1,2,3 --num_actor_devices 3 --num_actors 15 --training_device 3\n```\nTo use CPU training or simulation (Windows can only use CPU for actors), use the following arguments:\n*   `--training_device cpu`: Use CPU to train the model\n*   `--actor_device_cpu`: Use CPU as actors\n\nFor example, use the following command to run everything on CPU:\n```\npython3 train.py --actor_device_cpu --training_device cpu\n```\nThe following command only runs actors on CPU:\n```\npython3 train.py --actor_device_cpu\n```\nFor more customized configuration of training, see the following optional arguments:\n```\n--xpid XPID           Experiment id (default: douzero)\n--save_interval SAVE_INTERVAL\n                      Time interval (in minutes) at which to save the model\n--objective {adp,wp}  Use ADP or WP as reward (default: ADP)\n--actor_device_cpu    Use CPU as actor device\n--gpu_devices GPU_DEVICES\n                      Which GPUs to be used for training\n--num_actor_devices NUM_ACTOR_DEVICES\n                      The number of devices used for simulation\n--num_actors NUM_ACTORS\n                      The number of actors for each simulation device\n--training_device TRAINING_DEVICE\n                      The index of the GPU used for training models. `cpu`\n                \t  means using cpu\n--load_model          Load an existing model\n--disable_checkpoint  Disable saving checkpoint\n--savedir SAVEDIR     Root dir where experiment data will be saved\n--total_frames TOTAL_FRAMES\n                      Total environment frames to train for\n--exp_epsilon EXP_EPSILON\n                      The probability for exploration\n--batch_size BATCH_SIZE\n                      Learner batch size\n--unroll_length UNROLL_LENGTH\n                      The unroll length (time dimension)\n--num_buffers NUM_BUFFERS\n                      Number of shared-memory buffers\n--num_threads NUM_THREADS\n                      Number learner threads\n--max_grad_norm MAX_GRAD_NORM\n                      Max norm of gradients\n--learning_rate LEARNING_RATE\n                      Learning rate\n--alpha ALPHA         RMSProp smoothing constant\n--momentum MOMENTUM   RMSProp momentum\n--epsilon EPSILON     RMSProp epsilon\n```\n\n## Evaluation\nThe evaluation can be performed with GPU or CPU (GPU will be much faster). Pretrained model is available at [Google Drive](https://drive.google.com/drive/folders/1NmM2cXnI5CIWHaLJeoDZMiwt6lOTV_UB?usp=sharing) or [\u767e\u5ea6\u7f51\u76d8](https://pan.baidu.com/s/18g-JUKad6D8rmBONXUDuOQ), \u63d0\u53d6\u7801: 4624. Put pre-trained weights in `baselines/`. The performance is evaluated through self-play. We have provided pre-trained models and some heuristics as baselines:\n*   [random](douzero/evaluation/random_agent.py): agents that play randomly (uniformly)\n*   [rlcard](douzero/evaluation/rlcard_agent.py): the rule-based agent in [RLCard](https://github.com/datamllab/rlcard)\n*   SL (`baselines/sl/`): the pre-trained deep agents on human data\n*   DouZero-ADP (`baselines/douzero_ADP/`): the pretrained DouZero agents with Average Difference Points (ADP) as objective\n*   DouZero-WP (`baselines/douzero_WP/`): the pretrained DouZero agents with Winning Percentage (WP) as objective\n\n### Step 1: Generate evaluation data\n```\npython3 generate_eval_data.py\n```\nSome important hyperparameters are as follows.\n*   `--output`: where the pickled data will be saved\n*   `--num_games`: how many random games will be generated, default 10000\n\n### Step 2: Self-Play\n```\npython3 evaluate.py\n```\nSome important hyperparameters are as follows.\n*   `--landlord`: which agent will play as Landlord, which can be random, rlcard, or the path of the pre-trained model\n*   `--landlord_up`: which agent will play as LandlordUp (the one plays before the Landlord), which can be random, rlcard, or the path of the pre-trained model\n*   `--landlord_down`: which agent will play as LandlordDown (the one plays after the Landlord), which can be random, rlcard, or the path of the pre-trained model\n*   `--eval_data`: the pickle file that contains evaluation data\n*   `--num_workers`: how many subprocesses will be used\n*   `--gpu_device`: which GPU to use. It will use CPU by default\n\nFor example, the following command evaluates DouZero-ADP in Landlord position against random agents\n```\npython3 evaluate.py --landlord baselines/douzero_ADP/landlord.ckpt --landlord_up random --landlord_down random\n```\nThe following command evaluates DouZero-ADP in Peasants position against RLCard agents\n```\npython3 evaluate.py --landlord rlcard --landlord_up baselines/douzero_ADP/landlord_up.ckpt --landlord_down baselines/douzero_ADP/landlord_down.ckpt\n```\nBy default, our model will be saved in `douzero_checkpoints/douzero` every half an hour. We provide a script to help you identify the most recent checkpoint. Run\n```\nsh get_most_recent.sh douzero_checkpoints/douzero/\n```\nThe most recent model will be in `most_recent_model`.\n\n## Issues in Windows\nYou may encounter `operation not supported` error if you use a Windows system to train with GPU as actors. This is because doing multiprocessing on CUDA tensors is not supported in Windows. However, our code extensively operates on the CUDA tensors since the code is optimized for GPUs. Please contact us if you find any solutions!\n\n## Core Team\n*   Algorithm: [Daochen Zha](https://github.com/daochenzha), [Jingru Xie](https://github.com/karoka), Wenye Ma, Sheng Zhang, [Xiangru Lian](https://xrlian.com/), Xia Hu, [Ji Liu](http://jiliu-ml.org/)\n*   GUI Demo: [Songyi Huang](https://github.com/hsywhu)\n*   Community contributors: [@Vincentzyx](https://github.com/Vincentzyx)\n\n## Acknowlegements\n*   The demo is largely based on [RLCard-Showdown](https://github.com/datamllab/rlcard-showdown)\n*   Code implementation is inspired by [TorchBeast](https://github.com/facebookresearch/torchbeast)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
 },
 {
  "repo": "HenryRLee/PokerHandEvaluator",
  "language": "C",
  "readme_contents": "# PH Evaluator\n\n[![GitHub Workflow Status](https://img.shields.io/github/workflow/status/HenryRLee/PokerHandEvaluator/CI?color=green&logo=github)](https://github.com/HenryRLee/PokerHandEvaluator/actions/workflows/ci.yml)\n\nA Poker Hand Evaluator based on a Pefect Hash Algorithm\n\n## Overview\n\nEfficiently evaluating a poker hand has been an interesting but challenging\nproblem. Given two different poker hands, how to determine which one is\nstronger? Or more generally, given one poker hand, can we assign a score to\nit indicating its strength?\n\nCactus Kev once gave [an answer](http://suffe.cool/poker/evaluator.html) for\na five-card poker hand evaluation. With smart encoding, it ranks each hand\nto 7462 distinct values.\n\nStill, Kev's solution is specific for a five-card hand. To evaluate a\nseven-card poker hand (which is more popular because of Texas Hold'em) using\nKev's algorithm, one brute force solution is to iterate all 7 choose 5\ncombination, running his five-card evaluation algorithm 21 times to find the\nbest answer, which is apparently too time-inefficient. Omaha poker would be\neven more complicated, as it requires picking exactly two cards from four\nplayer's cards, and exactly three cards from five community cards. Using\nbrute force, it would take 60 iterations (5 choose 3 multiplied by 4 choose 2)\nof Kev's 5-card evaluation algorithm.\n\n[PH Evaluator](https://github.com/HenryRLee/PokerHandEvaluator) is designed\nfor evaluating poker hands with more than 5 cards. Instead of traversing all\nthe combinations, it uses a perfect hash algorithm to get the hand strength\nfrom a pre-computed hash table, which only costs very few CPU cycles and\nconsiderably small memory (~100kb for the 7 card evaluation). With slight\nmodification, the same algorithm can be also applied to evaluating Omaha\npoker hands.\n\n## Algorithm\n\nThis [documentation](Documentation/Algorithm.md) has the description of the\nunderlying algorithm.\n\n## C/C++ Implementation\n\nThe [cpp](cpp) subdirectory has the C/C++ implementation of the algorithm,\noffering evaluation from 5-card hands to 7-card hands, as well as Omaha\npoker hands.\n\nOne of the latest benchmark report generated by Google Benchmark:\n\n```bash\n2020-05-25 03:29:00\nRunning ./benchmark_phevaluator\nRun on (2 X 2800.16 MHz CPU s)\nCPU Caches:\n  L1 Data 32 KiB (x1)\n  L1 Instruction 32 KiB (x1)\n  L2 Unified 1024 KiB (x1)\n  L3 Unified 33792 KiB (x1)\nLoad Average: 0.84, 0.29, 0.11\n-------------------------------------------------------------------\nBenchmark                         Time             CPU   Iterations\n-------------------------------------------------------------------\nEvaluateAllFiveCards       42539892 ns     42539339 ns           16\nEvaluateAllSixCards       358763068 ns    358754423 ns            2\nEvaluateAllSevenCards    2712988225 ns   2712943774 ns            1\nEvaluateRandomFiveCards        1924 ns         1924 ns       366811\nEvaluateRandomSixCards         2031 ns         2031 ns       347350\nEvaluateRandomSevenCards       2296 ns         2296 ns       306389\nEvaluateRandomOmahaCards       3709 ns         3709 ns       189019\n```\n\n|   | Number of Hands | Time Used | Hands per Second | Memory Used |\n|---|---|---|---|---|\n| All 5-card Hands | 2598960 | 42539892 ns | 61 M/s | 404K |\n| All 6-card Hands | 20358520 | 358763068 ns | 56 M/s | 404K |\n| All 7-card Hands | 133784560 | 2712988225 ns | 49 M/s | 404K |\n| Random 5-card Hands | 100 | 1924 ns | 51 M/s | 404K |\n| Random 6-card Hands | 100 | 2031 ns | 49 M/s | 404K |\n| Random 7-card Hands | 100 | 2296 ns | 43 M/s | 404K |\n| Random Omaha Hands | 100 | 3709 ns | 26 M/s | 404K |\n\n* I didn't measure the memory properly. Basically 404K is the maximum\nmemory used in all the evaluation methods.\n* The performance on random samples are slightly worse due to the overhead\nof accessing the pre-generated random samples in the memory.\n\n## Python Implementation\n\nThe [python](python) subdirectory has the latest Python implementation.\n\nCurrently it supports 5-card, 6-card and 7-card poker hands evaluation, as well\nas Omaha poker hands evaluation.\n\nYou can install the library using `pip`:\n\n```\npip3 install phevaluator\n```\n\nYou can find more examples from [here](https://github.com/HenryRLee/PokerHandEvaluator/tree/master/python#using-the-library).\n\nThanks to the community for contributing to the Python implementations. Especially\n[azriel1rf](https://github.com/azriel1rf),\n[ohwi](https://github.com/ohwi),\nand [bensi94](https://github.com/bensi94).\n\n## Other Implementations\n\n[PHE](https://github.com/thlorenz/phe) is a Javascript port, developed by Thorsten Lorenz.\n\n[41Poker](https://github.com/41semicolon/41poker) is another Javascript port, developed by 41semicolon.\n\n[poker](https://pub.dev/packages/poker) is a Dart port, developed by Kohei.\n\n## Awesome Use Cases\n\n### A simple Hold'em pre-flop equity estimator\n\nA reddit user coded a Hold'em pre-flop equity estimator in C++ using the PHEvaluator library.\n\nhttps://www.reddit.com/r/poker/comments/okk5qn/i_ran_1m_runouts_of_random_play_to_get_a_sense_of/\n\nThe source code can be found in [sim.cc](https://gist.github.com/bwasti/c2ca972c57f4fb581813f82f010c7cb2).\n\n![pre-flop equity estimator](https://i.redd.it/ibav59awmab71.jpg)\n\n"
 },
 {
  "repo": "alexyz/poker",
  "language": "Java",
  "readme_contents": "# PET - Poker Equity Tool\n\nPET includes\n\n- A poker equity calculator for \n  - Hold'em, Omaha, Omaha H/L - estimated pre-flop, and exact post \n    flop\n  - 5 Card Draw, 2-7 Triple Draw (estimated)\n  - Stud, Razz, 5 Card Stud (estimated)\n  - Badugi (estimated)\n\n- A fast PokerStars and Full Tilt hand parser, with\n   - searchable/sortable lists of players, games, tournaments and hands\n   - Two hand replayers, both including hand equity and SPR (stack to \n     pot ratio)\n   - a floating HUD for tables currently being played at\n\nPET does not modify, move or copy parsed hand history files, or share \nthem with others (as doing so would be against the PokerStars TOS).\n\n## Screenshots\n\nThe Omaha equity calculator (could use simplifying a bit)\n\n![Screenshot](petom.png)\n\nThe hand parser last hand table\n\n![Screenshot](petlh.png)\n\nThe hand parser replayer\n\n![Screenshot](petrep.png)\n\n## Download\n\nNo binary download provided\n"
 },
 {
  "repo": "dickreuter/neuron_poker",
  "language": "Python",
  "readme_contents": "Neuron Poker: OpenAi gym environment for texas holdem poker\n===========================================================\n\nThis is an environment for training neural networks to play texas\nholdem. Please try to model your own players and create a pull request\nso we can collaborate and create the best possible player.\n\nUsage:\n------\n\nRun:\n\n- Install Anaconda, I would also recommend to install pycharm.\n- Create a virtual environment with ``conda create -n neuron_poker python=3.7``\n- Activate it with ``conda activate neuron_poker``, then install all required packages with ``pip install -r requirements.txt``\n- Run 6 random players playing against each other:\n  ``main.py selfplay random --render`` or\n- To manually control the players:``main.py selfplay keypress --render``\n- Example of genetic algorighm with self improvement: ``main.py selfplay equity_improvement --improvement_rounds=20 --episodes=10``\n- In order to use the c++ version of the equity calculator, you will also need to install visual studio 2019 (or gcc over cygwin may work as well). To use it, use the -c option when running main.py.\n- For more advanced users: ``main.py selfplay dqn_train -c`` will start training the deep Q agent with c++ montecarlo for faster calculation\n\n.. figure:: doc/table.gif\n   :alt:\n\n\nAnalysis of the run\n~~~~~~~~~~~~~~~~~~~\n\nAt the end of an episode, the performance of the players can be observed via the summary plot.\n|image0|\n\nPackages and modules:\n~~~~~~~~~~~~~~~~~~~~~\n\nmain.py: entry point and command line interpreter. Runs agents with the gym. The docstring at the top of the file describes the command line options.\nThey are interpreted by docopt.\n\ngym\\_env\n~~~~~~~~\n\n-  ``env.py``: Texas Hold\u2019em unlimited openai gym environment &\n   ``rendering.py``: rendering graphics while playing\n\nagents\n~~~~~~\nPlease add your model based agents here.\n\n-  ``agent_random.py``: an agent making random decisions\n-  ``agent_keypress.py``: an agent taking decision via keypress\n-  ``agent_consider_equity.py``: an agent considering equity information\n-  ``agent_keras_rl_dqn.py``: Deep Q learning agent, using keras-rl for deep reinforcement learning\n-  ``agent_custom_q1.py``: Custom implementation of deep q learning\n\nNote that the observation property is a dictionary that contains all the information about the players and table that can be used to make a decision.\n\nCustom implementation of q learning\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nCustom impelemtation of reinforcement learning. This package is now in a separate repo:\nwww.github.com/dickreuter/tf_rl\n\n\ntools\n~~~~~\n\n-  ``hand_evaluator.py``: evaluate the best hand of multiple players\n-  ``helper.py``: helper functions\n-  ``montecarlo_numpy2.py``: fast numpy based montecarlo simulation to\n   calculate equity. Not yet working correctly. Some tests are failing. Feel free to fix them.\n-  ``montecarlo_python.py``: relatively slow python based montecarlo for equity calculation. Supports\n   preflight ranges for other players.\n-  ``montecarlo_cpp``: c++ implementation of equity calculator. Around 500x faster than python version\n\ntests\n^^^^^\n\n-  ``test_gym_env.py``: tests for the end.\n-  ``test_montecarlo.py``: tests for the hands evaluator and python\n   based equity calculator.\n-  ``test_montecarlo_numpy.py``: tests for the numpy montecarlo\n-  ``test_pylint.py``: pylint and pydoc tests to ensure pep8 standards and static code analysis\n\n\nRoadmap\n-------\n\nAgents\n~~~~~~\n\n- [x] Agent based on user interaction (keypress)\n- [x] Random agent\n- [x] Equity based strategy (i.e. call and bet above threshold)\n- [x] Equity based strategy with genetic algorithm, adjusting the treshold based on winning agent.\n- [x] C++ imlementation of equity calculator to significantly speed up runs\n- [x] Agent based on reinforcement learning with experience replay (Deep Q learning, based on keras-rl)\n- [/] Custom agents (see above section for more details)\n\nReinforcement learning: Deep Q agent\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``neuron_poker.agents.agent_dqn`` implements a deep q agent with help of keras-rl.\nA number of parameters can be se:\n\n- nb_max_start_steps = 20  # maximum of random actions at the beginning\n- nb_steps_warmup = 75  # before training starts, should be higher than start steps\n- nb_steps = 10000  # total number of steps\n- memory_limit = int(nb_steps / 3)  # limiting the memory of experience replay\n- batch_size = 500  # number of items sampled from memory to train\n\nTraining can be observed via tensorboard (run ``tensorboard --logdir=./Graph`` from command line)\n|image2|\n\n\nHow to contribute\n-----------------\n\nLaunching from main.py\n~~~~~~~~~~~~~~~~~~~~~~\n\nIn ``main.py`` an agent is launched as follows (here adding 6 random\nagents to the table). To edit what is accepted to main.py via command\nline, simply add another line in the docstring at the top of main.py.\n\n.. code:: python\n\n    def random_action(render):\n        \"\"\"Create an environment with 6 random players\"\"\"\n        env_name = 'neuron_poker-v0'\n        stack = 500\n        self.env = gym.make(env_name, num_of_players=6, initial_stacks=stack)\n        for _ in range(num_of_plrs):\n            player = RandomPlayer(500)\n            self.env.add_player(player)\n\n        self.env.reset()\n\nAs you can see, as a first step, the environment needs to be created. As a second step, different agents need to be\nadded to the table. As a third step the game is kicked off with a reset. Agents with autoplay set to True will automatically\nplay, by having the action method called of their class. Alternatively you can use the PlayerShell class\nand the environment will require you call call the step function manually and loop over it. This may be helpful\nwhen using other packages which are designed to interface with the gym, such as keras-rl.\n\nAdding a new model / agent\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAn example agent can be seen in random\\_agent.py\n\nTo build a new agent, an agent needs to be created, where the follwing\nfunction is modified. You will need to use the observation parameter,\nwhich contains the current state of the table, the players and and the\nagent itself, as a parameter to determine the best action.\n\n.. code:: python\n\n    def action(self, action_space, observation):  # pylint: disable=no-self-use\n        \"\"\"Mandatory method that calculates the move based on the observation array and the action space.\"\"\"\n        _ = observation  # not using the observation for random decision\n        this_player_action_space = {Action.FOLD, Action.CHECK, Action.CALL, Action.RAISE_POT, Action.RAISE_HAlF_POT}\n        possible_moves = this_player_action_space.intersection(set(action_space))\n        action = random.choice(list(possible_moves))\n        return action\n\nObserving the state\n~~~~~~~~~~~~~~~~~~~\n\nThe state is represented as a numpy array that contains the following\ninformation:\n\n.. code:: python\n\n    class CommunityData:\n        def __init__(self, num_players):\n            self.current_player_position = [False] * num_players  # ix[0] = dealer\n            self.stage = [False] * 4  # one hot: preflop, flop, turn, river\n            self.community_pot: float: the full pot of this hand\n            self.current_round_pot: float: the pot of funds added in this round\n            self.active_players = [False] * num_players  # one hot encoded, 0 = dealer\n            self.big_blind\n            self.small_blind\n\n\n    class StageData:  # as a list, 8 times:\n        \"\"\"Preflop, flop, turn and river, 2 rounds each\"\"\"\n\n        def __init__(self, num_players):\n            self.calls = [False] * num_players  # ix[0] = dealer\n            self.raises = [False] * num_players  # ix[0] = dealer\n            self.min_call_at_action = [0] * num_players  # ix[0] = dealer\n            self.contribution = [0] * num_players  # ix[0] = dealer\n            self.stack_at_action = [0] * num_players  # ix[0] = dealer\n            self.community_pot_at_action = [0] * num_players  # ix[0] = dealer\n\n\n    class PlayerData:\n        \"Player specific information\"\n\n        def __init__(self):\n            self.position: one hot encoded, 0=dealer\n            self.equity_to_river: montecarlo\n            self.equity_to_river_2plr: montecarlo\n            self.equity_to_river_3plr: montecarlo\n            self.stack: current player stack\n\nHow to integrate your code on Github\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIt will be hard for one person alone to beat the world at poker. That's\nwhy this repo aims to have a collaborative environment, where models can\nbe added and evaluated.\n\nTo contribute do the following:\n\n- Get Pycharm and build the virtual python environment. Use can do: ``pip install -r requirements.txt``\n- If you want to use the 500x faster c++ based equity calculator, also install visual studio, but this is not necessary\n- Clone your fork to your local machine. You can do this directly from pycharm: VCS --> check out from version control --> git\n- Add as remote the original repository where you created the fork from and call it upstream (the connection to your fork should be called origin). This can be done with vcs --> git --> remotes\n- Create a new branch: click on master at the bottom right, and then click on 'new branch'\n- Make your edits.\n- Ensure all tests pass. Under file --> settings --> python integrated tools switch to pytest (see screenshot). |image1| You can then just right click on the tests folder and run all tests. All tests need to pass. Make sure to add your own tests by simply naming the funtion test\\_... \\\n- Make sure all the tests are passing. Best run pytest as described above (in pycharm just right click on the tests folder and run it). If a test fails, you can debug the test, by right clicking on it and put breakpoints, or even open a console at the breakpoint: https://stackoverflow.com/questions/19329601/interactive-shell-debugging-with-pycharm\n- Commit your changes (CTRL+K}\n- Push your changes to your origin (your fork) (CTRL+SHIFT+K)\n- To bring your branch up to date with upstream master, if it has moved on: rebase onto upstream master: click on your branch name at the bottom right of pycharm, then click on upstream/master, then rebase onto. You may need to resolve soe conflicts. Once this is done, make sure to always force-push (ctrl+shift+k), (not just push). This can be done by selecting the dropdown next to push and choose force-push (important: don't push and merge a rebased branch with your remote)\n- Create a pull request on your github.com to merge your branch with the upstream master.\n- When your pull request is approved, it will be merged into the upstream/master.\n\n.. |image0| image:: doc/pots.png\n.. |image1| image:: doc/pytest.png\n.. |image2| image:: doc/tensorboard-example.png"
 },
 {
  "repo": "iloveponies/p-p-p-pokerface",
  "language": "Clojure",
  "readme_contents": "# p-p-p-pokerface\n\nI'm part of the [120 hour epic sax marathon](http://iloveponies.github.com/120-hour-epic-sax-marathon/).\n\n## Usage\n\nMake a fork of me!\n"
 },
 {
  "repo": "chenosaurus/poker-evaluator",
  "language": "JavaScript",
  "readme_contents": "# Poker Hand Evaluator\n\nPoker hand evaluator using the Two Plus Two alogorithm and lookup table.\nThe lookup table HandRanks.dat is included in the module.\n\nIt is capable of evaluating 7, 6, 5, and 3 card hands.  The highest hand possible in a 3 card hand is 3 of a kind, straights & flushes do not apply to 3 cards.\n\nHands can be evaluated by comparing the handType then the handRank to determine the better hand.\n\nThis can evaluate about 22MM hands per second on a quad-core 2.7GHz Macbook Pro.  Run the speedtest.js file under /test to try it.\n\n## to install:\n\nnpm install poker-evaluator\n\n## Usage:\n\n```js\nvar PokerEvaluator = require(\"poker-evaluator\");\n\nPokerEvaluator.evalHand([\"As\", \"Ks\", \"Qs\", \"Js\", \"Ts\", \"3c\", \"5h\"]);\n\n//{ handType: 9,\n//  handRank: 10,\n//  value: 36874,\n//  handName: 'straight flush' }\n\nPokerEvaluator.evalHand([\"As\", \"Ac\", \"Ad\", \"5d\", \"5s\"]);\n\n//{ handType: 7,\n//  handRank: 148,\n//  value: 28820,\n//  handName: 'full house' }\n\nPokerEvaluator.evalHand([\"As\", \"Ac\", \"Qs\"]);\n\n//{ handType: 2,\n//  handRank: 2761,\n//  value: 10953,\n//  handName: 'one pair' }\n\n```\n"
 },
 {
  "repo": "Tairraos/Poker.JS",
  "language": "JavaScript",
  "readme_contents": "Poker.JS\n=================\n[Chinese version readme \u4e2d\u6587\u7248\u672c\u8bfb\u6211\u6587\u6863](#chinese-version-readme)\n\nDemo: [https://tairraos.github.io/Poker.JS/](https://tairraos.github.io/Poker.JS/)\n\n# Usage\n\nFirst, load poker.js:\n```html\n<script src=\"poker.min.js\"></script>\n```\n\nThen there have 3 ways to create card by your choice\n\n## Way 1, Create DOM element\n#### Call `Poker.getCardImage` or `Poker.getCardCanvas` to get <img> or <canvas> element\n```js\n//insert a <img> to the end of body\ndocument.body.appendChild(Poker.getCardImage(60,'hearts','q'));\n//insert a <canvas> to the end of body\ndocument.body.appendChild(Poker.getCardCanvas(60,'hearts','q'));\n```\n\n## Way 2, Get base64 png image data\n#### Call `Poker.getCardData` to get image data\n```js\n//get image data and store in variable pokerHQ\nvar pokerHQ = Poker.getCardData(60,'hearts','q');\n```\n\n## Way 3, Draw card in your own canvas\n#### Add your own canvas to DOM\n```html\n<canvas id=\"myowncanvas\" width=\"1280\" height=\"720\"></canvas>\n```\n#### Get canvas 2d object and draw card\n```js\nvar canvas = document.getElementById('myowncanvas').getContext('2d');\ncanvas.drawPokerCard(10, 10, 120, 'hearts', '6');\n```\n\n*********************************************\n# Method and parameters\n\n## Draw card number side\n\n#### Method\n```text\nPoker.getCardImage   (size, suit, point)\nPoker.getCardCanvas  (size, suit, point)\nPoker.getCardData    (size, suit, point)\ncanvas.drawPokerCard (x, y, size, suit, point)\n```\n\n#### Parameters\n```text\nx, y  - The x, y coordinate of top left corner of card in canvas. Default value is 0, 0.\nsize  - Height pixel of card. The ratio of card width and height is fixed to 3:4. Default value is 200.\nsuit  - Poker suit. Value is case insensitive and should be one of below: \n        ['h', 'hearts', 'd', 'diamonds', 's', 'spades', 'c', 'clubs']\n        'h', 'd', 's', 'c' are abbreviation\n        For joker, 'h' & 'd' means big joker, 's' & 'c' means little joker.\n        Default value is 'h'.\npoint - Card point. Value is case insensitive and should be one of below: \n        ['A', 2, 3, 4, 5, 6, 7, 8, 9, 10, 'J', 'Q', 'K', 'O', 'JOKER']\n        'O'(letter O) is abbreviation of 'JOKER'\n        Default value is 'O'.\n```\n\n#### Example\n```js\ndocument.body.appendChild(Poker.getCardCanvas(100, 'hearts', 'Q'));\ncanvas.drawPokerCard (0, 400, 100, 'hearts', 'joker');\ncanvas.drawPokerCard (0, 400, 100, 'hearts', 'Q');\n```\n\n## Draw card back side\n\n#### Method\n```text\nPoker.getBackImage   (size[, foregroundColor, backgroundColor])\nPoker.getBackCanvas  (size[, foregroundColor, backgroundColor])\nPoker.getBackData    (size[, foregroundColor, backgroundColor])\ncanvas.drawPokerBack (x, y, size[, foregroundColor, backgroundColor])\n```\n\n#### Parameters\n```text\nx, y            - The x, y coordinate of top left corner of card in canvas. Default value is 0, 0.\nsize            - Height pixel of card. The ratio of card width and height is fixed to 3:4. Default value is 200.\nforegroundColor - Foreground color. Default value is '#BB5555'.\nbackgroundColor - Background color. Default value is '#AA2222'.\n```\n\n#### Example\n```js\ndocument.body.appendChild(Poker.getBackCanvas(300, '#7A7BB8', '#2E319C'));\ncanvas.drawPokerBack (10, 10, 300, '#b55', '#a22')\ncanvas.drawPokerBack (375, 400, 100, '#7A7BB8', '#2E319C');\n```\n<br>    \n<br>    \n\n\n*********************************************\n# Chinese version readme\n# \u4e2d\u6587\u7248\u672c\u8bfb\u6211\u6587\u6863 \n\n<br>\n<br>\n\u6f14\u793a\uff1a [https://tairraos.github.io/Poker.JS/](https://tairraos.github.io/Poker.JS/)\n\n# \u4f7f\u7528\u65b9\u6cd5\n\n\u9996\u5148\uff0c\u52a0\u8f7d poker.js\n```html\n<script src=\"poker.min.js\"></script>\n```\n\n\u63a5\u4e0b\u53bb\u4f60\u53ef\u4ee5\u4ece3\u79cd\u65b9\u6cd5\u91cc\u9009\u62e9\u4e00\u79cd\u6765\u521b\u5efa\u724c\n\n## \u65b9\u6cd51\uff0c\u521b\u5efaDOM\u5143\u7d20\n#### \u8c03\u7528`Poker.getCardImage`\u6216`Poker.getCardCanvas`\u6765\u83b7\u53d6`<img>`\u6216`<canvas>`\u5143\u7d20\n```js\n//\u5728body\u672b\u5c3e\u63d2\u5165\u4e00\u4e2a<img>\ndocument.body.appendChild(Poker.getCardImage(60,'hearts','q'));\n//\u5728body\u672b\u5c3e\u63d2\u5165\u4e00\u4e2a<canvas>\ndocument.body.appendChild(Poker.getCardCanvas(60,'hearts','q'));\n```\n\n## \u65b9\u6cd52\uff0c\u83b7\u53d6base64\u7684png\u56fe\u50cf\u6570\u636e\n#### \u8c03\u7528`Poker.getCardData`\u6765\u83b7\u53d6\u6570\u636e\n```js\n//\u83b7\u53d6\u56fe\u50cf\u6570\u636e\u5e76\u4e14\u5b58\u50a8\u5728\u53d8\u91cfpokerHQ\u91cc\nvar pokerHQ = Poker.getCardData(60,'hearts','q');\n```\n\n## \u65b9\u6cd53\uff0c\u5728\u4f60\u81ea\u5df1\u7684canvas\u91cc\u753b\u724c\n#### \u5728DOM\u91cc\u6dfb\u52a0\u4f60\u81ea\u5df1\u7684canvas\u5bb9\u5668\n```html\n<canvas id=\"myowncanvas\" width=\"1280\" height=\"720\"></canvas>\n```\n#### \u53d6\u5f97canvas\u76842d\u5bf9\u8c61\uff0c\u5728\u91cc\u9762\u753b\u724c\n```js\nvar canvas = document.getElementById('myowncanvas').getContext('2d');\ncanvas.drawPokerCard(10, 10, 120, 'hearts', '6');\n```\n\n*********************************************\n# \u65b9\u6cd5\u548c\u53c2\u6570\n\n## \u753b\u724c\u9762\n\n#### \u65b9\u6cd5\n```text\nPoker.getCardImage   (size, suit, point)\nPoker.getCardCanvas  (size, suit, point)\nPoker.getCardData    (size, suit, point)\ncanvas.drawPokerCard (x, y, size, suit, point)\n```\n\n#### \u53c2\u6570\n```text\nx, y  - \u724c\u7684\u5de6\u4e0a\u89d2\u5728Canvas\u91cc\u7684\u5750\u6807\u3002\u7f3a\u7701\u503c\u4e3a0, 0\u3002\nsize  - \u724c\u7684\u8c61\u7d20\u9ad8\u5ea6\u3002\u724c\u7684\u5bbd\u9ad8\u6bd4\u56fa\u5b9a\u4e3a3:4\u3002\u7f3a\u7701\u503c\u4e3a200\u3002\nsuit  - \u724c\u9762\u82b1\u8272\u3002\u53d6\u503c\u5927\u5c0f\u5199\u4e0d\u654f\u611f\uff0c\u5fc5\u987b\u4e3a\u4e0b\u5217[]\u5185\u7684\u503c\u4e4b\u4e00\uff1a\n        ['h', 'hearts', 'd', 'diamonds', 's', 'spades', 'c', 'clubs']\n        \u503c\u5bf9\u5e94\u7ea2\u6843\uff0c\u65b9\u5757\uff0c\u9ed1\u6843\uff0c\u6885\u82b1, 'h', 'd', 's', 'c' \u662f\u7f29\u7565\u5199\u6cd5\n        \u5f53\u724c\u9762\u70b9\u6570\u4e3a'JOKER'\u65f6\uff0c\u7ea2\u6843\u548c\u65b9\u5757\u8868\u793a\u724c\u4e3a\u5927\u738b\uff1b\u9ed1\u6843\u548c\u6885\u82b1\u8868\u793a\u724c\u4e3a\u5c0f\u738b\u3002\n        \u7f3a\u7701\u503c\u4e3a'h'\npoint - \u724c\u9762\u70b9\u6570\u3002\u53d6\u503c\u5927\u5c0f\u5199\u4e0d\u654f\u611f\uff0c\u5fc5\u987b\u4e3a\u4e0b\u5217[]\u5185\u7684\u503c\u4e4b\u4e00\uff1a\n        ['A', 2, 3, 4, 5, 6, 7, 8, 9, 10, 'J', 'Q', 'K', 'O', 'JOKER']\n        'O'(\u5b57\u6bcdO)\u662f'JOKER'\u7684\u7f29\u7565\u5199\u6cd5\n        \u7f3a\u7701\u503c\u4e3a'O'\n```\n\n#### \u4f8b\u5b50\n```js\ndocument.body.appendChild(Poker.getCardCanvas(100, 'hearts', 'Q'));\ncanvas.drawPokerCard (0, 400, 100, 'hearts', 'joker');\ncanvas.drawPokerCard (0, 400, 100, 'hearts', 'Q');\n```\n\n## \u753b\u724c\u80cc\n\n#### \u65b9\u6cd5\n```text\nPoker.getBackImage   (size[, foregroundColor, backgroundColor])\nPoker.getBackCanvas  (size[, foregroundColor, backgroundColor])\nPoker.getBackData    (size[, foregroundColor, backgroundColor])\ncanvas.drawPokerBack (x, y, size[, foregroundColor, backgroundColor]])\n```\n\n#### \u53c2\u6570\n```text\nx, y            - \u724c\u7684\u5de6\u4e0a\u89d2\u5728Canvas\u91cc\u7684\u5750\u6807\u3002\u7f3a\u7701\u503c\u4e3a0, 0\u3002\nsize            - \u724c\u7684\u8c61\u7d20\u9ad8\u5ea6\u3002\u724c\u7684\u5bbd\u9ad8\u6bd4\u56fa\u5b9a\u4e3a3:4\u3002\u7f3a\u7701\u503c\u4e3a200\u3002\nforegroundColor - \u524d\u666f\u8272\u3002\u7f3a\u7701\u503c\u4e3a'#BB5555'\u3002\nbackgroundColor - \u80cc\u666f\u8272\u3002\u7f3a\u7701\u503c\u4e3a'#AA2222'\u3002\n```\n\n#### \u4f8b\u5b50\n```js\ndocument.body.appendChild(Poker.getBackCanvas(300, '#7A7BB8', '#2E319C'));\ncanvas.drawPokerBack (10, 10, 300, '#b55', '#a22')\ncanvas.drawPokerBack (375, 400, 100, '#7A7BB8', '#2E319C');\n```\n"
 },
 {
  "repo": "hippich/Bitcoin-Poker-Room",
  "language": "Python",
  "readme_contents": "Install under Ubuntu 11.10\n==========================\n\nInstall Python Poker Network\n----------------------------\n\nProject depends on python-poker-network project. Since this is ugly \"glue it \ntogether\" type of project, we will install python-poker-network from \nrepositories and then link certain files to our project files.\n\nFirst of all make sure MySQL server installed first:\n\n    sudo apt-get install mysql-server\n\nStart by installing python-poker-network:\n\n    sudo apt-get install python-poker-network\n\nInstall bitcoind from David Armstrong repository:\n\n    sudo add-apt-repository ppa:stretch/bitcoin\n    sudo apt-get update\n    sudo apt-get install bitcoin\n\nOur implementation of python-poker-network software uses /dev/random. Check it\nif it produce a lot of data by default (cat /dev/random) - you need 1-5 Kb/s \nminumum. If this do not happen you need to install rng-tools:\n\n    sudo apt-get install rng-tools\n\nAnd configure it to use initial data from /dev/urandom. To do this edit file\n/etc/default/rng-tools and insert following line at the end of the file:\n\n    HRNGDEVICE=/dev/urandom \n\nRestart rng-tools by:\n\n    sudo /etc/init.d/rng-tools restart\n\nInstall Apache web server:\n\n    sudo apt-get install apache2\n\nCreate new virtual host config file:\n\n    sudo vim /etc/apache2/sites-available/room.conf \n\nWith similar configuration:\n\n    <VirtualHost *:80>\n      ServerName room\n    \n      <Proxy *>\n        Order deny,allow\n        Allow from all\n      </Proxy>\n      ProxyPass /POKER_REST http://localhost:19384/POKER_REST retry=1\n      ProxyPass / http://localhost:3000/ retry=1\n    </VirtualHost>\n\nEnable new settings:\n\n    sudo a2ensite room.conf \n    sudo a2enmod proxy proxy_http\n    sudo /etc/init.d/apache2 restart\n\nInstall Memcached:\n\n    sudo apt-get install memcached\n\nInstall GIT and build tools\n\n    sudo apt-get install git build-essential\n\nInstall and configure Room\n--------------------------\n\nInstall Module::Install from Ubuntu repositories:\n\n    sudo apt-get install libmodule-install-perl\n\n\nInstall Catalyst and Catalyst::Devel and other libs from Ubuntu repositories:\n\n    sudo apt-get install libcatalyst-devel-perl libcatalyst-perl \\\n    libcrypt-ssleay-perl libobject-signature-perl\n\n\nNext you will need to install all dependencies for this project. Dependencies \nwill be download from CPAN. Since there are a lot of them it may make sense \nto enable auto installation of dependencies. To do this, simply bring up a \nCPAN shell:\n\n    perl -MCPAN -e shell\n\n\nAnd run these two commands in the CPAN shell:\n\n    o conf prerequisites_policy follow\n    o conf commit\n\n\nTo install all dependencies:\n\n    perl Makefile.PL\n    sudo make installdeps\n\nCheck output to see any errors. In my case I had to force-install DBIx::Class::FrozenColumns\ndue failing some tests:\n\n    sudo cpan -fi DBIx::Class::FrozenColumns\n\nCopy room-sample.conf to room.conf and edit it inserting correct login/passwords\nfor pythonpokernetwork database, bitcoind, twitter, GA, etc.\n\nImport new schema:\n\n    mysql -u root pythonpokernetwork < schema_dump.sql\n\n\nReplace stock Python Poker Network source code with Room's code\n---------------------------------------------------------------\n\nFind where Python Poker Network and Python Poker Engine installed:\n\n    find /usr -name \"pokerclient.py\"\n    find /usr -name \"pokerclient.py\"\n\nIn my case it was /usr/lib/python2.7/dist-packages and /usr/share/pyshared. \nRename existing pokernetwork and pokerengine folders into something else \nand create soft links to Room's code:\n\n    cd /usr/lib/python2.7/dist-packages\n    sudo mv pokerengine pokerengine.old\n    sudo mv pokernetwork pokernetwork.old\n    sudo ln -s ~/projects/Room/lib/ppn/pokerengine pokerengine\n    sudo ln -s ~/projects/Room/lib/ppn/pokernetwork pokernetwork\n\nAnd repeat for /usr/share/pyshared.\n\nInstall Python bitstring and oauth2 packages:\n\n    sudo apt-get install python-pip \n    sudo pip install bitstring \n    sudo pip install oauth2\n\nAnd restart poker server:\n\n    sudo /etc/init.d/python-poker-network restart\n\n\nStart Room\n----------\n\nFrom project's home folder run:\n\n    ./script/room_server.pl -r -f \n\nNavigate to http://room/ or whatever domain you created for this project.\n"
 },
 {
  "repo": "mjhbell/node-poker",
  "language": "JavaScript",
  "readme_contents": "Intended to be a complete engine to execute a poker game for multiple players.\n\nStage 1: Build core utilities and entities such as hand evaluation\nStage 2: Build basic game logic to allow joining, check/bet/raise/fold, and round progression.\nStage 3: Blinds, moving dealer, split pots etc...\n\nPlease see license.txt for licensing terms.\n"
 },
 {
  "repo": "tianlanlandelan/poker",
  "language": "TypeScript",
  "readme_contents": "# \u6251\u514b\u724c\u6e38\u620f--\u6597\u5730\u4e3b\r\n\r\n###  \u4e00\u3001\u9879\u76ee\u4ecb\u7ecd\r\n\r\n\u200b\t\u8fd9\u662f\u4e00\u4e2a\t\u4f7f\u7528Egert\u5f00\u53d1\u7684\u6251\u514b\u724c\u6e38\u620f\uff0c\u76ee\u524d\u53ea\u5b9e\u73b0\u4e86\u5355\u673a\u7248\uff0c\u5728\u7ebf\u7248\u672c\u7684\u6b63\u5728\u5f00\u53d1\u4e2d\u3002\r\n\u9884\u89c8\u5730\u5740http://132.232.2.225/\r\n\r\n![006](./screenshot/006.png)\r\n\r\n### \u4e8c\u3001\u8fd0\u884c\u622a\u56fe\r\n\r\n\u200b\t\u5f00\u59cb\u754c\u9762\r\n\r\n![001](./screenshot/001.png)\r\n\r\n\r\n\r\n\u200b\t\u6e38\u620f\u5927\u5385\r\n\r\n![002](./screenshot/002.png)\r\n\r\n\r\n\r\n\u200b\t\u623f\u95f4\r\n\r\n![005](./screenshot/005.png)\r\n"
 },
 {
  "repo": "Zuehlke/poinz",
  "language": "JavaScript",
  "readme_contents": "# PoinZ - Distributed Planning Poker\n\n[![Build Status](https://travis-ci.com/Zuehlke/poinz.svg?branch=master)](https://app.travis-ci.com/github/Zuehlke/poinz)\n[![MIT License](https://img.shields.io/apm/l/atomic-design-ui.svg?)](https://github.com/tterb/atomic-design-ui/blob/master/LICENSEs)\n[![GitHub Release](https://img.shields.io/github/v/release/Zuehlke/PoinZ.svg?style=flat)]()\n[![Last Commit](https://img.shields.io/github/last-commit/Zuehlke/PoinZ.svg?style=flat)]()\n\nPoinZ (/p\u0254\u026ants/) is a simple web app for distributed teams in an agile setup. It allows to easily estimate items of interest (e.g. \"stories\").\n\nThe goal was to provide a ready-to-use tool without the hassle of registration/login, setup and a lot of configuration.\n\nCheckout the App at [https://www.poinz.app](https://www.poinz.app)\n\n![poinz_screenshot](https://user-images.githubusercontent.com/1777143/153183461-03a0e0b4-239a-4c7b-a49d-a285be828f09.png)\n\nSimilar tools are : https://www.pointingpoker.com/ or https://www.planningpoker.com/\n\n## User Manual\n\nConfused? Or you want to learn about hidden features? Read the [User Manual](docu/manual.md).\n\n## Contribute\n\nYou can contribute in multiple ways...\n\n* Maybe you have a feature request? Found a bug? General feedback? Please open a new [discussion](https://github.com/Zuehlke/poinz/discussions).\n* You want to extend Poinz? Or fix one of the issues? Check out the [Technical documentation](./docu/technicalDocu.md).\n"
 },
 {
  "repo": "christophschmalhofer/poker",
  "language": "C",
  "readme_contents": ""
 },
 {
  "repo": "zifeiy/poker-game-demo",
  "language": "JavaScript",
  "readme_contents": "\u9879\u76ee\u5730\u5740\uff1a[https://github.com/zifeiy/poker-game-demo](https://github.com/zifeiy/poker-game-demo)  \n\n#### \u6587\u4ef6\u7ec4\u6210\n- client\uff1a\u5ba2\u6237\u7aef\uff0c\u4f7f\u7528Cocos Creator\u6253\u5f00\u5373\u53ef\n- sever\uff1a\u670d\u52a1\u5668\u7aef\u3002\u4f7f\u7528node.js\u7f16\u5199\uff0c\u662f\u4e00\u4e2a\u6781\u7b80\u7684\u670d\u52a1\u5668\uff0c\u53ea\u662f\u505a\u4e86\u4e00\u4e0b\u7b80\u5355\u7684\u5c01\u88c5\uff0c\u4ec5\u4f9b\u5b66\u4e60\u4f7f\u7528\u3002\n- client_console\uff1a\u5ba2\u6237\u7aef\u6d4b\u8bd5\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u6a21\u62df\u767b\u9646\uff0c\u8fdb\u623f\u95f4\u3002\n\n#### \u670d\u52a1\u5668server\u914d\u7f6e\n\u7528\u7684\u662fmysql\uff0c\u6240\u4ee5\u5f97\u5148\u8fd0\u884c\u5728mysql\u4e2d\u521b\u5efa\u4e00\u4e2a\u540d\u4e3ahongshi\u7684database\uff0c\u7136\u540e\u5bfc\u5165hongshi.sql\u3002  \n\u7136\u540enpm\u5b89\u88c5\u4e00\u4e0b\u9700\u8981\u7684\u5305\uff0c\u4e3b\u8981\u662fws\uff0cexpress\uff0c\u522b\u7684\u4f60\u8fd0\u884c`node server.js`\u63d0\u793a\u7f3a\u4ec0\u4e48\u5c31npm install\u4ec0\u4e48\u3002  \n\u6211\u6ca1\u6709\u5199\u914d\u7f6e\u6587\u4ef6\uff0c\u6240\u4ee5\u4f60\u6709\u65f6\u95f4\u53ef\u4ee5\u5199\u4e00\u4e0b\u914d\u7f6e\u6587\u4ef6\uff0c\u7136\u540e\u76f4\u63a5`npm install`\u5c31\u53ef\u4ee5\u4e86\u3002  \n`node server.js`\u8fd0\u884c\u670d\u52a1\u5668\u7a0b\u5e8f\u3002  \n\u8fdb\u5165IpGet\u76ee\u5f55\uff0c\u7136\u540e`node socket_io_ip_server.js`\uff08\u8fd9\u4e00\u6b65\u4e0d\u662f\u5fc5\u9700\u7684\uff09\uff0c\u5b83\u4e3b\u8981\u7528\u6765\u83b7\u53d6\u5ba2\u6237\u7aef\u7684ip\u5730\u5740\uff0c\u56e0\u4e3aws\u5e93\u6ca1\u6709\u627e\u5230\u83b7\u53d6ip\u5730\u5740\u7684\u65b9\u6cd5\u3002  \n\u7406\u8bba\u4e0a\u6211\u53ef\u4ee5\u83b7\u5f97\u4f60\u7684IP\u5730\u5740\u751a\u81f3MAC\u5730\u5740\u3002  \n\u5176\u4ed6\u89c1server/\u76ee\u5f55\u4e0b\u7684README.md  \n\n#### \u5ba2\u6237\u7aefclient\u914d\u7f6e\n\u89c1client/\u76ee\u5f55\u4e0b\u7684README.md  \n\n#### \u5ba2\u6237\u7aef\u547d\u4ee4\u884cclient_console\u914d\u7f6e\n\u89c1client_console/\u76ee\u5f55\u4e0b\u7684README.md  \n\n\u5199\u8fd9\u4e2a\u6709\u5f88\u591abug\u7684\u9879\u76ee\u82b1\u8d39\u4e86\u6211\u6574\u657412\u5929\u7684\u65f6\u95f4\uff0c\u5e0c\u671b\u8fd9\u5957\u8d44\u6e90\u80fd\u591f\u7ed9\u5927\u5bb6\u5e26\u6765\u5e2e\u52a9\u3002  \n\u6709\u5f88\u591abug\uff0c\u4ec5\u4f9b\u5b66\u4e60\u4f7f\u7528\u3002  \n\u53ef\u4ee5\u5b8c\u6574\u7684\u73a9\u6e38\u620f\u3002"
 },
 {
  "repo": "redbooth/scrum-poker-cards",
  "language": null,
  "readme_contents": "# Planning Poker cards by Redbooth\n\n![](https://raw.githubusercontent.com/redbooth/Scrum-poker-cards/master/Images/redbooth%20cards%20-%20layout.jpg)\n\nAt Redbooth we have many fun traditions like Elegant Wednesday, home made lunches or going to the countryside to work on cool stuff for a week. We love to have fun and we love to innovate.\n\nWe also use [scrum](http://en.wikipedia.org/wiki/Scrum_%28software_development%29). To make the planning of a sprint more fun, we created our own personalised planning poker cards.\nThe main idea is that each card has an idiom represented that goes with the number. Although some of them are based on Spanglish and inside jokes that we have going around the office.\n\n![](https://raw.githubusercontent.com/redbooth/Scrum-poker-cards/master/Images/redbooth%20cards%20-%20cover.jpg)\n\n![](https://raw.githubusercontent.com/redbooth/Scrum-poker-cards/master/Images/all.jpg)\n\nHere is what each card means:\n\n- 1 - Low hanging fruit\n- 2 - Piece of cake\n- 3 - It Ain\u2019t Rocket Science\n- 5 - Ornitorinco (Platypus). Just because it rhymes with Cinco in Spanish :P\n- 8 - An arm and a leg\n- 13 - Just squeaking by\n- 20 - Don\u2019t put all your eggs in one basket\n- 40 - Meterse en un berenjenal (To step into an aubergine field. In other words to find yourself in a pickle. Why is it always vegetables, by the way?)\n- 100 - Monster task (Oh, the poor unicorn is so scared!)\n- Infinite - When pigs fly (Wouldn\u2019t that be awesome?)\n- ? - [Here be dragons](http://en.wikipedia.org/wiki/Here_be_dragons)\n- Ping Pong - Coffee break card\n\n**Special** cards:\n- Brownie. This is our own literal translation of the word Marr\u00f3n in Spanish. Basically this means that you\u2019re stuck with a difficult or unpleasant task. This card doesn\u2019t really apply to standard planning poker. But hey, it\u2019s more fun this way :)\n\n- [Yak shaving](http://www.hanselman.com/blog/YakShavingDefinedIllGetThatDoneAsSoonAsIShaveThisYak.aspx). Because, you know, it happens to the best of us.\n\n![](https://raw.githubusercontent.com/redbooth/Scrum-poker-cards/master/Images/redbooth%20cards%20-%20monster.jpg)\n\n![](https://raw.githubusercontent.com/redbooth/Scrum-poker-cards/master/Images/redbooth%20cards%20-%20ping%20pong.jpg)\n\nMore about: [Scrum](http://en.wikipedia.org/wiki/Scrum_%28software_development%29) and [Redbooth](https://redbooth.com/). \n\nFont used in the cards - [Roboto Slab](http://www.google.com/fonts/specimen/Roboto+Slab). We ordered our decks at [moo.com](http://uk.moo.com/).\n\nLicense: [Creative Commons \u2013 Attribution (CC BY 3.0)](https://creativecommons.org/licenses/by/3.0/us/). \nEnjoy these! Don't forget to attribute and let us know if you add any cards of your own. We\u2019d love to see what your special cards are.\n"
 },
 {
  "repo": "mdp/JsPoker",
  "language": "JavaScript",
  "readme_contents": "![JS Poker](http://img.mdp.im.s3.amazonaws.com/2013m19Untitled_83t55f.jpg)\n\n# JS Poker\n\nA No-limit Texas Hold'em poker tournament for Javascript bots played via pull requests with Travis CI as the dealer.\n\n### Bounty challenge complete\n\n#### Current Winning Players\n\n1. status3Bot $152306\n2. ThoseAreMyFish $105849\n3. edi9999 $67519\n4. SneakyCharlie $17395\n5. FlopASetBot $3520\n6. whistle_tips $2081\n7. blaBot $1330\n\n## Introduction\n\nJsPoker is an automated poker competition, where your opponents are bots written in Javascript.\nAt the moment they are each quite unintelligent/unimaginative. The challenge is to\nwrite a competitor in JS that can handily beat them all over the course of 50 tournaments,\neach with a maximum of 500 hands.\n\nYou win if your bot beats the challenged return on it's money, and we consider a bounty claimed when your bot\nis submitted via a pull request and the Travis-CI tests pass. (Tests will run the\ntournament simulation and pass or fail based on performance)\n\n_Example_:\n\nEach bot starts with $1000 for every tournament, regardless of past performance. It must play 50 tournaments against the other bots. Therefore the bot is putting up $50k in total in the tournaments and needs to see a return of $100k if the challenge is 2x. This may seem hard, but keep in mind that over the course of 50 tournaments, the other bots are putting $300k into the pot, you only need to take 1/3 of this.\n\nIf you win, your bot will be added to the table to play future bots.\n\n## Why\n\nLike many people, I like to play poker and lose money. The obvious next step was to automate this.\n\n\n## How to play\n\n1. Clone this repo and run 'npm install'\n1. Modify the existing [challenger bot](players/challengerBot.js)\n1. Tune it to double your money over the course of 25,000 hands (50 Tournaments of 500 hands each)\n1. Test it with `npm test` until your confident it has a good chance of winning.\n1. Submit a pull request. If the Travis tests pass, you win the bounty.\n1. First pull request that passes wins the current round.\n1. Winning bot is added to the table. Contest repeats.\n\n## Rules\n\n1. The game is No-limit Texas Hold'em ($10-20), with each player starting with $1000\n1. Only one file may be modified in the pull request, 'players/challengerBot.js' (Pull requests to fix other issues are gladly accepted however)\n1. You cannot load any modules. This includes Node.js core modules (fs, http, etc.)\n1. Source code may not be obsfuscated/minified. Everyone should be able to learn from your winning bot.\n1. Bots must win through legitimate poker play. Hacking is fine, but the bounty will only be paid to legitimate winners. Think of it this way, if your bot was in a casino, would it get kicked out or arrested?\n1. Only 2 attempts per user, per 24 hour period. You can't just keep updating the pull request and having\nTravis repeatedly rerun the tests to try and win by luck. I'll consider this is a soft limit, but in\ngeneral, don't be an ass. TravisCI is a fantastic tool and I don't want to abuse their time or resources.\n\n## Installation\n\n    # Requires NodeJs >= 0.10.0\n    git clone https://github.com/mdp/JsPoker.git\n    cd JsPoker\n    npm install\n    npm test\n    # Now go and turn your bot into a champion!\n\n### Building a better poker bot\n\nYou can test out your bot with a small 100 hand game using `play.js`\n\n    node play.js\n\nThe output will include each bots betting actions and cards held in order\nto make tuning and debugging easier.\n\n#### Game data and bot actions\n\nBots are handed a game data object with the current state of the game and simply have\nto return a wager as an integer.\n\n#### Game data\n\nHere's an example game date payload: [GameData.json](https://gist.github.com/mdp/050cd82f651eb9f9b9c8)\n\nGame object consists of 6 properties:\n\n- `self` Your bots current standing/cards\n- `hand` The current number hand being played\n- `state` The betting state of the game. Ex. 'river'\n- `betting` Betting options available - These are incremental wager options\n- `players` Array of each player, their actions for any round, and wager/stack\n- `community` Community cards\n\n#### Bot Actions\n\nIn Texas Hold'em, you're only real options are to stay in the game, or fold. With that in mind\nbots only need to return an integer representing the additional amount they wish to\nadd to the pot.\n\nThe game objects `betting` property shows the betting options available to the player/bot. `call`\nrepresents the additional amount needed to stay in the game, while `raise` represents the minimum amount\na player can bet if they wish to raise.\n\n- Wagers of less than the amount required to call are considered a 'fold'\n- Wagers of '0', when the call amount is '0', are considered a check.\n- Wagers greater than the call, but less than the minimum raise will result in a call\n- A negative wager will force a fold.\n- Failure to return an integer will assume a wager of '0', which may in turn result in a fold\n\n#### Example players\n\nHere's an extremely simple bot that only raises each betting round:\n\n    // I only raise!\n    module.exports = function () {\n      var info = {\n        name: \"RaiseBot\"\n      };\n      function play(game) {\n        if (game.state !== \"complete\") {\n          return game.betting.raise;\n        }\n      }\n\n      return { play: play, info: info }\n    }\n\nTake a look at the code for the current set of players. Here are a couple decent examples:\n\n- TimidBot only plays pairs [players/timidBot.js](players/timidBot.js)\n- UnpredictableBot raises randomly at different stages of the game [players/unpredictableBot.js](players/unpredictableBot.js)\n\n#### Goals\n\nMachinePoker (The library behind JsPoker) will eventually be a platform that allows people to play their bots against each other in real time for real money (In jurisdictions that allow it)\n\n- Anyone with a small amount of programming experience should be able to play.\n- It should be easy to run a tournament for a group of competitors safely (Skilled play vs Clever hacks)\n- Competitors should be able to lose (or win) real money.\n- Hardware constraints (ex. Bots are each hosted on their own Raspberry Pi)\n\n### Contribute\n\n- Found a bug? By all means feel free to report it or send me a pull request.\n- The next step is to build a tournament system for handling a real-time tournament with separate players, each on their own host.\n- It would be great to give people a way to watch or monitor game play.\n\n### Resources\n\n- [Texas Hold'em Wikipedia](http://en.wikipedia.org/wiki/Texas_hold_'em)\n- Poker code and depenencies\n  - [MachinePoker](https://github.com/mdp/MachinePoker) runs this competition\n  - [Binions](https://github.com/mdp/binions) is the core code for playing Texas Hold'em\n  - [Hoyle](https://github.com/mdp/hoyle) is the card/hand evaluator code\n- #machinepoker on Freenode\n\n### Requirements\n\n- Node.js >= 0.10\n- an 80386sx microprocessor or better with at least 8 MB of RAM\n- OSx, Ubuntu, BSD, or some other POSIX compatible file system. (I don't have a windows machine to test with. Happy to take PR's to fix this)\n"
 },
 {
  "repo": "Jeremiah9000/Poker-with-Python",
  "language": "Python",
  "readme_contents": "# Python Poker\nTexas Holdem Poker made with Python and TKinter\n\nmodule dependencies: PIL\n\n![showing gui](https://i.imgur.com/xjsWugc.png)\n\nThe organization of this repository and its branches is a work in progress. ihsansaktia is helping with this effort: https://github.com/ihsansaktia\n\n\nyoutube playlist I am making to explain this code: https://youtu.be/0_G9XElINRE\n\n\nthe \"cards\" folder holds all of the card images\n\nthere is an operating version found in master branch called 'texas_holdem_poker.py'\n\ndownload the \"cards\" folder and make sure it is in the same directory where you launch the 'texas_holdem_poker v0.1.py' file.\n\nAll the other files are modulations of all the objects/functions. This is something I should have done in the first place, but I am still learning.\n\n\n\nDiscord: https://discord.gg/pFbdWx \n    helped organized by Muhsin7: https://github.com/muhsin7\n\n\n\n\n\n\n\n\n\n\n\nSome information about how I handled scoring, since it is the most complex part of the code IMO:\n  \n        #  scores for an individual player will look like:\n        #  [score0, score1, score2, score3, score4, score5, score6, score7]\n        #  a score, like score0, will be an integer\n        #\n        #  I put all scores from all players in a list\n        #  so we will have a list of lists of integers, representing scores from all players\n        #\n        #  I take advantage of how the max() function works with lists of integers.\n        #  max() looks at the integer at index 0 when provided with multiple lists.\n        #  if the integers at index 0 are the same number for every list,\n        #  it will then look at and compare the integer at the next index\n        #\n        #  score0 is used to indicate hand rank\n        #  with 0 being lowest (high card) to 9 as highest (royal flush)...\n        #  ranks found at: https://www.cardplayer.com/rules-of-poker/hand-rankings\n        #              or  https://www.cardschat.com/poker-hands.php\n        #\n        #  score0, score1, and score2 are somewhat like score modifiers,\n        #               score1 will tell us the value of the pair or the three of a kind\n        #               if two pair: score2 will tell us the value of the lowest value pair\n        #                            or even the value of the pair when there is a full house\n        #  while score3 to score7 are initially set as the value of the five cards in the hand\n        #      in the order from highest value 12 (ace) to lowest value 0 (two)\n        #\n        #  for example: if a player has no special hand like pairs or a flush,\n        #               all modifier scores will be 0\n        #               the player will have to rely on their highest card \n        #               which will start at score3.\n        #               if any other player has a pair (score0 = 1)\n        #               the max() function used on a list of lists of integers\n        #                           will select the player with a pair...\n        #               if no player has a special hand, then the high card will be the deciding factor\n        #               if more than one player has the same high card\n        #                       then the max() function will move on to next index\n        #                       and the next highest card will be evaluated\n\n"
 },
 {
  "repo": "ginuerzh/poker",
  "language": "JavaScript",
  "readme_contents": "webpoker\n========\n\na poker game use phaser framework"
 },
 {
  "repo": "rundef/node-poker-odds-calculator",
  "language": "TypeScript",
  "readme_contents": "# Poker Odds Calculator\n\n[![Build Status](https://travis-ci.org/rundef/node-poker-odds-calculator.svg?branch=master)](https://travis-ci.org/rundef/node-poker-odds-calculator)\n[![Coverage Status](https://coveralls.io/repos/github/rundef/node-poker-odds-calculator/badge.svg?branch=master)](https://coveralls.io/github/rundef/node-poker-odds-calculator?branch=master)\n[![Latest Stable Version](https://img.shields.io/npm/v/poker-odds-calculator.svg)](https://www.npmjs.com/package/poker-odds-calculator)\n\nA pre-flop and post-flop odds calculator for Texas Holdem.\n\nFor a live demonstration of this library in action, check out [shortdeck.gg](https://shortdeck.gg)!\n\n## Installation\n\n```bash\nnpm install poker-odds-calculator\n```\n\n## Console Usage\n\n#### Pre-flop odds\n\nLet's say that we want to know the odds of 3 pre-flop all-in players holding the following hands: J\u2665J\u2664 vs T\u2662T\u2664 vs A\u2667K\u2667 :\n\n```bash\nnode_modules/.bin/poker-odds-calculator JhJs TdTs AcKc\n```\n\n#### Post-flop odds\n\nLet's say that we want to know the odds of a player holding the J\u2662 and the Q\u2662 against a player with the J\u2665 and the J\u2664 on a 7\u26629\u2662T\u2664 board, with 2 cards to come :\n\n```bash\nnode_modules/.bin/poker-odds-calculator -b 7d9dTs JhJs JdQd\nnode_modules/.bin/poker-odds-calculator --board 7d9dTs7s JhJs JdQd\n```\n> -b denotes the board\n\n#### Short deck\n To calculate odds for short deck, override the game variant with -g\n ```bash\nnode_modules/.bin/poker-odds-calculator -g short -b 7d9dTs JhJs JdQd\nnode_modules/.bin/poker-odds-calculator --game short --board 7d9dTs7s JhJs JdQd\n```\n\n## API Usage\n\nLet's take the previous example, but use the API instead:\n\n```js\nimport {CardGroup, OddsCalculator} from 'poker-odds-calculator';\n\nconst player1Cards = CardGroup.fromString('JhJs');\nconst player2Cards = CardGroup.fromString('JdQd');\nconst board = CardGroup.fromString('7d9dTs');\n\nconst result = OddsCalculator.calculate([player1Cards, player2Cards], board);\n\nconsole.log(`Player #1 - ${player1Cards} - ${result.equities[0].getEquity()}%`);\nconsole.log(`Player #2 - ${player2Cards} - ${result.equities[1].getEquity()}%`);\n```\n\nTo use Short Deck:\n```js\nconst result = OddsCalculator.calculate([player1Cards, player2Cards], board, 'short');\n```\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details."
 },
 {
  "repo": "wdmir/521266750_qq_com",
  "language": "ActionScript",
  "readme_contents": "# SilverFoxServer\nmassive multiplayer game server for Flash, \nQuickly create a multiplayer online game.\nexample poker online game\n\nSilverFoxServer features include using pure c # language and pure JAVA wrote two sets of service end code,\nIf you like c # and Visual Studio development process,\nThen use the c # version of the SilverFoxServer,\nIf you have a demand for cross-platform or run in LINUX, you might consider a JAVA version\nTwo versions of the current functions of the 99% the same.\n\nSilverFoxServer\ufffd\ufffd\ufffd\u0635\u3ef9\ufffd\ufffd\ufffd\ufffd \ufffd\u00f4\ufffdC#\ufffd\ufffd\ufffd\u053a\u0374\ufffdJAVA\ufffd\u05b1\ufffd\u0434\ufffd\u0136\ufffd\ufffd\u05f7\ufffd\ufffd\ufffd\u02f4\ufffd\ufffd\ub8ec\n\ufffd\ufffd\ufffd\ufffd\ufffd\u03f2\ufffd\ufffd\ufffd\ufffdC#\ufffd\ufffdVisual Studio\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n\ufffd\ufffd\u00f4\ufffd\ufffd\ufffd\ufffdC#\ufffd\ufffdSilverFoxServer\ufffd\ufffd\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u043f\ufffd\u01bd\u0328\ufffd\ufffd\ufffd\ufffdLINUX\ufffd\ufffd\ufffd\ufffd\ufffd\u0435\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u00f4\ufffd\ufffd\ufffd\u053f\ufffd\ufffd\ufffdJAVA\ufffd\ufffd\n\ufffd\ufffd\ufffd\ufffd\ufffd\u6c7e\u013f\u01f0\u02b5\ufffd\u05b5\u0139\ufffd\ufffd\ufffd99%\ufffd\ufffd\u036c\ufffd\ufffd"
 },
 {
  "repo": "datamllab/rlcard",
  "language": "Python",
  "readme_contents": "# RLCard: A Toolkit for Reinforcement Learning in Card Games\n<img width=\"500\" src=\"https://dczha.com/files/rlcard/logo.jpg\" alt=\"Logo\" />\n\n[![Testing](https://github.com/datamllab/rlcard/actions/workflows/python-package.yml/badge.svg)](https://github.com/datamllab/rlcard/actions/workflows/python-package.yml)\n[![PyPI version](https://badge.fury.io/py/rlcard.svg)](https://badge.fury.io/py/rlcard)\n[![Coverage Status](https://coveralls.io/repos/github/datamllab/rlcard/badge.svg)](https://coveralls.io/github/datamllab/rlcard?branch=master)\n[![Downloads](https://pepy.tech/badge/rlcard)](https://pepy.tech/project/rlcard)\n[![Downloads](https://pepy.tech/badge/rlcard/month)](https://pepy.tech/project/rlcard)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n[\u4e2d\u6587\u6587\u6863](README.zh-CN.md)\n\nRLCard is a toolkit for Reinforcement Learning (RL) in card games. It supports multiple card environments with easy-to-use interfaces for implementing various reinforcement learning and searching algorithms. The goal of RLCard is to bridge reinforcement learning and imperfect information games. RLCard is developed by [DATA Lab](http://faculty.cs.tamu.edu/xiahu/) at Rice and Texas A&M University, and community contributors.\n\n*   Official Website: [https://www.rlcard.org](https://www.rlcard.org)\n*   Tutorial in Jupyter Notebook: [https://github.com/datamllab/rlcard-tutorial](https://github.com/datamllab/rlcard-tutorial)\n*   Paper: [https://arxiv.org/abs/1910.04376](https://arxiv.org/abs/1910.04376)\n*   GUI: [RLCard-Showdown](https://github.com/datamllab/rlcard-showdown)\n*   Dou Dizhu Demo: [Demo](https://douzero.org/)\n*   Resources: [Awesome-Game-AI](https://github.com/datamllab/awesome-game-ai)\n*   Related Project: [DouZero Project](https://github.com/kwai/DouZero)\n*   Zhihu: https://zhuanlan.zhihu.com/p/526723604\n\n**Community:**\n*  **Slack**: Discuss in our [#rlcard-project](https://join.slack.com/t/rlcard/shared_invite/zt-rkvktsaq-xkMwz8BfKupCM6zGhO01xg) slack channel.\n*  **QQ Group**: Join our QQ group to discuss. Password: rlcardqqgroup\n\t*  Group 1: 665647450\n\t*  Group 2: 117349516\n\n**News:**\n*   We have updated the tutorials in Jupyter Notebook to help you walk through RLCard! Please check [RLCard Tutorial](https://github.com/datamllab/rlcard-tutorial).\n*   All the algorithms can suppport [PettingZoo](https://github.com/PettingZoo-Team/PettingZoo) now. Please check [here](examples/pettingzoo). Thanks the contribtuion from [Yifei Cheng](https://github.com/ycheng517).\n*   Please follow [DouZero](https://github.com/kwai/DouZero), a strong Dou Dizhu AI and the [ICML 2021 paper](https://arxiv.org/abs/2106.06135). An online demo is available [here](https://douzero.org/). The algorithm is also integrated in RLCard. See [Training DMC on Dou Dizhu](docs/toy-examples.md#training-dmc-on-dou-dizhu).\n*   Our package is used in [PettingZoo](https://github.com/PettingZoo-Team/PettingZoo). Please check it out!\n*   We have released RLCard-Showdown, GUI demo for RLCard. Please check out [here](https://github.com/datamllab/rlcard-showdown)!\n*   Jupyter Notebook tutorial available! We add some examples in R to call Python interfaces of RLCard with reticulate. See [here](docs/toy-examples-r.md)\n*   Thanks for the contribution of [@Clarit7](https://github.com/Clarit7) for supporting different number of players in Blackjack. We call for contributions for gradually making the games more configurable. See [here](CONTRIBUTING.md#making-configurable-environments) for more details.\n*   Thanks for the contribution of [@Clarit7](https://github.com/Clarit7) for the Blackjack and Limit Hold'em human interface.\n*   Now RLCard supports environment local seeding and multiprocessing. Thanks for the testing scripts provided by [@weepingwillowben](https://github.com/weepingwillowben).\n*   Human interface of NoLimit Holdem available. The action space of NoLimit Holdem has been abstracted. Thanks for the contribution of [@AdrianP-](https://github.com/AdrianP-).\n*   New game Gin Rummy and human GUI available. Thanks for the contribution of [@billh0420](https://github.com/billh0420).\n*   PyTorch implementation available. Thanks for the contribution of [@mjudell](https://github.com/mjudell).\n\n## Cite this work\nIf you find this repo useful, you may cite:\n\nZha, Daochen, et al. \"RLCard: A Platform for Reinforcement Learning in Card Games.\" IJCAI. 2020.\n```bibtex\n@inproceedings{zha2020rlcard,\n  title={RLCard: A Platform for Reinforcement Learning in Card Games},\n  author={Zha, Daochen and Lai, Kwei-Herng and Huang, Songyi and Cao, Yuanpu and Reddy, Keerthana and Vargas, Juan and Nguyen, Alex and Wei, Ruzhe and Guo, Junyu and Hu, Xia},\n  booktitle={IJCAI},\n  year={2020}\n}\n```\n\n## Installation\nMake sure that you have **Python 3.6+** and **pip** installed. We recommend installing the stable version of `rlcard` with `pip`:\n\n```\npip3 install rlcard\n```\nThe default installation will only include the card environments. To use PyTorch implementation of the training algorithms, run\n```\npip3 install rlcard[torch]\n```\nIf you are in China and the above command is too slow, you can use the mirror provided by Tsinghua University:\n```\npip3 install rlcard -i https://pypi.tuna.tsinghua.edu.cn/simple\n```\nAlternatively, you can clone the latest version with (if you are in China and Github is slow, you can use the mirror in [Gitee](https://gitee.com/daochenzha/rlcard)):\n```\ngit clone https://github.com/datamllab/rlcard.git\n```\nor only clone one branch to make it faster:\n```\ngit clone -b master --single-branch --depth=1 https://github.com/datamllab/rlcard.git\n```\nThen install with\n```\ncd rlcard\npip3 install -e .\npip3 install -e .[torch]\n```\n\nWe also provide [**conda** installation method](https://anaconda.org/toubun/rlcard):\n\n```\nconda install -c toubun rlcard\n```\n\nConda installation only provides the card environments, you need to manually install Pytorch on your demands.\n\n## Examples\nA **short example** is as below.\n\n```python\nimport rlcard\nfrom rlcard.agents import RandomAgent\n\nenv = rlcard.make('blackjack')\nenv.set_agents([RandomAgent(num_actions=env.num_actions)])\n\nprint(env.num_actions) # 2\nprint(env.num_players) # 1\nprint(env.state_shape) # [[2]]\nprint(env.action_shape) # [None]\n\ntrajectories, payoffs = env.run()\n```\n\nRLCard can be flexibly connected to various algorithms. See the following examples:\n\n*   [Playing with random agents](docs/toy-examples.md#playing-with-random-agents)\n*   [Deep-Q learning on Blackjack](docs/toy-examples.md#deep-q-learning-on-blackjack)\n*   [Training CFR (chance sampling) on Leduc Hold'em](docs/toy-examples.md#training-cfr-on-leduc-holdem)\n*   [Having fun with pretrained Leduc model](docs/toy-examples.md#having-fun-with-pretrained-leduc-model)\n*   [Training DMC on Dou Dizhu](docs/toy-examples.md#training-dmc-on-dou-dizhu)\n*   [Evaluating Agents](docs/toy-examples.md#evaluating-agents)\n*   [Training Agents on PettingZoo](examples/pettingzoo)\n\n## Demo\nRun `examples/human/leduc_holdem_human.py` to play with the pre-trained Leduc Hold'em model. Leduc Hold'em is a simplified version of Texas Hold'em. Rules can be found [here](docs/games.md#leduc-holdem).\n\n```\n>> Leduc Hold'em pre-trained model\n\n>> Start a new game!\n>> Agent 1 chooses raise\n\n=============== Community Card ===============\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2502\n\u2502\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2502\n\u2502\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2502\n\u2502\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2502\n\u2502\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2502\n\u2502\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2502\n\u2502\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n===============   Your Hand    ===============\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502J        \u2502\n\u2502         \u2502\n\u2502         \u2502\n\u2502    \u2665    \u2502\n\u2502         \u2502\n\u2502         \u2502\n\u2502        J\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n===============     Chips      ===============\nYours:   +\nAgent 1: +++\n=========== Actions You Can Choose ===========\n0: call, 1: raise, 2: fold\n\n>> You choose action (integer):\n```\nWe also provide a GUI for easy debugging. Please check [here](https://github.com/datamllab/rlcard-showdown/). Some demos:\n\n![doudizhu-replay](https://github.com/datamllab/rlcard-showdown/blob/master/docs/imgs/doudizhu-replay.png?raw=true)\n![leduc-replay](https://github.com/datamllab/rlcard-showdown/blob/master/docs/imgs/leduc-replay.png?raw=true)\n\n## Available Environments\nWe provide a complexity estimation for the games on several aspects. **InfoSet Number:** the number of information sets; **InfoSet Size:** the average number of states in a single information set; **Action Size:** the size of the action space. **Name:** the name that should be passed to `rlcard.make` to create the game environment. We also provide the link to the documentation and the random example.\n\n| Game                                                                                                                                                                                           | InfoSet Number  | InfoSet Size      | Action Size | Name            | Usage                                                                                       |\n| :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-------------: | :---------------: | :---------: | :-------------: | :-----------------------------------------------------------------------------------------: |\n| Blackjack ([wiki](https://en.wikipedia.org/wiki/Blackjack), [baike](https://baike.baidu.com/item/21%E7%82%B9/5481683?fr=aladdin))                                                              | 10^3            | 10^1              | 10^0        | blackjack       | [doc](docs/games.md#blackjack), [example](examples/run_random.py)                           |\n| Leduc Hold\u2019em ([paper](http://poker.cs.ualberta.ca/publications/UAI05.pdf))                                                                                                                    | 10^2            | 10^2              | 10^0        | leduc-holdem    | [doc](docs/games.md#leduc-holdem), [example](examples/run_random.py)                        |\n| Limit Texas Hold'em ([wiki](https://en.wikipedia.org/wiki/Texas_hold_%27em), [baike](https://baike.baidu.com/item/%E5%BE%B7%E5%85%8B%E8%90%A8%E6%96%AF%E6%89%91%E5%85%8B/83440?fr=aladdin))    | 10^14           | 10^3              | 10^0        | limit-holdem    | [doc](docs/games.md#limit-texas-holdem), [example](examples/run_random.py)                  |\n| Dou Dizhu ([wiki](https://en.wikipedia.org/wiki/Dou_dizhu), [baike](https://baike.baidu.com/item/%E6%96%97%E5%9C%B0%E4%B8%BB/177997?fr=aladdin))                                               | 10^53 ~ 10^83   | 10^23             | 10^4        | doudizhu        | [doc](docs/games.md#dou-dizhu), [example](examples/run_random.py)                           |\n| Mahjong ([wiki](https://en.wikipedia.org/wiki/Competition_Mahjong_scoring_rules), [baike](https://baike.baidu.com/item/%E9%BA%BB%E5%B0%86/215))                                                | 10^121          | 10^48             | 10^2        | mahjong         | [doc](docs/games.md#mahjong), [example](examples/run_random.py)                             | \n| No-limit Texas Hold'em ([wiki](https://en.wikipedia.org/wiki/Texas_hold_%27em), [baike](https://baike.baidu.com/item/%E5%BE%B7%E5%85%8B%E8%90%A8%E6%96%AF%E6%89%91%E5%85%8B/83440?fr=aladdin)) | 10^162          | 10^3              | 10^4        | no-limit-holdem | [doc](docs/games.md#no-limit-texas-holdem), [example](examples/run_random.py)               |\n| UNO ([wiki](https://en.wikipedia.org/wiki/Uno_\\(card_game\\)), [baike](https://baike.baidu.com/item/UNO%E7%89%8C/2249587))                                                                      |  10^163         | 10^10             | 10^1        | uno             | [doc](docs/games.md#uno), [example](examples/run_random.py)                                 |\n| Gin Rummy ([wiki](https://en.wikipedia.org/wiki/Gin_rummy), [baike](https://baike.baidu.com/item/%E9%87%91%E6%8B%89%E7%B1%B3/3471710))                                                         | 10^52           | -                 | -           | gin-rummy       | [doc](docs/games.md#gin-rummy), [example](examples/run_random.py)                           |\n| Bridge ([wiki](https://en.wikipedia.org/wiki/Bridge), [baike](https://baike.baidu.com/item/%E6%A1%A5%E7%89%8C/332030))                                                                         |                 | -                 | -           | bridge          | [doc](docs/games.md#bridge), [example](examples/run_random.py)                              |\n\n## Supported Algorithms\n| Algorithm | example | reference |\n| :--------------------------------------: | :-----------------------------------------: | :------------------------------------------------------------------------------------------------------: |\n| Deep Monte-Carlo (DMC)                   | [examples/run\\_dmc.py](examples/run_dmc.py) | [[paper]](https://arxiv.org/abs/2106.06135)                                                              |\n| Deep Q-Learning (DQN)                    | [examples/run\\_rl.py](examples/run_rl.py)   | [[paper]](https://arxiv.org/abs/1312.5602)                                                               |\n| Neural Fictitious Self-Play (NFSP)       | [examples/run\\_rl.py](examples/run_rl.py)   | [[paper]](https://arxiv.org/abs/1603.01121)                                                              |\n| Counterfactual Regret Minimization (CFR) | [examples/run\\_cfr.py](examples/run_cfr.py) | [[paper]](http://papers.nips.cc/paper/3306-regret-minimization-in-games-with-incomplete-information.pdf) |\n\n## Pre-trained and Rule-based Models\nWe provide a [model zoo](rlcard/models) to serve as the baselines.\n\n| Model                                    | Explanation                                              |\n| :--------------------------------------: | :------------------------------------------------------: |\n| leduc-holdem-cfr                         | Pre-trained CFR (chance sampling) model on Leduc Hold'em |\n| leduc-holdem-rule-v1                     | Rule-based model for Leduc Hold'em, v1                   |\n| leduc-holdem-rule-v2                     | Rule-based model for Leduc Hold'em, v2                   |\n| uno-rule-v1                              | Rule-based model for UNO, v1                             |\n| limit-holdem-rule-v1                     | Rule-based model for Limit Texas Hold'em, v1             |\n| doudizhu-rule-v1                         | Rule-based model for Dou Dizhu, v1                       |\n| gin-rummy-novice-rule                    | Gin Rummy novice rule model                              |\n\n## API Cheat Sheet\n### How to create an environment\nYou can use the the following interface to make an environment. You may optionally specify some configurations with a dictionary.\n*   **env = rlcard.make(env_id, config={})**: Make an environment. `env_id` is a string of a environment; `config` is a dictionary that specifies some environment configurations, which are as follows.\n\t*   `seed`: Default `None`. Set a environment local random seed for reproducing the results.\n\t*   `allow_step_back`: Default `False`. `True` if allowing `step_back` function to traverse backward in the tree.\n\t*   Game specific configurations: These fields start with `game_`. Currently, we only support `game_num_players` in Blackjack, .\n\nOnce the environemnt is made, we can access some information of the game.\n*   **env.num_actions**: The number of actions.\n*   **env.num_players**: The number of players.\n*   **env.state_shape**: The shape of the state space of the observations.\n*   **env.action_shape**: The shape of the action features (Dou Dizhu's action can encoded as features)\n\n### What is state in RLCard\nState is a Python dictionary. It consists of observation `state['obs']`, legal actions `state['legal_actions']`, raw observation `state['raw_obs']` and raw legal actions `state['raw_legal_actions']`.\n\n### Basic interfaces\nThe following interfaces provide a basic usage. It is easy to use but it has assumtions on the agent. The agent must follow [agent template](docs/developping-algorithms.md). \n*   **env.set_agents(agents)**: `agents` is a list of `Agent` object. The length of the list should be equal to the number of the players in the game.\n*   **env.run(is_training=False)**: Run a complete game and return trajectories and payoffs. The function can be used after the `set_agents` is called. If `is_training` is `True`, it will use `step` function in the agent to play the game. If `is_training` is `False`, `eval_step` will be called instead.\n\n### Advanced interfaces\nFor advanced usage, the following interfaces allow flexible operations on the game tree. These interfaces do not make any assumtions on the agent.\n*   **env.reset()**: Initialize a game. Return the state and the first player ID.\n*   **env.step(action, raw_action=False)**: Take one step in the environment. `action` can be raw action or integer; `raw_action` should be `True` if the action is raw action (string).\n*   **env.step_back()**: Available only when `allow_step_back` is `True`. Take one step backward. This can be used for algorithms that operate on the game tree, such as CFR (chance sampling).\n*   **env.is_over()**: Return `True` if the current game is over. Otherewise, return `False`.\n*   **env.get_player_id()**: Return the Player ID of the current player.\n*   **env.get_state(player_id)**: Return the state that corresponds to `player_id`.\n*   **env.get_payoffs()**: In the end of the game, return a list of payoffs for all the players.\n*   **env.get_perfect_information()**: (Currently only support some of the games) Obtain the perfect information at the current state.\n\n## Library Structure\nThe purposes of the main modules are listed as below:\n\n*   [/examples](examples): Examples of using RLCard.\n*   [/docs](docs): Documentation of RLCard.\n*   [/tests](tests): Testing scripts for RLCard.\n*   [/rlcard/agents](rlcard/agents): Reinforcement learning algorithms and human agents.\n*   [/rlcard/envs](rlcard/envs): Environment wrappers (state representation, action encoding etc.)\n*   [/rlcard/games](rlcard/games): Various game engines.\n*   [/rlcard/models](rlcard/models): Model zoo including pre-trained models and rule models.\n\n## More Documents\nFor more documentation, please refer to the [Documents](docs/README.md) for general introductions. API documents are available at our [website](http://www.rlcard.org).\n\n## Contributing\nContribution to this project is greatly appreciated! Please create an issue for feedbacks/bugs. If you want to contribute codes, please refer to [Contributing Guide](./CONTRIBUTING.md). If you have any questions, please contact [Daochen Zha](https://github.com/daochenzha) with [daochen.zha@rice.edu](mailto:daochen.zha@rice.edu).\n\n## Acknowledgements\nWe would like to thank JJ World Network Technology Co.,LTD for the generous support and all the contributions from the community contributors.\n"
 },
 {
  "repo": "Wizehive/firepoker",
  "language": "JavaScript",
  "readme_contents": "# Agile Planning Poker\u00ae powered by Firebase and AngularJS\n\n[https://firepoker.io](https://firepoker.io)\n\n## Copyright & License\n\nAgile planning tool is Copyright (c) 2021 WizeHive, Inc. if not otherwise stated. The code is distributed under the terms of the MIT License. For the full license text see the LICENSE file.\n"
 },
 {
  "repo": "WangAnXin/poker",
  "language": "Java",
  "readme_contents": "# \u6e38\u620f\u57fa\u672c\u6d41\u7a0b\u4ecb\u7ecd\n\u521d\u59cb\u7684\u6e38\u620f\u754c\u9762\u5982\u4e0b\u6240\u793a\uff0c\u4e00\u5f00\u59cb\u53ea\u6709\u4e24\u4e2a\u9009\u9879\uff0c\u4e00\u4e2a\u662f\u5355\u673a\u6a21\u5f0f\u4e0b\u6e38\u73a9\uff0c\u53e6\u4e00\u4e2a\u662f\u8054\u7f51\u6a21\u5f0f\u7684\u6e38\u73a9\u3002\n1. \u5355\u673a\u6a21\u5f0f\u4e0b\u65e0\u9700\u8054\u7f51\u5373\u53ef\u6e38\u73a9\u3002\n2. \u8054\u7f51\u6a21\u5f0f\u5fc5\u987b\u80fd\u8fde\u5916\u7f51\uff0c\u8fde\u63a5\u670d\u52a1\u5668\uff0c\u767b\u5f55\u8d26\u53f7\u624d\u53ef\u8fdb\u5165\u6e38\u620f\u3002\n\n![image](https://raw.githubusercontent.com/WangAnXin/poker/master/Poker/rdImage/image005.jpg)\n\n### \u767b\u9646\u9636\u6bb5\n#### \u767b\u5f55\n1. \u5355\u51fb\u8054\u7f51\u6a21\u5f0f\u540e\u5982\u4e0b\u6240\u793a\uff08\u524d\u63d0\u624b\u673a\u9700\u8981\u8054\u7f51\uff0c\u5982\u679c\u672a\u8054\u7f51\u4f1a\u5f39\u51fa\u5f39\u6846\u63d0\u793a\u8fde\u63a5\u5931\u8d25\uff09\uff0c\u5982\u679c\u5df2\u7ecf\u6ce8\u518c\u8fc7\u7528\u6237\u540d\u548c\u5bc6\u7801\uff0c\u53ef\u4ee5\u76f4\u63a5\u8f93\u5165\u7528\u6237\u540d\u548c\u5bc6\u7801\u8fdb\u884c\u767b\u5f55\u3002\u5982\u679c\u767b\u5f55\u6210\u529f\u4f1a\u8fdb\u5165\u5339\u914d\u9636\u6bb5\u3002\n2. \u70b9\u51fb\u53f3\u4e0a\u89d2\u7eff\u8272\u7684\u201c\u52a0\u53f7\u201d\u53ef\u8fdb\u884c\u6ce8\u518c\u3002\n\n![image](https://raw.githubusercontent.com/WangAnXin/poker/master/Poker/rdImage/image006.jpg)\n\n#### \u6ce8\u518c\n\u73a9\u5bb6\u8f93\u5165\u7528\u6237\u540d\uff0c\u5bc6\u7801\u548c\u91cd\u65b0\u8f93\u5165\u5bc6\u7801\uff08\u5bc6\u7801\u9700\u8981\u5927\u4e8e6\u4f4d\uff09\uff0c\u5355\u51fb\u201c\u6ce8\u518c\u201d\u53d1\u9001\u6d88\u606f\u7ed9\u670d\u52a1\u5668\uff0c\u5982\u679c\u6ce8\u518c\u6210\u529f\uff0c\u4f1a\u8fd4\u56de\u5230\u767b\u5f55\u754c\u9762\uff0c\u5e76\u8f93\u5165\u7528\u6237\u540d\u548c\u5bc6\u7801\u3002\n\n![image](https://raw.githubusercontent.com/WangAnXin/poker/master/Poker/rdImage/image007.jpg) \n\n### \u5339\u914d\u9636\u6bb5\n1. \u70b9\u51fb\u201c\u4e2a\u4eba\u4fe1\u606f\u201d\u4f1a\u51fa\u73b0\u4e2a\u4eba\u4fe1\u606f\u754c\u9762\u3002\u73a9\u5bb6\u53ef\u4fee\u6539\u73a9\u5bb6\u540d\uff0c\u6027\u522b\uff0c\u4eba\u7269\u56fe\u7247\uff08\u56fe\u7247\u53ea\u6709\u56fa\u5b9a\u76846\u79cd\uff09\uff0c\u53ef\u67e5\u770b\u5f53\u524d\u79ef\u5206\uff08\u4e0d\u80fd\u4fee\u6539\uff09\uff0c\u70b9\u51fb\u4fdd\u5b58\u4f1a\u5c06\u4e2a\u4eba\u4fe1\u606f\u4e0a\u4f20\u5230\u670d\u52a1\u5668\u3002\n2. \u70b9\u51fb\u201c\u5f00\u59cb\u5339\u914d\u201d\u540e\uff0c\u670d\u52a1\u5668\u4f1a\u67e5\u8be2\u5f53\u524d\u5927\u5385\u7684\u623f\u95f4\uff0c\u627e\u51fa\u5f53\u524d\u623f\u95f4\u4eba\u6570\u672a\u6ee1\uff08\u5c0f\u4e8e4\uff09\uff0c\u8fdb\u5165\u6e38\u620f\u51c6\u5907\u9636\u6bb5\u3002\n\n![image](https://raw.githubusercontent.com/WangAnXin/poker/master/Poker/rdImage/image008.jpg)\n![image](https://raw.githubusercontent.com/WangAnXin/poker/master/Poker/rdImage/image009.jpg)\n\n### \u6e38\u620f\u51c6\u5907\u9636\u6bb5\n\u70b9\u51fb\u201c\u5f00\u59cb\u201d\u6309\u94ae\u51c6\u5907\uff0c\u70b9\u51fb\u201c\u673a\u5668\u4eba\u201d\u56fe\u6807\u4f1a\u5f39\u51fa\u201c\u8981\u6dfb\u52a0\u7535\u8111\u5417\u201d\u7684\u63d0\u793a\u6846\uff0c\u786e\u8ba4\u540e\u4f1a\u5c06\u8be5\u4f4d\u7f6e\u7684\u73a9\u5bb6\u8bbe\u7f6e\u6210\u7535\u8111\uff08\u7535\u8111\u4f1a\u81ea\u52a8\u5904\u4e8e\u51c6\u5907\u9636\u6bb5\uff09\u3002\u5f53\u56db\u4e2a\u4eba\u90fd\u51c6\u5907\u4f1a\u8fdb\u5165\u6e38\u620f\u5f00\u59cb\u9636\u6bb5\u3002\n\n![image](https://raw.githubusercontent.com/WangAnXin/poker/master/Poker/rdImage/image010.jpg) \n\n### \u6e38\u620f\u5f00\u59cb\uff08\u53d1\u724c\uff09\u9636\u6bb5\n\u6e38\u620f\u5f00\u59cb\u540e\uff0c\u5ba2\u6237\u7aef\u663e\u793a\u53d1\u724c\u52a8\u753b\uff0c\u7ed3\u675f\u540e\u8fdb\u5165\u53eb\u5730\u4e3b\u9636\u6bb5\u3002\n\n![image](https://raw.githubusercontent.com/WangAnXin/poker/master/Poker/rdImage/\u53d1\u724c.gif)\n \n### \u53eb\u5730\u4e3b\u9636\u6bb5\n1. \u7531\u670d\u52a1\u5668\u968f\u673a\u6307\u5b9a\u4e00\u4e2a\u4eba\u5f00\u59cb\u53eb\u5206\uff0c\u73a9\u5bb6\u53ef\u4ee5\u9009\u62e9\u53eb\u201c1\u5206\u201d\u3001\u201c2\u5206\u201d\u3001\u201c3\u5206\u201d\u6216\u8005\u4e0d\u53eb\u5206\uff0c\u6240\u53eb\u7684\u5206\u6570\u5fc5\u987b\u6bd4\u4e0a\u4e00\u5bb6\u9ad8\uff0c\u6bcf\u4f4d\u73a9\u5bb6\u670912\u79d2\u7684\u53eb\u5206\u65f6\u95f4\uff0c\u5982\u679c12\u79d2\u5185\u672a\u53eb\u5206\u5ba2\u6237\u7aef\u5c06\u4f1a\u81ea\u52a8\u4e0d\u53eb\uff0c\u5982\u679c\u5ba2\u6237\u7aef\u65ad\u5f00\u672a\u53d1\u6d88\u606f\u7ed9\u670d\u52a1\u5668\uff0c\u670d\u52a1\u566815\u79d2\u5185\u4f1a\u8ba4\u4e3a\u8be5\u73a9\u5bb6\u4e0d\u53eb\uff0c\u5e76\u4e14\u8ba4\u4e3a\u8be5\u73a9\u5bb6\u65ad\u7ebf\u3002\u53eb3\u5206\u7684\u73a9\u5bb6\u6210\u4e3a\u5730\u4e3b\uff1b\u5982\u679c\u6ca1\u6709\u73a9\u5bb6\u53eb3\u5206\uff0c\u5219\u4e00\u8f6e\u4e0b\u6765\u53eb\u5206\u6700\u9ad8\u7684\u73a9\u5bb6\u6210\u4e3a\u5730\u4e3b\uff0c\u8fdb\u5165\u53d1\u5730\u4e3b\u724c\u9636\u6bb5\u3002\n2. \u5982\u679c\u6ca1\u6709\u4efb\u4f55\u4e00\u4e2a\u73a9\u5bb6\u53eb\u5206\uff0c\u5219\u670d\u52a1\u5668\u6d17\u724c\uff0c\u91cd\u65b0\u53d1\u5361\u7ec4\u4fe1\u606f\uff0c\u91cd\u65b0\u5f00\u59cb\u53eb\u5730\u4e3b\uff1b\u5982\u679c\u8fde\u7eed\u4e09\u8f6e\u6ca1\u6709\u4eba\u53eb\u5730\u4e3b\uff0c\u5219\u670d\u52a1\u5668\u968f\u673a\u6307\u5b9a\u4e00\u4e2a\u4eba\u4f5c\u4e3a\u5730\u4e3b\uff0c\u5e95\u5206\u8bbe\u7f6e\u4e3a1\uff0c\u8fdb\u5165\u53d1\u5730\u4e3b\u724c\u9636\u6bb5\u3002\n\n![image](https://raw.githubusercontent.com/WangAnXin/poker/master/Poker/rdImage/\u53eb\u5730\u4e3b.gif)\n \n### \u51fa\u724c\u9636\u6bb5\n\u51fa\u724c\u7ec6\u5219\uff1a\u5730\u4e3b\u5148\u51fa\u724c\uff0c\u6309\u9006\u65f6\u9488\u5faa\u73af\u987a\u5e8f\u4f9d\u6b21\u51fa\u724c\uff0c\u6bcf\u4f4d\u73a9\u5bb6\u670936\u79d2\u7684\u51fa\u724c\u65f6\u95f4\uff0c\u5982\u679c\u73a9\u5bb636\u79d2\u5185\u672a\u51fa\u724c\uff0c\u5ba2\u6237\u7aef\u4f1a\u81ea\u52a8\u8fdb\u884c\u6258\u7ba1\uff0c\u7531AI\u5e2e\u7528\u6237\u51fa\u724c\uff1b\u5982\u679c39\u79d2\u5185\u5ba2\u6237\u7aef\u672a\u53d1\u6d88\u606f\u7ed9\u670d\u52a1\u5668\uff0c\u670d\u52a1\u5668\u5c06\u5176\u8bbe\u7f6e\u4e3aAI\u51fa\u724c\uff0c\u5e76\u8ba4\u4e3a\u8be5\u73a9\u5bb6\u65ad\u7ebf\u3002\u8f6e\u5230\u7528\u6237\u8ddf\u724c\u65f6\uff0c\u7528\u6237\u53ef\u4ee5\u9009\u62e9\u201c\u4e0d\u51fa\u201d\u6216\u51fa\u6bd4\u4e0a\u4e00\u4e2a\u73a9\u5bb6\u5927\u7684\u724c\u3002\u67d0\u4e00\u73a9\u5bb6\u51fa\u5b8c\u724c\u65f6\u8fdb\u5165\u79ef\u5206\u7ed3\u7b97\u9636\u6bb5\u3002\n> 1.\t\u51fa\u724c\u6309\u94ae\uff1a\u5224\u65ad\u9009\u4e2d\u7684\u724c\u80fd\u4e0d\u80fd\u51fa\uff0c\u80fd\u51fa\u5219\u6253\u51fa\uff08\u6309\u7167\u4e0b\u9762\u724c\u578b\u6bd4\u8f83\u7684\u89c4\u5219\uff09\uff0c\u4e0d\u80fd\u51fa\u5219\u63d0\u793a\u4e0d\u80fd\u51fa\u3002\n> 2.\t\u4e0d\u51fa\u6309\u94ae\uff1a\u663e\u793a\u4e0d\u51fa\uff0c\u73a9\u5bb6\u8fc7\uff0c\u4e0b\u4e00\u73a9\u5bb6\u51fa\u724c\uff08\u5982\u679c\u5f53\u524d\u4e3a\u73a9\u5bb6\u51fa\u724c\u9636\u6bb5\uff0c\u5219\u4e0d\u51fa\u6309\u94ae\u4f1a\u53d8\u6210\u7070\u8272\uff0c\u73a9\u5bb6\u4e0d\u80fd\u9009\u4e2d\uff09\u3002\n> 3.\t\u63d0\u793a\u6309\u94ae\uff1a\u6839\u636e\u7b97\u6cd5\u5c06\u80fd\u51fa\u7684\u724c\u9009\u4e2d\u3002\n>> 3.1.\t\u5982\u679c\u5f53\u524d\u5904\u4e8e\u81ea\u5df1\u51fa\u724c\u9636\u6bb5\uff0c\u5355\u51fb\u201c\u63d0\u793a\u201d\u4f1a\u63d0\u793a\u5f53\u524d\u80fd\u4e00\u6b21\u6027\u51fa\u7684\u724c\u7684\u6570\u91cf\u6700\u591a\u7684\u724c\u578b\uff0c\u518d\u6b21\u5355\u51fb\u201c\u63d0\u793a\u201d\u4f1a\u51fa\u6bd4\u5f53\u524d\u63d0\u793a\u5927\u7684\u724c\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u4f1a\u63d0\u793a\u4e0b\u4e00\u79cd\u80fd\u51fa\u7684\u724c\u7684\u6570\u91cf\u6700\u591a\u5f97\u724c\u578b\uff0c\u4ee5\u6b64\u5faa\u73af\u3002\n>> 3.2.\t\u5982\u679c\u5f53\u524d\u5904\u4e8e\u4e0a\u5bb6\u5df2\u51fa\u724c\u9636\u6bb5\uff0c\u5355\u51fb\u201c\u63d0\u793a\u201d\u4f1a\u63d0\u793a\u6bd4\u4e0a\u5bb6\u5927\u7684\u724c\uff0c\u518d\u6b21\u70b9\u51fb\u201c\u63d0\u793a\u201d\u4f1a\u63d0\u793a\u6bd4\u5f53\u524d\u63d0\u793a\u5927\u7684\u724c\uff0c\u4f9d\u6b21\u5faa\u73af\uff1b\u5982\u679c\u5f53\u524d\u6ca1\u6709\u6bd4\u4e0a\u5bb6\u5927\u7684\u724c\uff0c\u5219\u63d0\u793a\u5f53\u524d\u6ca1\u6709\u53ef\u51fa\u7684\u724c\u3002\n\n![image](https://raw.githubusercontent.com/WangAnXin/poker/master/Poker/rdImage/\u51fa\u724c.gif)\n \n### \u79ef\u5206\u7ed3\u7b97\u9636\u6bb5\n1. \u5730\u4e3b\u80dc\uff1a\u5730\u4e3b\u5f97\u5206\u4e3a3\u00d7\u5e95\u5206\u00d7\u500d\u6570\uff1b\u5176\u4f59\u73a9\u5bb6\u5404\u5f97\uff1a\uff0d\u5e95\u5206\u00d7\u500d\u6570\n2. \u5730\u4e3b\u8d25\uff1a\u5730\u4e3b\u5f97\u5206\u4e3a \uff0d3\u00d7\u5e95\u5206\u00d7\u500d\u6570\uff1b\u5176\u4f59\u73a9\u5bb6\u5404\u5f97\uff1a\u5e95\u5206\u00d7\u500d\u6570\n\n\u4ee5\u4e0b\u60c5\u51b5\uff0c\u8f93\u8d62\u7684\u57fa\u672c\u5206\u7ffb\u500d\uff08\u7ffb\u500d\u6761\u4ef6\u53ef\u91cd\u53e0\uff09\uff1a\n1. \u6bcf\u6253\u51fa\u4e00\u4e2a\u516d\u5f20\u724c\u548c\u4e03\u5f20\u724c\u7684\u70b8\u5f39\uff0c\u57fa\u672c\u5206\u00d72\n2. \u6bcf\u6253\u51fa\u4e00\u4e2a8\u5f20\u724c\u70b8\u5f39\u548c\u5929\u738b\u70b8\u5f39\uff0c\u57fa\u672c\u5206\u00d73\n3. \u5730\u4e3b\u6240\u6709\u724c\u51fa\u5b8c\uff0c\u5176\u4ed6\u4e09\u5bb6\u4e00\u5f20\u90fd\u672a\u51fa\uff0c\u57fa\u672c\u5206\u00d72\n4. \u5176\u4ed6\u4e24\u5bb6\u4e2d\u6709\u4e00\u5bb6\u5148\u51fa\u5b8c\u724c\uff0c\u5730\u4e3b\u53ea\u51fa\u8fc7\u4e00\u624b\u724c\uff0c\u57fa\u672c\u5206\u00d72\n\n\u7ed3\u7b97\u5b8c\u56db\u4f4d\u73a9\u5bb6\u7684\u79ef\u5206\u540e\uff0c\u5c06\u5176\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u4fe1\u606f\u4e2d\uff08\u7535\u8111\u6570\u636e\u4e0d\u4fdd\u5b58\uff09\uff0c\u70b9\u7ed3\u7b97\u79ef\u5206\u699c\u7684\u5dee\uff0c\u7ed3\u7b97\u79ef\u5206\uff0c\u56de\u5230\u6e38\u620f\u51c6\u5907\u9636\u6bb5\u3002\n\n![image](https://raw.githubusercontent.com/WangAnXin/poker/master/Poker/rdImage/image014.jpg)\n\n#  \u6e38\u620f\u989d\u5916\u529f\u80fd\u4ecb\u7ecd\n### \u6258\u7ba1\u529f\u80fd\n\u73a9\u5bb6\u5355\u51fb\u6258\u7ba1\u6309\u94ae\uff0c\u663e\u793a\u6258\u7ba1\u56fe\u7247\uff0c\u8fdb\u5165\u6258\u7ba1\u72b6\u6001\uff0c\u73a9\u5bb6\u51fa\u724c\u5c06\u7531AI\u8fdb\u884c\u63a7\u5236\u3002\u5728\u6258\u7ba1\u72b6\u6001\u4e0b\u5355\u51fb\u6258\u7ba1\u6309\u94ae\u53ef\u53d6\u6d88\u6258\u7ba1\u72b6\u6001\u3002\n\n![image](https://raw.githubusercontent.com/WangAnXin/poker/master/Poker/rdImage/image016.jpg)\n\n### \u6392\u5e8f\u529f\u80fd\n\u672c\u6e38\u620f\u624b\u724c\u6709\u4e24\u79cd\u6392\u5e8f\u65b9\u5f0f\uff0c\u4e00\u79cd\u662f\u6309\u7167\u724c\u7684\u5927\u5c0f\u8fdb\u884c\u6392\u5e8f\uff0c\u53e6\u4e00\u79cd\u662f\u6309\u7167\u724c\u7684\u6570\u91cf\u8fdb\u884c\u6392\u5e8f\u3002\u5355\u51fb\u6392\u5e8f\u6309\u94ae\u540e\u4f1a\u5728\u4e24\u79cd\u6392\u5e8f\u65b9\u5f0f\u4e0b\u5207\u6362\u3002\n\n![image](https://raw.githubusercontent.com/WangAnXin/poker/master/Poker/rdImage/image017.jpg)\n\n![image](https://raw.githubusercontent.com/WangAnXin/poker/master/Poker/rdImage/\u6392\u5e8f.gif)\n\n### \u80cc\u666f\u97f3\u4e50\u6309\u94ae\n\u63a7\u5236\u80cc\u666f\u97f3\u4e50\u64ad\u653e\uff0c\u53ef\u5173\u95ed\u80cc\u666f\u97f3\u4e50\u548c\u5f00\u542f\u80cc\u666f\u97f3\u4e50\u3002\n\n![image](https://raw.githubusercontent.com/WangAnXin/poker/master/Poker/rdImage/image018.jpg) ![image](https://raw.githubusercontent.com/WangAnXin/poker/master/Poker/rdImage/image019.jpg)\n\n### \u6e38\u620f\u97f3\u6548\u6309\u94ae\n\u63a7\u5236\u6e38\u620f\u97f3\u6548\u64ad\u653e\uff0c\u53ef\u5173\u95ed\u6e38\u620f\u97f3\u6548\u548c\u5f00\u542f\u6e38\u620f\u97f3\u6548\u3002\n\n![image](https://raw.githubusercontent.com/WangAnXin/poker/master/Poker/rdImage/image020.jpg) ![image](https://raw.githubusercontent.com/WangAnXin/poker/master/Poker/rdImage/image021.jpg)\n\n### \u660e\u724c\u6309\u94ae\n\u5728\u5355\u673a\u6a21\u5f0f\u4e0b\uff0c\u73a9\u5bb6\u53ef\u4ee5\u70b9\u51fb\u660e\u724c\u6309\u94ae\uff0c\u7535\u8111\u7684\u724c\u5c06\u4f1a\u7ffb\u8f6c\uff08\u663e\u793a\uff09\uff0c\u56fe\u6807\u4ece\u201c\u660e\u201d\u5b57\u53d8\u4e3a\u201c\u6697\u201d\u5b57\uff0c\u70b9\u51fb\u201c\u6697\u201d\u5b57\uff0c\u7535\u8111\u7684\u5c06\u518d\u6b21\u7ffb\u8f6c\uff08\u5173\u95ed\u663e\u793a\uff09\u3002\n\n![image](https://raw.githubusercontent.com/WangAnXin/poker/master/Poker/rdImage/image022.jpg)  ![image](https://raw.githubusercontent.com/WangAnXin/poker/master/Poker/rdImage/image023.jpg)\n\n### \u8fde\u7eed\u9009\u724c\n\u9009\u724c\u7684\u65f6\u5019\u53ef\u4ee5\u8fdb\u884c\u8fde\u7eed\u9009\u724c\uff0c\u88ab\u9009\u4e2d\u7684\u724c\u4f1a\u53d8\u6210\u9634\u5f71\u3002\u677e\u5f00\u540e\uff0c\u53d8\u6210\u9634\u5f71\u7684\u724c\u4f1a\u76f8\u5e94\u7684\u4e0a\u6d6e\u6216\u4e0b\u79fb\uff0c\u7136\u540e\u6251\u514b\u724c\u56fe\u7247\u8fd8\u56de\u539f\u6837\u3002\n\n![image](https://raw.githubusercontent.com/WangAnXin/poker/master/Poker/rdImage/image025.jpg)\n\n### \u957f\u6309\u5c4f\u5e55\u53ef\u4ee5\u4f7f\u5728\u4e0a\u65b9\u7684\u724c\u5168\u90e8\u653e\u4e0b\n\n### \u65ad\u7ebf\u91cd\u8fde\u529f\u80fd\n\u5728\u7f51\u7edc\u6a21\u5f0f\u4e0b\u63d0\u4f9b\u65ad\u7ebf\u91cd\u8fde\u7684\u529f\u80fd\uff1a\u5982\u679c\u73a9\u5bb6\u5728\u53eb\u5206\u9636\u6bb5\u6216\u8005\u662f\u51fa\u724c\u9636\u6bb5\u9000\u51fa\u6e38\u620f\uff0c\u670d\u52a1\u5668\u5c06\u8bbe\u7f6e\u8be5\u73a9\u5bb6\u4e3a\u4e0d\u53eb\u5206\u5e76\u8ba9AI\u4e3a\u5176\u51fa\u724c\u3002\u5f53\u8be5\u73a9\u5bb6\u5728\u767b\u5f55\u9636\u6bb5\u767b\u5f55\u65f6\u6216\u8005\u5728\u5339\u914d\u9636\u6bb5\u5339\u914d\u65f6\uff0c\u5982\u679c\u4e0a\u5c40\u5e76\u672a\u7ed3\u675f\u5c06\u4f1a\u8fdb\u5165\u65ad\u7ebf\u91cd\u8fde\u72b6\u6001\uff0c\u5982\u679c\u5f53\u524d\u5c40\u5904\u5728\u53eb\u5206\u9636\u6bb5\uff0c\u5219\u73a9\u5bb6\u5ba2\u6237\u7aef\u5c06\u76f4\u63a5\u8fdb\u5165\u53d1\u724c\u9636\u6bb5\uff08\u52a0\u5feb\u53d1\u724c\u52a8\u753b\uff09\uff1b\u5982\u679c\u5f53\u524d\u5c40\u5904\u5728\u51fa\u724c\u9636\u6bb5\uff0c\u5c06\u4ece\u53d1\u724c\u9636\u6bb5\u540e\u76f4\u63a5\u8fdb\u5165\u51fa\u724c\u9636\u6bb5\uff0c\u73a9\u5bb6\u5373\u53ef\u7ee7\u7eed\u672c\u5c40\u6e38\u620f\u3002\n\n![image](https://raw.githubusercontent.com/WangAnXin/poker/master/Poker/rdImage/\u65ad\u7ebf\u91cd\u8fde.gif)\n"
 },
 {
  "repo": "HHSmithy/PokerHandHistoryParser",
  "language": "C#",
  "readme_contents": "Poker Hand History Parser\n=========================\n\nC# .NET library for parsing poker hand-histories.\n\nWhat can it be user for?\n------------------------\n\nParsing hand-histories is a common task in most 3rd party poker projects, however it has many edge cases, formats and is very tedious. The hand-parser was written to take poker hand-history text logs and parse summary information and/or hand-action information without having to deal with all the headaches. The parser was designed to be fairly fast, and in some places this may have affected code read-ability, however there are extensive unit tests.\n\nSite Support\n------------\n\nThe poker hand-history parser currently supports the following sites:\n\n * Poker Stars (.com / .fr / .it / .es)\n * Full Tilt Poker\n * Party Poker\n * On Game (.com / .fr / .it)\n * IPoker\n * Merge\n * 888\n * Microgaming\n * Winimax\n * Winning Poker\n * Boss Media\n * Entraction (deprecated)\n\nFormat Support\n--------------\n * Cash games (2 to 10 players)\n * Zoom (Poker Stars Only)\n\nGame Type Support\n-----------------\n * No Limit Hold'em\n * Cap No Limit Hold'em\n * Fixed Limit Hold'em\n * Pot Limit Hold'em\n * Pot Limit Omaha\n * Fixed Limit Omaha\n * Omaha Eight of Better\n\nFuture Upgrades\n---------------\n * Single and multi-table tournament support\n * Ongoing support\n\nDocumentation\n-------------\n\nSee the [documentation](https://github.com/KBelbina/PokerHandHistoryParser/wiki).\n\nLicense\n-------\n\nThe MIT License\n\nCopyright (c) 2014 \"Luke\" Kader Belbina\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
 },
 {
  "repo": "iWeslie/PokerCard",
  "language": "Swift",
  "readme_contents": "# \ud83c\udccfPokerCard\n\n![](https://travis-ci.com/iWeslie/PokerCard.svg?branch=master)\n[![Platform](http://img.shields.io/badge/platform-iOS-blue.svg?style=flat)](https://developer.apple.com/iphone/index.action)\n[![Language](http://img.shields.io/badge/language-Swift-brightgreen.svg?style=flat)](https://developer.apple.com/swift)\n[![Version](https://img.shields.io/cocoapods/v/PokerCard.svg?style=flat-square)](http://cocoapods.org/pods/PokerCard)\n[![Carthage compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage)\n[![License](http://img.shields.io/badge/license-MIT-lightgrey.svg?style=flat)](http://mit-license.org)\n\n## OverView\n\nA new generation of an `AlertView` reactive programming UI framework with fluid design interface. Written in purely Swift. Adapted to Dark Mode. \n\n![poker-alert-preview](https://photos.iweslie.com/github/pokercard/poker-card-preview-light.png)\n\n## Example Project\n\nThe example project is included in `PokerCard.xcworkspace`, and it contains various examples you can use and modify as you like. \n\n## Dark Mode Support\n\nPokerCard fully supports Dark Mode now on iOS 13+.\n\nYou do not need extra work to support it at all. All the work is already done for you.\n\n![dark mode support](https://photos.iweslie.com/github/pokercard/poker-card-preview-switch.png)\n\n## Requirements\n\n- iOS 10+\n- Xcode 11+\n- Swift 5+\n\n## Installation\n\n> *\u26a0\ufe0fPokerCard has not been tested and there is a lack of UITest and other testing cases. This is a pre-release version only\u26a0\ufe0f*\n\nPokerCard is compatible with Swift 5 as of pre-release 0.1.0.\n\n### CocoaPods\n\n[CocoaPods](https://cocoapods.org/) is a dependency manager for Cocoa projects. To integrate PokerCard into your Xcode project using CocoaPods, specify it in your `Podfile`:\n\n```ruby\npod 'PokerCard'\n```\n\n### Carthage\n\n[Carthage](https://github.com/Carthage/Carthage) is a decentralized dependency manager that builds your dependencies and provides you with binary frameworks. To integrate into your Xcode project using Carthage, specify it in your `Cartfile`:\n\n```\ngithub \"iWeslie/PokerCard\"\n```\n\n### Swift Package Manager\n\nThe [Swift Package Manager](https://swift.org/package-manager/) is a tool for automating the distribution of Swift code and is integrated into the `swift` compiler and Xcode 11+ has integrated it. To add PokerCard as a dependency, navigate to the menu bar, click `File/Swift Packages/Add Package Dependency\u2026` and then input the repository URL: \n\n```\nhttps://github.com/iWeslie/PokerCard\n```\n\n### Mannually\n\nIf you prefer not to use any of the aforementioned dependency managers, you can integrate Alamofire into your project manually.\n\n#### Embedded Framework\n\n- Open up Terminal, `cd` into your top-level project directory, suppose your project has already been controlled by git. Then, add PokerCard as a git [submodule](https://git-scm.com/docs/git-submodule) by running the following command:\n\n  ```\n  $ git submodule add https://github.com/iWeslie/PokerCard.git\n  ```\n\n- Open the new `PokerCard` folder, and drag the `Alamofire.xcodeproj` into the Project Navigator of your application's Xcode project.\n\n  > It should appear nested underneath your application's blue project icon. Whether it is above or below all the other Xcode groups does not matter.\n\n- Next, select your application project in the Project Navigator (blue project icon) to navigate to the target configuration window and select the application target under the \"Targets\" heading in the sidebar.\n\n- In the tab bar at the top of that window, open the \"General\" panel.\n\n- Click on the `+` button under the \u201cFrameworks, Libraries and Embedded Content\" section.\n\n- You will see `PokerCard.xcodeproj` folders a `PokerCard.framework`. Select it and click `Add`.\n\n- And that's it!\n\n## Basic Usage\n\n```swift\n// present a poker card \nPokerCard.showAlert(title: \"Please notice\").confirm {\n    // do something ...\n}\n```\n\n### PokerAlertView\n\n```swift\nPokerCard.showAlert(title: \"Please notice\", detail: \"Here is some descripttion ...\")\n```\n\nOr if you want some customization on the `Confirm` button.\n\n```swift\nlet detailInfo = \"You may configure the alert it as following\"\nPokerCard.showAlert(title: \"The Alert Title\", detail: detailInfo)\n    .confirm(title: \"Done\", style: .default, cancelTitle: \"Cancel\") {\n        // do something\n}\n```\n\n### PokerInputView\n\n#### Default Style\n\n```swift\nPokerCard.showInput(title: \"Please input your name\")\n    .confirm(title: \"Done\", style: .color(.systemPink), cancelTitle: \"Cancel\") { inputText in \n        print(\"Hey, \\(inputText)!\")\n}\n```\n\n#### Promotion Style\n\n```swift\nlet warningInfo = \"Some long paragraph of text\"\nPokerCard.showPromotion(title: \"Notice\", promotion: warningInfo)\n    // modify the promotion preference \n    .appearance(promotionStyle: .color(.systemPink))\n    // validate the input string\n    .validate { $0.count == 9 }\n    // confirm handler \n    .confirm { inputText in \n        print(inputText)\n }\n```\n\n### PokerAppearanceView\n\n```swift\n// This is only available for iOS 13+\nPokerCard.showAppearanceOptions()\n    .config(light: {\n        print(\"light selected\")\n    }, dark: {\n        print(\"dark selected\")\n    }) {\n        print(\"auto selected\")\n    }\n    .setTitles(title: \"Appearance\", light: \"Light\", dark: \"Dark\", auto: \"Auto\")\n    // add an option for appearance configuration\n    .addOption(title: \"Show Background Image\", isChecked: false) { trigger in\n        print(\"is showing background image: \\(trigger)\")\n        // do some stuff...\n}\n```\n\n### PokerContactView\n\n```swift\n// you can leave the image nil for `Email` and `Message` option in iOS 13+, it will use sfsymbol automatically.\nlet emailOption = PKContactOption(type: .email([\"domain@example.com\"]), image: UIImage(named: \"mail\"), title: \"Email\")\nlet messageOption = PKContactOption(type: .message([\"domain@example.com\"]), image: UIImage(named: \"message\"), title: \"iMessage\")\n// Other images should be added into `Assets.xcassets`\nlet githubOption = PKContactOption(type: .github(\"iWeslie\"), image: UIImage(named: \"github\"), title: \"GitHub\")\nPokerCard.showContacts()\n    .setTitle(\"Contact Us\")\n    .addOptions([emailOption, messageOption, githubOption], on: self)\n```\n\n### PokerLanguageView\n\n```swift\nPokerCard.showLanguagePicker()\n    .config(en: {\n        print(\"en selected\")\n    }, zh: {\n        print(\"zh selected\")\n    }) {\n        print(\"follow system\")\n    }\n    .setTitle(\"Select Language\")\n    // These images should also be added into `Assets.xcassets`. You may check it out in Example project.\n    .setImages(en: UIImage(named: \"enLang\")!, zh: UIImage(named: \"zhLang\")!, auto: UIImage(named: \"autoLang\")!, checkmark: UIImage(named: \"checkmark\")!)\n```\n\n## Documentation\n\nDocumentation will be available soon. You may view the usage inside Xcode.\n\n## Author\n\nWeslie Chen, iwesliechen@gmail.com. WeChat: `weslie-chen`\n\n## License\n\nPokerCard is available under the MIT license. See the [LICENSE](LICENSE) file for more info.\n"
 },
 {
  "repo": "lxr1907/pokers",
  "language": "JavaScript",
  "readme_contents": "# pokers\ntexas holdem poker and three card poker games. \n\nA poker client useing html,jquery,websocket,canvas. \n\nOnly contains login,regist,three basic play rooms,rank by chips. \n\nYou can see this project at the website below. \n\nhttp://120.26.217.116:8080/texas/texasIndex.html. \n\n\u5fb7\u5dde\u6251\u514b\u7684\u5ba2\u6237\u7aef\u4ee3\u7801\uff0c \n\n\u5305\u542b\u4e86\u5fb7\u5dde\u6251\u514b\u548c\u6b22\u4e50\u62fc\u4e09\u5f202\u4e2a\u6e38\u620f\u7684\u5ba2\u6237\u7aef\u90e8\u5206\u3002 \n\n\u5305\u542b\u767b\u9646\u6ce8\u518c\u529f\u80fd\uff0c\u7b79\u7801\u6392\u884c\u699c\uff0c\u5fb7\u5dde\u6251\u514b\u4ec5\u67093\u79cd\u4e0b\u6ce8\u989d\u5ea6\u7684\u623f\u95f4\u3002 \n\n\u53c2\u8003\u6548\u679c\u5730\u5740\n1\u5fb7\u5dde\uff1ahttp://120.26.217.116:8080/texas/texasIndex.html \n\n2\u62fc\u4e09\u5f20\uff1ahttp://120.26.217.116:8080/texas/threeCard.html\n\n\u670d\u52a1\u7aef\u4ee3\u7801\u5730\u5740https://github.com/lxr1907/texas.git\n"
 },
 {
  "repo": "brunoscopelliti/poker-holdem-engine",
  "language": "JavaScript",
  "readme_contents": "# @botpoker/engine-holdem\n\n`@botpoker/engine-holdem` provides an engine to play Texas Hold'em Poker in respect of the [official rules](https://it.wikipedia.org/wiki/Texas_hold_%27em).\n\nPoker here is meant to be played by other programs, which should be listening for POST http request somewhere in the Internet, or on your localhost.\n\nIt's used as default poker holdem engine for http://botpoker.org.\n\n## demo\n\nIt's possible to run a demo on your local machine by executing the `npm run demo` from the project root folder.\n\n## start a tournament\n\n```js\nconst Tournament = require(\"@botpoker/engine-holdem\");\n\nconst tournamentID = \"botparty\";\n\nconst players = [\n  {\n    id: \"r2\",\n    name: \"r2d2\",\n    serviceUrl: \"http://127.0.0.1:8080/\"\n  },\n  ...\n];\n\nconst tournamentSettings = {\n  BUYIN: 100,\n  // Read docs/game-settings.md for the available configuration options.\n};\n\nconst opts = {\n  async onFeed (feed) {},\n  async onGameComplete (chart) {},\n  async onTournamentComplete (data) {},\n};\n\nconst tournament = new Tournament(tournamentID, players, tournamentSettings, opts);\ntournament.start();\n```\n\nPlayers should be object with at least the `name`, `id`, and `serviceUrl` properties specified.\n\nOn the specified end point there should be an http server, responding on the `POST /bet`, `GET /`, and `GET /version` routes.\n\n## quit a tournament\n\n```js\ntournament.quit();\n```\n\n## prepare your player\n\nIt's possible to code your player in whatever language you want.\nIn the following example I will use JavaScript.\n\n```js\n// server.js\n\n\"use strict\";\n\nconst player = require(\"./player\");\n\nconst http = require(\"http\");\nconst express = require(\"express\");\nconst bodyParser = require(\"body-parser\");\n\nconst app = express();\nconst server = http.Server(app);\n\napp.use(bodyParser.json());\n\napp.get(\"/\", function (req, res) {\n  res.sendStatus(200);\n});\n\napp.get(\"/version\", function (req, res) {\n  res.status(200).send(player.VERSION);\n});\n\napp.post(\"/bet\", function (req, res) {\n  res.status(200).send(String(player.bet(req.body)));\n});\n\nconst port = Number.parseInt(process.env[\"PORT\"] || 1337);\n\nserver.listen(port, function () {\n  console.log(\"Server listening on port\", server.address().port);\n});\n```\n\nAnd the player module\n\n```js\nmodule.exports = {\n  VERSION: \"pokerstar v1\",\n  bet (gamestate) {\n    // gamestate contains info about the state of the game;\n    // currently we just fold every single hand.\n    return 0;\n  },\n};\n```\n"
 },
 {
  "repo": "doctording/pomelo_unity_poker_game",
  "language": "Roff",
  "readme_contents": "\nNetEase pomelo\u670d\u52a1\u7aef\uff0cunity5.4\u76f8\u5173\u7248\u672c\u5ba2\u6237\u7aef\uff0c\u5b9e\u73b03\u4e2a\u4eba\u7684\"\u8dd1\u7684\u5feb\"\u68cb\u724c\u8054\u673a\u6e38\u620f\n\n---\n\n\u6d4b\u8bd5\u73af\u5883\n====\n* win7 unity 5.4.1\n\n* nodejs 5.8.0\n\n* pomelo 1.2.3\n\nwindows\u4e0bpomelo game-server \u4e0b\u7684npm install modules\u53ef\u80fd\u7531\u4e8e\u7248\u672c\u51fa\u9519\n\u4e0b\u9762\u7684\u4ed3\u5e93\u5730\u5740\uff0cgit\u76f4\u63a5\u4e0a\u4f20\u4e86modules, \u6240\u4ee5\u76f4\u63a5clone,\u8fd0\u884c\u670d\u52a1\u7aef\n\nhttps://github.com/wxy8961230/pomelo_unity_ChessOfRunFast\n\n\u7a0b\u5e8f\u622a\u56fe\n===\n\u90e8\u5206\u622a\u56fe\uff0c\u5177\u4f53\u8981\u8054\u7cfb\u4ee3\u7801\u770b\n\n![](./pro_screenshot/1.png)\n\n![](./pro_screenshot/2.png)\n\n![](./pro_screenshot/3.png)\n\n![](./pro_screenshot/4.png)\n\n![](./pro_screenshot/5.png)\n\n\u6269\u5c55\n===\n\n* \u754c\u9762\u4f18\u5316\n\n* \u5404\u79cd\u5f02\u5e38\u5904\u7406\uff0c\u767b\u5f55\u9000\u51fa\u5904\u7406\n\n* \u53ef\u4ee5\u6dfb\u52a0\u623f\u95f4\u4eba\u6570\n\n* \u53ef\u4ee5\u52a0\u4e0a\u804a\u5929\uff0c\u5206\u6570\u7b49\n\n\n\u5f00\u53d1\u8005\u53ca\u5176github\n===\n\n* \u4e01\u6587\u9f99\n\nhttps://github.com/doctording\n\n* \u738b\u6653\u7476\n\nhttps://github.com/wxy8961230\n"
 },
 {
  "repo": "vampserv/node-poker-stack",
  "language": "JavaScript",
  "readme_contents": "## node-poker-stack -- a node.js Texas Holdem game server and web client\n\nnode-poker-stack is a [node.js](http://nodejs.org) Texas Holdem game server and web client. Some notable features\nare real-time game-play and chat, multiple game rooms, support up to 10 players per room with a combination\nof human and bot players.\n\n## Features\n\n### Game Features\n\n* Texas Holdem game engine for up to 10 players per room based on [node-poker](https://github.com/mjhbell/node-poker).\n* Configure bots to join at intervals and play against humans or other bots. They will make use of a hand evaluator, and were very useful for debugging game logic.\n* Multiple simultaneous game rooms with individual game rules (blinds, buyins, # of players, etc).\n* Real-time game and chat interaction between clients via web sockets.\n* Robust game records are stored which include each player action and along with game results.\n* Rudimentary friend system to check whether friends are online, chat, and join their games.\n* A basic web client server is available (node.js + backbone.js + websocket web browser client).\n\n### Built Using Pomelo\n\n* Real-time communication between server and client.\n* Distributed architecture to scale painlessly.\n* Pluggable architecture to easily add new features.\n* SDKs for a variety of clients (javascript, flash, android, iOS, cocos2d-x, C).\n* See [Pomelo Framework](http://github.com/NetEase/pomelo) for more information.\n\n### Whats Missing?\n\n* User and table data is persisted to file store rather than database.\n* Web browser client could be improved (uses vanilla bootstrap.js).\n* Add more client platforms (android, ios, phonegap, etc).\n\n## Instructions\n\n1. git clone https://github.com/vampserv/node-poker-stack.git\n2. ./npm-install.sh\n3. node game-server/app\n4. open another terminal window\n5. node web-server/app\n6. go to http://localhost:3002 to access web client\n7. register a new user and login\n8. create a game room, join the game, and wait\n9. bots will join the game to play\n\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012-2014 Edward Yang\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
 },
 {
  "repo": "shuimuliang/qnmahjongserver",
  "language": "Go",
  "readme_contents": "# \u6d4b\u8bd5\u73af\u5883\u642d\u5efa\n\n\n## mysql\n- \u5b89\u88c5 docker pull mysql\n- \u542f\u52a8 docker run --name first-mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql\n- \u6570\u636e\u521d\u59cb\u5316 \u6267\u884cdb/sql\u4e0b\u7684\u811a\u672c\n\n## qnmahjong\n- \u7f16\u8bd1 GOOS=linux GOARCH=amd64 go build -o qnmahjong -ldflags \"-X main.branch=`git rev-parse --abbrev-ref HEAD` -X main.commit=`git rev-parse HEAD`\"\n- \u914d\u7f6e \u4fee\u6539conf_pro.toml\u914d\u7f6e\u6587\u4ef6\n- \u5b89\u88c5 docker build -t qnmahjong . \n- \u542f\u52a8 login : docker run -it --rm --name qnmahjong_login --link first-mysql:mysql -p 5001:5001 qnmahjong login\n- \u542f\u52a8 logic : docker run -it --rm --name qnmahjong_logic --link first-mysql:mysql -p 5002:5002 qnmahjong logic\n\n## \u5ba2\u6237\u7aef\u767b\u5f55\n-- \u793a\u4f8b\u767b\u5f55\u5730\u5740 http://100.100.33.99:5001\n\n---\n## \u8054\u7cfb\u65b9\u5f0f/\u5546\u4e1a\u54a8\u8be2:\n- ![\u4e8c\u7ef4\u7801](http://oupthc6v2.bkt.clouddn.com/qr.jpg?imageView2/2/w/200/h/200/format/jpg/q/75|imageslim)\n- QQ\u6280\u672f\u652f\u6301\u7fa4: 99124448\n"
 },
 {
  "repo": "floatinghotpot/casino-server",
  "language": "JavaScript",
  "readme_contents": "# casino-server #\n\n[![npm version](https://badge.fury.io/js/casino-server.svg)](http://badge.fury.io/js/casino-server)\n\n[![Build Status](https://travis-ci.org/floatinghotpot/casino-server.svg)](https://travis-ci.org/floatinghotpot/casino-server)\n\n[![NPM](https://nodei.co/npm-dl/casino-server.png?height=3)](https://nodei.co/npm/casino-server/)\n\nAn online poker game server powered by redis, node.js and socket.io\n\n![A](https://github.com/floatinghotpot/casino-server/raw/master/wwwsrc/img/4_14.png) ![A](https://github.com/floatinghotpot/casino-server/raw/master/wwwsrc/img/3_14.png)\n![A](https://github.com/floatinghotpot/casino-server/raw/master/wwwsrc/img/2_14.png)\n  \nGame rules supported:\n- [x] Chat Room (\u804a\u5929\u5ba4)\n- [x] Jinhua (\u8bc8\u91d1\u82b1/\u4e09\u5f20\u724c)\n- [x] Texas Holdem (\u5fb7\u5dde\u6251\u514b)\n- [ ] Fight Landlord (\u6597\u5730\u4e3b)\n- [ ] Blackjack (21\u70b9)\n\nFeatures: \n- [x] Cross-platform: powered by node.js, easy to deploy on various platforms.\n- [x] Scalable: using Redis as message bus and data storage.\n- [x] Open architecture: with Redis as the message bus, easy to interact and extend.\n- [x] Cluster: using PM2, sticky session, and socket.io-redis.\n- [x] WebSocket protocol: come with javascript client API and web-based demo. \n- [x] Event logger for server events and user actions.\n\nTODO List:\n- [ ] Client API for Unity3D (C#, support mono/.NET2.0)\n- [ ] Payment gateway callback URL.\n- [ ] Admin Portal.\n- [ ] Load balancing: using NginX, or auto handled if deployed to Amazon Cloud.\n\n# Architecture #\n\n![Architecture](https://github.com/floatinghotpot/casino-server/raw/master/docs/architecture.png)\n\n## Required ##\n\n* Redis\n\nRedis is an open source, BSD licensed, advanced key-value cache and store. It is often referred to as a data structure server since keys can contain strings, hashes, lists, sets, sorted sets, bitmaps and hyperloglogs.\n\n[Download](http://redis.io/download)\n\n* node.js / npm\n\nNode.js is a platform built on Chrome's JavaScript runtime for easily building fast, scalable network applications. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices.\n\n[Download](http://nodejs.org/download)\n\n* PM2 (production & cluster)\n\nPM2 is a production process manager for Node.js applications with a built-in load balancer. It allows you to keep applications alive forever, to reload them without downtime and to facilitate common system admin tasks.\n\n[Read More](https://github.com/Unitech/pm2)\n\n# Installation #\n\n* Installing globally and run as service with PM2: \n\n```bash\n[sudo] npm install pm2 -g\n[sudo] npm install casino-server -g\n\n# run redis-server first\nredis-server &\n\n# run as service and cluster mode\npm2 start `which casino-server` -i 0\n```\n\n* Installing as a node app, and run in current folder:\n\n```bash\ngit clone https://github.com/floatinghotpot/casino-server.git casino\ncd casino\nnpm install\n# sudo npm install -g gulp\n# gulp build\nnode bin/casino-server [options]\n```\n\nNow you can visit http://localhost:7000, it's a web-based game client for testing and demo purpose.\n\n```bash\n# open a browser to access the test web page\nopen http://localhost:7000/\n```\n\n# Available Options: #\n\n-p Port to use (defaults to 7000)\n\n-h Host address to use (defaults to 0.0.0.0)\n\n-r Address of Redis server (defaults to 127.0.0.1:6379)\n\n# Tools #\n\nWith Redis as the message bus, it's very easy for tools to work with the open architecture.\n\n## Event Logger ##\n\nStart the event logger to monitor the events:\n\n```bash\nbin/logger.js\n```\n\nOr, log the events into log file:\n\n```bash\nbin/logger.js -o ./tmp/casino.log\n```\n# See Also\n\n* [socket.io for Unity3D](https://github.com/floatinghotpot/socket.io-unity), is a socket.io client library for Unity3D. You can develop casino games with Unity3D, and using this library to connect to this casino server.\n\n# Credits #\n\nThis poker game server is created by Raymond Xie, published under MIT license.\n\nIt can be used for FREE, but be aware that:\n\n* It is provided as it is. (Not a mature commercial product, may be incomplete, or even lots of bugs)\n* We will mainly focus on our own needs. \n* You can propose wish for new features, but don't rely on us to implement them. Instead of waiting for new features, welcome join us to implement them.\n* You need take your own risk, including that you need find answers from reading code instead of easily asking only. :P\n\nIf you are interested in this project, you can contribute in any of following aspects:\n\n* Simply \"Star\" it.\n* Use it or test it, report bugs or even send pull request of patches.\n* Add better HTML5 demo client.\n* Add new poker game rules.\n* Add client APIs in other languages (like C# for Unity, Java, Objective-C, C/C++, etc.)\n* Help us write documentation, if your English is good.\n\n"
 },
 {
  "repo": "dgurkaynak/slack-poker-planner",
  "language": "TypeScript",
  "readme_contents": "# Poker Planner for Slack\n\nThis project lets you make estimations with planning poker technique (or scrum poker) directly in Slack, without any need of external software.\nIt can be a useful tool for agile remote teams.\n\nSlack App Directory: https://slack.com/apps/A57FFS3QE-poker-planner\n\n[![Demonstration](./assets/demo.gif)](https://deniz.co/slack-poker-planner/)\n\n## Installation & Add to your Slack Team\n\n- Go to website: https://deniz.co/slack-poker-planner/\n- Click **\"Add to Slack\"** button\n- Select the team you want to install Poker Planner from the dropdown top right\n- Click **Allow** button\n\n## Usage\n\nFor detailed usage documentation, please visit [website](https://deniz.co/slack-poker-planner/#usage).\n\n## Self-hosting\n\nIf you want to host your own app, follow this steps:\n\n### Creating Slack App & Getting Credentials\n\n- Create a new Slack app [from here](https://api.slack.com/apps).\n- Interactivity & Shortcuts\n  - **Turn on** \"Interactivity\"\n  - Set request url: `http://my.awesome.project.url/slack/interactivity`\n- Slash Commands\n  - Create a new command `/pp` (or any command you want) and set request url as `http://my.awesome.project.url/slack/pp-slash-command`\n  - Make sure that \"Escape channels, users, and links sent to your app\" option is **turned on**\n- OAuth & Permissions\n  - Add a new OAuth Redirect URL: `http://my.awesome.project.url/oauth`\n  - Required bot permission scopes: `commands`, `chat:write`\n  - Required user permission scopes: None\n- User ID Translation\n  - **Turn off** \"Translate Global IDs\"\n- Tokens\n  - Client ID, Secret and Verification token can be found on Basic Information page\n- Installation\n  - Go to Manage Distribution, click \"Add to Slack\" and grant permissions\n\n### Running via Docker\n\n```sh\ndocker run \\\n  --publish 3000:3000 \\\n  --env SLACK_CLIENT_ID=\"xxx\" \\\n  --env SLACK_CLIENT_SECRET=\"xxx\" \\\n  --env SLACK_VERIFICATION_TOKEN=\"xxx\" \\\n  dgurkaynak/slack-poker-planner:latest\n```\n\n### Running Manually\n\nNode.js requirement `>= 12.17.0`\n\n- Clone this repo\n- Install dependencies: `npm i`\n- Build: `npm run build`\n- Start the app: `npm start`\n\n#### Environment variables\n\nCheck out [.env](https://github.com/dgurkaynak/slack-poker-planner/blob/master/.env) file.\n\n"
 },
 {
  "repo": "cschleiden/azure-boards-estimate",
  "language": "TypeScript",
  "readme_contents": "# Update 3/26/2021: I am going to shut down this extension and deactive the backend in the near future. \n\nI also have lost permissions to update the extension on the marketplace unfortunately, so I'm not able to accept any PRs or deploy changes. \n\n## Update 3/18/2020: As stated below, I do not work on the Azure Boards team anymore, and as of now I don't have time to maintain this extension. \n\n# Azure Boards Estimate\n\n![](https://github.com/cschleiden/azure-boards-estimate/workflows/Build%20&%20Deploy/badge.svg)\n\n## Contributing\n\n**Update 9/18/19**: I don't work on the `Azure Boards` team anymore so I'll have less time to work on this extension. If you want to send a PR I'll gladly review and merge it.\n\n### Developing and Testing\n\n<span style=\"color: green\">To test your work, first [follow these steps to set up a DevOps marketplace publisher account](https://docs.microsoft.com/en-us/azure/devops/extend/publish/overview?view=azure-devops) (if you already have an account move on).\n\n1. Run `npm run package-dev` and upload the package as a private extension to your  Azure DevOps publisher account\n> Note: You may need to add a directory called `build` to the project root when running the script. The output of the `package-dev` script is there.\n - Be sure to update the `manifest.json` to use your publisher's ID before running the script.\n2. Install the private extension on your Azure DevOps oragnization and test your changes.\n\n\n## Upgrading to current version\n\nWhen upgrading from the first version, you need to approve additional OAuth scopes:\n\n<img src=\"https://user-images.githubusercontent.com/2201819/55303550-bc25c780-53fb-11e9-9379-0a64e3fb1014.png\" width=\"400px\" />\n"
 },
 {
  "repo": "moscow25/deep_draw",
  "language": "Python",
  "readme_contents": "# deep_draw\nConvolution neural network... for draw video poker. Perhaps, we learn something useful for other poker, too.\n\nAssume Python 2.7, and some modules require Theano 0.7\n\nOther modules depend on Lasagne (a wrapper for easier Theano building). https://github.com/Lasagne/Lasagne\n\nInstall Lasagne to access.\n\nYou'll also need to add poker_lib to your PYTHONPATH... since I don't have install script yet for this module.\n\nexport DRAW_POKER_PYTHON_PATH=$HOME/deep_draw/poker-lib\n\nexport PYTHONPATH=$DRAW_POKER_PYTHON_PATH:$PYTHONPATH:.\n\nBasic use cases...\n\nGenerate data: python simulate_draw_values.py outfile.csv\n\nPlay draw hands with a decision process (random decision is default): python play_draw.py\n\nTrain a neural network (non-convolution): python draw_poker.py\n\nTrain a convolution network to predict best choice: \n\nTrain a convolution network to predict average values for all 32 draw conditions: python draw_poker_conv_full_output.py \n\n"
 },
 {
  "repo": "NikolayIT/TexasHoldemGameEngine",
  "language": "C#",
  "readme_contents": "# Texas Hold'em Game Engine\n\nTexas Hold 'em Poker Game Engine\n\n## Build status\n\n[![Build Status](https://nikolayit.visualstudio.com/TexasHoldemGameEngine/_apis/build/status/NikolayIT.TexasHoldemGameEngine?branchName=master)](https://nikolayit.visualstudio.com/TexasHoldemGameEngine/_build/latest?definitionId=18&branchName=master)\n\n## NuGet\n\n<https://www.nuget.org/packages/TexasHoldemGameEngine>\n"
 },
 {
  "repo": "StevenWeathers/thunderdome-planning-poker",
  "language": "Svelte",
  "readme_contents": "![](https://github.com/StevenWeathers/thunderdome-planning-poker/workflows/Go/badge.svg)\n[![](https://img.shields.io/docker/pulls/stevenweathers/thunderdome-planning-poker.svg)](https://hub.docker.com/r/stevenweathers/thunderdome-planning-poker)\n[![](https://img.shields.io/github/v/release/stevenweathers/thunderdome-planning-poker?include_prereleases)](https://github.com/StevenWeathers/thunderdome-planning-poker/releases/latest)\n\n# Thunderdome\n\n## Remote team collaboration with realtime agile story pointing, no cost and ad free!\n\n![image](https://user-images.githubusercontent.com/846933/95778842-eb76ef00-0c96-11eb-99d8-af5d098c12ee.png)\n\n## Streamline your team's agile stand-up with Team Checkins\n\nInstead of spending time discussing what you did yesterday and what you're going to do today, focus on Blockers and\nother more critical details.\n\n![image](https://user-images.githubusercontent.com/846933/146627094-1f31a277-a454-4fd1-b707-ecb95559e9ad.png)\n\n## Agile Sprint Retrospective\n\nRealtime agile sprint retrospectives with grouping, voting, and action items.\n\n![image](https://user-images.githubusercontent.com/846933/173260209-3ef3299f-f1b2-41e8-802f-17d40649c66d.png)\n\n## Agile Feature Story Mapping\n\nRealtime agile feature story mapping with goals, columns, stories and more!\n\n![image](https://user-images.githubusercontent.com/846933/173260211-304a973d-4ede-494f-bb7d-b7e5c86a4e6e.png)\n\n# Running in production\n\n## Use latest docker image\n\n```\ndocker pull stevenweathers/thunderdome-planning-poker\n```\n\n## Use latest released binary\n\n[![](https://img.shields.io/github/v/release/stevenweathers/thunderdome-planning-poker?include_prereleases)](https://github.com/StevenWeathers/thunderdome-planning-poker/releases/latest)\n\n# Guides\n\n- [Configuring Thunderdome](docs/CONFIGURATION.md)\n- [Contributing Guide](docs/CONTRIBUTING.md)\n- [Developing Guide](docs/DEVELOPING.md) for setting up local development\n- [Testing Guide](docs/TESTING.md)\n\n# Upgrading from v1 to v2 major release\n\nIf you're currently running a 1.x.x release version of Thunderdome you will need to do the following before running a\n2.x.x release version. If you're creating a fresh instance of Thunderdome you can ignore this section.\n\n- Review the completely rewritten APIs if you're using the API feature to integrate with Thunderdome.\n- Run the latest available 1.x.x release, this will run any SQL migrations that levelset the SQL schema for 2.x.x.\n- Run latest available 2.x.x release, this will run any SQL migrations since 2.0.0, however will not run any 1.x.x\n  migrations.\n- Update any integrations using the APIs as they have been completely rewritten.\n\n# Donations\n\nFor those who would like to donate a small amount for my efforts or monthly hosting costs of Thunderdome.dev I accept\npaypal.\n\n[![paypal](https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif)](https://paypal.me/smweathers?locale.x=en_US)"
 },
 {
  "repo": "chasembowers/poker-learn",
  "language": "Python",
  "readme_contents": "poker-learn\r\n========\r\n\r\nMachine Learning in No Limit Texas Holdem\r\n\r\n```python\r\nt = Table(smallBlind=1, bigBlind=2, maxBuyIn=200)\r\n\r\nfor i in range(6):\r\n    \r\n    r = GradientBoostingRegressor()\r\n    name = 'Player ' + str(i+1)\r\n    p = BasicPlayer(name=name, reg=r, bankroll=10**6, nRaises=10, rFactor=.7, memory=10**5)\r\n    t.addPlayer(p)\r\n\r\nsimulate(t, nHands=10000, firstTrain=2000, nTrain=1000, nBuyIn=10)\r\nsimulate(t, nHands=20, nBuyIn=10, vocal=True)\r\n```\r\n\r\n    ['3h', 'Kc', '5c']\r\n    Player 4 checks.\r\n    Player 2 raises 270 to 270\r\n    Player 4 all-in calls with 46\r\n    224 uncalled chips return to Player 2\r\n\r\n    ['3h', 'Kc', '5c', 'Qd']\r\n\r\n    ['3h', 'Kc', '5c', 'Qd', '8s']\r\n\r\n    Player 2 wins 118 from main pot\r\n\r\n## Description\r\n\r\nThis is a small library which allows for the simulation of No Limit Texas Holdem between autonomous players which are built around machine learning models.  poker-learn is made specifically for use with the scikit-learn machine learning library, although any regressor which implements 'fit' and 'predict' methods will work. Fundamentally, this library consists of the Table object simulating a hand by sending GameState objects and requesting actions from its Player objects.  Before the first round of learning, Players choose a random action.  Several demo files are included.\r\n\r\n## External Packages\r\n\r\nsklearn - library which implements machine learning models\r\n\r\nnumpy - array manipulation library, dependency for sklearn\r\n\r\ndeuces - package which evaluates rank of poker hands, included in this project\r\n\r\nmatplotlib - graphing library, necessary for running demo\r\n\r\n## Simplifications\r\n\r\nSome simplifications are made. For example, the set of all possible raises is reduced to a smaller set. This decreases the number of actions for which a Player must predict return and, as a result, decreases computational load. Specific raise amounts are chosen to represent an exponential distribution over a Player's stack.  The intuition behind this decision is that a player becomes exponentially less likely to choose a raise amount as the amount increases. In addition, Players play with integer amounts of chips of uniform value, and there is no distinction made between betting and raising.\r\n\r\nMost interestingly, Players attempt to maximize the expected value of the return on any particular action. The preferred alternative would be that Players maximize their own expected utility. That is, that the Players are risk-averse. Because risk-aversion has not been implemented, Players are prone to taking wildly large bets. I plan to address this in the future. Finally, some of the more intricate Holdem rules are excluded.\r\n\r\n## Features and Labels\r\n\r\nEach time a Player receives a GameState object, the Player generates a set of features corresponding to that GameState and and the action the Player has chosen. These features are stored and later associated with a label.  The label is calculated at the end of each hand and is the difference between the Player's stack at the end of the hand and the Player stack size at the moment of the action. Players are intended to be sub-classed with '_genGameFeatures' and '_genActionFeatures' implemented in the sub-class, so that custom features can be generated. A BasicPlayer subclass is included in 'templates.py'. At present, features generated by BasicPlayer are very simplistic.  They include the number and suit of hole cards and community cards and the Player's stack. Categorical features are represented with a binary encoding.\r\n\r\nAfter each iteration, the Player is trained using a fixed amount of features and labels.  The remainder of features and labels from the beginning of the Player's career are discarded. The reason for discarding is that the expected return of a Player's action is a function of the Player's future actions in any hand, so older samples become inaccurate as a Player evolves. A machine learning regressor is used to approximate a function from the set of stored features to the set of stored labels. In order to predict the best action, the Player evaluates this function for its received GameState and over the entire set of possible actions. The action which is evaluated to the maximum expected value of return is chosen.\r\n\r\nBefore Player's have been trained, they take random actions with the purpose of gathering features and labels associated with random game states.  I have observed that when this period contains few hands, when Players do not sufficiently explore the state space, it can lead to some strange and upredictable behavior.\r\n\r\n## Machine Learning Models\r\n\r\nAfter experimenting with various machine learning models, I have had most success with linear and ensemble models. I suspect that this is because both are resistant to overfitting given the large amount of randomness that is present in poker. Ensemble models work by fitting regressors to multiple random subsets of the training data.  In this way, they minimize overfitting while linear models avoid overfitting via their simplicity.  Ensemble methods seem to outperform linear methods.  This is likely because ensemble methods can capture the nonlinearities present in Holdem with regressors like decision trees.  As for specific models, best performance was observed with GradientBoostingRegressor after brief experimentation.  Linear models performed well and quickly, and support vector machines took far too long to train.\r\n\r\n## Demos\r\n\r\nIn the simplest case, Players are trained, and then test hands are narrated:\r\n\r\nnarration_demo.py\r\n```python\r\nt = Table(smallBlind=1, bigBlind=2, maxBuyIn=200)\r\n\r\nPlayers = []\r\nfor i in range(6):\r\n    \r\n    #create BasicPlayer that uses GradientBoostingRegressor as machine learning model\r\n    #with wealth of 1 million and 10 discrete choices for raising,\r\n    #with each raise choice .7 times the next largest raise choice\r\n    #Player forgets training samples older than 100,000\r\n    r = GradientBoostingRegressor()\r\n    name = 'Player ' + str(i+1)\r\n    p = BasicPlayer(name=name, reg=r, bankroll=10**6, nRaises=10, rFactor=.7, memory=10**5)\r\n    Players.append(p)\r\n\r\nfor p in Players: t.addPlayer(p)\r\n\r\n#simulate 'nHands' hands\r\n#begin training after 'firstTrain' hands\r\n#before which Players take random actions and explore state space\r\n#Players train every 'nTrain' hands after 'firstTrain'\r\n#Players cash out/ buy in every 'nBuyIn' hands\r\n#table narrates each hands if 'vocal' is True\r\nsimulate(t, nHands=10000, firstTrain=2000, nTrain=1000, nBuyIn=10)\r\nsimulate(t, nHands=20, nBuyIn=10, vocal=True)\r\n```\r\n\r\n    Hand 5\r\n    Player 2(1141) dealt 8d and Qs\r\n    Player 4(59) dealt 6c and As\r\n\r\n    Player 2 posts small blind of 1\r\n    Player 4 posts big blind of 2\r\n    Player 2 calls 1\r\n    Player 4 raises 11 to 13\r\n    Player 2 calls 11\r\n\r\n    ['3h', 'Kc', '5c']\r\n    Player 4 checks.\r\n    Player 2 raises 270 to 270\r\n    Player 4 all-in calls with 46\r\n    224 uncalled chips return to Player 2\r\n\r\n    ['3h', 'Kc', '5c', 'Qd']\r\n\r\n    ['3h', 'Kc', '5c', 'Qd', '8s']\r\n\r\n    Player 2 wins 118 from main pot\r\n\r\nPlayers that are trained more have a tendency to be more skilled:\r\n\r\nbankroll_demo.py\r\n```python\r\n#train Player 1 for 1000 hands, training once\r\nPlayers[0].startTraining()\r\nsimulate(t, nHands=1000, nTrain=1000, nBuyIn=10)   \r\nPlayers[0].stopTraining()\r\n\r\n#train Player 2 for 10000 hands, training every 1000 hands\r\nPlayers[1].startTraining()\r\nsimulate(t, nHands=10000, nTrain=1000, nBuyIn=10)   \r\nPlayers[1].stopTraining()\r\n\r\nfor p in Players: p.setBankroll(10**6)\r\n\r\n#simulate 20,000 hands and save bankroll history\r\nbankrolls = simulate(t, nHands=20000, nTrain=0, nBuyIn=10)\r\n\r\n#plot bankroll history of each Player\r\nfor i in range(6):\r\n    bankroll = bankrolls[i]\r\n    plt.plot(range(len(bankroll)), bankroll, label=Players[i].getName())\r\nplt.legend(loc='upper left')\r\nplt.show()\r\n```\r\nPlayer 2's bankroll reflects that it has trained over 10,000 more hands than Player 1. \r\n![alt tag](https://raw.githubusercontent.com/chasembowers/pklearn/master/bankroll.png)\r\n\r\nFor the purpose of testing different regressors, a demo file is included which cross-validates\r\nseveral regressors with features and labels taken from Players.\r\n\r\ncross_val_demo.py\r\n```python\r\n#simulate 1,000 hands, cashing out/buying in every 10 hands, without training or narrating\r\nsimulate(t, nHands=1000, nBuyIn=10, nTrain=0, vocal=False)\r\n\r\nfeatures = []\r\nlabels = []\r\n\r\nfor p in Players:\r\n    features.extend(p.getFeatures())\r\n    labels.extend(p.getLabels())\r\n\r\nfeatures = np.array(features)\r\nlabels = np.array(labels)\r\n\r\n#shuffle features/labels\r\nindex = np.arange(len(labels))\r\nnp.random.shuffle(index)\r\nfeatures = features[index]\r\nlabels = labels[index]\r\n\r\n#initialize regressors with default parameters\r\nregressors = {LinearRegression(): 'LinearRegression', \r\n              Lasso(): 'Lasso',\r\n              RandomForestRegressor(): 'RandomForestRegressor',\r\n              GradientBoostingRegressor(): 'GradientBoostingRegressor'}\r\n\r\nfor r in regressors:\r\n    print 'Cross-validating ' + regressors[r] + '...'\r\n    print 'Rsquared:', np.mean(cross_val_score(r, features, labels))\r\n    print\r\n```\r\n\r\n    Cross-validating Lasso...\r\n    Rsquared: 0.0902855241301\r\n\r\n    Cross-validating GradientBoostingRegressor...\r\n    Rsquared: 0.118021710842\r\n\r\n    Cross-validating LinearRegression...\r\n    Rsquared: 0.0776244830381\r\n\r\n    Cross-validating RandomForestRegressor...\r\n    Rsquared: 0.0506318142366\r\n\r\n## License\r\n\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2015 Chase M Bowers\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n"
 },
 {
  "repo": "robolson/ruby-poker",
  "language": "Ruby",
  "readme_contents": "= Poker library in Ruby  {<img src=\"https://travis-ci.org/robolson/ruby-poker.png?branch=master\" alt=\"Build Status\" />}[https://travis-ci.org/robolson/ruby-poker]\n===\n\nAuthor:: {Rob Olson}[https://github.com/robolson]\nEmail:: [first name] [at] thinkingdigitally.com\nGitHub:: https://github.com/robolson/ruby-poker\n\n== Description\n\nRuby-Poker handles the logic for getting the rank of a poker hand. It can also be used to compare two or more hands to determine which hand has the highest poker value.\n\nCard representations can be passed to the PokerHand constructor as a string or an array. Face cards (cards ten, jack, queen, king, and ace) are created using their letter representation (T, J, Q, K, A).\n\n== Install\n\n    gem install ruby-poker\n\n== Example\n\n    require 'rubygems'\n    require 'ruby-poker'\n\n    hand1 = PokerHand.new(\"8H 9C TC JD QH\")\n    hand2 = PokerHand.new([\"3D\", \"3C\", \"3S\", \"KD\", \"AH\"])\n    puts hand1                => 8h 9c Tc Jd Qh (Straight)\n    puts hand1.just_cards     => 8h 9c Tc Jd Qh\n    puts hand1.rank           => Straight\n    puts hand2                => 3d 3c 3s Kd Ah (Three of a kind)\n    puts hand2.rank           => Three of a kind\n    puts hand1 > hand2        => true\n\n== Duplicates\n\nBy default ruby-poker will not raise an exception if you add the same card to a hand twice. You can tell ruby-poker to not allow duplicates by doing the following\n\n    PokerHand.allow_duplicates = false\n\nPlace that line near the beginning of your program. The change is program wide so once allow_duplicates is set to false, _all_ poker hands will raise an exception if a duplicate card is added to the hand.\n\n== Compatibility\n\nRuby-Poker is compatible with Ruby 1.8, Ruby 1.9, and Ruby 2.X.\n\n== RDoc\n\nView the {generated documentation for ruby-poker}[http://rdoc.info/gems/ruby-poker/frames] on rdoc.info.\n\n== Running test suite\n\n    bundle exec rake\n\nThere is also a more compreshenive test, testing all permuations of poker hands, but it requires a large data file that must be downloaded first.\n\n    wget -P ./test/support/fixtures http://archive.ics.uci.edu/ml/machine-learning-databases/poker/poker-hand-testing.data\n    bundle exec rake test:integration\n\n== History\n\nIn the 0.2.0 release Patrick Hurley's Texas Holdem code from http://www.rubyquiz.com/quiz24.html was merged into ruby-poker.\n\n== License\n\nThis is free software; you can redistribute it and/or modify it under the terms of the BSD license. See LICENSE for more details.\n"
 },
 {
  "repo": "int8/counterfactual-regret-minimization",
  "language": "Python",
  "readme_contents": "## Implementation of counterfactual regret minimization algorithm for Kuhn poker in python\r\n\r\nThis is supplementary code for [Counterfactual regret minimization blog post here](https://int8.io/counterfactual-regret-minimization-for-poker-ai)\r\n\r\n\r\nto install:\r\n```\r\npip install -r requirements.txt\r\n```\r\n\r\n\r\nto run:\r\n\r\n```python\r\nfrom common.constants import CARDS_DEALINGS\r\nfrom games.kuhn import KuhnRootChanceGameState\r\nfrom games.algorithms import ChanceSamplingCFR, VanillaCFR\r\n\r\n\r\nroot = KuhnRootChanceGameState(CARDS_DEALINGS)\r\nchance_sampling_cfr = ChanceSamplingCFR(root)\r\nchance_sampling_cfr.run(iterations = 1000)\r\nchance_sampling_cfr.compute_nash_equilibrium()\r\n# read Nash-Equilibrum via chance_sampling_cfr.nash_equilibrium member\r\n# try chance_sampling_cfr.value_of_the_game() function to get value of the game (-1/18)\r\n\r\n# vanilla cfr\r\nvanilla_cfr = VanillaCFR(root)\r\nvanilla_cfr.run(iterations = 1000)\r\nvanilla_cfr.compute_nash_equilibrium()\r\n\r\n# read Nash-Equilibrum via vanilla_cfr.nash_equilibrium member\r\n# try vanilla_cfr.value_of_the_game() function to get value of the game (-1/18)\r\n\r\n```\r\n\r\nto run simple tests:\r\n```python\r\npytest tests/\r\n```\r\n"
 },
 {
  "repo": "ishikota/PyPokerGUI",
  "language": "Python",
  "readme_contents": "# PyPokerGUI\n\n[![Build Status](https://travis-ci.org/ishikota/PyPokerGUI.svg?branch=master)](https://travis-ci.org/ishikota/PyPokerGUI)\n[![PyPI](https://img.shields.io/pypi/v/PyPokerGUI.svg?maxAge=2592000)](https://badge.fury.io/py/PyPokerGUI)\n[![MIT License](http://img.shields.io/badge/license-MIT-blue.svg?style=flat)](https://github.com/ishikota/PyPokerGUI/blob/master/LICENSE.md)\n\nGUI application for [PyPokerEngine](https://github.com/ishikota/PyPokerEngine).  \nYou can play poker with your AI bia browser.\n\n![app_demo](https://github.com/ishikota/PyPokerGUI/blob/master/screenshot/poker_demo.gif)\n\nThis library assumes that your AI is implemented in [PyPokerEngine](https://github.com/ishikota/PyPokerEngine) format.  \nIf you have not checked our [PyPokerEngine](https://github.com/ishikota/PyPokerEngine), we recommend you to check it first.\n\n- [README tutorial](https://github.com/ishikota/PyPokerEngine)\n- [doc site for PyPokerEngine](https://ishikota.github.io/PyPokerEngine/)\n\n# Tutorial\nIn this tutorial, we will play poker with simple AI \"*FishPlayer*\".  \n(\"*FishPlayer*\" is an AI always declares CALL action. )\n\nThe outline of this tutorial is following.\n\n1. Create script to setup our AI\n2. Setup config file which defines rule of the game\n3. Start the server with config file and play the game\n\n## Installation\nPlease install this library with pip.\n\n```bash\npip install pypokergui\n```\n\n## Create script to setup our AI\nFirst, we will create a script which defines how to setup our AI.  \nWhat you need to do is implementing `setup_ai` method.    \nPyPokerGUI uses this method to setup your AI.\n\n```python\nfrom pypokerengine.players import BasePokerPlayer\n\nclass FishPlayer(BasePokerPlayer):  # Do not forget to make parent class as \"BasePokerPlayer\"\n\n    #  we define the logic to make an action through this method. (so this method would be the core of your AI)\n    def declare_action(self, valid_actions, hole_card, round_state):\n        # valid_actions format => [raise_action_info, call_action_info, fold_action_info]\n        call_action_info = valid_actions[1]\n        action, amount = call_action_info[\"action\"], call_action_info[\"amount\"]\n        return action, amount   # action returned here is sent to the poker engine\n\n    def receive_game_start_message(self, game_info):\n        pass\n\n    def receive_round_start_message(self, round_count, hole_card, seats):\n        pass\n\n    def receive_street_start_message(self, street, round_state):\n        pass\n\n    def receive_game_update_message(self, action, round_state):\n        pass\n\n    def receive_round_result_message(self, winners, hand_info, round_state):\n        pass\n\n\ndef setup_ai():\n    return FishPlayer()\n```\n\nWe assume that you put this script on `/Users/ishikota/poker/fish_player_setup.py` in following section.\n\n## Setup config file which defines rule of the game\nNext we will define the rule of the game.  \nWe need to define following settings in yaml format.\n\n- **max_round** : how many round we will play\n- **initial stack** : start stack size of each player\n- **small blind** : the amount of small blind\n- **ante** : the amount of ante\n- **ai_players** : path to your AI-setup script\n\nYou can generate template of config file like this.\n\n```bash\npypokergui build_config --maxround 10 --stack 100 --small_blind 10 --ante 0 >> poker_conf.yaml\n```\n\nThen your `poker_conf.yaml` would be ...\n\n```yaml\nante: 0\nblind_structure: null\ninitial_stack: 100\nmax_round: 10\nsmall_blind: 10\nai_players:\n- name: FIXME:your-ai-name\n  path: FIXME:your-setup-script-path\n```\n\nWe replace `ai_players` items like this.\n\n```yaml\nante: 0\nblind_structure: null\ninitial_stack: 100\nmax_round: 10\nsmall_blind: 10\nai_players:\n- name: fish_player_1\n  path: /Users/ishikota/poker/fish_player_setup.py\n- name: fish_player_2\n  path: /Users/ishikota/poker/fish_player_setup.py\n```\n\nWe assume that you put this file on `/Users/ishikota/poker/poker_conf.yaml` in following section.\n\n## Start the server with config file and play the game\nOk, everything is ready. We start the local server with our config file.\n\n```bash\npypokergui serve /Users/ishikota/poker/poker_conf.yaml --port 8000 --speed moderate\n```\n\nThen browser will be opened and you would see registration page.  \nPlease register yourself in the page and start the game. Enjoy poker!!\n\n### How to registrate yourself\n<img src=\"https://github.com/ishikota/PyPokerGUI/blob/master/screenshot/poker_registration.png\" width=600px/>\n\n### How to declare action in the game\n<img src=\"https://github.com/ishikota/PyPokerGUI/blob/master/screenshot/poker_game.png\" width=600px/>\n\n"
 },
 {
  "repo": "tansey/pycfr",
  "language": "Python",
  "readme_contents": "pyCFR\n=====\n\nA python implementation of Counterfactual Regret Minimization (CFR) [1] for flop-style poker games like Texas Hold'em, Leduc, and Kuhn poker. The library currently implements vanilla CFR [1], Chance Sampling (CS) CFR [1,2], Outcome Sampling (CS) CFR [2], and Public Chance Sampling (PCS) CFR [3].\n\nNote that this library is intended to automatically support relatively small games. It is written in pure python and is not optimized for speed nor memory usage. Full-scale Texas Hold'em will likely be too slow and too big to handle. You should use this library if you want to learn about CFR, you are doing research on toy problems, or you want to sanity check your implementation on a poker variant where no optimized code is publicly available.\n\nCreating a game tree\n--------------------\nTo generate a tree for a game, simply specify the rules of the game:\n\n```python\nfrom pokertrees import *\nfrom pokergames import *\nplayers = 2\ndeck = [Card(14,1),Card(13,2),Card(13,1),Card(12,1)]\nrounds = [RoundInfo(holecards=1,boardcards=0,betsize=2,maxbets=[2,2]),RoundInfo(holecards=0,boardcards=1,betsize=4,maxbets=[2,2])]\nante = 1\nblinds = [1,2]\ngamerules = GameRules(players, deck, rounds, ante, blinds, handeval=leduc_eval)\ngametree = GameTree(gamerules)\ngametree.build()\n```\n\nOr use one of the pre-built games:\n\n```python\nfrom pokergames import *\ngametree = leduc_gametree()\n```\n\nEvaluating a strategy profile\n-----------------------------\nYou can calculate the expected value of a set of strategies for a game:\n\n```python\nfrom pokertrees import *\nfrom pokergames import *\nfrom pokerstrategy import *\nrules = leduc_rules()\n\n# load first player strategy\ns0 = Strategy(0)\ns0.load_from_file('strategies/leduc/0.strat')\n\n# load second player strategy\ns1 = Strategy(1)\ns1.load_from_file('strategies/leduc/1.strat')\n\n# Create a strategy profile for this game\nprofile = StrategyProfile(rules, [s0,s1])\n\nev = profile.expected_value()\n```\n\nGetting the best response strategy\n----------------------------------\nGiven a strategy profile, you can calculate the best response strategy for each agent:\n\n```python\nfrom pokertrees import *\nfrom pokergames import *\nfrom pokerstrategy import *\nrules = leduc_rules()\n\n# load first player strategy\ns0 = Strategy(0)\ns0.load_from_file('strategies/leduc/0.strat')\n\n# load second player strategy\ns1 = Strategy(1)\ns1.load_from_file('strategies/leduc/1.strat')\n\n# Create a strategy profile for this game\nprofile = StrategyProfile(rules, [s0,s1])\n\n# Calculates the best response for every agent and the value of that response\nbrev = profile.best_response()\n\n# The first element is a StrategyProfile of all the best responses\nbest_response = brev[0]\n\n# The second element is a list of expected values of the responses vs. the original strategy profile\nexpected_values = brev[1]\n```\n\nThe underlying implementation of the best response calculation uses a generalized version of the public tree algorithm presented in [4].\n\nFinding a Nash equilibrium\n--------------------------\nGiven the rules for a game, you can run the Counterfactual Regret (CFR) Minimization algorithm:\n\n```python\n# Get the rules of the game\nhskuhn = half_street_kuhn_rules()\n\n# Create the CFR minimizer\nfrom  pokercfr import CounterfactualRegretMinimizer\ncfr = CounterfactualRegretMinimizer(hskuhn)\n\n# Run a number of iterations, determining the exploitability of the agents periodically\niterations_per_block = 1000\nblocks = 10\nfor block in range(blocks):\n    print 'Iterations: {0}'.format(block * iterations_per_block)\n    cfr.run(iterations_per_block)\n    result = cfr.profile.best_response()\n    print 'Best response EV: {0}'.format(result[1])\n    print 'Total exploitability: {0}'.format(sum(result[1]))\n\n# The final result is a strategy profile of epsilon-optimal agents\nnash_strategies = cfr.profile\n```\n\nTests\n-----\nTests for the game tree code are implemented in the `tests` directory. WARNING: Tests using Leduc poker are slow due to the size of the game.\n\n- test_gametree.py - Tests the game tree functionality against a leduc-like game and verifies some branches are built as expected.\n\n- test_strategy.py - Tests the strategy functionality by loading some pre-computed near-optimal strategies for Leduc poker and a default equal-probability policy.\n\n- test_cfr.py - Tests the CFR minimizer functionality by running it on half-street Kuhn poker and Leduc poker. WARNING: Leduc poker is slow due to the size of the game.\n\n- test_cscfr.py - Tests the Chance Sampling (CS) CFR minimizer functionality by running it on half-street Kuhn poker and Leduc poker. \n\n- test_oscfr.py - Tests the Outcome Sampling (OS) CFR minimizer functionality by running it on half-street Kuhn poker and Leduc poker.\n\n- test_pcscfr.py - Tests the Public Chance Sampling (PCS) CFR minimizer functionality by running it on half-street Kuhn poker and Leduc poker.\n\nNote the tests are intended to be run from the main directory, e.g. `python test/test_gametree.py`. They make some assumptions about relative paths when importing modules and loading and saving files.\n\nTODO\n----\nThe following is a list of items that still need to be implemented:\n\n- Add no-limit poker games\n- Average Strategy CFR (AS-CFR) for no-limit games\n- Add test cases for games where additional holecards come after the first round when there may be a variable number of players. It may currently work, but it's untested on any of the implemented CFR variants.\n\n\nContributors\n------------\n\nWesley Tansey\n\nHand evaluator code courtesy of [Alvin Liang's library](https://github.com/aliang/pokerhand-eval).\n\n\n\n\nReferences\n----------\n[1] Zinkevich, M., Johanson, M., Bowling, M., & Piccione, C. (2008). Regret minimization in games with incomplete information. Advances in neural information processing systems, 20, 1729-1736.\n\n[2] Lanctot, M., Waugh, K., Zinkevich, M., & Bowling, M. (2009). Monte Carlo sampling for regret minimization in extensive games. Advances in Neural Information Processing Systems, 22, 1078-1086.\n\n[3] Johanson, M., Bard, N., Lanctot, M., Gibson, R., & Bowling, M. (2012). Efficient Nash equilibrium approximation through Monte Carlo counterfactual regret minimization. In Proceedings of the 11th International Conference on Autonomous Agents and Multiagent Systems-Volume 2 (pp. 837-846). International Foundation for Autonomous Agents and Multiagent Systems.\n\n[4] Johanson, M., Waugh, K., Bowling, M., & Zinkevich, M. (2011). Accelerating best response calculation in large extensive games. In Proceedings of the Twenty-Second international joint conference on Artificial Intelligence-Volume Volume One (pp. 258-265). AAAI Press."
 },
 {
  "repo": "dannye/pokered-gbc",
  "language": "Assembly",
  "readme_contents": "# Pok\u00e9mon Red and Blue [![Build Status][travis-badge]][travis]\n\nThis is a disassembly of Pok\u00e9mon Red and Blue.\n\nIt builds the following ROMs:\n\n- Pokemon Red (UE) [S][!].gb `sha1: ea9bcae617fdf159b045185467ae58b2e4a48b9a`\n- Pokemon Blue (UE) [S][!].gb `sha1: d7037c83e1ae5b39bde3c30787637ba1d4c48ce2`\n- BLUEMONS.GB (debug build) `sha1: 5b1456177671b79b263c614ea0e7cc9ac542e9c4`\n\nTo set up the repository, see [**INSTALL.md**](INSTALL.md).\n\n\n## See also\n\n- **Discord:** [pret][discord]\n- **IRC:** [freenode#pret][irc]\n\nOther disassembly projects:\n\n- [**Pok\u00e9mon Yellow**][pokeyellow]\n- [**Pok\u00e9mon Gold/Silver**][pokegold]\n- [**Pok\u00e9mon Crystal**][pokecrystal]\n- [**Pok\u00e9mon Pinball**][pokepinball]\n- [**Pok\u00e9mon TCG**][poketcg]\n- [**Pok\u00e9mon Ruby**][pokeruby]\n- [**Pok\u00e9mon FireRed**][pokefirered]\n- [**Pok\u00e9mon Emerald**][pokeemerald]\n\n[pokeyellow]: https://github.com/pret/pokeyellow\n[pokegold]: https://github.com/pret/pokegold\n[pokecrystal]: https://github.com/pret/pokecrystal\n[pokepinball]: https://github.com/pret/pokepinball\n[poketcg]: https://github.com/pret/poketcg\n[pokeruby]: https://github.com/pret/pokeruby\n[pokefirered]: https://github.com/pret/pokefirered\n[pokeemerald]: https://github.com/pret/pokeemerald\n[discord]: https://discord.gg/d5dubZ3\n[irc]: https://kiwiirc.com/client/irc.freenode.net/?#pret\n[travis]: https://travis-ci.org/pret/pokered\n[travis-badge]: https://travis-ci.org/pret/pokered.svg?branch=master\n"
 },
 {
  "repo": "chehsunliu/poker",
  "language": "Go",
  "readme_contents": "# Poker\n\n[![CircleCI](https://circleci.com/gh/chehsunliu/poker/tree/master.svg?style=shield&circle-token=abebd63b852ce8ecdcdf3f7e597be743d07402e4)](https://circleci.com/gh/chehsunliu/poker/tree/master) [![GoDoc](https://godoc.org/github.com/chehsunliu/poker?status.svg)](https://godoc.org/github.com/chehsunliu/poker) [![codecov](https://codecov.io/gh/chehsunliu/poker/branch/master/graph/badge.svg)](https://codecov.io/gh/chehsunliu/poker)\n\nPoker is ported from the Python library [worldveil/deuces](https://github.com/worldveil/deuces).\n\n## Installation\n\nUse `go get` to install Poker:\n\n```sh\n$ go get github.com/chehsunliu/poker\n```\n\n## Usage\n\nSupport 5-, 6-, and 7-card evalutions:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/chehsunliu/poker\"\n)\n\nfunc main() {\n\tdeck := poker.NewDeck()\n\thand := deck.Draw(7)\n\tfmt.Println(hand)\n\n\trank := poker.Evaluate(hand)\n\tfmt.Println(rank)\n\tfmt.Println(poker.RankString(rank))\n}\n```\n\n```sh\n$ go run ./main.go\n[Kd 4h Qh 3s 8s 5h Jd]\n6695\nHigh Card\n\n$ go run ./main.go\n[4c Qh Ad 9c 9s 3h 4d]\n3062\nTwo Pair\n\n$ go run ./main.go\n[Jh Qd Kd Qs 7d As Qh]\n1742\nThree of a Kind\n```\n\n## Performance\n\nCompared with [notnil/joker](https://github.com/notnil/joker), Poker is 160x faster on 5-card evaluation, and drops to 40x faster on 7-card evaluation.\n\n```sh\ngo test -bench=. -benchtime 5s\ngoos: darwin\ngoarch: amd64\npkg: github.com/chehsunliu/poker\nBenchmarkFivePoker-4    \t23396181\t       253 ns/op\nBenchmarkFiveJoker-4    \t  141036\t     41662 ns/op\nBenchmarkSixPoker-4     \t 3037298\t      1949 ns/op\nBenchmarkSixJoker-4     \t   28158\t    211533 ns/op\nBenchmarkSevenPoker-4   \t  356448\t     16357 ns/op\nBenchmarkSevenJoker-4   \t    7143\t    759394 ns/op\nPASS\nok  \tgithub.com/chehsunliu/poker\t40.111s\n```\n"
 },
 {
  "repo": "lifrordi/DeepStack-Leduc",
  "language": "Lua",
  "readme_contents": "# DeepStack for Leduc Hold'em\n\n[DeepStack](https://www.deepstack.ai) is an artificial intelligence agent\ndesigned by a joint team from the University of Alberta, Charles University,\nand Czech Technical University. In [a study](https://www.deepstack.ai/s/DeepStack.pdf)\ncompleted in December 2016, DeepStack became the first program to beat human\nprofessionals in the game of heads-up (two player) no-limit Texas hold'em, a\ncommonly played poker game.\n\nThis project reimplements DeepStack as a player for heads-up no-limit\n[Leduc holdem](#leduc-hold'em), a much simpler game than Texas hold'em. \n\nDeepStack is built around two components:\n* An offline component that solves random **poker situations** (public game\nstates along with probability vectors over private hands for both players) and\nuses them to train a neural network. After training, this neural network can\naccurately predict the value to each player of holding each possible hand at a\ngiven poker situation.\n* An online component which uses the **continuous re-solving** algorithm to\ndynamically choose an action for DeepStack to play at each public state \nencountered during gameplay. This algorithm solves a depth-limited lookahead\nusing the neural net to estimate values at terminal states.\n\nThe strategy played by DeepStack approximates a **Nash Equilibrium**, with an\napproximation error that depends on the error of the neural net and the\nsolution error of the solver used in continuous re-solving.\n\n## Prerequisites\n\nRunning any of the DeepStack code requires [Lua](https://www.lua.org/) and [torch](http://torch.ch/).\nTorch is only officially supported for *NIX based systems (i.e. Linux and Mac \nOS X), and as such, **we don't  officially support installation of DeepStack\non Windows systems**. [This page](https://github.com/torch/torch7/wiki/Windows)\ncontains suggestions for using torch on a Windows machine; if you decide to try\nthis, we cannot offer any help.\n\nConnecting DeepStack to a server requires the [luasocket](http://w3.impa.br/~diego/software/luasocket/)\npackage. This can be installed with [luarocks](https://luarocks.org/) (which is\ninstalled as part of the standard torch distribution) using the command \n`luarocks install luasocket`. Visualising the trees produced by DeepStack\nrequires the [graphviz](http://graphviz.org/) package, which can be installed\nwith `luarocks install graphviz`. Running the code on the GPU requires\n[cutorch](https://github.com/torch/cutorch). Currently only version 1.0 is supported which can be installed with\n`luarocks install cutorch 1.0-0`.\n\nThe DeepStack player uses the protocol of the Annual Computer Poker Competition\n(a description of the protocol can be found [here](http://www.computerpokercompetition.org/downloads/documents/protocols/protocol.pdf))\nto receive poker states and send poker actions as messages over a network\nsocket connection. If you wish to play against DeepStack, you will need a\nserver for DeepStack to connect to that acts as the dealer for the game; code\nfor a server that fills this role is available through the ACPC\n[here](http://www.computerpokercompetition.org/downloads/code/competition_server/project_acpc_server_v1.0.41.tar.bz2).\nFor convenience, we include a copy of the ACPC dealer in the `ACPCDealer/`\ndirectory, along with a game definition file (`ACPCDealer/leduc.game`) so that\nthe dealer can play Leduc hold'em.\n\nIf you would like to personally play against DeepStack, you will need a way of\ninteracting with the server yourself; one such option is the ACPC GUI available\nfrom Dustin Morrill [here](https://github.com/dmorrill10/acpc_poker_gui_client/tree/v1.2).\n\n## Leduc Hold'em\n\nLeduc Hold'em is a toy poker game sometimes used in academic research (first\nintroduced in [Bayes' Bluff: Opponent Modeling in Poker](http://poker.cs.ualberta.ca/publications/UAI05.pdf)). \nIt is played with a deck of six cards, comprising two suits of three ranks each\n(often the king, queen, and jack - in our implementation, the ace, king, and\nqueen). The game begins with each player being dealt one card privately,\nfollowed by a betting round. Then, another card is dealt faceup as a community\n(or board) card, and there is another betting round. Finally, the players\nreveal their private cards. If one player's private card is the same rank as\nthe board card, he or she wins the game; otherwise, the player whose private\ncard has the higher rank wins.\n\nThe game that we implement is No-Limit Leduc Hold'em, meaning that whenever a\nplayer makes a bet, he or she may wager any amount of chips up to a maximum of\nthat player's remaining stack. There is also no limit on the number of bets and\nraises that can be made in each betting round.\n\n## Documentation\n\nDocumentation for the DeepStack Leduc codebase can be found [here](doc/index.html).\nIn particular, there is [a tutorial](doc/manual/tutorial.md) which\nintroduces the codebase and walks you through several examples, including\nrunning DeepStack.\n\nThe documentation for code files was automatically generated with [LDoc](https://github.com/stevedonovan/LDoc),\nwhich can be installed with `luarocks install ldoc`. To re-generate the docs,\nrun `ldoc .` in the `doc/` directory. If you wish to also generate\ndocumentation for local functions, run `ldoc . -all` instead."
 },
 {
  "repo": "lbdmxhs/poker",
  "language": "JavaScript",
  "readme_contents": "# poker\ncocos creator 2.0.10+pomelo \u6251\u514b\u6e38\u620f\n"
 },
 {
  "repo": "adamsmith/game-theory-poker",
  "language": "Java",
  "readme_contents": "game-theory-poker\n=====\n\nThis is a game-theoretic, heads-up limit Texas Hold'em poker player I wrote in 2005, based on the paper [_Approximating Game-Theoretic Optimal Strategies for Full-scale Poker_](https://www.google.com/search?q=Approximating+Game-Theoretic+Optimal+Strategies+for+Full-scale+Poker).  It's about 6,000 lines of Java.\n\n\n### Theory of Operation\nPlaying the optimal strategy for any game guarantees that you'll achieve at least the expected value of that game.  In poker, assuming no rake, the expected value is zero, so if you can compute the optimal strategy then you're _guaranteed_ not to lose on average.\n\nConsider rock-paper-scissors.  The optimal strategy for that game is to throw `rock` 1/3'rd of the time, `paper` 1/3'rd, and `scissors` 1/3'rd.  If you play by this strategy you are guaranteed not to lose on average, regardless of what strategy your opponent plays by.  (Note that even if your opponent throws `rock` every time, you'll still just tie (not lose) on average.  But there are other games where the optimal strategy can dominate some opponents' strategies, and poker is one of them.)\n\nIt's just too hard to compute the optimal strategy for poker, even two player limit poker.  But we can compute the optimal strategy for an abstract version of poker that, for example, during pre-flop betting treats pairs of aces the same way as pairs of kings.\n\nThis code computes the optimal strategy for an abstraction of poker that it builds based on the strength of different hands in different situations.\n\nA more detailed description of this idea is given in the paper _Approximating Game-Theoretic Optimal Strategies for Full-scale Poker_ (Billings, 2003).\n\n\n### How Good Is It?\nOkay, so how good is the resulting player?  Well, you can tweak how abstract the game should be at each stage.  The less abstract the game, the better the player will be, but you'll hit computation and memory constraints.\n\nThe furthest I got was computing five clusters worth of representation for each turn.  This took about a month to compute using three machines in my apartment living room.  As a median-skilled poker player I could beat the resulting player, but not that easily.\n\n\n### Opportunities For Improvement\nOur abstraction of the game is fairly coarse.  We can build a less abstract version of the game by leveraging the dramatic reduction in game size post-flop.  The whole game tree has 10^18 nodes, but after you have your two hole cards and after the flop, there are just three rounds of betting and (47 choose 2) more cards that are coming.  It's possible to compute the _exact_ optimal strategy for such a narrowed-down game.\n\nSo what we should do is: for every (52 choose 2) * (50 choose 3) combination of post-flop states, compute the exact optimal strategy.  Each result will also tell you the expected value of that sub-game.  Then you compute the starting strategy for each (52 choose 2) initial states substituting the expected value from the sub-games as terminal nodes in the game tree.\n\nThis isn't an exact version of the game, but it's _far_ better.\n\nThe problem is it'd take about 400,000 CPU-hours to compute.\n\nSo I started working on this during MIT's Independent Activities Period in January 2006, but I never finished the code.  I stopped because classes started, but also because I didn't have access to 400k cpu-hours.  (Coincidentally, I now have access to that kind of compute through [Gridspot](http://gridspot.com/compute), but alas working on this is no longer feasible given my opportunity costs.)\n\n\n### Notes On Using The Code\n* All calculations are done up-front.  The resulting multi-gigabyte files fully specify the game strategies, so the actual player just has to do a few disk reads to know what to do at each turn.\n* Each step creates new data files that are used in later steps.  There are 16 types of files all-in-all.\n* All of this code is written to process data sequentially, so that you can compute a multi-gigabyte strategy with comparatively little memory.\n* If you want to play around with this code you can compute a strategy for reduced version of poker.  For example, the code defaults to computing the strategy for 14-card poker (2 suits, 7 card ranks).  Use `_game.Cards` to control the parameters of the poker game you're computing for (_eg_ 14 versus 52 card poker) and how many clusters you want at each turn.\n\n\n### Usage Instructions\n1. Compute showdown rankings\n\t* You should configure `Constants.DATA_FILE_REPOSITORY` first and create the subdirectory `{{ GAME_NAME }}/5`, before running.\n\t* Run `stage1.DoShowdowns`\n\n\n1. Create files sorted on hole cards, and counts of `winCounts` (`+ tiecount / 2`) for hole cards during pre-flop, post-flop, post-turn, plus a new data format\n\t* Run `stage1.DoBacktracking`\n\n\n1. Calculate clustering into abstract game\n\t* Create `stage2` directory in `{{ GAME_NAME }}` subdir\n\t* Run `stage2.DoClusteringStep1` with command line argument `0`\n\t* Run `stage2.DoClusteringStep2` with command line arguments `0 5`\n\n\n1. Calculate transition probabilities for abstract game\n\t* Run `stage2.DoStartClusterPDT`\n\t* Run `stage2.DoTransitionPDTStep1 0 5`\n\t* Run `stage2.DoTransitionPDTStep2 5`\n\t* Run `stage2.DoTerminalClusterValuesStep1`\n\t* Run `stage2.DoTerminalClusterValuesStep2`\n\n\n1. Construct game tree, convert game tree to sequence form (single pass), solve sequence form LP problem\n\t* Run `stage3.DoGT root`\n\t* Run `stage3.DoPreprocessRm mem-heavy root`\n\t* Run `stage3.DoWriteLP root`\n\t* from `{{ GAME_NAME }}\\stage3\\root`, run `bpmpd game.p1.mps` and `bpmpd game.p2.mps`\n\t* the last few steps overlap with the first few steps in the following script, which executes everything else needed to get to the MeerkatPlayer.  (Meerkat is a poker player API.)  In the steps below, `/net1/poker/poker_data` is the `Constants.DATA_FILE_REPOSITORY`, and `52-5-1.1` is the `{{ GAME_NAME }}`.  `bpmpd` resides in `/net1`.\n\t* note that there are other LP-solvers available.  I just happened to use bpmpd.  The MPS file format is supported by most.\n\n\t\t```\n\t\tjava -Xms400M -Xmx1700M -Xincgc -classpath bin stage3.DoPreprocessRm mem-heavy root\n\t\tjava -Xms400M -Xmx1700M -Xincgc -classpath bin stage3.DoWriteLP root\n\t\tcd /net1/bpmpd\n\t\tln -s /net1/poker/poker_data/52-5-1.1/stage3/root/game.p1.mps rootp1.mps\n\t\tln -s /net1/poker/poker_data/52-5-1.1/stage3/root/game.p2.mps rootp2.mps\n\t\trm -f *.out\n\t\t./bpmpd rootp1\n\t\tcp rootp1.out /net1/poker/poker_data/52-5-1.1/stage3/root/game.p1.sol\n\t\t./bpmpd rootp2\n\t\tcp rootp2.out /net1/poker/poker_data/52-5-1.1/stage3/root/game.p2.sol\n\t\tcd /net1/poker\n\t\tjava -Xms400M -Xmx1700M -Xincgc -classpath bin stage3.DoParseClpOutput root\n\t\tjava -Xms400M -Xmx1700M -Xincgc -classpath bin stage3.DoSubtreeGames\n\t\tjava -Xms400M -Xmx1700M -Xincgc -classpath bin stage3.DoGT all-subtrees\n\t\tjava -Xms400M -Xmx1700M -Xincgc -classpath bin stage3.DoPreprocessRm mem-heavy all-subtrees\n\t\tjava -Xms400M -Xmx1700M -Xincgc -classpath bin stage3.DoWriteLP all-subtrees\n\t\tcd /net1/bpmpd\n\t\trm -f ???.mps\n\t\tln -s /net1/poker/poker_data/52-5-1.1/stage3/a/game.p1.mps ap1.mps\n\t\tln -s /net1/poker/poker_data/52-5-1.1/stage3/a/game.p2.mps ap2.mps\n\t\tln -s /net1/poker/poker_data/52-5-1.1/stage3/b/game.p1.mps bp1.mps\n\t\tln -s /net1/poker/poker_data/52-5-1.1/stage3/b/game.p2.mps bp2.mps\n\t\tln -s /net1/poker/poker_data/52-5-1.1/stage3/c/game.p1.mps cp1.mps\n\t\tln -s /net1/poker/poker_data/52-5-1.1/stage3/c/game.p2.mps cp2.mps\n\t\tln -s /net1/poker/poker_data/52-5-1.1/stage3/d/game.p1.mps dp1.mps\n\t\tln -s /net1/poker/poker_data/52-5-1.1/stage3/d/game.p2.mps dp2.mps\n\t\tln -s /net1/poker/poker_data/52-5-1.1/stage3/e/game.p1.mps ep1.mps\n\t\tln -s /net1/poker/poker_data/52-5-1.1/stage3/e/game.p2.mps ep2.mps\n\t\tln -s /net1/poker/poker_data/52-5-1.1/stage3/f/game.p1.mps fp1.mps\n\t\tln -s /net1/poker/poker_data/52-5-1.1/stage3/f/game.p2.mps fp2.mps\n\t\tln -s /net1/poker/poker_data/52-5-1.1/stage3/g/game.p1.mps gp1.mps\n\t\tln -s /net1/poker/poker_data/52-5-1.1/stage3/g/game.p2.mps gp2.mps\n\t\trm -f *.out\n\t\t./bpmpd ap1\n\t\t./bpmpd ap2\n\t\t./bpmpd bp1\n\t\t./bpmpd bp2\n\t\t./bpmpd cp1\n\t\t./bpmpd cp2\n\t\t./bpmpd dp1\n\t\t./bpmpd dp2\n\t\t./bpmpd ep1\n\t\t./bpmpd ep2\n\t\t./bpmpd fp1\n\t\t./bpmpd fp2\n\t\t./bpmpd gp1\n\t\t./bpmpd gp2\n\t\tcp ap1.out /net1/poker/poker_data/52-5-1.1/stage3/a/game.p1.sol\n\t\tcp ap2.out /net1/poker/poker_data/52-5-1.1/stage3/a/game.p2.sol\n\t\tcp bp1.out /net1/poker/poker_data/52-5-1.1/stage3/b/game.p1.sol\n\t\tcp bp2.out /net1/poker/poker_data/52-5-1.1/stage3/b/game.p2.sol\n\t\tcp cp1.out /net1/poker/poker_data/52-5-1.1/stage3/c/game.p1.sol\n\t\tcp cp2.out /net1/poker/poker_data/52-5-1.1/stage3/c/game.p2.sol\n\t\tcp dp1.out /net1/poker/poker_data/52-5-1.1/stage3/d/game.p1.sol\n\t\tcp dp2.out /net1/poker/poker_data/52-5-1.1/stage3/d/game.p2.sol\n\t\tcp ep1.out /net1/poker/poker_data/52-5-1.1/stage3/e/game.p1.sol\n\t\tcp ep2.out /net1/poker/poker_data/52-5-1.1/stage3/e/game.p2.sol\n\t\tcp fp1.out /net1/poker/poker_data/52-5-1.1/stage3/f/game.p1.sol\n\t\tcp fp2.out /net1/poker/poker_data/52-5-1.1/stage3/f/game.p2.sol\n\t\tcp gp1.out /net1/poker/poker_data/52-5-1.1/stage3/g/game.p1.sol\n\t\tcp gp2.out /net1/poker/poker_data/52-5-1.1/stage3/g/game.p2.sol\n\t\tcd /net1/poker\n\t\tjava -Xms400M -Xmx1700M -Xincgc -classpath bin stage3.DoParseClpOutput all-subtrees\n\t\t```\n\n\n1. Build your player data files around the resulting mixed strategy\n\t* Run `stage4.DoConvertSolsForRndAccess root`\n\t* Run `stage4.DoConvertSolsForRndAccess all-subtrees`\n\n1. Use your player\n\t* Use the `stage4.MeerkatPlayer` class\n\t* I originally used the player in PokerAcademy but it now seems that there are open source platforms that can use Meerkat players.\n\n\n### License\n\nThis code is released under the public domain / no license.\n"
 },
 {
  "repo": "rosbo/texas-holdem-poker-ai",
  "language": "Java",
  "readme_contents": "Texas Hold\u2019em AI\n=====================\n\nTechnology used\n---------------\nWe used Java to develop our Texas Hold\u2019em Simulator. More precisely, we chose Guice for dependency injection and H2, a free, lightweight embedded SQL database, to store and retrieve the data from the pre\u00adflop simulation and the opponents model. Maven is also used to manage our dependencies for the project.\n\nHow to use\n---------------\n1. You need to fetch the dependencies from the maven repositories:\n\n\t    mvn install\t\n2. There are multiple classes with \u201cmain\u201d function: \n * Play [demo|phase1|phase2|phase3]. The parameter is optional. The default is demo. See *GameProperties.java file to get more details\n * RunPreFlopSimulator\n * RunModeler\n * PrintModeler & PrintPreFlop\n\nThree different AI level\n-----------------\n- Phase I: Take decision based only on the power of his hand\n- Phase II: Use hand-strength calculation and pre-flop simulation roll-out\n- Phase III: Use phase II techniques plus opponent modelling\n\nEach different AI is declined in two different strategies. A bluffer and a normal/rational player."
 },
 {
  "repo": "pierotofy/PokerMuck",
  "language": "C#",
  "readme_contents": "PokerMuck\n=========\n\nPokerMuck is a GNU GPL online poker utility for the Windows platform maintained by [Piero Toffanin](https://www.pierotoffanin.com). The program offers a muck viewer and an advanced HUD. It currently supports Hold'em games (cash and tournament) for several poker clients. It can be easily extended to support more clients and game modes.\n\n![PokerMuck Logo](https://pierotofy.github.io/pokermuck/images/thumb/8/88/Fullt-tilt-hud.png/800px-Fullt-tilt-hud.png)\n\nWindows Installer: [Download](http://www.pokermuck.com/application/setup.exe) (might be broken, please compile from source code using Visual Studio if you have errors).\n\nCheck the website for more information: https://pierotofy.github.io/pokermuck/\n"
 },
 {
  "repo": "rotembcohen/pokerBuddyApp",
  "language": "JavaScript",
  "readme_contents": "This project was bootstrapped with [Create React Native App](https://github.com/react-community/create-react-native-app).\n\nBelow you'll find information about performing common tasks. The most recent version of this guide is available [here](https://github.com/react-community/create-react-native-app/blob/master/react-native-scripts/template/README.md).\n\n## Table of Contents\n\n* [Updating to New Releases](#updating-to-new-releases)\n* [Available Scripts](#available-scripts)\n  * [npm start](#npm-start)\n  * [npm test](#npm-test)\n  * [npm run ios](#npm-run-ios)\n  * [npm run android](#npm-run-android)\n  * [npm run eject](#npm-run-eject)\n* [Writing and Running Tests](#writing-and-running-tests)\n* [Environment Variables](#environment-variables)\n  * [Configuring Packager IP Address](#configuring-packager-ip-address)\n* [Adding Flow](#adding-flow)\n* [Customizing App Display Name and Icon](#customizing-app-display-name-and-icon)\n* [Sharing and Deployment](#sharing-and-deployment)\n  * [Publishing to Expo's React Native Community](#publishing-to-expos-react-native-community)\n  * [Building an Expo \"standalone\" app](#building-an-expo-standalone-app)\n  * [Ejecting from Create React Native App](#ejecting-from-create-react-native-app)\n    * [Build Dependencies (Xcode & Android Studio)](#build-dependencies-xcode-android-studio)\n    * [Should I Use ExpoKit?](#should-i-use-expokit)\n* [Troubleshooting](#troubleshooting)\n  * [Networking](#networking)\n  * [iOS Simulator won't open](#ios-simulator-wont-open)\n  * [QR Code does not scan](#qr-code-does-not-scan)\n\n## Updating to New Releases\n\nYou should only need to update the global installation of `create-react-native-app` very rarely, ideally never.\n\nUpdating the `react-native-scripts` dependency of your app should be as simple as bumping the version number in `package.json` and reinstalling your project's dependencies.\n\nUpgrading to a new version of React Native requires updating the `react-native`, `react`, and `expo` package versions, and setting the correct `sdkVersion` in `app.json`. See the [versioning guide](https://github.com/react-community/create-react-native-app/blob/master/VERSIONS.md) for up-to-date information about package version compatibility.\n\n## Available Scripts\n\nIf Yarn was installed when the project was initialized, then dependencies will have been installed via Yarn, and you should probably use it to run these commands as well. Unlike dependency installation, command running syntax is identical for Yarn and NPM at the time of this writing.\n\n### `npm start`\n\nRuns your app in development mode.\n\nOpen it in the [Expo app](https://expo.io) on your phone to view it. It will reload if you save edits to your files, and you will see build errors and logs in the terminal.\n\nSometimes you may need to reset or clear the React Native packager's cache. To do so, you can pass the `--reset-cache` flag to the start script:\n\n```\nnpm start -- --reset-cache\n# or\nyarn start -- --reset-cache\n```\n\n#### `npm test`\n\nRuns the [jest](https://github.com/facebook/jest) test runner on your tests.\n\n#### `npm run ios`\n\nLike `npm start`, but also attempts to open your app in the iOS Simulator if you're on a Mac and have it installed.\n\n#### `npm run android`\n\nLike `npm start`, but also attempts to open your app on a connected Android device or emulator. Requires an installation of Android build tools (see [React Native docs](https://facebook.github.io/react-native/docs/getting-started.html) for detailed setup). We also recommend installing Genymotion as your Android emulator. Once you've finished setting up the native build environment, there are two options for making the right copy of `adb` available to Create React Native App:\n\n##### Using Android Studio's `adb`\n\n1. Make sure that you can run adb from your terminal.\n2. Open Genymotion and navigate to `Settings -> ADB`. Select \u201cUse custom Android SDK tools\u201d and update with your [Android SDK directory](https://stackoverflow.com/questions/25176594/android-sdk-location).\n\n##### Using Genymotion's `adb`\n\n1. Find Genymotion\u2019s copy of adb. On macOS for example, this is normally `/Applications/Genymotion.app/Contents/MacOS/tools/`.\n2. Add the Genymotion tools directory to your path (instructions for [Mac](http://osxdaily.com/2014/08/14/add-new-path-to-path-command-line/), [Linux](http://www.computerhope.com/issues/ch001647.htm), and [Windows](https://www.howtogeek.com/118594/how-to-edit-your-system-path-for-easy-command-line-access/)).\n3. Make sure that you can run adb from your terminal.\n\n#### `npm run eject`\n\nThis will start the process of \"ejecting\" from Create React Native App's build scripts. You'll be asked a couple of questions about how you'd like to build your project.\n\n**Warning:** Running eject is a permanent action (aside from whatever version control system you use). An ejected app will require you to have an [Xcode and/or Android Studio environment](https://facebook.github.io/react-native/docs/getting-started.html) set up.\n\n## Customizing App Display Name and Icon\n\nYou can edit `app.json` to include [configuration keys](https://docs.expo.io/versions/latest/guides/configuration.html) under the `expo` key.\n\nTo change your app's display name, set the `expo.name` key in `app.json` to an appropriate string.\n\nTo set an app icon, set the `expo.icon` key in `app.json` to be either a local path or a URL. It's recommended that you use a 512x512 png file with transparency.\n\n## Writing and Running Tests\n\nThis project is set up to use [jest](https://facebook.github.io/jest/) for tests. You can configure whatever testing strategy you like, but jest works out of the box. Create test files in directories called `__tests__` or with the `.test` extension to have the files loaded by jest. See the [the template project](https://github.com/react-community/create-react-native-app/blob/master/react-native-scripts/template/App.test.js) for an example test. The [jest documentation](https://facebook.github.io/jest/docs/getting-started.html) is also a wonderful resource, as is the [React Native testing tutorial](https://facebook.github.io/jest/docs/tutorial-react-native.html).\n\n## Environment Variables\n\nYou can configure some of Create React Native App's behavior using environment variables.\n\n### Configuring Packager IP Address\n\nWhen starting your project, you'll see something like this for your project URL:\n\n```\nexp://192.168.0.2:19000\n```\n\nThe \"manifest\" at that URL tells the Expo app how to retrieve and load your app's JavaScript bundle, so even if you load it in the app via a URL like `exp://localhost:19000`, the Expo client app will still try to retrieve your app at the IP address that the start script provides.\n\nIn some cases, this is less than ideal. This might be the case if you need to run your project inside of a virtual machine and you have to access the packager via a different IP address than the one which prints by default. In order to override the IP address or hostname that is detected by Create React Native App, you can specify your own hostname via the `REACT_NATIVE_PACKAGER_HOSTNAME` environment variable:\n\nMac and Linux:\n\n```\nREACT_NATIVE_PACKAGER_HOSTNAME='my-custom-ip-address-or-hostname' npm start\n```\n\nWindows:\n```\nset REACT_NATIVE_PACKAGER_HOSTNAME='my-custom-ip-address-or-hostname'\nnpm start\n```\n\nThe above example would cause the development server to listen on `exp://my-custom-ip-address-or-hostname:19000`.\n\n## Adding Flow\n\nFlow is a static type checker that helps you write code with fewer bugs. Check out this [introduction to using static types in JavaScript](https://medium.com/@preethikasireddy/why-use-static-types-in-javascript-part-1-8382da1e0adb) if you are new to this concept.\n\nReact Native works with [Flow](http://flowtype.org/) out of the box, as long as your Flow version matches the one used in the version of React Native.\n\nTo add a local dependency to the correct Flow version to a Create React Native App project, follow these steps:\n\n1. Find the Flow `[version]` at the bottom of the included [.flowconfig](.flowconfig)\n2. Run `npm install --save-dev flow-bin@x.y.z` (or `yarn add --dev flow-bin@x.y.z`), where `x.y.z` is the .flowconfig version number.\n3. Add `\"flow\": \"flow\"` to the `scripts` section of your `package.json`.\n4. Add `// @flow` to any files you want to type check (for example, to `App.js`).\n\nNow you can run `npm run flow` (or `yarn flow`) to check the files for type errors.\nYou can optionally use a [plugin for your IDE or editor](https://flow.org/en/docs/editors/) for a better integrated experience.\n\nTo learn more about Flow, check out [its documentation](https://flow.org/).\n\n## Sharing and Deployment\n\nCreate React Native App does a lot of work to make app setup and development simple and straightforward, but it's very difficult to do the same for deploying to Apple's App Store or Google's Play Store without relying on a hosted service.\n\n### Publishing to Expo's React Native Community\n\nExpo provides free hosting for the JS-only apps created by CRNA, allowing you to share your app through the Expo client app. This requires registration for an Expo account.\n\nInstall the `exp` command-line tool, and run the publish command:\n\n```\n$ npm i -g exp\n$ exp publish\n```\n\n### Building an Expo \"standalone\" app\n\nYou can also use a service like [Expo's standalone builds](https://docs.expo.io/versions/latest/guides/building-standalone-apps.html) if you want to get an IPA/APK for distribution without having to build the native code yourself.\n\n### Ejecting from Create React Native App\n\nIf you want to build and deploy your app yourself, you'll need to eject from CRNA and use Xcode and Android Studio.\n\nThis is usually as simple as running `npm run eject` in your project, which will walk you through the process. Make sure to install `react-native-cli` and follow the [native code getting started guide for React Native](https://facebook.github.io/react-native/docs/getting-started.html).\n\n#### Should I Use ExpoKit?\n\nIf you have made use of Expo APIs while working on your project, then those API calls will stop working if you eject to a regular React Native project. If you want to continue using those APIs, you can eject to \"React Native + ExpoKit\" which will still allow you to build your own native code and continue using the Expo APIs. See the [ejecting guide](https://github.com/react-community/create-react-native-app/blob/master/EJECTING.md) for more details about this option.\n\n## Troubleshooting\n\n### Networking\n\nIf you're unable to load your app on your phone due to a network timeout or a refused connection, a good first step is to verify that your phone and computer are on the same network and that they can reach each other. Create React Native App needs access to ports 19000 and 19001 so ensure that your network and firewall settings allow access from your device to your computer on both of these ports.\n\nTry opening a web browser on your phone and opening the URL that the packager script prints, replacing `exp://` with `http://`. So, for example, if underneath the QR code in your terminal you see:\n\n```\nexp://192.168.0.1:19000\n```\n\nTry opening Safari or Chrome on your phone and loading\n\n```\nhttp://192.168.0.1:19000\n```\n\nand\n\n```\nhttp://192.168.0.1:19001\n```\n\nIf this works, but you're still unable to load your app by scanning the QR code, please open an issue on the [Create React Native App repository](https://github.com/react-community/create-react-native-app) with details about these steps and any other error messages you may have received.\n\nIf you're not able to load the `http` URL in your phone's web browser, try using the tethering/mobile hotspot feature on your phone (beware of data usage, though), connecting your computer to that WiFi network, and restarting the packager.\n\n### iOS Simulator won't open\n\nIf you're on a Mac, there are a few errors that users sometimes see when attempting to `npm run ios`:\n\n* \"non-zero exit code: 107\"\n* \"You may need to install Xcode\" but it is already installed\n* and others\n\nThere are a few steps you may want to take to troubleshoot these kinds of errors:\n\n1. Make sure Xcode is installed and open it to accept the license agreement if it prompts you. You can install it from the Mac App Store.\n2. Open Xcode's Preferences, the Locations tab, and make sure that the `Command Line Tools` menu option is set to something. Sometimes when the CLI tools are first installed by Homebrew this option is left blank, which can prevent Apple utilities from finding the simulator. Make sure to re-run `npm/yarn run ios` after doing so.\n3. If that doesn't work, open the Simulator, and under the app menu select `Reset Contents and Settings...`. After that has finished, quit the Simulator, and re-run `npm/yarn run ios`.\n\n### QR Code does not scan\n\nIf you're not able to scan the QR code, make sure your phone's camera is focusing correctly, and also make sure that the contrast on the two colors in your terminal is high enough. For example, WebStorm's default themes may [not have enough contrast](https://github.com/react-community/create-react-native-app/issues/49) for terminal QR codes to be scannable with the system barcode scanners that the Expo app uses.\n\nIf this causes problems for you, you may want to try changing your terminal's color theme to have more contrast, or running Create React Native App from a different terminal. You can also manually enter the URL printed by the packager script in the Expo app's search bar to load it manually.\n# pokerBuddyApp\n"
 },
 {
  "repo": "elpassion/sprint-poker",
  "language": "Elixir",
  "readme_contents": "# Sprint Poker [![Build Status](https://travis-ci.org/elpassion/sprint-poker.svg)](https://travis-ci.org/elpassion/sprint-poker) [![Code Climate](https://codeclimate.com/repos/58edf0c722fccf0268001d37/badges/66da3ec72dad0cb41e7c/gpa.svg)](https://codeclimate.com/repos/58edf0c722fccf0268001d37/feed)\n\nOnline estimation tool for Agile teams, written using [Elixir Lang], [Phoenix Framework].\n\nhttp://sprintpoker.io\n\n## Setup\n\n- Install dependencies with `mix deps.get`\n- Create database with `mix ecto.create`\n- Migrate database with `mix ecto.migrate`\n- Seed the database with `mix run priv/repo/seeds.exs`\n- Start application with `mix phoenix.server`\n- Run tests with `mix test`\n- Install one of [frontends](#frontends)\n\n## Frontends\n- [sprint-poker-inesita](https://github.com/elpassion/sprint-poker-inesita)\n- [sprint-poker-react](https://github.com/elpassion/sprint-poker-react)\n\n## Contributing\n\nWe follow the \"[fork-and-pull]\" Git workflow.\n\n1. Fork the repo on GitHub\n2. Commit changes to a branch in your fork\n3. Pull request \"upstream\" with your changes\n4. Merge changes in to \"upstream\" repo\n\nNOTE: Be sure to merge the latest from \"upstream\" before making a pull request!\n\n## License\n\nSprint Poker is released under the MIT License. See the [LICENSE] file for further details.\n\n[Elixir Lang]: http://elixir-lang.org\n[Phoenix Framework]: http://www.phoenixframework.org\n[fork-and-pull]: https://help.github.com/articles/using-pull-requests\n[LICENSE]: LICENSE\n"
 },
 {
  "repo": "sixteenstudio/poker",
  "language": "PHP",
  "readme_contents": "Poker\n=====\n\nA PHP-based Poker library capable of hand calculations, Texas Hold'em game logic and more\n\nCards and Decks\n--------------------\n\nThe poker library retains a fairly simplified class structure, providing you with a simple card class which can be swapped out for any card implementation that follows its interface, allowing you to implement your own suits and even your own description translations.\n\n```php\n$cards = [\n    new Card('Club', 1),\n    new Card('Spade', 2),\n    new Card('Club', 3),\n    new Card('Heart', 4),\n    new Card('Diamond', 5),\n];\n\n$deck = new Deck($cards);\n```\n\nA Deck is a collection of cards that provides shuffle, take card, card count functions and any other functions that might be necessary when building a poker game.\n\nA standard 52 card deck can be instantiated using the static newStandardDeck method\n\n```php\n$52CardDeck = Deck::newStandardDeck();\n```\n\nHands and HandStrengths\n--------------------------------\n\nHands are made from a particular number of cards, of which the limit depends on the type of game. The default Hand class sets a limit of **2 cards**, as this is the standard Texas Hold'em hand card count.\n\n```php\n$hand = new Hand([$deck->takeCard(), $deck->takeCard()]);\n```\n\nIf an invalid hand is made (i.e. more than 2 cards are added to the hand), an **Sixteenstudio\\Poker\\InvalidHandException** will be thrown.\n\nA hand is not to be confused with a hand strength, which is where the strongest hand dependant on a player's hand and any community cards is calculated. This class is currently still under development.\n\nHandStrength instances will be useful because they can calculate, using any provided playable cards, what the strongest hand is that can be made, using only a small amount of method calls.\n\nIt will also allow a comparison between other HandStrength classes, which allows a Game class to calculate who the winning player is in any given situation.\n\nGame\n-------\n\nThe Game class, which is currently under development, is an abstract class which will provide a framework for card based games (that means not only Poker!) that can be re-used for any number of games.\n\nIt will hold player information, game states and essentially the backend gameplay logic required to run a game server.\n\nAn Laravel 4.2 based application built using Socketier, MongoDB and this Poker library will be available soon, which will be an example of how an online poker room solution can be achieved using PHP.\n\nExample\n-------\n\nThe environment application will be found in the sixteenstudio/poker-environment repository. This provides a vagrant-based environment built on Laravel 4.2 to fully test out the features of the poker library and the texas hold'em functionality."
 },
 {
  "repo": "russ/openpoker",
  "language": "Erlang",
  "readme_contents": "OpenPoker is released under a Creative Commons Non-Commercial License.\n\nPlease visit http://wagerlabs.com for more information.\n\n"
 },
 {
  "repo": "ivegner/PokerOmega",
  "language": "Python",
  "readme_contents": "## PokerOmega:\nA self-learning multi-agent poker player, a la AlphaGo. It learns but doesn't work too hot, probably because of insufficient training time/resources.\n\n## Notes:\n* USE A VIRTUALENV (`virtualenvwrapper` is great). **Python 3**\n* `pip install -r requirements.txt`, and don't forget to add your required modules in there as well\n* `git push/pull` often\n* Work on your own branches, make pull requests to master\n"
 },
 {
  "repo": "duracellko/planningpoker4azure",
  "language": "C#",
  "readme_contents": "# Planning Poker 4 Azure\n\n**Live** @ [http://planningpoker.duracellko.net/](http://planningpoker.duracellko.net/)\n\n- [Overview](#Overview)\n- [How to play Planning Poker](#How-to-play-Planning-Poker)\n- [Installation](#Installation)\n- [Architecture](#Architecture)\n- [Configuration](#Configuration)\n- [Buid and test](#Buid-and-test)\n- [Solution projects](#Solution-projects)\n- [Attributions](#Attributions)\n\n## Overview\n\nPlanning Poker web application allows distributed teams to play [planning poker](https://en.wikipedia.org/wiki/Planning_poker) using just their web browser and is optimized for mobile. The application does not require any registration at all. Scrum Master simply creates a team and all other members connect to the team. Observer role is supported too. The observer can watch the game, but cannot estimate. This is ideal role for a product owner.\n\n## How to play Planning Poker\n\nThis guide assumes that you already know what planning poker is about and how to play with real cards. If you need any information about planning poker see the [wikipedia page](https://en.wikipedia.org/wiki/Planning_poker). To play planning poker using this application is very simple. For distributed team a conference call is required as this is not provided by the application.\n\n1. At first Scrum Master creates new team by entering Team name and Scrum master name.\n2. Then all team members join the team by entering the same Team name and unique member name.\n3. Optionally product owner can join the team by entering the same Team name, unique member name and checking Observer checkbox.\n4. When all participants joined the team, the team can discuss first story.\n5. After discussion Scrum Master starts the estimation.\n6. Then all members pick estimates. Optionally Scrum Master can cancel estimation when any of the members requests that.\n7. After all members picked an estimate, the estimates are shown to all participants.\n8. If concensus is found then team can discuss another story and Scrum Master can start estimation again. Otherwise team discusses their estimates and then Scrum Master starts estimation again.\n\n![Planning Poker screenshot](docs/images/Screenshot.png)\n\n## Installation\n\nRequirements:\n\n- .NET 6.0 runtime\n\nRun: `dotnet Duracellko.PlanningPoker.Web.dll`\n\n### Docker\n\nIt is also possible to install the application using Docker image from [duracellko/planningpoker](https://hub.docker.com/r/duracellko/planningpoker) repository.\n\n```\ndocker pull duracellko/planningpoker\ndocker run -p 80:8080 duracellko/planningpoker\n```\n\n## Architecture\n\nApplication is implemented using [ASP.NET Core 6.0](https://docs.microsoft.com/en-us/aspnet/core/?view=aspnetcore-6.0). Front-end is Single-Page Application implemented using [Blazor](https://dotnet.microsoft.com/apps/aspnet/web-apps/blazor). This technology allows deployment to different environments:\n\n- Locally on Windows or Linux\n- In Docker container\n- In [Azure AppService](https://azure.microsoft.com/en-us/services/app-service/)\n- or any environment supported by ASP.NET Core\n\nThe application does not have any dependencies to run in basic mode. However, there are configurable advanced features.\n\n### Blazor models\n\nBlazor supports 2 [hosting models](https://docs.microsoft.com/en-us/aspnet/core/blazor/hosting-models?view=aspnetcore-6.0): Client-side and Server-side. It is possible to simply switch between the models by configuring **UseServerSide** setting.\n\n### Teams storage\n\nBy default, when server application is restarted, all teams are lost. It is possible to specify folder to store teams data between application restarts. Team data are stored in JSON format.\n\n### Azure Service Bus\n\nThe application is state-full (it stores all teams data in memory). Therefore, it is not simple to deploy the application to a web-farm. Each server in web-farm would have different state of team. However, it is possible to setup [Azure Service Bus](https://azure.microsoft.com/en-us/services/service-bus/) to synchronize state between nodes in web-farm.\n\n## Configuration\n\nThe application can be configured using default ASP.NET Core configuration sources:\n\n- appsettings.json\n- appsettings._Environment_.json\n- Environment variables\n- Command-line arguments\n\nThe application has following configuration settings:\n\n```javascript\n{\n    \"PlanningPokerClient\": {\n        \"UseServerSide\": \"Never\" // string - Never | Always | Mobile\n    },\n    \"PlanningPoker\": {\n        \"RepositoryFolder\": \"\", // string\n        \"RepositoryTeamExpiration\": 1200, // integer - time in seconds\n        \"ClientInactivityTimeout\": 900, // integer - time in seconds\n        \"ClientInactivityCheckInterval\": 60, // integer - time in seconds\n        \"WaitForMessageTimeout\": 60, // integer - time in seconds\n\n        // Azure Service Bus configuration\n        \"ServiceBusConnectionString\": \"\", // string\n        \"ServiceBusTopic\": \"PlanningPoker\", // string\n        \"InitializationTimeout\": 60, // integer - time in seconds\n        \"InitializationMessageTimeout\": 5, // integer - time in seconds\n        \"SubscriptionMaintenanceInterval\": 300, //integer - time in seconds\n        \"SubscriptionInactivityTimeout\": 300 // integer - time in seconds\n    }\n}\n```\n\n- **UseServerSide** (default: Never) - This setting has following options:\n    - **Always** - Blazor runs in server-side and HTML is synchronized with browser using SignalR.\n    - **Never** - Blazor runs in WebAssembly on client.\n    - **Mobile** - Blazor runs on server for mobile devices and on client otherwise. Startup of Blazor can be slow on mobile devices, therefore this option fallbacks to server-side for faster start.\n- **RepositoryFolder** (default: empty) - Path to folder, where data are stored between application restarts. Path is relative to the application folder. When this setting is empty, no data are stored and all are lost on application restart.\n- **RepositoryTeamExpiration** (default: 1200) - Team is deleted after specified time with no user activity.\n- **ClientInactivityTimeout** (default: 900) - User is disconnected from the team after specified time with no connection from the user.\n- **ClientInactivityCheckInterval** (default: 60) - Time interval to run periodic job that disconnects innactive users.\n- **WaitForMessageTimeout** (default: 60) - Each client requests regularly for status updates. When there is no change in specified time, client receives response that there is no change and requests for update again. This way client notifies to keep connection is alive.\n- **ServiceBusConnectionString** (default: empty) - Connection string to Azure Service Bus used to synchronize data between servers in web-farm. For example: Endpoint=myEndpoint;SharedSecretIssuer=mySecret;SharedSecretValue=myPassword;\n- **ServiceBusTopic** (default: PlanningPoker) - Nodes uses the specified Service Bus topic for communication.\n- **InitializationTimeout** (default: 60) - Time after initialization phase is cancelled and server assumes that it is alone. This timeout should not be reached, because InitializationMessageTimeout is shorter.\n- **InitializationMessageTimeout** (default: 5) - Timeout to wait for message from another node during initialization phase. When the timeout is reached, server contacts another node or assumes that it is alone in web-farm.\n- **SubscriptionMaintenanceInterval** (default: 300) - Time interval to do periodic check, which nodes in web-farm are responding.\n- **SubscriptionInactivityTimeout** (default: 300) - Service Bus subcsriptions are deleted for nodes, which do not respond in the specified time.\n\n## Buid and test\n\nRequirements:\n\n- .NET SDK 6.0\n- Java SE Development Kit version 8 or higher (for end-2-end tests only)\n- Node.js and NPM (for end-2-end tests only)\n\nTo run build and tests simply execute PowerShell script BuildAndRun.ps1.\n\n```powershell\n.\\BuildAndRun.ps1\n```\n\nOptionally it is possible to include execution of end-2-end tests using Selenium.\n\n```powershell\n.\\BuildAndRun.ps1 -E2ETest:$true\n```\n\n### Run in Visual Studio\n\n**PlanningPokerCore.sln** solution can be normally open, built and debugged in Visual Studio 2019. Also unit tests can be executed.\n\nFor end-2-end tests (Duracellko.PlanningPoker.E2ETest) Selenium drivers need to be downloaded. Simply execute following commands:\n\n```\nnpm install\n.\\node_modules\\.bin\\selenium-standalone install\n```\n\n## Solution projects\n\nPlanningPoker solution contains following projects:\n\n* **PlanningPoker.Shared** contains common settings for all projects. This includes build configuration, static code analysis, assembly version, etc.\n* **PlanningPoker.Domain** contains domain classes of the application. This includes domain logic and entities e.g. ScrumMaster, Estimation.\n* **PlanningPoker** implements host of domain objects, JSON web service and file-system repository.\n* **PlanningPoker.Service** implements DTOs shared between server and client.\n* **PlanningPoker.Web** is host application. It starts ASP.NET Core hosting, dependency injection and loads configuration.\n* **PlanningPoker.Client** is Blazor SPA client. It containes 2 pages, Blazor components and communication with the server.\n* **PlanningPoker.Azure** contains modified host of domain objects used on Windows Azure platform. Additionally it implements communication between cloud instances using Service Bus.\n* **PlanningPoker.Domain.Test** contains unit-tests of domain classes.\n* **PlanningPoker.Test** contains unit-tests of PlanningPoker project classes.\n* **PlanningPoker.Client.Test** contains unit-tests of client application.\n* **PlanningPoker.Azure.Test** contains unit-tests of classes in PlanningPoker.Azure project.\n* **PlanningPoker.E2ETest** contains end-2-end tests of full system. Tests are implemented using Selenium and tests mostly Chrome browser and partially Firefox.\n\n## Attributions\n\nThis application including source code can be used under [MIT License](License.txt).\n\n* [Planning Poker](https://www.mountaingoatsoftware.com/agile/planning-poker/license) is a registered trademark of Mountain Goat Software, LLC.\n* [Rock, Paper, Scissors, Lizard, Spock](http://www.samkass.com/theories/RPSSL.html) is licensed under [CC BY-NC 3.0](https://creativecommons.org/licenses/by-nc/3.0/).\n* [Open Iconic](https://useiconic.com/open) is licensed under [MIT](https://opensource.org/licenses/MIT) and [OFL](https://scripts.sil.org/cms/scripts/page.php?item_id=OFL_web).\n"
 },
 {
  "repo": "therewillbecode/react-poker",
  "language": "JavaScript",
  "readme_contents": "# React-Poker\nA High Level React Library For Playing Card Animations\n\n[Click here for a demo](http://therewillbecode.github.io/react-poker)\n\n![react-poker](https://image.ibb.co/ebO3P5/poker.png)\n\n## getting started\ninstall the module inside your project root \n    \n    npm install react-poker --save\n    \nThe Deck component takes a board prop which is the array of cards that are dealt and facing up on the community board. \n\nInternally react motion is used to animate card deals when the board prop changes.\n    \n    import Deck from \"react-poker\";\n    import \"react-poker/styles.css\"\n    \n    const YourComponent = props =>\n        <Deck\n          board={[\"3s\", \"Qh\", \"As\"]} // array of cards to render on board\n          boardXoffset={375} // X axis pixel offset for dealing board\n          boardYoffset={200} // Y axis pixel offset for dealing board\n          size={200} // card height in pixels\n        />\n   \n## example\n\nThe example below includes the logic to shuffle a deck of cards.\nA new board prop is passed to the Deck component everytime a new card(s) is drawn from the deck or there is a new round.\n\n    import Deck from \"react-poker\";\n    import \"react-poker/styles.css\"\n    \n    const range = (start, count) =>\n      Array.apply(0, Array(count)).map((element, index) => {\n        return index + start;\n      });\n    \n    function shuffle(array) {\n      const copy = [];\n      let n = array.length;\n      let i;\n      // While there remain elements to shuffle\u2026\n      while (n) {\n        // Pick a remaining element\u2026\n        i = Math.floor(Math.random() * array.length);\n    \n        // If not already shuffled, move it to the new array.\n        if (i in array) {\n          copy.push(array[i]);\n          delete array[i];\n          n--;\n        }\n      }\n    \n      return copy;\n    }\n    \n    const suits = [\"d\", \"c\", \"h\", \"s\"];\n    const ranks = [\n      \"A\",\n      \"2\",\n      \"3\",\n      \"4\",\n      \"5\",\n      \"6\",\n      \"7\",\n      \"8\",\n      \"9\",\n      \"10\",\n      \"J\",\n      \"Q\",\n      \"K\"\n    ];\n    \n    const getDeck = () =>\n      shuffle(\n        ranks\n          .map(r => suits.map(s => r + s))\n          .reduce((prev, curr) => prev.concat(curr))\n      );\n    \n    class AppContainer extends Component {\n      constructor(props) {\n        super(props);\n        this.state = { board: [], deck: getDeck() };\n        this.progressDeal = this.progressDeal.bind(this);\n      }\n    \n      newRound() {\n        const { deck, board } = this.state;\n    \n        const newDeck = getDeck();\n        this.setState(Object.assign({}, { board: [], deck: newDeck }));\n      }\n    \n      dealFlop() {\n        const { deck, board } = this.state;\n        const flop = range(0, 3).map(e => deck.pop());\n    \n        this.setState(Object.assign({}, { board: flop, deck }));\n      }\n    \n      dealCard() {\n        const { deck, board } = this.state;\n        const card = deck.pop();\n\n        this.setState(Object.assign({}, { deck, board: board.concat(card) }));\n      }\n    \n      progressDeal() {\n        const { deck, board } = this.state;\n    \n        if (board.length === 0) {\n          this.dealFlop();\n          return;\n        }\n    \n        if (board.length === 5) {\n          this.newRound();\n        } else {\n          this.dealCard();\n        }\n      }\n\n      render() {\n        const { board } = this.state;\n    \n        return (\n          <div style={{ left: \"10vw\", top: \"10vh\", position: \"absolute\" }}>\n            <button\n              style={{ padding: \"1.5em\", margin: \"2em\" }}\n              onClick={this.progressDeal}\n            >\n              Deal\n            </button>\n            <Deck\n              board={[\"3s\", \"Qh\", \"As\"]}\n              boardXoffset={375} // X axis pixel offset for dealing board\n              boardYoffset={200} // Y axis pixel offset for dealing board\n              size={200} // card height in pixels\n            />\n          </div>\n        );\n      }\n    }\n\n    export default AppContainer;\n    \n"
 },
 {
  "repo": "disdain13/PokeRoadie",
  "language": "C#",
  "readme_contents": "<!-- define warning icon -->\n[1.1]: http://i.imgur.com/M4fJ65n.png (ATTENTION)\n[1.2]: http://i.imgur.com/NNcGs1n.png (BTC)\n<!-- title -->\n<img src=\"https://github.com/disdain13/PokeRoadie/blob/master/marketing//PokeRoadie_Pokemon_Bot_Logo_Small.png?raw=true\" alt=\"PokeRoadie_Pokemon_Bot_Logo_Small.png\" title=\"PokeRoadie PokemonGo Bot\"/><br/>\n<h2>Test Harness for PGO</h2>\n\n<a href=\"https://github.com/disdain13/PokeRoadie/wiki\" title=\"goto the WIKI, just do it!\">Checkout the full list of new features in our WIKI</a><br/><br/>\n\n<img src=\"https://github.com/disdain13/PokeRoadie/blob/master/marketing/PokemonGo_Bot_Screenshot_2.png?raw=true\" alt=\"PokemonGo_Bot_Screenshot_2.png\" title=\"PokeRoadie PokemonGo Bot\"><br/><br/>\n\n\n"
 },
 {
  "repo": "AvengerMoJo/TexasHoldem",
  "language": "C++",
  "readme_contents": "TexasHoldem (AvengerHoldem)\n===========================\n\nWhat is this?\n-------------\n\nThis project has multiple parts:\n\n* A TexasHoldem game engine\n* Trainer engine to train your style. \n* Learner engine to learn your play style. \n\nContributing\n------------\n\nLike to play and want to be a better player? Join add you idea into the learner and trainer. \n\n"
 },
 {
  "repo": "dolotech/Texas-Hold-em-Poker",
  "language": "Go",
  "readme_contents": "# \u5fb7\u5dde\u6251\u514b\u670d\u52a1\u5668Go\u5b9e\u73b0\n\n## \u6838\u5fc3\u7b97\u6cd5\uff1a\n```go\ntype Cards []byte\n// todo \u4e24\u5bf9\u548c\u56db\u5f20\u8d77\u811a\u724c\u7684\u5224\u5b9a\nvar StraightMask = []uint16{15872, 7936, 3968, 1984, 992, 496, 248, 124, 62, 31}\n//\u987a\u5b50\uff08Straight\uff0c\u4ea6\u79f0\u201c\u86c7\u201d\uff09\n//\u6b64\u724c\u7531\u4e94\u5f20\u987a\u5e8f\u6251\u514b\u724c\u7ec4\u6210\u3002\n//\u5e73\u624b\u724c\uff1a\u5982\u679c\u4e0d\u6b62\u4e00\u4eba\u6293\u5230\u6b64\u724c\uff0c\u5219\u4e94\u5f20\u724c\u4e2d\u70b9\u6570\u6700\u5927\u7684\u8d62\u5f97\u6b64\u5c40\uff0c\n// \u5982\u679c\u6240\u6709\u724c\u70b9\u6570\u90fd\u76f8\u540c\uff0c\u5e73\u5206\u5f69\u6c60\u3002\nfunc (this *Cards) straight() uint32 {\n\tvar handvalue uint16\n\tfor _, v := range (*this) {\n\t\tvalue := v & 0xF\n\t\tif value == 0xE {\n\t\t\thandvalue |= 1\n\t\t}\n\t\thandvalue |= (1 << (value - 1 ) )\n\t}\n\n\tfor i := uint8(0); i < 10; i++ {\n\t\tif handvalue&StraightMask[i] == StraightMask[i] {\n\t\t\treturn En(STRAIGHT, uint32(10-i+4))\n\t\t}\n\t}\n\treturn 0\n}\n\n//\u540c\u82b1\u987a\uff08Straight Flush\uff09\n//\u4e94\u5f20\u540c\u82b1\u8272\u7684\u8fde\u7eed\u724c\u3002\n//\u5e73\u624b\u724c\uff1a\u5982\u679c\u644a\u724c\u65f6\u6709\u4e24\u526f\u6216\u591a\u526f\u540c\u82b1\u987a\uff0c\u8fde\u7eed\u724c\u7684\u5934\u5f20\u724c\u5927\u7684\u83b7\u5f97\u7b79\u7801\u3002\n//\u5982\u679c\u662f\u4e24\u526f\u6216\u591a\u526f\u76f8\u540c\u7684\u8fde\u7eed\u724c\uff0c\u5e73\u5206\u7b79\u7801\u3002\nfunc (this *Cards) straightFlush() uint32 {\n\tcards := *this\n\tfor i := byte(0); i < SUITSIZE; i++ {\n\t\tvar handvalue uint16\n\t\tfor _, v := range cards {\n\t\t\tif (v >> 4) == i {\n\t\t\t\tvalue := v & 0xF\n\t\t\t\tif value == 0xE {\n\t\t\t\t\thandvalue |= 1\n\t\t\t\t}\n\t\t\t\thandvalue |= (1 << (value - 1 ) )\n\t\t\t}\n\t\t}\n\n\t\tfor i := uint8(0); i < 10; i++ {\n\t\t\tif handvalue&StraightMask[i] == StraightMask[i] {\n\t\t\t\treturn En(STRAIGHT_FLUSH, uint32(10-i+4))\n\t\t\t}\n\t\t}\n\t}\n\treturn 0\n}\n\n//\u7687\u5bb6\u540c\u82b1\u987a\uff08Royal Flush\uff09\n//\u540c\u82b1\u8272\u7684A, K, Q, J\u548c10\u3002\n//\u5e73\u624b\u724c\uff1a\u5728\u644a\u724c\u7684\u65f6\u5019\u6709\u4e24\u526f\u591a\u526f\u7687\u5bb6\u540c\u82b1\u987a\u65f6\uff0c\u5e73\u5206\u7b79\u7801\u3002\nfunc (this *Cards) royalFlush() uint32 {\n\tcards := *this\n\tfor i := byte(0); i < SUITSIZE; i++ {\n\t\tvar handvalue uint16\n\t\tfor _, v := range cards {\n\t\t\tif (v >> 4) == i {\n\t\t\t\tvalue := v & 0xF\n\t\t\t\tif value == 0xE {\n\t\t\t\t\thandvalue |= 1\n\t\t\t\t}\n\t\t\t\thandvalue |= (1 << (value - 1 ) )\n\n\t\t\t}\n\t\t}\n\n\t\tif handvalue&StraightMask[0] == StraightMask[0] {\n\t\t\treturn En(ROYAL_FLUSH, 0)\n\t\t}\n\t}\n\treturn 0\n}\n\n//\u56db\u6761\uff08Four of a Kind\uff0c\u4ea6\u79f0\u201c\u94c1\u652f\u201d\u3001\u201c\u56db\u5f20\u201d\u6216\u201c\u70b8\u5f39\u201d\uff09\n//\u5176\u4e2d\u56db\u5f20\u662f\u76f8\u540c\u70b9\u6570\u4f46\u4e0d\u540c\u82b1\u7684\u6251\u514b\u724c\uff0c\u7b2c\u4e94\u5f20\u662f\u968f\u610f\u7684\u4e00\u5f20\u724c\u3002\n//\u5e73\u624b\u724c\uff1a\u5982\u679c\u4e24\u7ec4\u6216\u8005\u66f4\u591a\u7ec4\u644a\u724c\uff0c\u5219\u56db\u5f20\u724c\u4e2d\u7684\u6700\u5927\u8005\u8d62\u5c40\uff0c\u5982\u679c\u4e00\u7ec4\u4eba\u6301\u6709\u7684\u56db\u5f20\u724c\u662f\u4e00\u6837\u7684\uff0c\n//\u90a3\u4e48\u7b2c\u4e94\u5f20\u724c\u6700\u5927\u8005\u8d62\u5c40\uff08\u8d77\u811a\u724c,2\u5f20\u8d77\u624b\u724c\u4e2d\u5c0f\u7684\u90a3\u5f20\u5c31\u53eb\u505a\u8d77\u811a\u724c\uff09\u3002\u5982\u679c\u8d77\u811a\u724c\u4e5f\u4e00\u6837\uff0c\u5e73\u5206\u5f69\u6c60\u3002\nfunc (this *Cards) four(counter *ValueCounter) uint32 {\n\tcards := *this\n\tif counter.Get(cards[len(cards)-1]) == 4 {\n\t\treturn En(FOUR, ToValue(cards))\n\t}\n\treturn 0\n}\n\n//\u6ee1\u5802\u5f69\uff08Fullhouse\uff0c\u846b\u82a6\uff0c\u4e09\u5e26\u4e8c\uff09\n//\u7531\u4e09\u5f20\u76f8\u540c\u70b9\u6570\u53ca\u4efb\u4f55\u4e24\u5f20\u5176\u4ed6\u76f8\u540c\u70b9\u6570\u7684\u6251\u514b\u724c\u7ec4\u6210\u3002\n//\u5e73\u624b\u724c\uff1a\u5982\u679c\u4e24\u7ec4\u6216\u8005\u66f4\u591a\u7ec4\u644a\u724c\uff0c\u90a3\u4e48\u4e09\u5f20\u76f8\u540c\u70b9\u6570\u4e2d\u8f83\u5927\u8005\u8d62\u5c40\u3002\n//\u5982\u679c\u4e09\u5f20\u724c\u90fd\u4e00\u6837\uff0c\u5219\u4e24\u5f20\u724c\u4e2d\u70b9\u6570\u8f83\u5927\u8005\u8d62\u5c40\uff0c\u5982\u679c\u6240\u6709\u7684\u724c\u90fd\u4e00\u6837\uff0c\u5219\u5e73\u5206\u5f69\u6c60\u3002\nfunc (this *Cards) fullFouse(counter *ValueCounter) uint32 {\n\tcards := *this\n\tlength := len(cards)\n\n\tif length >= 5 {\n\t\tif cards[length-1]&0xF == cards[length-2]&0xF &&\n\t\t\tcards[length-3]&0xF == cards[length-1]&0xF &&\n\t\t\tcards[length-4]&0xF == cards[length-5]&0xF {\n\n\t\t\treturn En(FULL_HOUSE, ToValue(cards))\n\t\t}\n\t}\n\treturn 0\n}\n\n//\u540c\u82b1\uff08Flush\uff0c\u7b80\u79f0\u201c\u82b1\u201d\uff09\n//\u6b64\u724c\u7531\u4e94\u5f20\u4e0d\u6309\u987a\u5e8f\u4f46\u76f8\u540c\u82b1\u7684\u6251\u514b\u724c\u7ec4\u6210\u3002\n//\u5e73\u624b\u724c\uff1a\u5982\u679c\u4e0d\u6b62\u4e00\u4eba\u6293\u5230\u6b64\u724c\u76f8\uff0c\u5219\u724c\u70b9\u6700\u9ad8\u7684\u4eba\u8d62\u5f97\u8be5\u5c40\uff0c\n//\u5982\u679c\u6700\u5927\u70b9\u76f8\u540c\uff0c\u5219\u7531\u7b2c\u4e8c\u3001\u7b2c\u4e09\u3001\u7b2c\u56db\u6216\u8005\u7b2c\u4e94\u5f20\u724c\u6765\u51b3\u5b9a\u80dc\u8d1f\uff0c\u5982\u679c\u6240\u6709\u7684\u724c\u90fd\u76f8\u540c\uff0c\u5e73\u5206\u5f69\u6c60\u3002\nfunc (this *Cards) flush() uint32 {\n\tcards := *this\n\tfor i := byte(0); i < SUITSIZE; i++ {\n\t\tvar count uint8\n\t\tfor _, v := range cards {\n\t\t\tif (v >> 4) == i {\n\t\t\t\tcount ++\n\t\t\t\tif count == 5 {\n\t\t\t\t\tvar handvalue uint16\n\t\t\t\t\tfor _, v1 := range cards {\n\t\t\t\t\t\tif (v1 >> 4) == i {\n\t\t\t\t\t\t\tvalue := v1 & 0xF\n\t\t\t\t\t\t\tif value == 0xE {\n\t\t\t\t\t\t\t\thandvalue |= 1\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\thandvalue |= (1 << (value - 1 ) )\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn En(FLUSH, uint32(handvalue))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\treturn 0\n}\n\n//\u4e09\u6761\uff08Three of a kind\uff0c\u4ea6\u79f0\u201c\u4e09\u5f20\u201d\uff09\n//\u7531\u4e09\u5f20\u76f8\u540c\u70b9\u6570\u548c\u4e24\u5f20\u4e0d\u540c\u70b9\u6570\u7684\u6251\u514b\u7ec4\u6210\u3002\n//\u5e73\u624b\u724c\uff1a\u5982\u679c\u4e0d\u6b62\u4e00\u4eba\u6293\u5230\u6b64\u724c\uff0c\u5219\u4e09\u5f20\u724c\u4e2d\u6700\u5927\u70b9\u6570\u8005\u8d62\u5c40\uff0c\n//\u5982\u679c\u4e09\u5f20\u724c\u90fd\u76f8\u540c\uff0c\u6bd4\u8f83\u7b2c\u56db\u5f20\u724c\uff0c\u5fc5\u8981\u65f6\u6bd4\u8f83\u7b2c\u4e94\u5f20\uff0c\u70b9\u6570\u5927\u7684\u4eba\u8d62\u5c40\u3002\u5982\u679c\u6240\u6709\u724c\u90fd\u76f8\u540c\uff0c\u5219\u5e73\u5206\u5f69\u6c60\u3002\nfunc (this *Cards) three(counter *ValueCounter) uint32 {\n\tcards := *this\n\tif counter.Get(cards[len(cards)-1]) == 3 {\n\t\treturn En(THREE, ToValue(cards))\n\t}\n\treturn 0\n}\n\n//\u4e24\u5bf9\uff08Two Pairs\uff09\n//\u4e24\u5bf9\u70b9\u6570\u76f8\u540c\u4f46\u4e24\u4e24\u4e0d\u540c\u7684\u6251\u514b\u548c\u968f\u610f\u7684\u4e00\u5f20\u724c\u7ec4\u6210\u3002\n//\u5e73\u624b\u724c\uff1a\u5982\u679c\u4e0d\u6b62\u4e00\u4eba\u6293\u5927\u6b64\u724c\u76f8\uff0c\u724c\u70b9\u6bd4\u8f83\u5927\u7684\u4eba\u8d62\uff0c\u5982\u679c\u6bd4\u8f83\u5927\u7684\u724c\u70b9\u76f8\u540c\uff0c\u90a3\u4e48\u8f83\u5c0f\u724c\u70b9\u4e2d\u7684\u8f83\u5927\u8005\u8d62\uff0c\n//\u5982\u679c\u4e24\u5bf9\u724c\u70b9\u76f8\u540c\uff0c\u90a3\u4e48\u7b2c\u4e94\u5f20\u724c\u70b9\u8f83\u5927\u8005\u8d62\uff08\u8d77\u811a\u724c,2\u5f20\u8d77\u624b\u724c\u4e2d\u5c0f\u7684\u90a3\u5f20\u5c31\u53eb\u505a\u8d77\u811a\u724c\uff09\u3002\u5982\u679c\u8d77\u811a\u724c\u4e5f\u76f8\u540c\uff0c\u5219\u5e73\u5206\u5f69\u6c60\u3002\nfunc (this *Cards) twoPair() uint32 {\n\tcards := *this\n\tlength := len(cards)\n\tif length >= 4 {\n\t\tif cards[length-1]&0xF == cards[length-2]&0xF &&\n\t\t\tcards[length-3]&0xF == cards[length-4]&0xF {\n\t\t\treturn En(TWO_PAIR, ToValue(cards))\n\t\t}\n\t}\n\treturn 0\n}\n\n//\u4e00\u5bf9\uff08One Pair\uff09\n//\u7531\u4e24\u5f20\u76f8\u540c\u70b9\u6570\u7684\u6251\u514b\u724c\u548c\u53e6\u4e09\u5f20\u968f\u610f\u7684\u724c\u7ec4\u6210\u3002\n//\u5e73\u624b\u724c\uff1a\u5982\u679c\u4e0d\u6b62\u4e00\u4eba\u6293\u5230\u6b64\u724c\uff0c\u5219\u4e24\u5f20\u724c\u4e2d\u70b9\u6570\u5927\u7684\u8d62\uff0c\u5982\u679c\u5bf9\u724c\u90fd\u4e00\u6837\uff0c\u5219\u6bd4\u8f83\u53e6\u5916\u4e09\u5f20\u724c\u4e2d\u5927\u7684\u8d62\uff0c\n//\u5982\u679c\u53e6\u5916\u4e09\u5f20\u724c\u4e2d\u8f83\u5927\u7684\u4e5f\u4e00\u6837\u5219\u6bd4\u8f83\u7b2c\u4e8c\u5927\u7684\u548c\u7b2c\u4e09\u5927\u7684\uff0c\u5982\u679c\u6240\u6709\u7684\u724c\u90fd\u4e00\u6837\uff0c\u5219\u5e73\u5206\u5f69\u6c60\u3002\nfunc (this *Cards) onePair() uint32 {\n\tcards := *this\n\tlength := len(cards)\n\tif length >= 2 {\n\t\tif cards[length-1]&0xF == cards[length-2]&0xF {\n\t\t\treturn En(ONE_PAIR, ToValue(cards))\n\t\t}\n\t}\n\treturn 0\n}\n\nfunc ToValue(cards []byte) uint32 {\n\tvar res uint32\n\tfor i := len(cards) - 1; i >= 0; i-- {\n\t\tres *= 10\n\t\tres += uint32(cards[i] & 0xF)\n\t}\n\treturn res\n}\n\nfunc De(v uint32) (uint8, uint32) {\n\treturn uint8(v >> 24), v & 0xFFFFFF\n}\n\nfunc En(t uint8, v uint32) uint32 {\n\tv1 := v | ( uint32(t) << 24)\n\treturn v1\n}\n```\n"
 },
 {
  "repo": "pokermania/pokereval",
  "language": "C",
  "readme_contents": "$Id$\n\nIntroduction\n============\n\npoker-eval is a C library to evaluate poker hands. The result of the\nevalution for a given hand is a number. The general idea is that if\nthe evalution of your hand is lower than the evaluation of the hand of\nyour opponent, you lose. Many poker variants are supported (draw,\nholdem, omaha, etc.) and more can be added.  poker-eval is designed\nfor speed so that it can be used within poker simulation software\nusing either exhaustive exploration or Monte Carlo.\n\nThe poker-eval library is Free Software and is released under the\nterms of the GNU General Public License. See the COPYING file in the\nroot directory of the distribution.\n\nCompiling -- GNU/Linux and Unix systems\n=========================\nThis library uses the GNU Autoconf self-configuration mechanism, so\ncompiling on a GNU/Linux and Unix system should be fairly simple.  \n\nTo build both the C library and the examples:\n  autoreconf --install\n  ./configure\n  make \n\nTo build and run the tests:\n\n  AUTOMAKE=automake-1.9 ACLOCAL=aclocal-1.9 autoreconf --install\n  ./configure\n  make check\n\nThe \"make check\" command will run several test programs to ensure that\neverything works correctly.  On slow machines, the tests may take\nseveral minutes.\n\nTo install the library and the headers (by default they will\ninstall in /usr/local/lib and /usr/local/include/poker-eval \nrespectively):\n\n   ./configure\n   make install\n\nTo run the examples:\n\n   cd examples\n   read the usage at the beginning of the source file\n   and run the program accordingly\n\nCompiling -- Windows, using cygwin \n==================================\nIf you have the cygwin package installed, you can build the library as\nper the directions above for GNU/Linux and Unix systems.\n\nCompiling -- DOS / Windows (May be obsolete, please send updates\nto cpinson@freesheep.org)\n================================================================\nThe library can also be compiled using Microsoft Visual C++.  In each\ndirectory, special DOS makefiles are provided, called makefile.dos.\nTo compile the library, make sure that the VC tools are on the path\nand that the LIB variable is properly set (VC provides a batch file,\nvcvars32.bat, to set this up), and enter the following commands:\n  cd lib\n  nmake -f makefile.dos\n  cd ..\\examples\n  nmake -f makefile.dos\n  cd ..\\tests\n  nmake -f makefile.dos\n\nYou can't use make to run the test programs under Windows as you can\non Unix, but you can run them (digtest5 and digtest7, in the tests\ndirectory) and compare the output value with the value in the make\nfile (makefile.dos in the tests directory) to ensure that the right\nthing happened.  \n\nOnce the library is built, you can use the resulting library\n(libpoker.lib) in other Visual C++ projects.  Make sure to put the\ninclude directory of the pokersource library package in the include\npath for projects that will be using the library.  \n\nDownload\n========\nThe library may be obtained from the pokersource project at\nhttp://gna.org/projects/pokersource/\n\n\nReporting bugs, suggesting improvements\n=======================================\nAs of August 2005, the poker-eval library is maintained by\nLoic Dachary.  Bug reports, suggestions for improvements, or candidates\nfor inclusion should be sent to\n     Loic Dachary <loic@dachary.org>\n     Tim Showalter <tjs@psaux.com> \n     Michael Maurer <mjmaurer@yahoo.com>\n\nYou can also check out the pokersource user group at\nhttp://groups.yahoo.com/group/pokersource or the mailing list\nat https://mail.gna.org/listinfo/pokersource-users/\n"
 },
 {
  "repo": "yongkangchen/poker-client",
  "language": "C#",
  "readme_contents": "# poker-client\n\nIt has been tested on Windows 7, Mac OS X with Unity3D 5.4.1f1\n\nPlease buy NGUI 3.10.0 and import NGUI3.10.0.unitypackage\n\nhttp://linkcloud.github.io/\n\n# Run\n`Assets/Runtime/main.unity`\n\n# Config\n`Assets/game_zzmj/Lua/game_cfg.lua`\n\n```lua\nDEV_HOST = \"127.0.0.1\", --\u670d\u52a1\u5668\u5730\u5740\nDEV_PORT = 9878, --\u670d\u52a1\u5668\u7aef\u53e3\n```\n\n# \u5546\u4e1a\u7248-\u5b89\u5353\u624b\u673a\u5305\u6d4b\u8bd5\n\nhttp://cdn.u3d.biucloud.com/com.biucloud.game.preview.apk\n\n ![image](https://github.com/yongkangchen/poker-client/blob/master/android.png?raw=true)\n\n# \u5f00\u53d1\u89c4\u8303\n1\u3001\u4e0b\u8f7d\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u5de5\u7a0b\uff1a \n\nhttps://github.com/yongkangchen/poker-client\n\nhttps://github.com/yongkangchen/poker-server\n\n2\u3001PC\u6253\u5305 \n\n\u52fe\u9009Development Build\u4e0d\u4f1a\u6253\u5305lua\u811a\u672c\uff0c\u9700\u8981\u653e\u5230\u548cAssets\u76ee\u5f55\u540c\u7ea7\u4e0b\u8fd0\u884c\uff0c\u5171\u4eab\u7f16\u8f91\u5668\u91cc\u7684\u811a\u672c \n\n\u4e0d\u52fe\u9009\u4f1a\u6253\u5305lua\u811a\u672c\uff0c\u53ef\u4ee5\u53d1\u7ed9\u6d4b\u8bd5 \n\n\n3\u3001Unity\u91cc\u7684main\u573a\u666f\u914d\u7f6eMain Folder \n\n4\u3001\u653e\u7f6e\u8def\u5f84\uff1a\n\n\u811a\u672c\uff1aAssets/game_${GAME_NAME}/Lua/${GAME_NAME} \n\nUI\u9884\u8bbe\uff1aAssets/game_${GAME_NAME}/Resources/prefabs/${GAME_NAME} \n\n\u58f0\u97f3\uff1aAssets/game_${GAME_NAME}/Resources/sound/${GAME_NAME} \n\n\u56fe\u96c6\uff1aAssets/game_${GAME_NAME}/Resources/altas/${GAME_NAME} \n\n5\u3001\u7b2c\u4e00\u6b21\u542f\u52a8untiy\u5de5\u7a0b\uff1a\u63d0\u793a\u662f\u5426\u8981\u751f\u6210slua\uff0c\u9009\u62e9\u4e0d\u751f\u6210 \n\n6\u3001\u4e0d\u80fd\u5199C#\u4ee3\u7801\uff0c\u56e0\u4e3a\u4e0d\u80fd\u70ed\u66f4\u65b0 \n\n7\u3001lua\u7981\u6b62\u5199\u5168\u5c40\u53d8\u91cf \n\n8\u3001\u5ba2\u6237\u7aef\u7684Assets/Runtime\u548cAssets/Simple\u5c3d\u91cf\u4e0d\u4fee\u6539 \n\n9\u3001UILable\u4e0d\u8981\u4f7f\u7528Unity\u9ed8\u8ba4\u7684\u5b57\u4f53\uff0c\u8981\u7528NGUI\u7684\u5b57\u4f53\uff0c\u5426\u5219\u4f1a\u5bfc\u81f4\u6253\u5305\u5931\u8d25\n\n10\u3001\u8bf7\u786e\u4fdd`Assets/Runtime/Lua/data/msg.lua`\u548c`Assets/game_zzmj/Lua/game_msg.lua`\u4e24\u4e2a\u6d88\u606f\u6587\u4ef6\u5185\u7684\u952e\u503c\u5bf9\u4e0d\u8981\u91cd\u590d\uff0c\u5426\u5219\u4f1a\u62a5\u9519\uff1a`!!! duplicate val in game_msg` \u6216\u8005`!!! duplicate key in game_msg`\n\n11\u3001\u622a\u5c4f\u5fae\u4fe1\u5206\u4eab\u51fd\u6570\uff1a\n```\nShareScreenShot(type, tbl)\ntype\u4e3anil\u6216\u80050\u8868\u793a\u5206\u4eab\u7ed9\u597d\u53cb\uff0c1\u8868\u793a\u5206\u4eab\u5230\u670b\u53cb\u5708\n\ntbl\u662f\u6570\u7ec4\uff0c\u6bcf\u4e2a\u5143\u7d20\u662f\u4e00\u4e2agameObject\uff0c\u4f1a\u5728\u622a\u5c4f\u524d\u5c06tbl\u91cc\u7684\u6240\u6709gameObject\u9690\u85cf\u6389\uff0c\u622a\u5c4f\u540e\u4f1a\u5c06tbl\u6240\u6709\u7684gameObject\u663e\u793a\u51fa\u6765\u3002\n```\n\n12\u3001\u5927\u5385\u5185\u7684\u6388\u6743\u5f00\u623f\u529f\u80fd\u914d\u7f6e\uff1a\n`game_cfg.lua\u91cc\u6dfb\u52a0\uff1aACCREDIT = true, -- \u6388\u6743\u5f00\u623f`\n\n13\u3001\u5206\u4eabapp\u6807\u9898\u8bbe\u7f6e\uff1a`game_cfg.lua\u91cc\u6dfb\u52a0\uff1aPRODUCT_NAME = \"xx\u68cb\u724c\",` \n\n14\u3001\u5f00\u623f\u6a21\u5f0f\u9884\u8bbe\u89c4\u8303\uff1a\n\u770b\u4f8b\u5b50\uff1aselect.prefab\u9884\u8bbe\u91cc\u6709zz\u7684\u5b50\u7269\u4f53\uff0c\u4e14UIToggle\u7684group\u4e3a100\u3002\u90a3\u4e48\u300a\u571f\u8c6a\u623f\u300bUISavedOption\u7684\u503c\u4e3azz_opentype1, \u300aAA\u5f00\u623f\u300bzz_opentype2\n\n15\u3001\u623f\u95f4\u5185\u89c4\u5219\u663e\u793a\uff0c\u901a\u7528\u662f\u81ea\u52a8\u8bfb\u53d6\u521b\u5efa\u754c\u9762create.prefab\u7684UISavedOption\u7684\u503c\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u503c\u6062\u590d\u5230\u623f\u95f4\u91cc\u7684\u89c4\u5219\u754c\u9762\u91cc\u7684\u3002\n\n16\u3001\u521b\u5efa\u754c\u9762\u62c6\u5206\uff1a\n\n ![image](https://github.com/yongkangchen/poker-client/blob/master/create.jpg?raw=true)\n"
 },
 {
  "repo": "bubuntux/poker-engine",
  "language": "Java",
  "readme_contents": "Java Poker Engine\n===================\n\n\nIntroduction\n------------\n\nThis project has been created as a platform to experiment with a Texas Hold'em poker game in Java.\n\nIts primary goal is to offer a clean, open source Texas Hold'em poker engine in Java. The game\nengine strives to follow the famous Robert's Rules of Poker as close as possible. In order to test\nthe game engine, the project also offers a Swing GUI and bots.\n\nThis project is provided under the Apache License 2.0.\n\n\nStatus [![Build Status](https://travis-ci.org/bubuntux/poker-engine.png?branch=master)](https://travis-ci.org/bubuntux/poker-engine)\n------\n\nThe current implementation support the Fixed-Limit and No-Limit variants of the game with a Swing\nGUI, with the human player playing against 3 bots.\n\nUsage\n-----\n\n```\n<repositories>\n  <repository>\n     <id>bubuntux-repo</id>\n     <url>https://raw.github.com/bubuntux/mvn/repo/</url>\n  </repository>\n</repositories>\n```\n```\n<dependency>\n    <groupId>org.dsaw</groupId>\n    <artifactId>poker-engine</artifactId>\n    <version>1.0-SNAPSHOT</version>\n</dependency>\n```\nTODO....\n\nBuilding and running\n--------------------\n\nThis Java project has a Maven structure. Build the project with \"mvn clean install\" and find the\nbinary in the 'target' directory. Run the game with \"java -jar texasholdem.jar\".\n\nOrigin\n------\n\nThis project is fork of [texasholdem-java](https://code.google.com/p/texasholdem-java/) by Oscar Stigter\n"
 },
 {
  "repo": "KanishkT123/PokerBot",
  "language": "Python",
  "readme_contents": "# PokerBot\nA RNN PokerBot implementing DeepStack strategies\n"
 },
 {
  "repo": "aliang/pokerhand-eval",
  "language": "Python",
  "readme_contents": "Poker Hand Evaluator\n====================\n\nIn pure python\n\n27 January 2011, Alvin Liang\n\nIntroduction\n------------\n\nThis is a pure python library to calculate the rank of the best poker\nhand out of 5, 6, or 7 cards. It does not run the board for you, or\ncalculate winning percentage, EV, or anything like that. But if you give\nit two hands and the same board, you will be able to tell which hand\nhas a better chance of winning a showdown against unknown cards.\n\nIt is nowhere near as fast as pypoker-eval, but it works if you can't\nuse C for some reason (the early stages of the first MIT pokerbot\ncompetition come to mind). The core algorithm is slower, and you\nobviously don't have the speed of C.\n\nQuick Start\n-----------\n\n.. code:: python\n\n    from pokereval.card import Card\n    from pokereval.hand_evaluator import HandEvaluator\n\n    hole = [Card(2, 1), Card(2, 2)]\n    board = []\n    score = HandEvaluator.evaluate_hand(hole, board)\n\nRank is 2-14 representing 2-A, while suit is 1-4 representing\nspades, hearts, diamonds, clubs.\n\nThe Card constructor accepts two arguments, rank, and suit.\n\n.. code:: python\n\n    aceOfSpades = Card(14, 1)\n    twoOfDiamonds = Card(2, 3)\n\nAlgorithm\n---------\n\nThe algorithm for 5 cards is just a port of the algorithm that used to\nbe at the following URL. (I purposely broke the link because it now hosts\na malware site.)\nhttx://wwx.suffecool.net/poker/evaluator.html\n\nI came up with the 6 and 7 card evaluators myself, using a very similar\ncard representation and applying some of the same ideas with prime\nnumbers. The idea was to strike a balance between lookup table size and\nspeed.\n\nAlso, I haven't included the code I used to generate the lookup tables,\nbut you should be able to do that with a simpler, slower algorithm.\nMaybe I'll add that later as well.\n\nThere is also a two-card ranking/percentile algorithm that is unrelated\nto the rest and may get cleaned up later. We used it at one point for\nsome pre-flop evaluation. Credit to Zach Wissner-Gross for developing\nthis.\n\nDocumentation is sparse at the moment, sorry about that, and obviously I\ndid not really bother to package it or clean it up. I may or may not\nwork on this in the future. Basically, I made it, so why not release it?\n\nContributors\n------------\n\n-  Me! Go me!\n-  Zach Wissner-Gross (2-card algorithm)\n-  arslr (Fixes for other Python versions)\n-  Jim Kelly (Help with packaging, additional documentation)\n-  hwmrocker (Improvements to Card constructor, Python 3 compatibility)\n-  radekj (Tests, Python 3 compatibility)\n"
 },
 {
  "repo": "pokermania/pokernetwork",
  "language": "Python",
  "readme_contents": "Poker Network\n=============\n\n\nWhat is it ?\n------------\n\npoker-network includes a poker server, a client library, an abstract user\ninterface library and a client based on it.\n\nThe server deals the cards and checks the user actions using a poker game engine\n(poker-engine). It listens on a TCP/IP port and understands a poker-network\nspecific protocol. The persistent informations (accounts, hand history etc.) are\nstored in a MySQL database. The server was designed and tested to gracefully\nhandle 1000 simultaneous players on a single machine also running the MySQL\nserver.\n\nThe client library implements the poker-network protocol for the client. It runs\na poker-engine identical to the one used by the server and uses it to simplify\nthe implementation of a client. For instance it creates an event indicating that\nthe player lost position although the server does not send such a packet. A\nsimple minded bot is provided as an example usage of the client library.\n\nThe abstract user interface library provides a framework based on the client\nlibrary and suited to implement a user friendly client. A display is fed with\nevents such as give seat S to player P or get amount A from side pot P to player\nP so that the rendering part of the user interface does not need to maintain\ncontextual game information. A toolkit is fed with high level interaction actions\nsuch as ask login and password or display the following holdem tables. An\nanimation module is fed with events that can trigger animations or sounds such\nas player P timeouted or player P wins the pot.\n\n\nDevelopment status : Production [![Build Status](https://travis-ci.org/pokermania/pokernetwork.png)](https://travis-ci.org/pokermania/pokernetwork)\n-------------------------------\n\n* Features may still be added\n* The protocol is rarely changed (backwards compatible if possible)\n* The classes API is not stable\n\nDownload, feedback and bug reports\n\nhttp://github.com/pokermania/pokernetwork/\n\n\nInstallation\n------------\n\n> python setup.py configure -s test.example=example\n\nwill set config.json['test']['example'] to example\n\n> python setup.py configure -b\n\nwill build the .in files\n\nIf this is your first installation, you need to fill the MySQL root user name\nand password in ${pkgsysconfdir}/poker.server.xml. It will be used to create the\npoker database and user.\n\nRequirements\n------------\n\n* python 2.6, 2.7\n* twisted >= 11.1\n* pokerdistutils\n* pokerpackets\n* pokerengine\n* reflogging\n* MySQL-python\n* simplejson\n* python-memcached\n* libxml2\n* libxslt\n\nLicense\n-------\n\nSee file, LICENSE, in this directory, for full information about the\nlicensing of this software.\n"
 },
 {
  "repo": "mdp/MachinePoker",
  "language": "CoffeeScript",
  "readme_contents": "[![Build Status](https://secure.travis-ci.org/mdp/MachinePoker.png)](http://travis-ci.org/mdp/MachinePoker)\n\n![Machine\nPoker](https://s3.amazonaws.com/img.mdp.im/MachinePokerLogo.png)\n# Machine Poker\n\nMachine Poker is a libray which allows you go build poker bots\nand have them compete against each other in tournaments.\n\nCurrently this supports bots written in Javascript running locally,\nor bots that play remotely via HTTP and conform to the MachinePoker API\n\n## Getting started\n\n### Requirements\n\n- NodeJS >= 0.10.x\n- A basic understanding of javascript\n\n#### Dependencies\n\n- [Hoyle](https://github.com/mdp/hoyle) - Poker hand library\n- [Binions](https://github.com/mdp/binions) - Poker table library\n- Request\n- Async\n- Optimist\n\n### Installation\n\n#### Via NPM\n\n    npm install machine-poker\n\n#### Local\n\n    git clone git://github.com/mdp/MachinePoker.git\n    cd MachinePoker\n    npm install\n\n### Build your bot\n\nCheck [this guide on the wiki](https://github.com/mdp/MachinePoker/wiki) to start building your own bot\n\n### Cofiguring a new game\n\nNew matches are built using the Machine Poker API\n\n    var MachinePoker = require('machine-poker');\n        , LocalSeat = MachinePoker.seats.JsLocal\n        , RemoteSeat = MachinePoker.seats.Remote\n        , CallBot = require('./examples/bots/callBot')\n        , RandBot = require('./examples/bots/randBot')\n        , FoldBot = require('./examples/bots/foldBot')\n        , narrator = MachinePoker.observers.narrator\n        , fileLogger = MachinePoker.observers.fileLogger('./examples/results.json');\n\n    var table = MachinePoker.create({\n      maxRounds: 100\n    });\n\n    // Source be found at: https://github.com/mdp/RandBot\n    var remotePlayerUrl = \"http://randbot.herokuapp.com/randBot\";\n\n    var remotePlayer = RemoteSeat.create(remotePlayerUrl);\n    remotePlayer.on('ready', function () {\n      var players = [\n        remotePlayer\n        , LocalSeat.create(CallBot)\n        , LocalSeat.create(FoldBot)\n        , LocalSeat.create(RandBot)\n        , LocalSeat.create(RandBot)\n      ];\n      table.addPlayers(players);\n      table.on('tournamentClosed', function () { process.exit() } );\n      table.start();\n    });\n\n    // Add some observers\n    table.addObserver(narrator);\n    table.addObserver(fileLogger);\n\n### Updating the repo\n\nThe sample bots will evolve over the coming weeks in order to give you\nsome better opponents. You can just update the repo to keep up to date.\n\n    git pull origin master\n\n### Todo\n\n- Fix wiki\n\n"
 },
 {
  "repo": "atinm/poker-eval",
  "language": "C",
  "readme_contents": "This repository contains pokersource poker-eval as well as\nHand Distribution parsing code for Hold'em and Omaha.\n\npoker-eval is a C library to evaluate poker hands. The result of the\nevalution for a given hand is a number. The general idea is that if\nthe evalution of your hand is lower than the evaluation of the hand of\nyour opponent, you lose. Many poker variants are supported (draw,\nholdem, omaha, etc.) and more can be added.  poker-eval is designed\nfor speed so that it can be used within poker simulation software\nusing either exhaustive exploration or Monte Carlo.\n\nThe poker-eval library is Free Software and is released under the\nterms of the GNU General Public License. See the COPYING file in the\nroot directory of the distribution.\nYou can also check out the pokersource user group at\nhttp://groups.yahoo.com/group/pokersource or the mailing list\nat https://mail.gna.org/listinfo/pokersource-users/\n\nThere are two new functions added for doing the 2+2 Evaluator instead\nof the StdDeck_StdRules_EVAL_N and StdDeck_OmahaHi_EVAL_N called\nStdDeck_StdRules_EVAL_LUT_N and StdDeck_OmahaHi_EVAL_LUT_N\nand these use the 2+2 table do the evaluation instead of the standard\npokersource tables but these two cannot be intermingled with calls\nto the other evalution routines of the pokersource libray.\nStdDeck_Initialize_LUT has to be called with the HandRank.dat file\ndescriptor (Note: descriptor is used instead of the filepath or FILE*\nso that it is easier to call the function from Java JNI using the\nFileDescriptor that is used when using the file within an Android\nresource. The interface can be changed to filepath or FILE* easily).\n\nHand parsing code is added to the handdist subdir.\n\nThe Hold'em Hand distribution parsing code is from James Devlin with\nminor bug fixes.\n\nOmaha Hand Distrbution parsing code is original by Atin Malaviya using the\nsame interface as James' Hold'em code so make it easy for one program to call\neither kind of parser, albeit supporting different syntax for Holdem and Omaha.\nThe Holdem syntax is the commonly used PokerStove syntax but the input text\nsyntax is different for Omaha with syntax similar to the Omaha Equilab syntax\nwith minor changes.\n"
 },
 {
  "repo": "ashelly/ACE_eval",
  "language": "C",
  "readme_contents": "ACE_eval\n========\n\n\n**ACE Card Evaluator**\n\n*(or maybe AShelly's Card Evaluator)*\n\n\n\n\n### What's this? \nIt is indeed Yet Another **Poker Evaluator**. Specifically it is a **7-card hand evaluator** implemented in **under 600 bytes** of C source code.  It is not the tiniest evaluator, and certainly not the fastest, but the goal is to make it among the fastest tiny ones, or maybe the tiniest fast one.  \n\n### How To Use It?.\nIn 4 simple steps:\n\n1. Initialize the deck with 52 calls to `Card ACE_makecard(int n);` \n\tThis creates the internal card representation\n2. Create an empty hands with `Card hand[ACEHAND]={0};`\n3. Deal 7 cards to the hand with 7 calls to `void ACE_addcard(Card* hand, Card card);`\n4. Find the hand value with `V = ACE_evaluate(Card* hand);`\n\n- What is the hand value? \n\t  A 32-bit value with the following layout:  \n\t  `RRRR..AKQJT98765432akqjt98765432`\n          4-bit Rank, 2 spares, 13 Value Card bits, 13 Kicker bits.\n\nIt is arranged so that \n\n*  If V(a) > V(b) then hand a beats hand b.  Equal hands have equal values.\n*  You can quickly extract both the rank and the cards that make up the hand.\n\nRanks:\n\n    0:\"High Card\"\n    1:\"One Pair\n    2\"\"Two Pair\",\n    3:\"Three of a Kind\",\n    4:\"Straight\",\n    5:\"Flush\",\n    6:\"Full House\",\n    7:\"Four of a Kind\",\n    8:\"unused\",\n    9:\"Straight Flush\"  \n    (There is no rank for \"Royal Flush\", since that's just a straight flush with the ace bit set.)\n\n[`ace_decode.c`](ace_decode.c) contains example source to turn it back into a human-readable result\n\n### What makes it different?\n  It's very small, and fairly fast.\n\n  It started out as a fairly simple evaluator in Ruby, but morphed into C at some point.  I came up with a reasonably efficient card-encoding scheme, and was happy with the results.  But then, like so many before me, I came upon the [\"The Great Poker Hand Evaluator Roundup\"](http://www.codingthewheel.com/archives/poker-hand-evaluator-roundup/) on Coding the Wheel, and saw its description of the [Two-plus-Two evaluator](http://archives1.twoplustwo.com/showflat.php?Cat=0&Number=8513906&page=0&fpart=1&vc=1).  So my quest for a super-fast evaluator was over before it really got started.   But I was bothered by the 123MB lookup table need by two-plus-two, so I changed my focus to writing a fast but tiny evaluator instead.\n\nEventually I turned it into a [StackOverflow code-golf entry](http://stackoverflow.com/a/3392025/10396). I recently dug it up and started making some tweaks. In it's tiniest form the evaluator function by itself is now **577** bytes of source code ([`ace_eval_golf.c`](ace_eval_golf.c)).\n\nThere are several supporting files that make it into an actual program:\n\nA) The smallest useful example is [`ace_microeval.c`](ace_microeval.c), which adds code to support human-readable string input, and brings the total size to **737** bytes. \n\nCompiling on linux with `gcc -s -Os ace_microeval.c` creates a 6Kb executable, which you can run with:\n\n    >  echo 3C 4C 5C 6H 8D 3D 8H | ./a.out\n     20084010\n    >  echo 3C 4C 5C 6H 8D 3D 8H | ./a.out | ./ace_decode\n     2 Pair, Eights and Threes with a Six\n\n\nB) The code for the original StackOverflow challenge is down to **894** bytes.  This takes a list of 9 cards representing a 2-player game, and returns win/lose/draw statistics. ([`so_handcomp.c`](so_handcomp.c))\n\nC) You can verify the results with [`accuracy_test.c`](accuracy_test.c) which runs through all possible 7 card hands.\n\nD) Test the speed with [`speed_test.c`](speed_test.c). \n   `ace_eval_golf.c` clocks in at 23.5 Million hands /second.\n   See [OPTIMIZATION.md](OPTIMIZATION.md) for versions that triple the speed. \n   Fastest so far: [`ace_eval_decompress.c`](ace_eval_best.c) at **72Mhps**.\n\nE) [`ace_golf_5.c`](ace_golf_5.c) is a version which only handles 5 card hands, reducing the size down to **424** characters.   (Plus 160 for the input handling)\n\n### So how does it work?\nCards are stored in a 32 bit word which has the following (implied) structure:\n\n````\n    struct card{\n       unsigned num_A:2;\n       unsigned num_K:2;\n       unsigned num_Q:2;\n       //....\n       unsigned num_2:2;\n       unsigned spare:2;\n       unsigned spade:1;\n       unsigned heart:1;\n       unsigned diamond:1;\n       unsigned club:1;\n       };\n````\nor  `0a0k0q0j0t09080706050403020..SHDC`\n\nA hand is 5 32 bit words, one for each suit, and one which has the hands or'd together, leaving a bit set each card value present.\n\nHands based on multiple cards are all detected using a single method:  Add the four suit words together.  This adds all the card counts in parallel.  However there's one hitch: 4 of a kind would result in a '4' which is binary 100, which overflows the 2 bits allowed.  The solution is simple: subtract the 5th word, which only has a 1 where there is a card. The result now has 'cardcount-1' for each value.  This means that the word only has bits set if there is a pair or better.\n\nThe hand is further classified by splitting into sets of high(odd) and low(even) bits and doing a few more tests. A 4-of-a-kind has both bits set for the same face value (4-1=3=0b11).  A 3-of-a-kind has only one odd bit set in the word: (3-1=2=0b10) A full house has one even and one odd bit set, or 2 odd bits (since 2 triples only counts as a full house). 1-pair has only 1 even bit, and 2-pair has 2 or 3.\n\nFlushes are detected by examining each of the individual suit words: since cards are added into this word, the low 6 bits contains a count, offset by the position of the indicator bit. If the count is greater than or equal to  5, we have a flush, and we will use this suit instead of the whole hand for straight detection.  \n\nStraights are indicated by having 5 set bits in a row. So shift the hand one place, and AND with itself four times, and there will only be bits left on if it is a straight.  One minor catch is that the Ace bit needs to be copied down to the '1's place for detecting 5-high straights.\n\nThat's a fairly small number of operations to get the rank of the hand.  Once the rank is determined, the final value is found by selecting the five cards that make up the hand, and separating them into rank cards and kickers, and compressiing both parts down to 13 bits.  In general the even or odd words already have the rank cards. The remaining cards are easily determined by XOR'ing those the hand. Taking the correct number of bits from there gives the kicker. \n\n\n\n\n\n\n"
 },
 {
  "repo": "michalp21/coms4995-finalproj",
  "language": "Python",
  "readme_contents": "# coms4995-finalproj\n\nFinal Project for COMS4995.\n\nOur goal was to replicate Libratus from a 2017 article published in Science titled *Superhuman AI for heads-up no-limit poker: Libratus beats top professionals*, and supplementary materials.\n\nInstead of building a poker bot for a full-sized HUNL Poker game, we scaled down to a Leduc game with 105 chips in the stack and 10-chip big and small blinds. With this we could also test against a Leduc implementation of DeepStack, a rival Poker AI from 2016, on GitHub.\n\nNOTE: This is a work in progress.\n\n## Walkthrough\n\nThis walkthrough assumes a Unix environment and Python 3.6.\n\n### Dealer\n\nPoker games are conducted through a server following the [ACPC Protocol](http://www.computerpokercompetition.org/downloads/documents/protocols/protocol.pdf).  Essentially, the **dealer** acts as the server, to which two **players** connect to play a **game**. After cloning this repo, clone [DeepStack-Leduc](https://github.com/lifrordi/DeepStack-Leduc.git) which bundles together DeepStack and an ACPC server. (Alternatively, an ACPC server without DeepStack can be found [here](https://github.com/ethansbrown/acpc/tree/master/project_acpc_server)). Run `make` in the ACPC server directory. Also clone [acpc-python-client](https://github.com/JakubPetriska/acpc-python-client), a python-wrapper for the client, and run `python setup.py install`.\n\nFirst we must run the dealer. Use appropriate parameters. Run just `./dealer` to see full usage.\n\n```\n./dealer <matchName> <gameDefFile> <#Hands> <rngSeed> <p1name> <p2name> -p 20000,20001\n```\nThe dealer will wait until two players connect.\n\nNote: The dealer and the two players must be playing the same game, as defined in the gameDefFile (and for Libratus, in various additional files). When connecting players, ensure that they agree on the game definition.\n\n### Libratus\n\nTo play Libratus, first see the following files:\n- coms4995-finalproj/ESMCCFR-LEDUC/Libratus.py - In the constructor, set the parameters for the game in self.state_controller in the constructor (stack size, blinds, blueprint file). These must match the parameters in the gameDef file.\n- DeepStack-Leduc/ACPCServer/leduc.game - (gameDef) Set the parameters according to the ACPC Game Definitions. A summary of each parameter can be found in the \"ACPC Game Definitions\" section below.\n- strategy-leduc-105-10-10.csv - This file is the blueprint: a map of infosets to strategy objects. The current game must use the same gameDef as the one the blueprint was trained on. Information on generating a new blueprint can be found in the \"Training Libratus\" section below.\n\n(TODO: config file)\n\nTo connect Libratus to the ACPC server as a player, navigate to coms4995-finalproj/ESMCCFR-LEDUC and run the following command in a separate process. Replace parameters as appropriate.\n\n```\npython libratus.py <gameDefFile> localhost 20001\n```\n\n### DeepStack\n\nTo play DeepStack, see the prerequisites section of their GitHub. In summary, install [Lua](https://www.lua.org/), [Torch](http://torch.ch/), and [luasocket](http://w3.impa.br/~diego/software/luasocket/). \n\nAll parameters, including the game definition can be set in DeepStack-Leduc/Source/Settings/arguments.lua. Be sure we are connecting to localhost on port 20000.\n\nTo connect DeepStack to the ACPC server as a player, navigate to DeepStack-Leduc/Source and run the following command in a separate process:\n\n```\nth Player/deepstack.lua\n```\n\n### Random Players and Other Bots\n\nWe can also connect other bots to the dealer. We provide the following ACPC-compatible bots:\n- allin_net.py - Always raises/calls to the maximum amount possible.\n- example_player.c - Selects a random valid action.\n\nWe implemented allin_net.py, while example_player.c came with the ACPC server bundled with DeepStack.\n\nRun either `python allin_net.py <gameDefFile> <server> <port>` or `./example_player <gameDefFile> <server> <port>`.\n\n### Output and Statistics\n\nEach player and the dealer has its own output. The dealer follows the format specified in the ACPC protocol specification. Libratus prints out the infoset, the corresponding strategy, and the available betting actions. DeepStack prints the game state and strategy.\n\nSince the dealer output contains information on both players, we provide a script to generate simple match statistics from the output in GameStatistics.py. Run like so:\n```\npython GameStatistics.py <dealer_output_file>\n```\nOutput from several test runs on Leduc with a stack of 105 and blinds of 10 chips can be shown in dealer_output directory, as well as a chart containing parsed game statistics from the same runs.\n\n## Training Libratus\n\nA large portion of Libratus is trained offline, using an algorithm called External Sampling Monte Carlo Counterfactual Regret Minimization (ESMCCFR) with regret pruning. To run your own ESMCCFR, navigate to coms4995-finalproj/ESMCCFR-LEDUC and run `python ESMCCFR.py`. Parameters such as iterations, game definitions, output file, etc can all be found in the file (TODO: options).\n\nThe outputted strategy will be loaded and used when Libratus plays against another player.\n\n## Training DeepStack\n\nA more detailed runthrough of model training for DeepStack can be found on the Tutorial found on their website. First edit Source/Settings/arguments.lua and edit the parameters as appropriate. We define game definition, # cfr iterations, data and model paths, neural network architecture, and more all in this file.\n\nThe process boils down to the following commands:\n\n```\nth DataGeneration/main_data_generation.lua\nth Training/main_train.lua\nth Tree/Tests/test_tree_strategy_filling.lua\n```\n\nFirst random game data is generated. The model trains using these data in the second command. Finally, we can calculate the exploitability with the third command.\n\nAfter training, once `params.value_net_name` is set in arguments.lua, the model will be used when DeepStack is run as a player.\n\n## ACPC Game Definitions \n\n(Taken from the ACPC repo).\n\nThe dealer takes game definition files to determine which game of poker it\nplays.  Please see the included game definitions for some examples.  The code\nfor handling game definitions is found in game.c and game.h.\n\nGame definitions can have the following fields (case is ignored):\n\n- **gamedef** - the starting tag for a game definition \n- **end gamedef** - ending tag for a game definition\n- **stack** - the stack size for each player at the start of each hand (for no-limit)\n- **blind** - the size of the blinds for each player (relative to the dealer)\n- **raisesize** - the size of raises on each round (for limit games)\n- **limit** - specifies a limit game\n- **nolimit** - specifies a no-limit game\n- **numplayers** - number of players in the game\n- **numrounds** - number of betting rounds per hand of the game\n- **firstplayer** - the player that acts first (relative to the dealer) on each round\n- **maxraises** - the maximum number of raises on each round\n- **numsuits** - the number of different suits in the deck\n- **numranks** - the number of different ranks in the deck\n- **numholecards** - the number of private cards to deal to each player\n- **numboardcards** - the number of cards revealed on each round\n\n## Further credit/attributions\n\nWe would like to thank the research teams behind DeepStack and Libratus for their excellent and groundbreaking research, as well as their thorough documentation. Also for lack of a better place to put this, we used [Deuces](https://github.com/worldveil/deuces) for hand evaluation.\n"
 },
 {
  "repo": "zekyll/OMPEval",
  "language": "C++",
  "readme_contents": "# OMPEval\n\nOMPEval is a fast C++ hand evaluator and equity calculator for Texas Holdem poker.\n\n## Hand Evaluator\n- Evaluates hands with any number of cards from 0 to 7 (with less than 5 cards any missing cards are considered the worst kicker).\n- Multiple cards are combined in Hand objects which makes the actual evaluation fast and allows caching of partial hand data.\n- Evaluator gives each hand 16-bit integer ranking, which can be used for comparing hands (bigger is better). The quotient when dividing with 4096 also gives the hand category.\n- Has relatively low memory usage (200kB lookup tables) and initialization time (~10ms).\n- Can be compiled for both 32- and 64-bit platforms but has better performance on 64bit.\n- Uses SSE2/SSE4 when available. On x64 the impact is small, but in 32-bit mode SSE2 is required for decent performance.\n\nBelow is a performance comparison with three other hand evaluators ([SKPokerEval](https://github.com/kennethshackleton/SKPokerEval), [2+2 Evaluator](https://github.com/tangentforks/TwoPlusTwoHandEvaluator) and [ACE Evaluator](https://github.com/ashelly/ACE_eval)). Benchmarks were done on Intel 3770k using a single thread. Results are in millions of evaluations per second. **Seq**: sequential evaluation performance. **Rand1**: evaluation from a pregenerated array of random hands (7 x uint8). **Rand2**: evaluation from an array of random Hand objects.\n```\n        TDMGCC5.1 64bit        TDMGCC5.1 32bit        VC2013 64bit\n        OMP  SKPE  2+2   ACE   OMP  SKPE  2+2   ACE   OMP  SKPE  2+2   ACE\nSeq:    775  223   1588  80    716  134   1122  75    691  204   1544  69\nRand1:  272  146   19    43    233  99    19    38    262  148   19    39      (Meval/s)\nRand2:  520              87    466              62    529              72\n```\n###Usage\n```c++\n#include <omp/HandEvaluator.h>\n#include <iostream>\nusing namespace omp;\nint main()\n{\n    HandEvaluator eval;\n    Hand h = Hand::empty(); // Final hand must include empty() exactly once!\n    h += Hand(51) + Hand(48) + Hand(0) + Hand(1) + Hand(2); // AdAs2s2h2c\n    std::cout << eval.evaluate(h) << std::endl; // 28684 = 7 * 4096 + 12\n}\n```\n\n## Equity Calculator\n- Supports Monte Carlo simulation and full enumeration.\n- Hand ranges can be defined using syntax similar to EquiLab.\n- Board cards and dead cards can be customized.\n- Max 6 players.\n- Uses multithreading automatically (number of threads can be chosen).\n- Allows periodic callbacks with intermediate results.\n\nIn x64 mode both Monte carlo and enumeration are roughly 2-10x faster (per thread) than the free version of Equilab (except headsup enumeration where EquiLab uses precalculated results).\n\n###Basic usage\n```c++\n#include <omp/EquityCalculator.h>\n#include <iostream>\nint main()\n{\n    omp::EquityCalculator eq;\n    eq.start({\"AK\", \"QQ\"});\n    eq.wait();\n    auto r = eq.getResults();\n    std::cout << r.equity[0] << \" \" << r.equity[1] << std::endl;\n}\n```\n###Advanced usage\n```c++\n#include <omp/EquityCalculator.h>\n#include <iostream>\nusing namespace omp;\nusing namespace std;\nint main()\n{\n    EquityCalculator eq;\n    vector<CardRange> ranges{\"QQ+,AKs,AcQc\", \"A2s+\", \"random\"};\n    uint64_t board = CardRange::getCardMask(\"2c4c5h\");\n    uint64_t dead = CardRange::getCardMask(\"Jc\");\n    double stdErrMargin = 2e-5; // stop when standard error below 0.002%\n    auto callback = [&eq](const EquityCalculator::Results& results) {\n        cout << results.equity[0] << \" \" << 100 * results.progress\n                << \" \" << 1e-6 * results.intervalSpeed << endl;\n        if (results.time > 5) // Stop after 5s\n            eq.stop();\n    };\n    double updateInterval = 0.25; // Callback called every 0.25s.\n    unsigned threads = 0; // max hardware parallelism (default)\n    eq.start(ranges, board, dead, false, stdErrMargin, callback, updateInterval, threads);\n    eq.wait();\n    auto r = eq.getResults();\n    cout << endl << r.equity[0] << \" \" << r.equity[1] << \" \" << r.equity[2] << endl;\n    cout << r.wins[0] << \" \" << r.wins[1] << \" \" << r.wins[2] << endl;\n    cout << r.hands << \" \" << r.time << \" \" << 1e-6 * r.speed << \" \" << r.stdev << endl;\n}\n```\n\n## Building\nTo build a static library (./lib/ompeval.a) on Unix systems, use `make`. To enable -msse4.1 switch, use `make SSE4=1`. Run tests with `./test`. For Windows there's currently no build files, so you will have to compile everything manually. The code has been tested with MSVC2013, TDM-GCC 5.1.0 and MinGW64 6.1, Clang 3.8.1 on Cygwin, and g++ 4.8 on Debian.\n\n## About the algorithms used\n\nThe hand evaluator was originally based on SKPokerEval, but everything was written from scratch and there are now major differences. OMPEval uses perfect hashing to reduce the size of the main lookup table from 36MB to 200kB. Card rank multipliers were adjusted so that the evaluator allows any number of cards between 0 and 7 in hand. OMPEval also uses a structure for keeping track of the hand data so that the evaluator doesn't need access to the original cards, which allows partial hand data to be cached when enumerating etc. Flush checking is also done more efficiently using bit operations.\n\nIn equity calculator the Monte carlo simulation uses a random walk algorithm that avoids the problem of having to do a full resampling of all players' hands after holecard collision. The algorithm also combines players with narrow ranges and eliminates some of the conflicting combos, so it works well even with overlapping ranges where the naive rejection sampling would fail 99.9% of time.\n\nFull enumeration utilizes preflop suit and player isomorphism by caching results in a table and looking for identical preflops. Performance degrades significicantly when the lookup table gets full, but this mostly happens when the situation is infeasible for enumeration to begin with. In postflop the algorithm recognizes some suit isomorphism for roughly 3x speedup, but there is still a lot of improvements to be done in this area.\n\n## 3rd party libraries\nOMPEval uses libdivide which has its own license. See http://libdivide.com/ for more info and LICENSE-libdivide.txt for license details.\n"
 },
 {
  "repo": "diditforlulz273/PokerRL-Omaha",
  "language": "Python",
  "readme_contents": "# PokerRL Omaha\n\nA fork of the original [Framework for Multi-Agent Deep Reinforcement Learning in Poker games](https://github.com/EricSteinberger/PokerRL) by [Eric Steinberger](https://github.com/EricSteinberger)\nCombined with [SD-CFR](https://github.com/EricSteinberger/Deep-CFR) and Deep CFR.\n\nHad Texas Hold'em Poker before, Now works with Omaha Poker, unattempted before publically. \n\n![Pot Limit Omaha](img/plo.jpg)\n\nThe Internet lacks any open-source Omaha Poker Reinforcement Learning code, so I created this part myself.\nWhile Omaha is orders of magnitude bigger than toy/constrained games used with SD-CFR before, noticeable upgrades have been made into distributed computing scheme\nto achieve convergency and significantly decrease wall time.\n\n\n## Changes\nOnly differences are noticed here, compilation and basic usage are exhaustively explained in the original repos.\nSome new dependencies exist, full dep. list is in requirements_dist.txt.\n\nUsed Pycharm+venv for development, so with Conda or other managers you might have to move start scripts to the root\nfolder if encounter any problems with missing internal modules.\n\n#### Fully functional Pot Limit Omaha game:\n\n - Works for 2-6 players.\n - Smoothly integrated into the code, so the functionality of the original PokerRL is preserved.\n - All the lookup tables are rewritten in pure Python, generation of most of them is fully vectorized, so takes less than 10 secs to build on the start.\n - Uses the original hand evaluator with Omaha combinations on top. Being naive and slow, it slightly impacts the speed of LBR rollouts. \n\nUse game type 'PLO' to start, an example is provided in 'examples/PLO_training_start.py'.\n\n\n#### GPU-CPU combined distributed scheme\n\n - 1 GPU worker for Advantage Nets Training\n - N CPU workers for sample generation\n - approx. 2 to 3 times cycle wall time decrease\n \n #### Different Network Scheme\n\n - 4 Deep networks instead of one, trained independently *in progress\n\n#### Preflop Hand Bucketing \n - Works for Hold'em and Omaha.\n - Improves Neural Network convergence at the beginning of the training, thus decreases overall convergence time.\n - Buckets together all preflop-isomorphic hands, e.g. AsKh and AdKc - suits don't matter without a flop.\n - Uses additional bucketed lookup table with empty suit bits. \n - Found in neural network modules FLAT, FLAT2 and CNN.\n \n Could be named a handcrafted feature which slightly conflicts\n  with a general self-play education idea, but PokerRL actually buckets isomorphic flop cards, and everyone does it as well.\n  \n#### Optimized Dense Residual Neural Network \n - MainPokerModuleFLAT2 which is used by setting nn_type='dense_residual'.\n - NN which is 2x deeper but has roughly the same\n computational complexity as the original FLAT.\n - Yields around 11% faster training in terms of loss decrease.\n - Significantly outperforms the original NN agent in PLO on any training step tested in h2h.\n \n#### Convolutional Neural Network \n - Which hasn't explored much and doesn't work well ATM. The idea is to\n  explore network potency to pick all the parameters without human segmentation from a 2D array. First 2-4 rows are private cards,\n  next 5 are board cards and the last one is a vector of stacks and bets happened before.\n  Total array size is 8X24.\n \n#### Leaky ReLU usage for all NNs\n - The negative slope of 0.1 is tested to improve loss decrease speed by 2-6% at no cost.\n \n#### Standalone Head to Head Agent evaluator\n - Standalone module written with takeaways from the original h2h evaluator of PokerRL.\n - Is handy to evaluate different agents against each other.\n Can be found in 'examples/interactive_agent_vs_agent.py', a short parameter description is inside.\n Class AgentTournament is extended to hold the functionality.\n\n#### Standalone LBR Agent evaluator\n - Standalone module written with takeaways from the original h2h evaluator of PokerRL.\n - Is handy to evaluate an agent with LBR method.\n Can be found in 'examples/eval_agent_lbr.py', a short parameter description is inside.\n \n#### Hand Logger for H2H Evaluator\n - Writes actual hands played in close-to-PokerStars format in .txt file.\n - Enabled by default in Standalone H2H Evaluator.\n - Modifies classes PokerEnv and AgentTournament and to catch all the activity.\n - Introduces HandHistoryLogger class.\n Allows manual hand history reading and storing in a plain text, could also be\n  loaded in PT4 for basic analysis, although not fully mimics the correct\n  HH format - the only goal was to make played games easy readable.\n  \n#### Improved Traversal Data generation scheme\n - Rather generating full amount and skipping some to enter buffer, a \u0432\u0443\u0441\u0434\u0448\u0442\u0443 in generated amount is used - times faster on late steps.\n - now n_traversals_per_iter sets the exact number of data entries created for each player\n (was a number of external traverser rollouts before, which has been producing quite unstable amounts)\n \n#### Bug fixes\n - I don't remember them all, but among most important are the use of deprecated torch tensor classes\n which crashed the GPU code on recent torch versions, some index miscalculations and wrong unsqueezes.\n  \n  \n"
 },
 {
  "repo": "benjy3gg/pokeRadar",
  "language": "Java",
  "readme_contents": ""
 },
 {
  "repo": "bitcoinbrisbane/BitPoker",
  "language": "C#",
  "readme_contents": "# BitPoker.IO\n\n## Abstract\nInspired by OpenBazaar.com, the goal of the project is to design a peer to peer protocol of turn based games, such as online poker, in which no central actor can control the outcome and thus rig the game and is provably fair.  The game uses bitcoin (or other digital tokens) and lightning network to settle bets between actors, and a blockchain to persist the state of the game.\n\nMost blockchains are too slow for turned based games, but not all turns need to persisted back to the blockchain.  For example, in poker, turns can be stored in memory on clients as \"mini chains\".  Only when the outcome of the game is required such as awarding the pot, is the data required to be persisted back to the blockchain.  Furthermore, players could agree this could be a higher cadence, such as each orbit, to save on fees.\n\nIts hoped, that different clients developed in different programming languages will be built.\n\n### Notation & Conventions\n\nIds should be represented as GUIDs, and be in lower case\nAll values represented in base16 (hex) should be lower case\nBitcoin addresses are used the the player identifier\nTime stamps are EPOCH\nTime durations are in seconds\nAmounts should be in smallest crytocurrency unit, such as Satoshis for Bitcoin\n\n### Enumerations \nDeck is represented as an array of bytes.\n\n| Key  | Value | Decimal | Byte |\n| -----|------ | --------|----- |\n| A  | Ace  | 12 | {0x0C} |\n| K  | King  | 11 |{0x0B}|\n| Q  | Queen | 10 |{0x0A}|\n| J  | Jack  | 9 |{0x09}|\n| T  | Ten | 8 |{0x08}|\n| 9 | 9 | 7 |{0x07}|\n| 8 | 8 | 6 |{0x06}|\n| 7 | 7 | 5 |{0x05}|\n| 6 | 6 | 4 |{0x04}|\n| 5 | 5 | 3 |{0x03}|\n| 4 | 4 | 2 |{0x02}|\n| 3 | 3 | 1 |{0x01}|\n| 2 | 2 | 0 |{0x00}|\n\nSuites\n\n| Key  | Value | Offset | Byte |\n| ---- | ----- | ------ | ---- |\n| S  | Spade  | +0 | {0x00} |\n| C  | Club | +13 | {0x0D} |\n| H  | Heart | +26 | {0x1A} |\n| D  | Diamond  | +39  | {0x27} |\n\n\\*Eg\nAce of clubs = { 0x0D }\n\nCrypto Currencies\nBTC Bitcoin\nETH Ethereum\nETC Ethereum Classic\n\n### Poker terminology\n- SB = Small Blind\n- BB = Big Blind\n\n### Example Keys (Address, Public Key (Not compressed), WIF Private Key)\n*Alice* \n- msPJhg9GPzMN6twknwmSQvrUKZbZnk51Tv \n- 041FA97EFD760F26E93E91E29FDDF3DDDDD3F543841CF9435BDC156FB73854F4BF22557798BA535A3EE89A62238C5AFC7F8BF1FA0985DC4E1A06C25209BAB78BD1 \n- 93Loqe8T3Qn3fCc87AiJHYHJfFFMLy6YuMpXzffyFsiodmAMCZS\n\n*Bob* \n- mhSW3EUNoVkD1ZQV1ZpnxdRMBjo648enyo \n- 04F48396AC675B97EEB54E57554827CC2B937C2DAE285A9198F9582B15C920D91309BC567858DC63357BCD5D24FD8C041CA55DE8BAE62C7315B0BA66FE5F96C20D \n- 91yMBYURGqd38spSA1ydY6UjqWiyD1SBGJDuqPPfRWcpG53T672\n\n*Witness* \n- mq1Ctw6xTcomjGgQz5pi8oXdR1tjjZQHYs\n- 04C82B8E2D6EA7F17665C4A1070F340E84D4C02DA72AE5018574001841C10E8009A04E2C333D3EB90102E71B324BFE595430D4C654BBFF0F66EDBFE63798C7A271\n- 93C4fbYtv8VXWDnbJLzQiVfBGuQgfz1hBF1QwQeJxQepe9oE876\n\n\\*2 of 3 address\n2NCSTuV27SC1BF122Xe1wmkNkjo4MJw4W85\nhttps://testnet.blockexplorer.com/address/2NCSTuV27SC1BF122Xe1wmkNkjo4MJw4W85\n\n*Redeem Script* 524104c82b8e2d6ea7f17665c4a1070f340e84d4c02da72ae5018574001841c10e8009a04e2c333d3eb90102e71b324bfe595430d4c654bbff0f66edbfe63798c7a2714104f48396ac675b97eeb54e57554827cc2b937c2dae285a9198f9582b15c920d91309bc567858dc63357bcd5d24fd8c041ca55de8bae62c7315b0ba66fe5f96c20d4104f48396ac675b97eeb54e57554827cc2b937c2dae285a9198f9582b15c920d91309bc567858dc63357bcd5d24fd8c041ca55de8bae62c7315b0ba66fe5f96c20d53ae\n\n\\*2 of 2 address\n2MtFGSjUn1FLhwgyf7gAaX3n1wCg29B4wvh\n\n*Redeem Script*\n5241041fa97efd760f26e93e91e29fddf3ddddd3f543841cf9435bdc156fb73854f4bf22557798ba535a3ee89a62238c5afc7f8bf1fa0985dc4e1a06c25209bab78bd14104f48396ac675b97eeb54e57554827cc2b937c2dae285a9198f9582b15c920d91309bc567858dc63357bcd5d24fd8c041ca55de8bae62c7315b0ba66fe5f96c20d52ae\n\nCreated from http://ms-brainwallet.org\n\nhttps://coinb.in/?verify=524104c82b8e2d6ea7f17665c4a1070f340e84d4c02da72ae5018574001841c10e8009a04e2c333d3eb90102e71b324bfe595430d4c654bbff0f66edbfe63798c7a2714104f48396ac675b97eeb54e57554827cc2b937c2dae285a9198f9582b15c920d91309bc567858dc63357bcd5d24fd8c041ca55de8bae62c7315b0ba66fe5f96c20d4104f48396ac675b97eeb54e57554827cc2b937c2dae285a9198f9582b15c920d91309bc567858dc63357bcd5d24fd8c041ca55de8bae62c7315b0ba66fe5f96c20d53ae#verify\n\n\n## The protocol\nEach client connects to one another in the \"lobby\".  They can then look for players who are looking to start a game, or request to join a running game.  Messages are sent to all players, signed, and referencing the existing message.  Thus like a block chain of messages.\n\n- Table reaches consensus on who\u2019s turn to act based off the game contract\n- Table reaches consensus on the legal moves / actions a player can make\n- Table waits for a signed message from that player\n- All other players validate that message\n- Repeat\n\n### Valid methods (See below for sample messages)\nMethods are of two types.  Game play / action messages that determin a players turn intent.  Methods that do not, such as join a table.\n\nNon action methods\n- Join\n- BuyIn\n- Deal\n- Quit\n- SitOut\n- Shuffle\n- Leave\n\nAction methods\n- SmallBlind\n- BigBlind\n- Call\n- Bet\n- Raise\n- Fold\n- Muck\n\n### Overview\nIf the game is to be developed using Ethereum contracts:\n\n1.  The game is defined as an Ethereum contract\n2.  Players agree to the table contract\n3.  Each players actions are defined as inputs for the hand contract\n4.  After the hand has ended, each player verifies the integrity of the hand contract.  Its in everyones best interest to verify correctly [Game Theory Citation]\n5.  The hand message chain is then executed on the Ethereum network for the pot to be awarded\n\nLess use of Ethereum\n\n1.  Players connect to each other via a P2P network protocol.\n2.  A player either looks to join a table and reviews the contract.\n3.  A player can choose to start a table be defining a table contract.\n4.  Tables should also broad cast their game, status and number of current .players to other tables for better network propagation.\n5.  Leaving the table (closing the channel)\n6.  Lightning network will facilitate micro payments \"off chain\".  The table can agree to bring them \"on chain\" after n hands are dealt.\n\n### Aside:  Lightning Network\n\n*How it Works.* \n\nFunds are placed into a two-party, multi signature \"channel\" bitcoin address. This channel is represented as an entry on the bitcoin public ledger. In order to spend funds from the channel, both parties must agree on the new balance. The current balance is stored as the most recent transaction signed by both parties, spending from the channel address. To make a payment, both parties sign a new exit transaction spending from the channel address. All old exit transactions are invalidated by doing so.\n\nThe Lightning Network does not require cooperation from the counterparty to exit the channel. Both parties have the option to unilaterally close the channel, ending their relationship. Since all parties have multiple multi signature channels with many different users on this network, one can send a payment to any other party across this network.\n\nBy embedding the payment conditional upon knowledge of a secure cryptographic hash, payments can be made across a network of channels without the need for any party to have unilateral custodial ownership of funds. The Lightning Network enables what was previously not possible with trusted financial systems vulnerable to monopolies\u2014without the need for custodial trust and ownership, participation on the network can be dynamic and open for all.\n\n[https://lightning.network/lightning-network-summary.pdf]\n\n## Game as a contract\nIn the below *table contract* the below game Texas Holdem is defined as an Enum.  The whole rules of the game could be defined as a contract, thus allowing anyone to develop variations of the game, such as the \"Seven Duce\" rule, other variations of poker such as Omaha or even other games.  \n\nThese are out side the scope of this paper.\n\nRopsten keys (in folder)\nMyEtherWallet password Test12345\nPrivate Key bbbe14b22e95f7d48a1b1268d27440078fdfd29183d00102319a61b3ba5b8511\nAccount 0x736060769FfE0fFB6e1799A06B2F5633ABAb53E0\n\n## Messages\nAll actions are sent as JSON RPC.  They must include a public key hash and be signed.  The payload must also reference their previous message hash.\n\n1.  Concatenate the payload the values\n2.  Hash the payload of step 1\n3.  Sign the output of step 2\n\nGeneral message object as a JSON RPC param\n\n| Property | Eg |\n| -------- | -- |\n| Version | Message Version |\n| Id | GUID |\n| Bitcoin Address (Public Key Hash) | msPJhg9GPzMN6twknwmSQvrUKZbZnk51Tv |\n| Method | Enum (TABLE, ACTION, BUYIN, SHUFFLE, DECK) |\n| Payload Hash | SHA256 |\n| Message Signature | TODO |\n| Pervious Hash | TODO |\n\nExample action message (payload)\n\n| Property  | Eg |\n| --------- | -- |\n| Id | 47b466e4-c852-49f3-9a6d-5e59c62a98b6 |\n| Bitcoin Address (Public Key Hash) | msPJhg9GPzMN6twknwmSQvrUKZbZnk51Tv |\n| Index | 2 |\n| Action | CALL 5000000 |\n| TX | TODO |\n| Previous Hash | TODO |\n| Time stamp | 2016-08-17 00:00:00 |\n\n\nEg in Json\n```\n{\"TableId\":\"bf368921-346a-42d8-9cb8-621f9cad5e16\",\"HandId\":\"398b5fe2-da27-4772-81ce-37fa615719b5\",\"Index\":2,\"Action\":\"CALL\",\"Amount\":5000000,\"Tx\":null,\"PreviousHash\":\"8ab9f91c002d8ccdbd8a49f7e028d27ca6ef01cf1fdaa4eca637868d8e4adf31\",\"HashAlgorithm\":\"SHA256\",\"Version\":1.0,\"BitcoinAddress\":\"msPJhg9GPzMN6twknwmSQvrUKZbZnk51Tv\",\"TimeStamp\":\"2016-08-17T00:00:00\"}\n```\n\nSHA-256 hash of the JSON RPC method\n```\ncb19bc14bca61bee174e5d6591530ad72b3ab58e0c5a904baec5b5de85c65e88\n```\n\n## Sample messages\n### Buy In\n```\n```\n\n### Call\n```\n```\n\n## Adding a Table Contract\nA client will define the table contract and store that locally.  They become the table starter and thus define the conditions of that game.  The parameters for a table are defined in the following schema.  Developers are encouraged to create their own algorithms, such as voting or anti-collusion.\n\n1.  Encryption Algorithm (Enum AES-256)\n2.  Hash Algorithm (Enum SHA-256)\n3.  Id (GUID)\n3.  Currency (Enum)\n3.  Blinds\n4.  Rake\\*\n5.  Min players\n6.  Max players\n7.  Game type (Enum, No Limit Texas Holdem) \\*\n8.  Other (straddles, \"run it twice\") \\*\n9.  Channel Address / multisig\n10.  Consensus Algorithm\n11.  Anti Collusion Algorithm / Contract\n12.  Version\n13.  Voting Algorithm / Contract\n14.  Channel Address\n\n* Perhaps an entire contract\n\n*Example xml serialziation*\n```\n<Message Verion=\"1\" Type=\"Table\">\n  <PubKeyHash></PubKeyHash>\n  <Table Id=\"bf368921-346a-42d8-9cb8-621f9cad5e16\" AddressType\"2-2\">\n    <Encryption>AES-265</Encryption>\n    <Hash>SHA-256</Hash>\n    <Currency>BTC</Currency>\n    <Blinds>\n      <SmallBlind>100000</SmallBlind>\n      <BigBlind>200000</BigBlind>\n    </Blinds>\n    <BuyIn>\n      <Min>10000000</Min>\n      <Max>50000000</Max>\n    </BuyIn>\n    <Game>\n      <Type>Texas Holdem</Type>\n      <Limit>No Limit</Limit>\n    </Game>\n    <Clock>30</Clock>\n    <TimeOuts>120</TimeOut>\n    <Version>0.0.1</Version>\n  </Table>\n  <MessageSignature></MessageSignature>\n</Message>\n```\n\n```\n{\n  table : {\n    id : \"bf368921-346a-42d8-9cb8-621f9cad5e16\"\n    encryption : \"AES-256\",\n    hash : \"SHA-256\",\n    currency : \"BTC\",\n    blinds : {\n      small : 100000,\n      big : 200000\n    },\n    buyIn : {\n      min : 10000000\n      max : 50000000\n    }\n\n  }\n}\n```\n\n## Joining a Table\nUsers send their intent to join a table by the JoinTable method.  This is analogous choosing a seat and sitting down at the table.  Once the table reaches the maximum amount of players, or the players vote to start the table, a multi signature address is created.  The required signatures are part of the agreed table contract.\n\n```\n{\n  method : \"JoinTable\",\n  version : 1\n  params {\n      publicKey : \"04F48396AC675B97EEB54E57554827CC2B937C2DAE285A9198F9582B15C920D91309BC567858DC63357BCD5D24FD8C041CA55DE8BAE62C7315B0BA66FE5F96C20D\",\n      minStart : 2\n  }\n}\n```\n\nResponse\n```\n\n```\n\n## Buying in\nAll players buying in open a lightning payment channel with the multi signature address of the table.  Players must add BTC within the range for the table contract (MinBuyIn, MaxBuyIn)\n\n\"Through this network of interconnected payment channels, Lightning provides a scalable, decentralised micropayments solution on top of the Bitcoin blockchain.\" [https://lightning.network/lightning-network-technical-summary.pdf]\n\n## Witness nodes\nGame witness can also be allowed or chosen to arbitrate a game.  The witness could also help network propagation.  A witness would be choose by the table starter and a small rake paid to the witness.\n\nThere might become a market for reputable witnesses based off a HTTPS DNS endpoint and earn small revenues for witnessing hands.\n\n### Process\n1.  Alice and Bob create a 2 of 2 address\n2.  Alice creates a deposit transaction\n3.  Bob creates a deposit transaction\n4.  Alice creates a refund transaction but does not broadcast\n5.  Bob creates a refund transaction but does not broadcast\n\n\\*2 of 2 Redeem Script and Address for Alice and Bob\n```\n2 041fa97efd760f26e93e91e29fddf3ddddd3f543841cf9435bdc156fb73854f4bf22557798ba53\n5a3ee89a62238c5afc7f8bf1fa0985dc4e1a06c25209bab78bd1 041fa97efd760f26e93e91e29fd\ndf3ddddd3f543841cf9435bdc156fb73854f4bf22557798ba535a3ee89a62238c5afc7f8bf1fa098\n5dc4e1a06c25209bab78bd1 2 OP_CHECKMULTISIG\n\n2Mx377XSXhvqqVyLaXsPDAAEsJFzGeWunKi\n```\n\n### Funding TXs\nBoth Alice and Bob now deposit their buy in to the address 2Mx377XSXhvqqVyLaXsPDAAEsJFzGeWunKi.  Note:  The table contract could include a minimum confirmation count.\n\nAlice tx  f5c5e008f0cb9fc52487deb7531a8019e2d78c51c3c40e53a45248e0712102a3\nBob tx c60193a33174a1252df9deb522bac3e5532e0c756d053e4ac9999ca17a79c74e\n\n\\*Sample C# NBitcoin code\n```\nconst String alice_wif = \"93Loqe8T3Qn3fCc87AiJHYHJfFFMLy6YuMpXzffyFsiodmAMCZS\";\n\nNBitcoin.BitcoinSecret alice_secret = new NBitcoin.BitcoinSecret (alice_wif, NBitcoin.Network.TestNet);\nNBitcoin.BitcoinAddress alice = alice_secret.GetAddress ();\n\n//Create 2 of 2\nNBitcoin.Script table = NBitcoin.PayToMultiSigTemplate\n                        .Instance\n                        .GenerateScriptPubKey(2, new[] { alice_secret.PubKey, alice_secret.PubKey });\n\nConsole.WriteLine(table);\nConsole.WriteLine(table.Hash.GetAddress(NBitcoin.Network.TestNet));\n\nNBitcoin.IDestination msigAddress = table.Hash.GetAddress(NBitcoin.Network.TestNet);\n\nvar blockr = new NBitcoin.BlockrTransactionRepository(NBitcoin.Network.TestNet);\nNBitcoin.Transaction transaction = blockr.GetAsync(new NBitcoin.uint256(\"f5c5e008f0cb9fc52487deb7531a8019e2d78c51c3c40e53a45248e0712102a3\")).Result;\n\nNBitcoin.Coin[] aliceCoins = transaction\n                        .Outputs\n                        .Select((o, i) => new NBitcoin.Coin(new NBitcoin.OutPoint(transaction.GetHash(), i), o))\n                        .ToArray();\n\nvar txBuilder = new NBitcoin.TransactionBuilder();\n\nvar tx = txBuilder\n    .AddKeys(alice_secret.PrivateKey)\n        .AddCoins(aliceCoins)\n        .Send(msigAddress, new NBitcoin.Money(50000000))\n        .SetChange(alice)\n        .SendFees(NBitcoin.Money.Coins(0.001m))\n        .BuildTransaction(true);\n\nBoolean ok = txBuilder.Verify(tx);\n\nConsole.WriteLine(tx.ToHex());\n```\n\n\\*Raw TX Alice buy in of 0.5 BTC\n```\n0100000001a3022171e04852a4530ec4c3518cd7e219801a53b7de8724c59fcbf008e0c5f5000000\n008b483045022100c21e5c296d3024f64dbd948b1999933206a3d3d757ff1004ce874fa4b9277acc\n02202d0c0115b4f52a7de2a1863141eda25192255015da14765a1409d8d202f096b40141041fa97e\nfd760f26e93e91e29fddf3ddddd3f543841cf9435bdc156fb73854f4bf22557798ba535a3ee89a62\n238c5afc7f8bf1fa0985dc4e1a06c25209bab78bd1ffffffff02e069f902000000001976a914822f\n3782f8d0357cb6fc7b4c5cfc1424b3f0100988ac80f0fa020000000017a914348de5f6c91078c128\n4956a88a9322be8d2834148700000000\n```\n\n\\*In JSON\n```\n{\n  \"txid\": \"0e7ae471ffd578c64b142c232f36c3f7810e1fcb2e31b8c1b02f4c61c07859dc\",\n  \"size\": 256,\n  \"version\": 1,\n  \"locktime\": 0,\n  \"vin\": [\n    {\n      \"txid\": \"f5c5e008f0cb9fc52487deb7531a8019e2d78c51c3c40e53a45248e0712102a3\",\n      \"vout\": 0,\n      \"scriptSig\": {\n        \"asm\": \"3045022100c21e5c296d3024f64dbd948b1999933206a3d3d757ff1004ce874fa4b9277acc02202d0c0115b4f52a7de2a1863141eda25192255015da14765a1409d8d202f096b4[ALL] 041fa97efd760f26e93e91e29fddf3ddddd3f543841cf9435bdc156fb73854f4bf22557798ba535a3ee89a62238c5afc7f8bf1fa0985dc4e1a06c25209bab78bd1\",\n        \"hex\": \"483045022100c21e5c296d3024f64dbd948b1999933206a3d3d757ff1004ce874fa4b9277acc02202d0c0115b4f52a7de2a1863141eda25192255015da14765a1409d8d202f096b40141041fa97efd760f26e93e91e29fddf3ddddd3f543841cf9435bdc156fb73854f4bf22557798ba535a3ee89a62238c5afc7f8bf1fa0985dc4e1a06c25209bab78bd1\"\n      },\n      \"sequence\": 4294967295\n    }\n  ],\n  \"vout\": [\n    {\n      \"value\": 0.499,\n      \"n\": 0,\n      \"scriptPubKey\": {\n        \"asm\": \"OP_DUP OP_HASH160 822f3782f8d0357cb6fc7b4c5cfc1424b3f01009 OP_EQUALVERIFY OP_CHECKSIG\",\n        \"hex\": \"76a914822f3782f8d0357cb6fc7b4c5cfc1424b3f0100988ac\",\n        \"reqSigs\": 1,\n        \"type\": \"pubkeyhash\",\n        \"addresses\": [\n          \"msPJhg9GPzMN6twknwmSQvrUKZbZnk51Tv\"\n        ]\n      }\n    },\n    {\n      \"value\": 0.5,\n      \"n\": 1,\n      \"scriptPubKey\": {\n        \"asm\": \"OP_HASH160 348de5f6c91078c1284956a88a9322be8d283414 OP_EQUAL\",\n        \"hex\": \"a914348de5f6c91078c1284956a88a9322be8d28341487\",\n        \"reqSigs\": 1,\n        \"type\": \"scripthash\",\n        \"addresses\": [\n          \"2Mx377XSXhvqqVyLaXsPDAAEsJFzGeWunKi\"\n        ]\n      }\n    }\n  ]\n}\n```\nWhich yields transaction id 0e7ae471ffd578c64b142c232f36c3f7810e1fcb2e31b8c1b02f4c61c07859dc\nBobs transaction id d74b4bfc99dd46adb7c30877cc3ce7ea13feb51a6fab3b9b15f75f4e213ac0da\n\nThe address 2Mx377XSXhvqqVyLaXsPDAAEsJFzGeWunKi now contains 1btc https://testnet.blockexplorer.com/address/2Mx377XSXhvqqVyLaXsPDAAEsJFzGeWunKi\n\n*Sample opening lightning channel in c# / NBitcoin*\n```\nTODO\n```\n\n### Create the refund transaction\nAlice and Bob must also create a refund transaction to themselves, but *not* broadcast it.\n\n## Game play\nThe dealer's client is responsible for the orchestration of the game.  As the dealer position rotates, this isn't a centralisation risk.  The intent is to limit network traffic.\n1.  Define the hand contract\n2.  Shuffle the deck\n3.  Post blinds\n4.  Pre flop round\n5.  Deal the flop\n6.  Post flop round\n7.  Deal the turn\n8.  Post turn round\n9.  Deal the river\n10.  Post river round\n11.  Award the pot\n\n### Hand Contract\nAt the start of each hand, the dealer defines the hand contract which references the table contract.  \n\n1.  The players and seat positions\n2.  The stack of each player\n3.  A ID as a GUID\n\n\\*Example hand contract serialised in XML Download from test data folder\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<ArrayOfActionMessage xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n  <ActionMessage>\n    <Version>1</Version>\n    <Id>47b466e4-c852-49f3-9a6d-5e59c62a98b6</Id>\n    <BitcoinAddress>msPJhg9GPzMN6twknwmSQvrUKZbZnk51Tv</BitcoinAddress>\n    <Signature>HEVF2mU1K0MmgeaP/zlxjCDkgbz43I638QaWwM/ipcrfWbSZwfx96MDxcqDr3dTBzzKMr9EnNqBjJlIQLk6Tdmg=</Signature>\n    <TimeStamp>2016-08-17T00:00:00</TimeStamp>\n    <TableId>bf368921-346a-42d8-9cb8-621f9cad5e16</TableId>\n    <HandId>398b5fe2-da27-4772-81ce-37fa615719b5</HandId>\n    <Index>0</Index>\n    <Action>SMALL BLIND</Action>\n    <Amount>50000</Amount>\n    <HashAlgorithm>SHA256</HashAlgorithm>\n  </ActionMessage>\n  <ActionMessage>\n    <Version>1</Version>\n    <Id>a29bc370-9492-4b60-ad4f-7c7513064383</Id>\n    <BitcoinAddress>mhSW3EUNoVkD1ZQV1ZpnxdRMBjo648enyo</BitcoinAddress>\n    <Signature>HATytRG1kIsPUVxELt7/m40EwCn4ryaV2p6Xmr38rijmAsm3pra8vvRPipNdYzAF5fgNr8HuLKZH2wUkpvEJ8CM=</Signature>\n    <TimeStamp>2016-08-17T00:00:10</TimeStamp>\n    <TableId>bf368921-346a-42d8-9cb8-621f9cad5e16</TableId>\n    <HandId>398b5fe2-da27-4772-81ce-37fa615719b5</HandId>\n    <Index>1</Index>\n    <Action>BIG BLIND</Action>\n    <Amount>100000</Amount>\n    <PreviousHash>be0c3991bdc569a94e57bec2afbfc7a8283be8c85ab16bb6e009d6f73270f7a0</PreviousHash>\n    <HashAlgorithm>SHA256</HashAlgorithm>\n  </ActionMessage>\n  <ActionMessage>\n    <Version>1.0</Version>\n    <Id>e299ebc5-b50f-425e-b839-cb69ef69a12e</Id>\n    <BitcoinAddress>msPJhg9GPzMN6twknwmSQvrUKZbZnk51Tv</BitcoinAddress>\n    <Signature>HFJTeey5K6yOyeapiuDelM4WANsHM+CK3etYO8d8qCGlKiMLo9rygkvTGDF/vF3gyMYoK5jVx6/yKgW3yJF5hnc=</Signature>\n    <TimeStamp>2016-08-17T00:00:20</TimeStamp>\n    <TableId>bf368921-346a-42d8-9cb8-621f9cad5e16</TableId>\n    <HandId>398b5fe2-da27-4772-81ce-37fa615719b5</HandId>\n    <Index>2</Index>\n    <Action>CALL</Action>\n    <Amount>50000</Amount>\n    <PreviousHash>5739b2f4d3a1fceb7dfaa644e9a392105bccbb1fe17ea00e4979a124f28d81e9</PreviousHash>\n    <HashAlgorithm>SHA256</HashAlgorithm>\n  </ActionMessage>\n  <ActionMessage>\n    <Version>1.0</Version>\n    <Id>54c5c3c1-306a-4f1b-863c-aba29b22cb5c</Id>\n    <BitcoinAddress>mhSW3EUNoVkD1ZQV1ZpnxdRMBjo648enyo</BitcoinAddress>\n    <Signature>HJmu7k8u/xDZ1q8U4Kn2a9NGciOfj7oES35VMKoSOC2KJlZuFJ19hxGjV5ARetHG5CjT2QvKEbgfeIM2S+1ye6g=</Signature>\n    <TimeStamp>2016-08-17T00:00:30</TimeStamp>\n    <TableId>bf368921-346a-42d8-9cb8-621f9cad5e16</TableId>\n    <HandId>398b5fe2-da27-4772-81ce-37fa615719b5</HandId>\n    <Index>3</Index>\n    <Action>CHECK</Action>\n    <Amount>0</Amount>\n    <PreviousHash>76cbd60a3ac4f3883cf4c5fdc60a8c791856796867dcc16849e102e4d462a793</PreviousHash>\n    <HashAlgorithm>SHA256</HashAlgorithm>\n  </ActionMessage>\n  <ActionMessage>\n    <Version>1.0</Version>\n    <Id>0e9053eb-288c-44be-81e0-d6ad57e42ded</Id>\n    <BitcoinAddress>msPJhg9GPzMN6twknwmSQvrUKZbZnk51Tv</BitcoinAddress>\n    <Signature>GyDFY/a2DGEHGpsIDuk+TNWotI4eoFFFGcw2Lc+9DageAdRr0E8QTuZIhz6pB5kLMkqcPOiKoF71HT5HPLeCxk8=</Signature>\n    <TimeStamp>2016-08-17T00:00:40</TimeStamp>\n    <TableId>bf368921-346a-42d8-9cb8-621f9cad5e16</TableId>\n    <HandId>398b5fe2-da27-4772-81ce-37fa615719b5</HandId>\n    <Index>4</Index>\n    <Action>BET</Action>\n    <Amount>100000</Amount>\n    <PreviousHash>6f71c283fd37a916f99386050b7a3e56f66c86f9def153bdd332bab85f226c0a</PreviousHash>\n    <HashAlgorithm>SHA256</HashAlgorithm>\n  </ActionMessage>\n  <ActionMessage>\n    <Version>1.0</Version>\n    <Id>93cae6c4-4dbf-4d5d-8df1-bf7e0d6baa71</Id>\n    <BitcoinAddress>mhSW3EUNoVkD1ZQV1ZpnxdRMBjo648enyo</BitcoinAddress>\n    <Signature>HJ4MSISqKn5PogbvqpQ1Iz7gNBOaXCUbtKOR6scYk7j6aVSOVlzXQeS+ZzE49+PSSzR3aqIYArNgelhWRPSTdPI=</Signature>\n    <TimeStamp>2016-08-17T00:00:50</TimeStamp>\n    <TableId>bf368921-346a-42d8-9cb8-621f9cad5e16</TableId>\n    <HandId>398b5fe2-da27-4772-81ce-37fa615719b5</HandId>\n    <Index>5</Index>\n    <Action>CALL</Action>\n    <Amount>50000</Amount>\n    <PreviousHash>ece153165e2e9e45f1789062470a4cd3c0df7b6fbdfe84b3e52d34b3994a302c</PreviousHash>\n    <HashAlgorithm>SHA256</HashAlgorithm>\n  </ActionMessage>\n  <ActionMessage>\n    <Version>1.0</Version>\n    <Id>3ea0a3de-2595-476f-b1b4-20d37fc25197</Id>\n    <BitcoinAddress>msPJhg9GPzMN6twknwmSQvrUKZbZnk51Tv</BitcoinAddress>\n    <Signature>G6skQA8KhDJV0FHIh/UzPs4TjiCRQNwYlqGcHO19f2bmGbijpo3t2/L0ebzrHtHePsNjJyYuvsnomf2tvTt3CPQ=</Signature>\n    <TimeStamp>2016-08-17T00:01:00</TimeStamp>\n    <TableId>bf368921-346a-42d8-9cb8-621f9cad5e16</TableId>\n    <HandId>398b5fe2-da27-4772-81ce-37fa615719b5</HandId>\n    <Index>6</Index>\n    <Action>BET</Action>\n    <Amount>50000</Amount>\n    <PreviousHash>ca980720b8c753d56a65ec045d45b2b1344fdc423c66b566e170c68894d2998d</PreviousHash>\n    <HashAlgorithm>SHA256</HashAlgorithm>\n  </ActionMessage>\n  <ActionMessage>\n    <Version>1.0</Version>\n    <Id>52cf418b-3b8b-4d91-b2fb-35d7a9ee0d1f</Id>\n    <BitcoinAddress>mhSW3EUNoVkD1ZQV1ZpnxdRMBjo648enyo</BitcoinAddress>\n    <Signature>G81CNbTkcipasZ9BZg5RwQyR/55uV7cq+kWehcJ0IxfHAMypuyQVSGR9EY/5RqD/E4ttBe7uDU2mfMYKI3LVW14=</Signature>\n    <TimeStamp>2016-08-17T00:01:10</TimeStamp>\n    <TableId>bf368921-346a-42d8-9cb8-621f9cad5e16</TableId>\n    <HandId>398b5fe2-da27-4772-81ce-37fa615719b5</HandId>\n    <Index>7</Index>\n    <Action>CALL</Action>\n    <Amount>50000</Amount>\n    <PreviousHash>4320831c682de22a1074751c1a7d8c833dc3f2d268cd775d1ee924eccd04c34d</PreviousHash>\n    <HashAlgorithm>SHA256</HashAlgorithm>\n  </ActionMessage>\n</ArrayOfActionMessage>\n```\n\n### The Shuffle\nIn this example, we will use a \"Heads up\" game of No Limit Texas Holdem.  In this case the hand contract defines Alice is the dealer, Bob the small blind, and Alice the big blind.\n\n- Alice = msPJhg9GPzMN6twknwmSQvrUKZbZnk51Tv\n- Bob = mhSW3EUNoVkD1ZQV1ZpnxdRMBjo648enyo\n\nThe deck is represented by an array[52] of bytes.  See lookup table.\n\n- Card[0] = AH\n- Card[1] = KH\n- Card[2] = QH\n- Card[3] = JH\n...\n- Card[51] = 2C\n\n### Encrypting the deck\nThe deck needs to be encrypted using a commutative algorithm, such as RSA.  Alice shuffles the deck and does not disclose the un-encrypted result.\n\n- Card[0] = AC\n- Card[1] = 3S\n- Card[2] = AH\n- Card[3] = 2S\n\nCreate an array of 52 private keys, 16 bytes represented as base64.  These do not leave Alices computer.  \\*See test data for full set.\n- Key[0]=ro4So+aeT6VJt9/OKTa/Ag==\n- Key[1]=GcL2OvzsDg54RIZZ5ruMFA==\n- Key[2]=HEKFpbtQnjl715X5P+8Y8g==\n- Key[3]=2cXOWr/IQcJ/AyqhF/W/jg==\n\n\\~\\~Each card is double encrypted.  First round of encryption with the hand key.  In the example key = HBFwc/qnlFqkxwiXTmNkXw== (1c 11 70 73 fa a7 94 5a a4 c7 08 97 4e 63 64 5f) in hex.\\~\\~\n\n- Card[0]=\n- Card[1]=\n- Card[2]=\n- Card[3]=\n\nThen each card is encrypted again with the matching key and represented as base64.  Eg, card[0] is encrypted with key[0]\n- Card[0]=\n\n#### Alice sends the deck to Bob\nAs the deck is encrypted, and assumed shuffled, Bob has no way to known the contents of the deck.  Bob the encrypts the deck again and shuffles, and sends the result back to Alice.\n\n*Example message in xml*\n```\n<Message Version=\"1\">\n  <Deck>\n    <Card Index=\"0\"></Card>\n    <Card Index=\"1\"></Card>\n    ...\n    <Card Index=\"51\"></Card>\n  <Deck>\n  <Signature></Signature>\n</Message>\n```\n\n\\*Note:  The deck could also be shuffled by a witness.\n\n### Post blinds\nIn our example, Bob is SB and Alice is BB.  Using the lightning proposal, Bob creates an unsigned TX of 0.001 to Alice.  \n\n```\n```\n\nEg SB message in XML\n```\n```\n\n### Pre flop\nWe know how the distribution of cards that will be dealt.  In Holdem, each card is dealt one at a time, starting left of the dealer (small blind) [Citation 1]\n\n- Card[0] =\\> Bob\n- Card[1] =\\> Alice\n- Card[2] =\\> Bob\n- Card[3] =\\> Alice\n\n- Alice -\\> Action request message to Bob.\n- Bob -\\> Returns signed action message to Alice\n- Alice -\\> Checks signature, and adds action response to the block\n- Alice -\\> Broadcasts the concatenated block to all players\n- All players -\\> Verify the block and signature\n- All players -\\> Return verification message\n\n*TODO: CREATE SEQUENCE DIAGRAM*\n\n### Flop, Turn and River\nThe client software co-ordinates the game, based off agreed game rules. \n\n1.  Enforces action rules of its own player, such as check, bet or fold\n2.  If the action involves money, creates the tx\n3.  Creates a signed message and broad casts to each player\n4.  Waits for next action message\n5.  Validates the message\n\n*Example action message from Bob serialzed in XML.  A call from the small blind.*\n```\n<Message Version=\"1\">\n  <Action Position=\"1\" Address=\"mhSW3EUNoVkD1ZQV1ZpnxdRMBjo648enyo\">\n    <HandId>398b5fe2-da27-4772-81ce-37fa615719b5</HandId>\n    <Index>2</Index>\n    <Action>CALL 10000<</Action>\n    <Tx>0100000001a3022171e04852a4530ec4c3518cd7e219801a53b7de8724c59fcbf008e0c5f5000000\n008a47304402205530f19e6cad5f2f4e04a92c3d4438907ac29a4ab50e6861088d2ad9e59ee61002\n20134b57cce3157f0ccaf47d9928d85713611062521900941460d677ccc884da20014104f48396ac\n675b97eeb54e57554827cc2b937c2dae285a9198f9582b15c920d91309bc567858dc63357bcd5d24\nfd8c041ca55de8bae62c7315b0ba66fe5f96c20dffffffff0380c6ef05000000001976a9141518ab\nb3523718f0231c7c6239a8e5887a4360c888aca08601000000000017a914348de5f6c91078c12849\n56a88a9322be8d28341487a08601000000000017a914348de5f6c91078c1284956a88a9322be8d28\n34148700000000</Tx>\n    <PreviousHash Algorithm=\"SHA256\">d4f235a5f120224ca290c8bd76ba182db67873c04bfddffe13355a0f752f7b37</PreviousHash>\n  <Action>\n  <Hash Algorithm=\"SHA256\">68b4f0c0955cc947aaf179d212aa80848d7dc41c5ac845447bb504ad595bb8e9</Hash>\n  <Signature>G3m66hVXe+gfbkDRS/0MNd6Sxp+Tem7i2czVNdt+aTdQXP7sUrHVOYwDX/70qywfKjEZKPr/FJ4n1kJPZKSHlSI=</Signature>\n</Message>\n```\n\n### Award the pot. (Post hand consensus)\nOnce the hand has been played, the table then reaches consensus.  The signed game history could then be persisted into an Ethereum block chain referencing previous hands.  \n\nFee vs Payouts.  The table would also include a parameter when to commit the hand, or hand history, to a chain.  The more frequently it is done the more fees it will incur. \n\n## Cashing out\nClosing the channel\n\n## Sample hands\nTo be used via the mock API.\nTable ID = 04dd3def-a654-4995-97e4-a1d151ef18ad\nHand ID = ce364246-6c52-40e8-a35f-18a1ea519251\n\nPlayers (in seats)\n2. Daniel my8qxmUcTMGpwaLr5SsGsDwXpv78BGmVuL \n3. Chris n4oaGy1uBZ4J4Pge7ZaGgbRRcJ9795dfdE\n4. Tony mmbC1Gs1oGSwoT8F8VLQcwmLrNTV5DdajA\n5. Phil mgXqH7yA6Djx5Wqpaspsw25mNLTx2yaPeB\n6. Mike mre7fKPYqyKjACfb74rSjVNubE9ZX3t7Cb\n7. Tom mxeHrRd239QgwYZtEtNo8eGrnmGeDbCFPB\n9. Gus mkcuSxhM5F76vzbAXyhXayXUw4sTitJXhc \\* Button\n\nThe hand is decribed in Poker Stars Hand History format.\n```\nPokerStars Hand ce364246-6c52-40e8-a35f-18a1ea519251:  Hold'em No Limit (0.0005/0.001 BTC) - 2015/09/10 7:13:56 ET\nTable 04dd3def-a654-4995-97e4-a1d151ef18ad 9-max Seat #9 is the button\nSeat 2: Daniel (0.01 in chips) \nSeat 3: Chris (0.01 in chips) \nSeat 4: Tony (0.01 in chips) \nSeat 5: Phil (0.01 in chips) \nSeat 6: Mike (0.01 in chips) \nSeat 7: Tom (0.01 in chips) \nSeat 9: Gus (0.008 in chips) \nDaniel: posts small blind 0.0005\nChris: posts big blind 0.001\n*** HOLE CARDS ***\nAvtovo joins the table at seat #8 \nTony: folds \nPhil: folds \nMike: folds \nTom: raises 0.00126 to 0.0026\nGus: folds \nDaniel: calls 0.00176\nChris: calls 0.00126\n*** FLOP *** [9h Td 6h]\nDaniel: checks \nChris: checks \nTom: bets 0.00485\nkoksskrt joins the table at seat #1 \nDaniel: calls 0.00485\nChris: calls 0.00485\n*** TURN *** [9h Td 6h] [Qh]\nDaniel: checks \nChris: checks \nTom: checks \n*** RIVER *** [9h Td 6h Qh] [Th]\nDaniel: checks \nChris: bets 0.006\nTom: folds \nDaniel: folds \nUncalled bet (0.006) returned to Chris\nChris collected 0.02037 from pot\nChris: doesn't show hand \n*** SUMMARY ***\nTotal pot $21.33 | Rake $0.96 \nBoard [9h Td 6h Qh Th]\nSeat 2: Daniel (small blind) folded on the River\nSeat 3: Chris (big blind) collected (0.02037)\nSeat 4: Tony folded before Flop (didn't bet)\nSeat 5: Phil folded before Flop (didn't bet)\nSeat 6: sylvian31 folded before Flop (didn't bet)\nSeat 7: Tom folded on the River\nSeat 9: Gus (button) folded before Flop (didn't bet)\n```\nPrivate Keys\n2. Daniel 92DurEQEwd5KR4BjeaLfK3xuuSiQEWNc8R3szPH1VM5XorMa3eq \n3. Chris 92ZY3DxX8h9wpueDwSzD8YWKXCi1YT9yrvYDVhfnbqXgCvKQmX6\n4. Tony 92WmrGTyfW6uvZdzy7TsoARwtg9QpzNvxz31UTeoD2WSgSLQHHg\n5. Phil 92Q53JuV5L3ehi2ML4CbwWAhGrAJUAd2jc39yke4bqqW1XUpgQx\n6. Mike 92rXYx7owd2AgUiJZzDUJrNy4EBD92y1x6JSQBiSHkKD6PdL9Zt\n7. Tom 91qV38Xgc2KS5zNJfXfi9rK36FUS14yoFPE9iaEpmHckFLCWsTX\n9. Gus 92GD9YDCT4koimj3nBQ2gcLZbxdHdkcLPboBjibjJAhP5Gks8An\n\nThe above hand as a message chain.\n```\n\n```\n\n## Network Topology\n\n### Dealing with disconnects\n\n## Test Data\n- Alice keys\n- Bob keys\n- Sample hand XML\n- Sample hand JSON\nFor full key set, see the test data folder\nCold deck from https://www.benjoffe.com/holdem\n\n### Mock API\nAn REST API is located at https://www.bitpoker.io/api for users to develop clients against.  The API returns mock data to develop against.\n\n| Verb  | Uri |\n| ------------- | ------------- |\n| GET | /Peers |\n| GET | /Players |\n| GET | /Players/bitcoinaddress |\n| GET | /Tables |\n\n### Ethereum public / private keys for testing (Ropsten)\nKey 1\n{\"version\":3,\"id\":\"3a09b190-c942-4165-be3f-3006a47efdde\",\"address\":\"49f88ab85d38d2465b1450c0488acf193404a3af\",\"Crypto\":{\"ciphertext\":\"765c4b8f0c9f4ea1dd3b38d38e6279134d981e2e5d2f55118cdb0a1e68f23698\",\"cipherparams\":{\"iv\":\"9e87c9faa4b95ad0c457c69767aca715\"},\"cipher\":\"aes-128-ctr\",\"kdf\":\"scrypt\",\"kdfparams\":{\"dklen\":32,\"salt\":\"fc76f22df1e42b2a5d9513eb7516523fd96734868b8c1344d33a385f27c93a22\",\"n\":1024,\"r\":8,\"p\":1},\"mac\":\"4a9515fcc274e7041f8e6f25d2afb92c3e6a55b69b7b14a56df42cb06f3f6a07\"}}\n\n07f9f3506231416d4ea1ce35d2eeb8b73195d1b70553b093ca55923fedcfab51 Private Key\n0x49F88Ab85D38D2465b1450C0488aCf193404a3aF Address\n\nKey 2\n{\"version\":3,\"id\":\"7147b6ec-d44a-43bb-bdd7-491f280d0344\",\"address\":\"a633a412221768286a119c1f006b4fdf97d6d28a\",\"Crypto\":{\"ciphertext\":\"7267e69116649e3f31a6cdc6b77fa3aa201716ad2814e4b8ff6b84b3580bb4f0\",\"cipherparams\":{\"iv\":\"31f590b012ac8227474244f51880646d\"},\"cipher\":\"aes-128-ctr\",\"kdf\":\"scrypt\",\"kdfparams\":{\"dklen\":32,\"salt\":\"fc75d6b6bfac5147d19a7b1e3db8bd45d14556a625791901b78b5804e4004ea3\",\"n\":1024,\"r\":8,\"p\":1},\"mac\":\"68751ea2f21168e3dfc6ed30414410520722b94e04c1aa4f639852ad498d5243\"}}\n\n9e96ec45d19bbca257489059992be96b221aaba590c25c24caa857eabae8854a Private Key\n0xA633a412221768286A119C1F006b4fDf97D6D28A Address\n\nMultisig Wallet\n0x13340072363a2e6a8C46f268aF9d8dBee22cFb0c\n\nICO Test Account (Ropsten)\n0x13340072363a2e6a8C46f268aF9d8dBee22cFb0c \n\n### Ethereum public keys (Mainnet)\n0xB5dCFf27Ea5BC5BdBDe31e73E9466a7FdD3043Cf\n\n\n\n## References\n1. https://lightning.network/lightning-network-paper.pdf\n2. http://www.pokerlistings.com/poker-rules-texas-holdem\n3. http://ianpurton.com/online-pgp/\n4. http://www.codeproject.com/Articles/835098/NBitcoin-Build-Them-All\n5. https://www.benjoffe.com/holdem\n6. http://ms-brainwallet.org\n7. http://json-rpc.org/wiki/specification\n8. https://msdn.microsoft.com/en-us/library/bb756931.aspx?tduid=(fc4ef1dccc45eb37dfbbbf748821ac83)(256380)(2459594)(TnL5HPStwNw-fIrr3XMwfP4kdvb3oN5V_A)()\n9. http://www.nongnu.org/libtmcg/MentalPoker.pdf\n10. https://people.csail.mit.edu/rivest/ShamirRivestAdleman-MentalPoker.pdf\n11. http://www.nongnu.org/libtmcg/WEWoRC2005_proc.pdf\n12. http://www.cs.technion.ac.il/~ranjit/papers/poker.pdf\n13. A c# poker engine https://github.com/NikolayIT/TexasHoldemGameEngine\n14. True RNG http://ubld.it/products/truerng-hardware-random-number-generator/\n"
 },
 {
  "repo": "yongkangchen/poker-server",
  "language": "Lua",
  "readme_contents": "# poker-server\n\n1\u3001\u5b89\u88c5luajit\nhttps://luapower.com/luajit/download\n\n2\u3001\u542f\u52a8\u670d\u52a1\u5668\n`luajit lib/main.lua 9878 zzmj`\n\n\nhttp://linkcloud.github.io/\n\n\n# \u5f00\u53d1\u6ce8\u610f\n\ngame\u8fd4\u56de\u7684\u989d\u5916\u5b57\u6bb5\u8bf4\u660e\uff1a\n\nNO_COST_ALL\uff1a\u623f\u4e3b\u5f00\u623f\u6a21\u5f0f\u7684\u5c40\u6570\u5bf9\u5e94\u7684\u94bb\u77f3\u6d88\u8017\n\nCOST_ALL\uff1aAA\u5f00\u623f\u6a21\u5f0f\u7684\u5c40\u6570\u5bf9\u5e94\u7684\u94bb\u77f3\u6d88\u8017\n\nCOST_HOST_PLAYER_SIZE: \u623f\u4e3b\u5f00\u623f\u6a21\u5f0f\u7684\u4eba\u6570\u5bf9\u5e94\u7684\u94bb\u77f3\u6d88\u8017\uff08\u4e0d\u4e58\u4ee5\u5c40\u6570\uff09\n\nBASE_COST_HOST_PLAYER_SIZE: \u623f\u4e3b\u5f00\u623f\u6a21\u5f0f\u7684\u4eba\u6570\u5bf9\u5e94\u7684\u94bb\u77f3\u6d88\u8017 x \u5c40\u6570 / \u57fa\u7840\u5c40\u6570\n\n# \u6c99\u7bb1\u9650\u5236\n\u7981\u6b62\u8bbe\u7f6e\u5168\u5c40\u53d8\u91cf\n\n\u7981\u6b62\u4fee\u6539\u5168\u5c40\u53d8\u91cf\n\n\u7981\u6b62\u4f7f\u7528\u4ee5\u4e0b\u51fd\u6570\uff1a\n```\nprint\ncollectgarbage\ndofile\ngetfenv\ngetmetatable\nload\nloadfile\nloadstring\nrawequal\nrawget\nrawset\nsetfenv\nsetmetatable\nmodule\nnewproxy\ngcinfo\n```\n\n\u7981\u6b62\u4f7f\u7528\uff1a\n```\njit.\npackage.\n_G.\ndebug.\n```\n\n\u7981\u6b62require\u8bbf\u95ee:\n```\nlib/net/poll.lua\nlib/net/tcp_svr.lua\nlib/simple/login.lua\nlib/simple/room.lua\nlib/ext.lua\nlib/game_require.lua\nlib/main.lua\nlib/sanbox.lua\nlib/start.lua\nlibc/*\n```\n\n\u5f00\u653e\u7684\u53c2\u8003sandbox.lua:\n```\n_VERSION assert error        ipairs     next pairs\npcall        select tonumber tostring type unpack xpcall\ncoroutine.create coroutine.resume coroutine.running coroutine.status\ncoroutine.wrap     coroutine.yield\nmath.abs     math.acos math.asin    math.atan math.atan2 math.ceil math.mod\nmath.cos     math.cosh math.deg     math.exp    math.fmod    math.floor\nmath.frexp math.huge math.ldexp math.log    math.log10 math.max\nmath.min     math.modf math.pi        math.pow    math.rad     math.random\nmath.sin     math.sinh math.sqrt    math.tan    math.tanh\nos.clock os.difftime os.time os.date\nstring.byte string.char    string.find    string.format string.gmatch\nstring.gsub string.len     string.lower string.match    string.reverse\nstring.sub    string.upper string.gfind\ntable.insert table.maxn table.remove table.sort\ntable.foreach table.foreachi table.getn table.concat\nbit\n\nrequire \"log\"\nrequire \"timer\"\nrequire \"msg\"\n\ntable.is_empty\ntable.copy\ntable.index\ntable.length\ntable.update\ntable.random\ntable.is_same_day\ntable.merge\ntable.dump\nstring.split\n\nrequire\nMSG_REG\n\n```\n"
 },
 {
  "repo": "cookpete/poker-odds",
  "language": "JavaScript",
  "readme_contents": "# poker-odds\n\n[![Latest npm version](https://img.shields.io/npm/v/poker-odds.svg)](https://www.npmjs.com/package/poker-odds)\n[![Node version required](https://img.shields.io/node/v/poker-odds.svg)](https://www.npmjs.com/package/poker-odds)\n[![Build Status](https://img.shields.io/travis/CookPete/poker-odds/master.svg)](https://travis-ci.org/CookPete/poker-odds)\n[![Test Coverage](https://img.shields.io/codecov/c/github/cookpete/poker-odds.svg)](https://codecov.io/gh/CookPete/poker-odds)\n[![Donate](https://img.shields.io/badge/donate-PayPal-blue.svg)](https://paypal.me/ckpt)\n\nA lightweight command line tool for calculating poker hand probabilities. No dependencies. No huge data files.\n\n### Installation\n\n```bash\n# yarn\nyarn global add poker-odds\n\n# npm\nnpm install -g poker-odds\n```\n\n### Usage\n\n```bash\npoker-odds AcKh KdQs   # any number of hands supported\n                       # use .. for random cards, .... for a random hand\n\n# options\n-b, --board Td7s8d     # community cards\n-i, --iterations 1000  # number of preflop simulations to run, default: 100000\n-e, --exhaustive       # run all preflop simulations\n-p, --possibilities    # show individual hand possibilities\n-n, --no-color         # disable color output\n-v, --version          # show version\n-h, --help             # show help\n```\n\nUse `--board` or `-b` to define community cards.\n\n![--board example](https://user-images.githubusercontent.com/1926029/35532782-5de9aaa0-0533-11e8-8bf0-2864f2bf0a9c.png)\n\nUse `--exhaustive` or `-e` to run all preflop simulations. Note that this will take some time.\n\n![--exhaustive example](https://user-images.githubusercontent.com/1926029/35533275-eaea7690-0534-11e8-88c9-15c993916e89.png)\n\nUse `--possibilities` or `-p` to show all possible hand outcomes. Hand possibilities are shown by default if only one hand is defined.\n\n![--possibilities example](https://user-images.githubusercontent.com/1926029/35532961-e73f5d18-0533-11e8-86f0-22c17c2d2dda.png)\n\n### API\n\nThe method used to calculate probabilities can be imported and used directly in a JS/node project:\n\n```js\nimport { calculateEquity } from 'poker-odds'\n\nconst hands = [['As', 'Kh'], ['Kd', 'Qs']]\nconst board = ['Td', '7s', '8d']\nconst iterations = 100000 // optional\nconst exhaustive = false // optional\n\ncalculateEquity(hands, board, iterations, exhaustive)\n```\n\n`calculateEquity()` returns an array of hands with the results of the simulations:\n\n```json\n[\n  {\n    \"hand\": [\n      \"Ac\",\n      \"Kh\"\n    ],\n    \"count\": 990,\n    \"wins\": 803,\n    \"ties\": 15,\n    \"handChances\": [\n      { \"name\": \"high card\", \"count\": 376 },\n      { \"name\": \"one pair\", \"count\": 479 },\n      { \"name\": \"two pair\", \"count\": 78 },\n      { \"name\": \"three of a kind\", \"count\": 13 },\n      { \"name\": \"straight\", \"count\": 44 },\n      { \"name\": \"flush\", \"count\": 0 },\n      { \"name\": \"full house\", \"count\": 0 },\n      { \"name\": \"four of a kind\", \"count\": 0 },\n      { \"name\": \"straight flush\", \"count\": 0 },\n      { \"name\": \"royal flush\", \"count\": 0 }\n    ],\n    \"favourite\": true\n  },\n  {\n    \"hand\": [\n      \"Kd\",\n      \"Qs\"\n    ],\n    \"count\": 990,\n    \"wins\": 172,\n    \"ties\": 15,\n    \"handChances\": [\n      { \"name\": \"high card\", \"count\": 351 },\n      { \"name\": \"one pair\", \"count\": 463 },\n      { \"name\": \"two pair\", \"count\": 77 },\n      { \"name\": \"three of a kind\", \"count\": 13 },\n      { \"name\": \"straight\", \"count\": 41 },\n      { \"name\": \"flush\", \"count\": 45 },\n      { \"name\": \"full house\", \"count\": 0 },\n      { \"name\": \"four of a kind\", \"count\": 0 },\n      { \"name\": \"straight flush\", \"count\": 0 },\n      { \"name\": \"royal flush\", \"count\": 0 }\n    ],\n    \"favourite\": false\n  }\n]\n```\n"
 },
 {
  "repo": "apehex/awesome-poker",
  "language": null,
  "readme_contents": ""
 },
 {
  "repo": "jacobhyphenated/AndroidPokerPlayer",
  "language": "Java",
  "readme_contents": "Android Poker Player Client\n===\n\nThis is an android application designed to work with the Poker Server: https://github.com/jacobhyphenated/PokerServer\n\nThis is a basic android app that will give a player full functionality and control over his/her hand during a poker game that is run by the poker server.  The poker server must be set up and configured separately.  For more information on how the poker game is supposed to run, see the documentation for the Poker Server.\n\nVersion\n----\nThis application will work with Android Gingerbread (API 10).  The targeted OS is Jellybean (API 17).\n\nThis application is designed to work with Poker Server API Version 0.5. This is subject to change.\n\nDevelopment\n-----\nPart of the reason I did this android implementation of the Poker Player Client was to try my hand at the new Android Studio development environment. You will notice all the gradle stuff in the project, that is from Android Studio.  Android Studio has git integration build in, so getting started using this repository should be relatively painless.\n\nAs far as I am aware, the current capabilities of Android Studio and Eclipse do not allow an Android Studio project to be easily exported back to Eclipse.  To build/run/develop this project, I strongly recommend using Android Studio (http://developer.android.com/sdk/installing/studio.html).  If this is not an option, you will have to find  a way to import the project back into Eclipse.\n\nLicense\n----\nThe MIT License (MIT)\n\nCopyright (c) 2013 Jacob Kanipe-Illig\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n"
 },
 {
  "repo": "IanSullivan/PokerCFR",
  "language": "Python",
  "readme_contents": "# PokerCFR\n\n## Abstractions\n\n#### Lossless:\nCard rank is kept normal\nSuit is ignored whenever possible\n'o' means off-suit(flushes are impossible with this suit), 's' means suit is needed (possible flush)\n#### Buckets\nClustering teqniques are to group similar hands together\nEHS looks at the hand stength of the hand, Potential aware looks ahead so similar flushes and straits are placed together \n| EHS buckets      | Potential-aware Buckets         |\n| ------------- |:-------------:|\n| [6s, 8s][3s, As, Qo, To]      |[6s, 8s][3s, As, Qo, To]|\n| [6s, 8s][7s, As, Ko, Qo]   |[6s, 9s][3s, 5o, Jo, Qs]|  \n| [6s, 8s][4s, Ao, Qs, To] |[5s, 9s][4s, 7s, Ko, Qo]|  \n| [6s, 8s][2s, 3s, 4o, Qo]     |[3s, 9s][2o, 8s, Js, Ko]|\n| [6s, 8s][2s, 3o, 5o, Qs]    |[6s, 8s][4s, Js, Ko, To]\n\n## Resources\n##### Intro to Counter factual regret minimization: </br>\nhttps://justinsermeno.com/posts/cfr/ </br>\nhttp://modelai.gettysburg.edu/2013/cfr/cfr.pdf </br>\nhttps://medium.com/ai-in-plain-english/steps-to-building-a-poker-ai-part-1-outline-and-history-58fbedaf6ded</br>\n\n##### Limit Poker Solved: </br>\nhttps://poker.cs.ualberta.ca/publications/2015-ijcai-cfrplus.pdf </br>\nhttps://poker.cs.ualberta.ca/publications/heads-up_limit_poker_is_solved.acm2017.pdf </br>\n\n##### Libratus: </br>\nhttps://www.cs.cmu.edu/~noamb/papers/17-IJCAI-Libratus.pdf </br>\nhttps://www.cs.cmu.edu/~noamb/papers/17-arXiv-Subgame.pdf </br>\nhttps://www.cs.cmu.edu/~noamb/papers/18-NIPS-Depth.pdf </br>\n\n##### Abstractions: </br>\nhttps://nebula.wsimg.com/197ee65d8124f2060c45478c8080da7c?AccessKeyId=4F0E80116E133E66881C&disposition=0&alloworigin=1 </br>\nhttps://www.cs.cmu.edu/~sandholm/potential-aware_imperfect-recall.aaai14.pdf </br>\nhttps://www.cs.cmu.edu/~noamb/papers/14-AAAI-Regret.pdf </br>\n\n##### Subgame solving: </br>\nhttps://poker.cs.ualberta.ca/publications/aaai2014-cfrd.pdf </br>\nhttps://dl.acm.org/doi/10.5555/3015812.3015898 </br>\nhttps://poker.cs.ualberta.ca/publications/NIPS09-graft.pdf </br>\n\n##### Evaluating: </br>\nhttps://poker.cs.ualberta.ca/publications/kan.msc.pdf </br>\nhttp://poker.cs.ualberta.ca/publications/aaai17ws-burch-aivat.pdf </br>\nhttps://poker.cs.ualberta.ca/publications/jdavidson.msc.pdf </br>\n\n"
 },
 {
  "repo": "DevMountain/tic-tac-toe-poker",
  "language": "HTML",
  "readme_contents": "# Project Summary\nThere are 2 parts to this assignment. In Part 1, you will create a Tic Tac Toe board using HTML, CSS and Javascript. In Part 2 you will create a poker hand. Detailed instructions are included in the folders for each part.\n\n## Setup\n\nFork and clone this repository and open the folder in your code editor. You can use live-server to see real-time changes from your code in the browser.\n\n## Resources\n\n<details>\n\n<summary> <code> HTML Document </code> </summary>\n\n* [HTML Document Object](https://www.w3schools.com/js/js_htmldom_document.asp)\n\n</details>\n\n\n## Contributions\n\nIf you see a problem or a typo, please fork, make the necessary changes, and create a pull request so we can review your changes and merge them into the master repo and branch.\n\n## Copyright\n\n\u00a9 DevMountain LLC, 2019. Unauthorized use and/or duplication of this material without express and written permission from DevMountain, LLC is strictly prohibited. Excerpts and links may be used, provided that full and clear credit is given to DevMountain with appropriate and specific direction to the original content.\n\n<p align=\"center\">\n<img src=\"https://s3.amazonaws.com/devmountain/readme-logo.png\" width=\"250\">\n</p>\n"
 },
 {
  "repo": "goodspb/poker-algorithm",
  "language": "PHP",
  "readme_contents": "# \u6251\u514b\u6e38\u620f\u7b97\u6cd5 for php\n\n* [\u5fb7\u5dde\u6251\u514b\u7b97\u6cd5\u89c4\u5219](/doc/texas.md)\n* [\u725b\u725b\u7b97\u6cd5\u89c4\u5219](/doc/niuniu.md)\n* [\u4e09\u516c\u7b97\u6cd5\u89c4\u5219](/doc/sangong.md)\n\n## \u4f7f\u7528\n\n\n### 1. \u5fb7\u5dde\u6251\u514b\n\n```php\n<?php\ninclude __DIR__ . 'vendor/autoload.php';\n\n$texas = new \\Goodspb\\PokerAlgorithm\\Games\\Texas();\n//\u751f\u62102\u4e2a\u73a9\u5bb6\u7684\u724c \u548c \u516c\u5171\u724c\n$texas->generate(2);\n//\u8f93\u51fa\u73a9\u5bb6\u724c \u548c \u516c\u5171\u724c\nvar_dump($texas->getPlayersCards(), $texas->getPublicCards());\n//\u8f93\u51fa\u6bd4\u8f83\u7ed3\u679c\necho \"<pre>\";\nprint_r($texas->comparePlayer($texas->getPlayersCards()[1], $texas->getPlayersCards()[2]));\n```\n\n### 2. \u725b\u725b\n\n```php\n<?php\ninclude __DIR__ . 'vendor/autoload.php';\n\n//\u521b\u5efa\u5b9e\u4f8b\n$niu = new \\Goodspb\\PokerAlgorithm\\Games\\NiuNiu();\n//\u968f\u673a\u751f\u62103\u4f4d\u73a9\u5bb6\uff0c 2\u79cd\u65b9\u5f0f\u4e8c\u9009\u4e00\uff0c\u4f46\u662f\u5982\u679c\u624b\u5de5\u586b\u5165\u7684\u8bdd\uff0c\u9700\u8981\u81ea\u5df1\u7ba1\u7406\u968f\u673a\u6027\u548c\u724c\u7684\u552f\u4e00\u6027\n$niu->generate(3);\n//\u624b\u5de5\u586b\u51652\u4f4d\u73a9\u5bb6\n//$niu->setPlayerCard(1, [[1, 4], [2, 4], [3, 4], [4, 4], [5, 2]]);\n//$niu->setPlayerCard(2, [[1, 3], [2, 3], [3, 3], [4, 3], [5, 3]]);\n\n//\u6267\u884c\u8ba1\u7b97\n$result = $niu->execute();\n$players = $niu->getPlayersCards();\n\n//\u8f93\u51fa\u5269\u4f59\u7684\u724c\n//var_dump($niu->getRound());\n\n//\u8f93\u51fa\u73a9\u5bb6\u724c\nvar_dump($players);\n\n//\u8f93\u51fa\u7ed3\u679c\necho '<pre>';\nprint_r($result);\n```\n\n### 3. \u4e09\u516c\n\n```php\n<?php\ninclude __DIR__ . 'vendor/autoload.php';\n\n//\u521b\u5efa\u5b9e\u4f8b\n$niu = new \\Goodspb\\PokerAlgorithm\\Games\\SanGong();\n//\u968f\u673a\u751f\u62103\u4f4d\u73a9\u5bb6\u7684\u724c\n$niu->generate(3);\n\n//\u6267\u884c\u8ba1\u7b97\n$result = $niu->execute();\n\n//\u8f93\u51fa\u7ed3\u679c\necho '<pre>';\nprint_r($result);\n```\n\n## \u95ee\u9898\n\n\u6b22\u8fce issues \u54e6\u3002\n"
 },
 {
  "repo": "matheusml/pwa-planning-poker",
  "language": "JavaScript",
  "readme_contents": ""
 },
 {
  "repo": "v2k/poker-eval",
  "language": "Shell",
  "readme_contents": "$Id: README 1773 2006-10-12 11:34:41Z loic $\n\nIntroduction\n============\n\npoker-eval is a C library to evaluate poker hands. The result of the\nevalution for a given hand is a number. The general idea is that if\nthe evalution of your hand is lower than the evaluation of the hand of\nyour opponent, you lose. Many poker variants are supported (draw,\nholdem, omaha, etc.) and more can be added.  poker-eval is designed\nfor speed so that it can be used within poker simulation software\nusing either exhaustive exploration or Monte Carlo.\n\nThe poker-eval library is Free Software and is released under the\nterms of the GNU General Public License. See the COPYING file in the\nroot directory of the distribution.\n\nCompiling -- GNU/Linux and Unix systems\n=========================\nThis library uses the GNU Autoconf self-configuration mechanism, so\ncompiling on a GNU/Linux and Unix system should be fairly simple.  \n\nTo build both the C library and the examples:\n  autoreconf --install\n  ./configure\n  make \n\nTo build and run the tests:\n\n  AUTOMAKE=automake-1.9 ACLOCAL=aclocal-1.9 autoreconf --install\n  ./configure\n  make check\n\nThe \"make check\" command will run several test programs to ensure that\neverything works correctly.  On slow machines, the tests may take\nseveral minutes.\n\nTo install the library and the headers (by default they will\ninstall in /usr/local/lib and /usr/local/include/poker-eval \nrespectively):\n\n   ./configure\n   make install\n\nTo run the examples:\n\n   cd examples\n   read the usage at the beginning of the source file\n   and run the program accordingly\n\nCompiling -- Windows, using cygwin \n==================================\nIf you have the cygwin package installed, you can build the library as\nper the directions above for GNU/Linux and Unix systems.\n\nCompiling -- DOS / Windows (May be obsolete, please send updates\nto cpinson@freesheep.org)\n================================================================\nThe library can also be compiled using Microsoft Visual C++.  In each\ndirectory, special DOS makefiles are provided, called makefile.dos.\nTo compile the library, make sure that the VC tools are on the path\nand that the LIB variable is properly set (VC provides a batch file,\nvcvars32.bat, to set this up), and enter the following commands:\n  cd lib\n  nmake -f makefile.dos\n  cd ..\\examples\n  nmake -f makefile.dos\n  cd ..\\tests\n  nmake -f makefile.dos\n\nYou can't use make to run the test programs under Windows as you can\non Unix, but you can run them (digtest5 and digtest7, in the tests\ndirectory) and compare the output value with the value in the make\nfile (makefile.dos in the tests directory) to ensure that the right\nthing happened.  \n\nOnce the library is built, you can use the resulting library\n(libpoker.lib) in other Visual C++ projects.  Make sure to put the\ninclude directory of the pokersource library package in the include\npath for projects that will be using the library.  \n\nDownload\n========\nThe library may be obtained from the pokersource project at\nhttp://gna.org/projects/pokersource/\n\n\nReporting bugs, suggesting improvements\n=======================================\nAs of August 2005, the poker-eval library is maintained by\nLoic Dachary.  Bug reports, suggestions for improvements, or candidates\nfor inclusion should be sent to\n     Loic Dachary <loic@dachary.org>\n     Tim Showalter <tjs@psaux.com> \n     Michael Maurer <mjmaurer@yahoo.com>\n\nYou can also check out the pokersource user group at\nhttp://groups.yahoo.com/group/pokersource or the mailing list\nat https://mail.gna.org/listinfo/pokersource-users/\n"
 },
 {
  "repo": "saschpe/PlanningPoker",
  "language": "Kotlin",
  "readme_contents": "# Planning Poker\n[![License](http://img.shields.io/:license-apache-blue.svg)](http://www.apache.org/licenses/LICENSE-2.0.html)\n[![Build Status](https://travis-ci.org/saschpe/PlanningPoker.svg?branch=master)](https://travis-ci.org/saschpe/PlanningPoker)\n\nPlanning poker, also called Scrum poker, is a consensus-based, gamified technique for estimating, mostly used to estimate effort or relative size of development goals in software development. In planning poker, members of the group make estimates by playing numbered cards face-down to the table, instead of speaking them aloud. The cards are revealed, and the estimates are then discussed. By hiding the figures in this way, the group can avoid the cognitive bias of anchoring, where the first number spoken aloud sets a precedent for subsequent estimates. (Wikipedia)\n\n## Features\n- Fibonacci, T-Shirt Size and Ideal Days card decks\n- Simple, fast and natural design\n- Full Android Wear and tablet support\n\n## Source code\nThe source demonstrates how to create an Android app with phone, tablet and wear support. It also shows to how to a standalone Android Wear 2.0 app.\n\n## Screenshots\n<img alt=\"Phone screenshot 1\" src=\"assets/device-art/device-phone-portrait-1.png\" width=\"256\" />\n<img alt=\"Phone screenshot 2\" src=\"assets/device-art/device-phone-portrait-2.png\" width=\"256\" />\n<img alt=\"Phone screenshot 3\" src=\"assets/device-art/device-phone-portrait-3.png\" width=\"256\" />\n<img alt=\"Wear screenshot 3\" src=\"assets/device-art/device-wear-round-1.png\" width=\"256\" />\n<img alt=\"Wear screenshot 3\" src=\"assets/device-art/device-wear-round-2.png\" width=\"256\" />\n<img alt=\"Wear screenshot 3\" src=\"assets/device-art/device-wear-square-1.png\" width=\"256\" />\n\n## Download\n\n<a href=\"https://f-droid.org/packages/saschpe.poker\" target=\"_blank\">\n<img src=\"https://f-droid.org/badge/get-it-on.png\" alt=\"Get it on F-Droid\" height=\"80\"/></a>\n<a href='https://play.google.com/store/apps/details?id=saschpe.poker' target=\"_blank\">\n<img alt='Get it on Google Play' src='https://play.google.com/intl/en_us/badges/images/generic/en_badge_web_generic.png' height=\"80\"/></a>\n<a href='http://www.amazon.com/gp/product/B01N1ERDH5/ref=saschpe.poker' target=\"_blank\">\n<img alt='Available at Amazon' src='https://images-na.ssl-images-amazon.com/images/G/01/mobile-apps/devportal2/res/images/amazon-underground-app-us-black.png'/></a>\n\n## Acknowledgement\nTranslations:\n- Catalan by Marcel PintoBiescas\n- Polish by Anna Szarik and Pavel Gracki\n- Spanish by Antonio Palmero\n- Romanian by Mia Maier\n- Russian by Dmitry Vilner\n- Turkish by Ugur Ozmen\n\n## License\n\n    Copyright 2016 Sascha Peilicke\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n"
 },
 {
  "repo": "notnil/joker",
  "language": "Go",
  "readme_contents": "joker\n========\n\nPoker hand evaluation and ranking written in go (golang)\n\nTo install run:\n\n```\ngo get github.com/notnil/joker/hand\n```\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/notnil/joker/hand\"\n)\n\nfunc main() {\n\tdeck := hand.NewDealer().Deck()\n\th1 := hand.New(deck.PopMulti(5))\n\th2 := hand.New(deck.PopMulti(5))\n\n\tfmt.Println(h1)\n\tfmt.Println(h2)\n\n\thands := hand.Sort(hand.SortingHigh, h1, h2)\n\tfmt.Println(\"Winner is:\", hands[0].Cards())\n}\n\n```\n"
 },
 {
  "repo": "lizzie2008/ChinesePoker",
  "language": "C#",
  "readme_contents": "# ChinesePoker\nUnity3D \u6597\u5730\u4e3b\u6e38\u620f  ChinesePoker\n"
 },
 {
  "repo": "dmorrill10/acpc_poker_gui_client",
  "language": "Ruby",
  "readme_contents": "ACPC Poker Gui Client\n======================\nThe [Annual Computer Poker Competition][ACPC homepage] Poker Gui Client provides a graphical user interface with which people may play poker games against automated agents. It supports two-player and three-player limit and no-limit Texas Hold'em, as well as three-player Kuhn. It can support any game supported by the [ACPC Dealer][ACPC competition server] as well.\n\nThis application is built with *Ruby and Rails* and *Node.js*.\n\nMore details\n----------------\n* [Code on GitHub][ACPC Poker GUI Client GitHub]\n* [Documentation][documentation]\n* [Installation](docs/Installation.md)\n* [Adding agents](docs/Agents.md)\n* [User Help](docs/Help.md)\n* [Components](docs/Components.md)\n\nDeployment\n------------\n### Simple Start in Development Mode\nRun `script/start_dev_server` and point a browser to `http:localhost:3000`.\n\nContributing\n----------------------\n### Issues\nSee the [issue tracker](https://github.com/dmorrill10/acpc_poker_gui_client/issues?state=open) for currently known issues, or to log new ones.\n\n### Tests\nRun `rspec` in the project's root directory to run its tests. When making changes to the code that you'd like to have pulled into this project, please be sure to add tests as best you can.\n\n### To contribute code\n1. Fork this repo\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Added some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create new Pull Request\n\n\nCredit and Copyright\n--------------------\nCopyright &copy; 2011-2014 Dustin Morrill. See [LICENSE](docs/LICENSE.md) for details.\n\nDeveloped with support from [Dr. Duane Szafron](http://webdocs.cs.ualberta.ca/~duane/), [Dr. Michael Bowling](http://webdocs.cs.ualberta.ca/~bowling/), [Natural Sciences and Engineering Research Council of Canada (NSERC)][NSERC], and the [Annual Computer Poker Competition][ACPC homepage].\n\n\nFurther resources\n------------------\n* [Annual Computer Poker Competition][ACPC homepage]\n* [Coffescript][Coffeescript homepage] - JavaScript in a candy coating. Used by default as of [Rails][Rails] 3.1 and used in this project's views.\n* [Gem Bundler][Bundler homepage] - Gem dependency management tool used by this project.\n* [GitHub][GitHub homepage] - Host for this project's code.\n* [Git][Git homepage] - Version control system used by this project.\n* [God process monitoring][God homepage] - Used to manage background processes in production.\n* [Haml][Haml] - The template language used by this project's views.\n* [Markdown][Markdown] - The formatting syntax used to write most of this project's non-code documentation.\n* [MongoDB][MongoDB homepage] - The database back-end for this project.\n* [Phusion Passenger][Phusion Passenger homepage] - Enables integration between [_Rails_][Rails] and [_Apache_][Apache homepage] in production.\n* [Programming Ruby][Programming Ruby] - a tutorial on Ruby programming.\n* [RDoc][RDoc] - The formatting syntax used to write some of this project's non-code documentation, when [Markdown][Markdown] is not enough.\n* [RVM][RVM homepage] - Ruby installation and version manager.\n* [Railscasts][Railscasts] - Ruby on Rails video tutorials.\n* [Rake][Rake] - Ruby build program.\n* [Ruby on Rails][Rails] - Web application framework used by this project.\n* [RubyDoc.info][RubyDoc.info] - Documentation hosting site used by this project.\n* [SASS][SASS] - Styling language extension of CSS used by default as of [Rails][Rails] 3.1 and is used in this project.\n* [The Apache Project][Apache homepage] - The production web server used by this project.\n* [The Computer Poker Research Group][CPRG homepage]\n* [The Ruby Programming Language][Ruby] - The foundational language of this project.\n* [University of Alberta][UAlberta homepage] - Host institution to the [Computer Poker Research Group][CPRG homepage].\n* [YARD][YARD] - The documentation tool used by this project, which also defines tags used by in-code documentation.\n\n<!---\n    Link references\n    ================\n-->\n<!---\n    General\n-->\n\n[ACPC competition server]: http://www.computerpokercompetition.org/index.php?option=com_rokdownloads&view=folder&Itemid=59\n[ACPC homepage]: http://www.computerpokercompetition.org\n[Apache homepage]: http://www.apache.org/\n[Bundler homepage]: http://gembundler.com/\n[CPRG homepage]: http://poker.cs.ualberta.ca/\n[Coffeescript homepage]: http://coffeescript.org/\n[Git homepage]: http://git-scm.com/\n[Git setup]: https://help.github.com/articles/set-up-git#platform-all\n[GitHub homepage]: https://github.com\n[God homepage]: http://godrb.com/\n[Haml]: http://haml.info/\n[Markdown]: http://daringfireball.net/projects/markdown/\n[MongoDB downloads]: http://www.mongodb.org/downloads\n[MongoDB homepage]: http://www.mongodb.org/\n[NSERC]: http://www.nserc-crsng.gc.ca/\n[Phusion Passenger homepage]: http://www.modrails.com/\n[Programming Ruby]: http://www.ruby-doc.org/docs/ProgrammingRuby/\n[RDoc]: http://rdoc.sourceforge.net/\n[RVM homepage]: https://rvm.io//\n[Rails generators tutorial]: http://guides.rubyonrails.org/generators.html\n[Rails]: http://rubyonrails.org/\n[Railscasts]: http://railscasts.com/\n[Rake]: http://docs.rubyrake.org/\n[Ruby]: http://www.ruby-lang.org/en/\n[Ruby downloads]: http://www.ruby-lang.org/en/downloads/\n[RubyDoc.info]: http://rubydoc.info/\n[SASS]: http://sass-lang.com/\n[UAlberta homepage]: http://www.ualberta.ca/\n[YARD]: http://yardoc.org/\n\n<!---\n    Project specific\n-->\n\n[ACPC Dealer Data GitHub]: https://github.com/dmorrill10/acpc_dealer_data#readme\n[ACPC Dealer GitHub]: https://github.com/dmorrill10/acpc_dealer#readme\n[ACPC Poker Basic Proxy GitHub]: https://github.com/dmorrill10/acpc_poker_basic_proxy#readme\n[ACPC Poker GUI Client GitHub]: https://github.com/dmorrill10/acpc_poker_gui_client\n[ACPC Poker Match State GitHub]: https://github.com/dmorrill10/acpc_poker_match_state#readme\n[ACPC Poker Player Proxy GitHub]: https://github.com/dmorrill10/acpc_poker_player_proxy#readme\n[ACPC Poker Types]: https://github.com/dmorrill10/acpc_poker_types#readme\n[documentation]: http://rubydoc.info/github/dmorrill10/acpc_poker_gui_client/master/frames"
 },
 {
  "repo": "aslakhellesoy/poker",
  "language": "C#",
  "readme_contents": "h1. Poker\n\nDu jobber for en TV stasjon som sender programmet \"Kjendispoker\". Kjendiser kommer i studio og spiller poker,\nog en annen kjendis er vert. Selv om vertene som regel er pene er de ikke alltid like smarte, og hver runde m\u00e5\navgj\u00f8res rast. Derfor her Kjendispoker behov for en automat som kan avgj\u00f8re hvem som vinner hver runde.\n\nSpillerne spiller med ekte kort. Det finnes kameraer i studio som kan se alle spillernes kort, og tanken er at\nen operat\u00f8r skal sitte og skrive inn kortene som hver spiller sitter med p\u00e5 h\u00e5nden inn i et program. Programmet\nskal kunne avgj\u00f8re hvilken av spillerne som har den beste h\u00e5nden ved en \"showdown\", og vise b\u00e5de navnet p\u00e5 kombinasjonen\nog navnet p\u00e5 vinneren p\u00e5 en skjerm som verten kan se.\n\nDet finnes mange forskjellige varianter av poker, men p\u00e5 Kjendispoker spilles det alltid \"Texas Hold'em\":http://en.wikipedia.org/wiki/Texas_Hold_%27em. Hver h\u00e5nd rangeres som beskrevet i \"List of poker hands\":http://en.wikipedia.org/wiki/List_of_poker_hands. Siden det spilles Texas Hold'em m\u00e5 operat\u00f8ren\nogs\u00e5 kunne skrive inn kortene som ligger p\u00e5 bordet.\n\nDet brukes ikke jokere i spillet.\n\nh2. Oppgave\n\nLag en liste over all funksjonalitet som skal utvikles og del dette opp i mindre oppgaver slik at oppgavene\nkan fordeles i et team. For \u00e5 vise framdrift i prosjektet skal det _hver time_ plottes inn framdrift i et CFD\ndiagram. Et CFD diagram kan lages ved \u00e5 kopiere \"dette\":http://spreadsheets.google.com/ccc?key=tKO1nDxmQGghjhyTUce8uIA Google Documentet. Det er en tilpasset versjon av regnearket som beskrives i\n\"denne artikkelen\":http://open.bekk.no/2009/11/03/cumulative-flow-diagrams-with-google-spreadsheets/\n\nBruk IRC til \u00e5 dele lenken til CFD diagrammet du har opprettet for ditt team:\nhttp://webchat.freenode.net/?channels=reykjavik2010\n\nLag en enkel \"tavle\" p\u00e5 bordet eller veggen med 4 kolonner: \"Backlog\", \"Under utvikling\", \"Klar til godkjenning\", \"Godkjent\".\nStasjonene \"Under utvikling\" og \"Klar til godkjenning\" har hver en WIP-limit p\u00e5 antall par.\n\nBruk Cucumber til \u00e5 beskrive forventet oppf\u00f8rsel til spillet. Ved behov kan man ogs\u00e5 bruke NUnit, JUnit,\nRSpec eller Test::Unit (for enhetstester).\n\nUtvikling skal skje i par, og det skal benyttes \"ping pong\" programmering. Dvs person 1 skriver et scenario\n(evt enhetstest), person 2 gj\u00f8r den gr\u00f8nn s\u00e5 enkelt som mulig. Person 2 skriver et scenario osv. N\u00e5r man mener\nen oppgave er ferdig m\u00e5 man f\u00e5 godkjenning fra produkteier.\n\nh2. Kode\n\nProsjektet er satt opp for \u00e5 fungere med \"vanlig\" Cucumber (Ruby), Cuke4Duke (Java) og Cuke4Duke (C#).\n\nh3. Installer Ruby (ikke n\u00f8dvendig for Java)\n\n* Mac: (Ruby er allerede installert) - evt http://rvm.beginrescueend.com/\n* Windows: http://rubyforge.org/frs/?group_id=167&release_id=41267 (ruby186-27_rc2.exe - European keyboard)\n* Linux: apt-get install ruby\n\nh3. Ruby\n\nh4. Forberedelser\n\nFjerne features/step_definitions/cucumber.wire\nFjerne evt annet ikke-ruby.\n\n<pre>\ngem install cucumber rspec\n</pre>\n\nh4. Kj\u00f8re Cucumber\n\n<pre>\nrake\n</pre>\n\nh3. Java\n\nh4. Forberedelser\n\nFjerne evt annet ikke-java.\n\n<pre>\nmvn integration-test -Dcucumber.installGems=true\n</pre>\n\nh4. Kj\u00f8re Cucumber\n\n<pre>\nmvn integration-test\n</pre>\n\nh3. C#\n\nh4. Forberedelser\n\nFjerne features/step_definitions/game_steps.rb\nFjerne evt annet ikke-.net.\n\nFarger: http://github.com/aslakhellesoy/wac\n\n<pre>\ngem install cuke4nuke win32console\n</pre>\n\nh4. Kj\u00f8re Cucumber\n\nBygg l\u00f8sningen i Visual Studio\n<pre>\ncuke4nuke bin\\Release\\Poker.dll -c features | wac\n</pre>\n\nSe ogs\u00e5 \"Gojko Adzic sin Cuke4Nuke tutorial\":http://gojko.net/2010/01/01/bdd-in-net-with-cucumber-cuke4nuke-and-teamcity/\n\nh2. Problemer\n\nHvis du finner feil i Cucumber, Cuke4Nuke eller Cuke4Duke - vennligst registrer en feil i de respektive trackere:\n\n* https://rspec.lighthouseapp.com/projects/16211-cucumber/overview\n* http://github.com/richardlawrence/Cuke4Nuke/issues\n* http://github.com/aslakhellesoy/cuke4duke/issues\n\nGenerelle sp\u00f8rsm\u00e5l kan stilles p\u00e5 mailing lista eller IRC. See http://cukes.info for detaljer."
 },
 {
  "repo": "atinm/fpdb",
  "language": "Python",
  "readme_contents": "Please visit http://fpdb.sourceforge.net for documentation, tips and help.\n"
 },
 {
  "repo": "epifab/pypoker",
  "language": "Python",
  "readme_contents": "# PyPoker\n\nPoker game application built for fun.\n\nIt supports different poker games (currently texas holdem and traditional 5 card draw).\nThe backend is entirely written in Python and it uses flask microframework to handle web requests and web sockets.\nThe front-end is pure HTML/CSS/Javascript (jQuery).\n\n### The game\n\nWhen new players connect they automatically enter a game room.\nAs soon as a game room has at least two players seated, a new game is kicked off.\n\nDuring a game session, other players can leave and join the table.\n\nA live demo of this application can be found at: https://pypoker.herokuapp.com\n\n![image](https://cloud.githubusercontent.com/assets/3248824/19602814/950fcbd2-97a6-11e6-9e9d-faabeac2307f.png)\n\n\n### Architecture\n\nThe application is made of four components.\n- **Game service**:\n    - Background process responsible for launching new games.\n    - There are currently two game services (texasholdem_poker_service.py and traditional_poker_service.py).\n- **Backend web application**:\n    - Handles HTTP requests and communicates to the clients via a persisted connection (web sockets).\n    - Acts as a middle layer between the game service and the frontend web application.\n- **Frontend web application**:\n    - Handles any end user interactions.\n- **Message broker**:\n    - The backend web application and the game services communicate by pushing and pulling messages to and from a queue. This is done using Redis.\n\n\nNote: even if they are in the same repository, the game service and the web application are completely decoupled.\nThey can be deployed on different servers and scaled independently as the communication only happens by exchanging JSON messages via a distributed database.\n\n\n### Communication protocol\n\nAs mentioned above, front-end clients communicate to the backend application by exchanging JSON messages over a persisted HTTP connection using web sockets.\n\nA working example of a client application can be found under: static/js/application.js\n\nEvery message will contain a self-explanatory field named **message_type**.\n\nThere are 8 possible message types:\n- *connect*\n- *disconnect*\n- *room-update*\n- *game-update*\n- *bet*\n- *cards-change*\n- *error*\n\n\n#### Connection\n\nWhen a player connects, he receives a connection message:\n\n```\n{\n    \"message_type\": \"connect\",\n    \"server_id\": \"vegas123\",\n    \"player\": {\"id\": \"abcde-fghij-klmno-12345-1\", \"name\": \"John\", \"money\": 1000.0}\n}\n```\n\nUnless catastrophic crashes, every poker session is terminated by receiving (or sending) a *disconnect* message_type.\n\n```\n{\"message_type\": \"disconnect\"}\n```\n\n\n#### Room updates\n\nShortly after the connection, the player automatically lands in a poker room and starts receiving **room-update** messages describing any room related event.\n\nThere are three possible *room-update* events:\n- **init**: this is sent straight after the player joined a game room\n- **player-added**: sent any time a new player joins the game room\n- **player-removed**: sent any time a player leaves the game room\n\n```\n{\n    \"message_type\": \"room-update\",\n    \"event\": \"init\",\n    \"room_id\": \"vegas123/345\",\n    \"player_ids\": [\n        \"abcde-fghij-klmno-12345-1\",\n        \"abcde-fghij-klmno-12345-2\",\n        null,\n        null\n    ],\n    \"players\": {\n        \"abcde-fghij-klmno-12345-1\": {\n            \"id\": \"abcde-fghij-klmno-12345-1\",\n            \"name\": \"John\",\n            \"money\": 123.0,\n        }\n        \"abcde-fghij-klmno-12345-2\": {\n            \"id\": \"abcde-fghij-klmno-12345-2\",\n            \"name\": \"Jack\",\n            \"money\": 50.0\n        }\n    }\n}\n```\n\n\n```\n{\n    \"message_type\": \"room-update\",\n    \"event\": \"player-added\",\n    \"room_id\": \"vegas123/345\",\n    \"player_id\": \"abcde-fghij-klmno-12345-3\"\n    \"player_ids\": [\n        \"abcde-fghij-klmno-12345-1\",\n        \"abcde-fghij-klmno-12345-2\",\n        \"abcde-fghij-klmno-12345-3\",\n        null\n    ],\n    \"players\": {\n        ...\n    }\n}\n```\n\n\n```\n{\n    \"message_type\": \"room-update\",\n    \"event\": \"player-removed\",\n    \"room_id\": \"vegas123/345\",\n    \"player_id\": \"abcde-fghij-klmno-12345-2\"\n    \"player_ids\": [\n        \"abcde-fghij-klmno-12345-1\",\n        null,\n        \"abcde-fghij-klmno-12345-3\",\n        null\n    ],\n    \"players\": {\n        ...\n    }\n}\n```\n\n\n#### Game updates\n\nOnce there are at least two players in the room a new game is automatically launched. \nAt this point, the remote server starts broadcasting **game-update** messages to communicate every game related event to the frontend clients (for instance \"player X bet 100 dollars\", \"player Y changed 3 cards\", \"player Z won\", ...).\n\nFrontend clients will respond to particular messages which indicate that input is required from the end users (for instance a bet or which cards they wish the change).\n\n*game-update* messages structure depend on the specific event that generate them.\n\nHere's a list of possible events:\n\n- **new-game** (a new game starts)\n- **game-over** (current game was terminated)\n- **cards-assignment** (cards assigned to each player)\n- **player-action** (player action is required)\n- **cards-change** (a player changed some cards - only for traditional poker games)\n- **bet** (a player check, call or raise)\n- **fold** (a player fold)\n- **dead-player** (a player left the table)\n- **showdown** (active players showdown their cards)\n- **pots-update** (when money go to the pots)\n- **winner-designation** (winner designation for each pot)\n\nThe client communicate player decisions via two message types:\n\n- **cards-change** (containing the list of cards the player wish to change - only for traditional poker games)\n- **bet** (the actual bet)\n\nIn the following example a player named \"Jack\" changes 4 cards (first, third, fourth and fifth cards in his hand):\n\n```\n{ \n    \"message_type\": \"cards-change\",\n    \"cards\": [0, 2, 3, 4]\n}\n```\n\nBeing incredibly lucky, Jack gets back a crazy score from the server (4 of a kind!):\n\n```\n{ \n    \"message_type\": \"cards-assignment\",\n    \"cards\": [[14, 3], [14, 2], [14, 1], [14, 0], [9, 3]],\n    \"score\": {\n        \"cards\": [[14, 3], [14, 2], [14, 1], [14, 0], [9, 3]],\n        \"category\": 7\n    }\n}\n```\n\nAt this point, the server sends a first *game-update* message to notify that Jack changed 4 cards:\n\n```\n{ \n    \"message_type\": \"game-update\",\n    \"event\": \"cards-change\",\n    \"num_cards\": 4,\n    \"player\": {\n        \"id\": \"abcde-fghij-klmno-12345-2\",\n        \"name\": \"Jack\",\n        \"money\": 50.0\n    }\n}\n```\n\nAnd shortly after a second *game-update* message to notify it's \"Jack\" turn to bet:\n\n```\n{ \n    \"message_type\": \"game-update\",\n    \"event\": \"player-action\",\n    \"player\": {\n        \"id\": \"abcde-fghij-klmno-12345-2\",\n        \"name\": \"Jack\",\n        \"money\": 50.0\n    }\n    \"timeout\": 30,\n    \"timeout_date\": \"2016-05-06 15:30:00+0000\",\n    \"action\": \"bet\",\n    \"min_bet\": 1.0,\n    \"max_bet\": 50.0,\n}\n```\n\nAt this point Jack goes all in:\n\n```\n{ \n    \"message_type\": \"bet\",\n    \"bet\": 50.0\n}\n```\n\nThe server broadcasts 2 new messages to notify that Jack raised to $50.0 and that it's now Jeff's turn to bet, who wisely decides to fold...\n\n"
 },
 {
  "repo": "bimovidia/planning-poker",
  "language": "CSS",
  "readme_contents": "# Pivotal Tracker: Planning Poker\n\n[![Code Quality](https://codeclimate.com/github/Foodee/planning-poker/badges/gpa.svg)](https://codeclimate.com/github/Foodee/planning-poker)\n[![Test Coverage](https://codeclimate.com/github/Foodee/planning-poker/badges/coverage.svg)](https://codeclimate.com/github/Foodee/planning-poker)\n\nPlanning poker, also called Scrum poker, is a consensus-based technique for estimating, mostly used to estimate effort or relative size of user stories in software development. In planning poker, members of the group make estimates by playing numbered cards in the app, instead of speaking them aloud. The cards are revealed, and the estimates are then discussed. By hiding the figures in this way, the group can avoid the cognitive bias of anchoring, where the first number spoken aloud sets a precedent for subsequent estimates.\n\n## Features\n* Authentication from Pivotal Tracker\n* Displays all user's projects in Pivotal Tracker\n* Push Notifications when playing cards\n* Bootstrap + Font-Awesome for Responsive Design\n\n## Dependencies\n* Ruby 2.1.3\n* MongoDB\n* Twitter Bootstrap\n* Font-Awesome\n* Pivotal Tracker gem (currently v3)\n* Thin webserver for Faye\n* Faye for Push Notifications\n\n## Frameworks\nThis application uses the following frameworks:\n\n* [Ruby on Rails](http://rubyonrails.org/) (4.2.5.1)\n* [Twitter Bootstrap](http://twitter.github.com/bootstrap/) (Front-end)\n* [jQuery](http://jquery.com/) (Javascript)\n\n## Gems\nThis application uses the following gems:\n\n* [Pivotal Tracker](https://github.com/jsmestad/pivotal-tracker) (Pivotal Tracker gem)\n* [Faye](http://faye.jcoglan.com/) (Faye)\n* [Mongoid](https://github.com/mongoid/mongoid) (Mongoid)\n* [Twitter Bootstrap SASS](https://github.com/twbs/bootstrap-sass) (Twitter Bootstrap port to SASS)\n* [Font-Awesome](https://github.com/bokmann/font-awesome-rails) (Font-Awesome Rails)\n* [BackTop](https://github.com/bimovidia/backtop) (Back To Top functionality)\n\n## Getting Started\n\nPlanning Poker uses MongoDB as its database. To install it, please refer to the following link: \n\n* [Install MongoDB](http://docs.mongodb.org/manual/installation/) - MongoDB installation tutorial\n* [Mongoid](http://mongoid.org/en/mongoid/index.html) - Mongoid official website for documentations\n\nPlanning Poker uses push notification with Faye. There are configuration files for each environments in config/environments:\n\n    config.publisher = {\n      # production faye server - change the URL so that it points to the correct server.\n      domain: 'localhost:9292',\n      # secret key\n      secret: 'secret'\n    }\n\nChange the domain into the actual production domain when deploying the app. You might want to change the secret key as well. \n\nTo get started, clone this repository to your local machine, and install dependencies:\n\n```shell\ngit clone git@github.com:bimovidia/planning-poker.git\ncd planning-poker\nbundle install\n```\n\nOpen a new terminal and start the faye server:\n\n```shell\nrackup faye.ru -s thin -E production -p 9292\n```\n\nRun the application locally with:\n\n```shell\nrails s\n```\n\n## Rule of the Game\nOnce you have the application set up, you can:\n\n* Login using your Pivotal Tracker credential\n* Click any project name in the header menu that has unestimated stories\n* Click on **UNESTIMATED** in the submenu to see the list of unestimated stories for that project\n* Click / Expand the story to start the planning poker session\n\nEach estimator can select any point depending on the story scale point setting in pivotal tracker. The values represent the number of story points, ideal days, or other units in which the team agrees to estimate.\n\nThe estimators discuss the feature, asking questions of the product owner as needed. When the feature has been fully discussed, each estimator privately selects one card to represent his or her estimate.\n\nOnce all selections are in, any estimator can then hit the **REVEAL** button to reveal the cards at the same time.\n\nIf all estimators selected the same value, that becomes the estimate. If not, the estimators discuss their estimates. The high and low estimators should especially share their reasons. After further discussion, once the estimation score has been agreed on, any estimator can then click on any card representing that number. After that, any user can update the story name and description (if necessary) and then hit **SAVE** to update the story in Pivotal Tracker.\n\n## Contributing\nContributions are encouraged. You can contribute in many ways. For example, you might:\n\n* add documentation and \"how-to\" articles to the README or Wiki\n* create an extension that provides additional functionality above and beyond Planning Poker itself\n* fix bugs you've found in the Issue Tracker or improve / add new features to Planning Poker\n\nWhen contributing, you will need to:\n\n* follow the same style / convention used throughout the app (as much as you can)\n* make sure your codes are well-tested and reviewed\n* when fixing a bug, provide a failing test case that your patch solves\n* provide proper documentation when necessary\n\n## Copyright\n\nPlanning Poker is licensed under the [MIT License](http://opensource.org/licenses/mit-license.html)\n"
 },
 {
  "repo": "IFS49F/poker",
  "language": "JavaScript",
  "readme_contents": "<p align=\"center\">\n  <img width=\"256\" alt=\"Poker4Fun Logo\" src=\"https://user-images.githubusercontent.com/4647136/39746191-2c4e4964-52dc-11e8-8b68-435cd12e4315.png\">\n  <h3 align=\"center\">Poker4Fun</h3>\n  <p align=\"center\">\u2660\ufe0e Vivid, registration-free, easy-to-use Scrum poker</p>\n  <p align=\"center\">\n    <a href=\"https://travis-ci.org/IFS49F/poker\">\n      <img alt=\"Build Status\" src=\"https://travis-ci.org/IFS49F/poker.svg?branch=master\" />\n    </a>\n    <a href=\"https://david-dm.org/IFS49F/poker\">\n      <img alt=\"Dependency Status\" src=\"https://david-dm.org/IFS49F/poker.svg\" />\n    </a>\n    <a href=\"https://david-dm.org/IFS49F/poker?type=dev\">\n      <img alt=\"Dev Dependency Status\" src=\"https://david-dm.org/IFS49F/poker/dev-status.svg\" />\n    </a>\n  </p>\n</p>\n\n## What\n\nhttps://en.wikipedia.org/wiki/Planning_poker\n\n## Why\n\nMost online poker tools are cool, but\n\n- Registration needed. Not friendly.\n- Not vivid. No fun.\n- Connection sucks. Especially from China.\n\n## Maintainers\n\n[![hyjk2000](https://avatars0.githubusercontent.com/u/4647136?s=100&v=4)](https://github.com/hyjk2000) [![hiveer](https://avatars0.githubusercontent.com/u/3827780?s=100&v=4)](https://github.com/hiveer) [![just4fun](https://avatars0.githubusercontent.com/u/7512625?s=100&v=4)](https://github.com/just4fun)\n\n## Cost\n\n- Domain from [GoDaddy](https://www.godaddy.com/): USD $30 / year\n- Server from [Linode](https://www.linode.com/): USD $60 / year\n\n| Item | Cost | Date | Until |\n| --- | --- | --- | --- |\n| Domain | CNY \uffe518.14 | Jul 23, 2017 | Jul 23, 2018 |\n| Domain | CNY \uffe5192.16 | May 23, 2018 | Jul 22, 2019 |\n| Domain | CNY \uffe5208.14 | Jul 12, 2019 | Jul 23, 2020 |\n| Domain | CNY \uffe5230.42 | Oct 17, 2020 | Oct 18, 2022 |\n| Server | USD $5 | 1st day every month | Last day every month |\n\n## Donate\n\nPoker4Fun is a side project we built in our spare time. This app has become popular thanks to the hard working of our [contributors](https://github.com/IFS49F/poker/graphs/contributors) and valuable feedbacks from our users. As an open source software, Poker4Fun is and will always be free for everyone, but it [costs money](#cost) to run the server and renew the domain. We need your help to keep Poker4Fun free and sustainable, and would be much appreciated if you could buy us a cup of coffee \u2615\ufe0f  to fuel our coding frenzy \ud83d\udd25.\n\n| WeChat | Alipay | PayPal |\n| --- | --- | --- |\n|![donate_via_wechat](https://user-images.githubusercontent.com/7512625/39191933-96503b6a-480a-11e8-94a0-ec5efc16dc5d.jpg)|![donate_via_alipay](https://user-images.githubusercontent.com/7512625/39191930-95c25598-480a-11e8-8508-7a48d009db55.png)|[![donate_via_paypal](https://user-images.githubusercontent.com/7512625/39193475-39a8fccc-480e-11e8-926d-b2f86050db69.png)](https://www.paypal.me/zorojiang)|\n\n## Sponsors\n\nPlease send us your GitHub username or personal website when you donate to Poker4Fun.\n\n| Name | Amount | Date |\n| --- | --- | --- |\n| [hiveer](https://github.com/hiveer) | CNY \uffe560 | Apr 25, 2018 |\n| [\u865a\u65e0\u98d8\u6e3a](http://www.dianping.com/shop/93573479) | CNY \uffe56.66 | Apr 26, 2018 |\n| [yoyodream2017](https://github.com/yoyodream2017) | CNY \uffe510 | Apr 27, 2018 |\n| [hum4dna](https://www.instagram.com/hum4dna/) | CNY \uffe516.66 | Apr 27, 2018 |\n| [xhuang68](https://github.com/xhuang68) | CNY \uffe516.66 | May 7, 2018 |\n| [WindhorseTour.com](https://windhorsetour.com) | CNY \uffe580 | May 15, 2018 |\n| [hum4dna](https://www.instagram.com/hum4dna/) | CNY \uffe550 | Jul 5, 2019 |\n| [\u59d7\u59d7\u5403\u5f97\u542b](https://github.com/MrCuriosity) | CNY \uffe550 | Jul 6, 2019 |\n| [\u5e72\u5403\u4e0d\u80d6\u599e](https://github.com/LeoLeoLei) | CNY \uffe566 | Jul 8, 2019 |\n| [\u574f\u7b11\u80d6\u72d7](https://github.com/BerdyPango) | CNY \uffe560 | Jul 8, 2019 |\n| [Vincent](https://github.com/yaowuping) | CNY \uffe5100 | Jul 26, 2019 |\n| [xhuang68](https://github.com/xhuang68) | CNY \uffe566 | Aug 1, 2019 |\n| \u53a6\u95e8\u5e02\u6c11\u53f6\u5148\u751f | CNY \uffe56 | Apr 20, 2020 |\n\n## License\n\nCopyright 2017-present IFS49F.\n\nPoker4Fun is licensed under [GPL-3.0](https://github.com/IFS49F/poker/blob/master/LICENSE).\n\n[Poker4Fun Logo](https://github.com/IFS49F/poker/blob/master/public/icon-144.png) is licensed under [CC-BY-SA 4.0](https://creativecommons.org/licenses/by-sa/4.0/).\n"
 },
 {
  "repo": "phstc/javapokertexasholdem",
  "language": "Java",
  "readme_contents": "# Java SE implemention for Texas Hold'em Poker\n\nIt's fully functional core engine implentation of Texas Hold'em Poker.\n\n## Check out the following example\n\n```java\n\n\tGameTexasHoldem game = new GameTexasHoldem();\n\tIPlayer homer = new Player();\n\tIPlayer flanders = new Player();\n\tIDeck deck = new Deck();\n\t// The Deck and Player used in the GameTexasHoldem are interfaces..\n\t// The newGame signature: public void newGame(IDeck deck, IPlayer player1, IPlayer... _players).\n\t// At least one player is mandatory to start the game, but you can add as many players as you want (Java Varargs).\n\tgame.newGame(deck, homer, flanders);\n\tgame.deal();\n\tgame.callFlop();\n\tgame.betRiver();\n\tgame.betTurn();\n\tList<IPlayer> winnerList = game.getWinner();\n\t\n        // Getting the result\n\tif(winnerList.size() > 1){\n\t\t// DRAW GAME\n\t} else if(winnerList.contains(homer)) {\n\t\t// HOMER WINNER\n\t\t// WINNER HAND: homer.getRankingEnum();\n\t} else if(winnerList.contains(flanders)) {\n\t\t// FLANDERS WINNER\n\t\t// WINNER HAND: flanders.getRankingEnum();\n\t}\n\t\n\t// The table cards\n\tgame.getTableCards(); \n\t\n\t// To get the player actual ranking\n\thomer.getRankingEnum();\n\tflanders.getRankingEnum();\n\t// IPlayer.getRankingEnum() can be changed in deal, call flop, bet river and bet turn.\n```\n\nThe IPlayer.getRankingEnum() method returns RankingEnum which contains the actual ranking of the player.\n\n```java\n\tpublic enum RankingEnum { {\n\t\tROYAL_FLUSH, \n\t\tSTRAIGHT_FLUSH, \n\t\tFOUR_OF_A_KIND, \n\t\tFULL_HOUSE, \n\t\tFLUSH, \n\t\tSTRAIGHT, \n\t\tTHREE_OF_A_KIND, \n\t\tTWO_PAIR, \n\t\tONE_PAIR, \n\t\tHIGH_CARD\n\t}\n```\n\n## Performance test\n\nGameTexasHoldemRunner.main() executes the performance test and outputs it in two CSV report files.\n\n### Results\n\n* Macbook pro\n* HD ATA de 320 GB (5.400 rpm)\n* Memory 4GB 1066MHz DDR3 SDRAM - 2x2GB\n* Processor 2.53GHz Intel Core 2 Duo\n* O.S. Snow Leopard\n* 100000 executions = 6 seconds\n* 10000 executions = 1 seconds\n\n### Generated reports \n\nExample for 10000 executions \n\n\texecutions: 10000, minutes: 0, seconds: 1\n\tgetStatsSimple - OK - /Users/pablo/workspace/javapokertexasholdem/stats10000-simple.csv\n\tgetStatsFull - OK - /Users/pablo/workspace/javapokertexasholdem/stats10000-full.csv\n\t\n#### stats simple\n\nColumns:\n \n* STATS = RankingEnum winner\n* COUNT = how many times the same RankingEnum winner occurs\n* PERCENT = percentual of the COUNT compared with all executions\n\n#### stats full\n\nColumns: \n\n* DEALER DEAL = dealer RankingEnum in the deal step\n* PLAYER DEAL = player RankingEnum in the deal step\n* DEALER CALL FLOP = dealer RankingEnum in the call flop step\n* PLAYER CALL FLOP = player RankingEnum in the call flop step\n* DEALER BET TURN = dealer RankingEnum in the bet turn step\n* PLAYER BET TURN = player RankingEnum in the bet turn step\n* DEALER BET RIVER = dealer RankingEnum in the bet river step\n* PLAYER BET RIVER = player RankingEnum in the bet river step\n* WINNER = winner name (player or dealer)\n* COUNT = how many times the same game occurs\n* PERCENT = percentual of the COUNT compared with all executions\n"
 },
 {
  "repo": "tokafish/elixir_poker",
  "language": "Elixir",
  "readme_contents": "# GenPoker\n\nLearning Elixir, by writing a Texas Hold 'Em app.\n\nBlog posts:\n\n- http://blog.tokafish.com/playing-poker-with-elixir-part-1/\n- http://blog.tokafish.com/playing-poker-with-elixir-pt-2/\n- http://blog.tokafish.com/playing-poker-with-elixir-pt-3/\n- http://blog.tokafish.com/playing-poker-with-elixir-pt-4/\n- http://blog.tokafish.com/playing-poker-with-elixir-pt-5/\n"
 },
 {
  "repo": "Mikhail-MM/React-Poker",
  "language": "JavaScript",
  "readme_contents": "5-Player Texas Hold 'Em Poker, built with React.\n\nCheck it out: http://www.react-poker.surge.sh\n"
 },
 {
  "repo": "spni/spni.github.io",
  "language": "JavaScript",
  "readme_contents": ""
 },
 {
  "repo": "ozzi7/Poker-MCCFRM",
  "language": "C#",
  "readme_contents": "# Poker Bot\n\n<img src=\"media/warning-markup.svg?\">\n\nA poker bot for NL Texas Hold'em supporting any number of players and trained using Monte-Carlo Counterfactual Regret Minimization. \nThe code more or less follows the [research paper](https://science.sciencemag.org/content/365/6456/885) on the poker bot Pluribus released by Facebook's AI Lab and Carnegie Mellon University in July 2019.\n\n* **Poker-MCCFR repository**: Written in C#, can be used to generate the tables and train them. More than two players are not tested and some additional code changes are needed to set arbitrary raise sizes. **Discontinued**. \n* **Poker-MCCFR-CPP repository**: C++ version, much faster histogram generation, k-means++ clustering and training, includes live-search. \n\n## Poker-MCCFR repository (C#)\n\n### Prerequisites\n* Windows with Visual Studio (tested)\n* .NET core 3.0+\n\n## Poker-MCCFR-CPP repository (C++)\n\n### Capabilities\n- [x] Generate information abstractions (preflop, flop, turn and river tables)\n- [x] Train on NL Texas Hold'em with a variable number of players\n- [x] Display some training games and the starting hand action probabilities\n- [x] Live search and live play\n- [x] Qt visualization of the poker table for heads-up\n- [ ] Qt visualization of the poker table for 6 players\n- [x] Allow player vs AI games\n- [x] Different raise sizes in different game rounds\n\n### Prerequisites\n\n* Windows with Visual Studio and c++17 or later \n* Clang compiler needed for the hand indexer library, install it using the VS installer\n* Windows SDK Version 10 (others untested)\n* Ideally > 128GB RAM (depends on the number of players and the information/action abstraction sizes)\n* QT library if using the graphical interface\n\n### Compilation\n\n* Compile the project with -march=native and highest optimization level to achieve maximum performance on your system  \n* Run the generated executable\n\n### Configuration\n* Most parameters can be found in the files *params.h* or *params.cpp*\n```\n// Hardware\nnofThreads : The maximum number of threads used\n\n// Game parameters\nraises : The fractions of the pot which are valid bet sizes\nbuyIn : Generally 100 * Big Blind\nnofPlayers: Number of players\nBB : Big blind\nSB : Small blind\n\n// Information abstraction\nnofOpponentClusters : Number of clusters used for OCHS clustering on the river\nnofRiverBuckets : Number of clusters for the river\nnofTurnBuckets : Number of clusters for the turn\nnofFlopBuckets : Number of clusters for the flop\n```\nNote that imperfect recall is used after the flop.\n\n\n### Example Run\n\n#### Verification of hand indexer and performance benchmark\nCards such as AdKd and AcKc are suit isomorphic and hence can be treated as identical during training. For mapping poker hands to their canonical equivalent an algorithm developed by Kevin Waugh is used. More information can be found in the respective research paper [\"Fast and Optimal Hand Isomorphism Algorithm\"](https://www.aaai.org/ocs/index.php/WS/AAAIW13/paper/download/7042/6491). \n\n![Graph](media/hand_indexer_verification.png?)\n\n#### Clustering preflop hands\nStarting hands are clustered into 16 (or as specified) opponent hand clusters by generating monte carlo samples up until the river and playing out against all possible opponent hands. The resulting equity histograms are clustered using earth mover's distance (EMD). These 16 clusters are helpful to reduce the time it takes to cluster the river. Note that the 169 possible preflop hands themselves are not clustered during training. In the image below the top left corner corresponds to the cards 22, the bottom right corner to the cards AA and all cards on the right side of the connecting diagonal are suited.\n\n![Graph](media/sample_preflop_clusters.png)\n\n#### Calculating river, turn and flop histograms\nFor each of the suit isomorphic river hand combinations (2 + 5 cards) an equity histogram is calculated by counting the wins and draws against all possible opponent hand clusters. In a similar fashion, the turn (2 + 4 cards) and flop (2 + 3 cards) histograms are calculated. However, in the latter two cases it is possible to play against all opponent hand combinations and not just the 16 opponent hand clusters. \n\n![Graph](media/sample_river_histograms.png)\n\n#### Clustering the river, turn and flop histograms\nRiver histograms are clustered using k-means++ with the Euclidean metric (L2) and the turn and flop histograms with earth mover's distance. A sample of some clusters can be seen below. The first two cards are the player's starting hands.   \n\n![Graph](media/sample_clusters.png)\n\n#### Training\nAn example training run with two players, a buy-in of 200 each, a big blind of 2 and a small blind of 1 is shown below. Raises are set to 1, 2 and 3 times the pot for all betting rounds. A strong information abstraction of 1000 clusters for the flop, turn and river is used (169-1000-1000-1000).\n\nAfter the initial 2'900'000 training iterations around 6 million infosets are visited and the following preflop action probabilities are calculated for the small blind player. \n\n![Graph](media/training_run_start.png)\n\nSimilarly, the following charts show the preflop actions of the big blind player after a given action by the small blind player. \n\n![Graph](media/training_run_start_bbplayer.png)\n\n#### Result\nAt around 82'000'000 training iterations the following preflop tables are played. In particular, note that much fewer hands are folded and that very strong and rather weak hands are raised while the average hand is called.\n\n![Graph](media/training_run_82m.png)\n\nSimilarly, the charts showing the preflop actions of the big blind player after a given action by the small blind player.\n\n![Graph](media/training_run_82m_bbplayer.png)\n\nThe following shows some sample self-play games played by the evolved training table, where R0, R1 and R2 are 1, 2 and 3 pot raises respectively.\n\n![Graph](media/game1.png)\n\n![Graph](media/game2.png)\n\n"
 },
 {
  "repo": "coding-blocks/poker",
  "language": "Python",
  "readme_contents": "# Poker\n\nAn application that makes an Http request periodically on the given endpoint. This gives us more control rather than using crontab or agendajs.\n\n## Project explanation\n\nPoker is a django web server that creates and schedules jobs for making HTTP request to some endpoint.\nWe use python's crontab package for managing cronjobs.\n\nThese jobs are created inside crontab as soon as a Job object is created either through admin panel or through django shell. \n\n## Setting pipenv in python\nWe use pipenv for packaging and dependency management in the project.\n\nPipenv is a packaging tool for Python that solves some common problems associated with the typical workflow using pip, virtualenv, and the good old requirements.txt.\n\nIn addition to addressing some common issues, it consolidates and simplifies the development process to a single command line tool.\n\nInstall pipenv using:\n```shell script\npip install pipenv\n```\nNext, create and activate the virtual python environment:\n```shell script\npipenv shell\n```\nPipfile contains all the python packages required in the project, which could be installed simply using\n```shell script\npipenv install\n```\n## Setup database\n**Install postgres**\n\nWe use PostgreSql as database. In order to setup a local PSQL server on your machine, see [this](https://tutorial-extensions.djangogirls.org/en/optional_postgresql_installation/)\n \n**Create Database**\n\nNow create a database using `createdb` command with dbname as `poker`\n```shell script\ncreatedb poker\n```\n## Environment variables \nEnvironment variables are a way to store/pass some sensitive/config information that is required by the software. This can include passwords, secret keys, config variables.\n\nWe need to pass database config variable through `.env` file. \nCreate a `.env` file in the root directory of the project, with variables : `DB_USER`, `DB_NAME`, `DB_HOST` and `DB_PASSWORD`.\n\nSee `.env.example` for reference.\n\nPerform database migration:\n```shell script\npython manage.py migrate\n```\nCreate a superuser to access admin panel:\n```shell script\npython manage.py createsuperuser\n```\nNow run the development server:\n```shell script\npython manage.py runserver\n```\n\nOpen `http://localhost:8000/admin` to access admin panel and create jobs with appropriate URLs.\n\n## Project Structure\n* `cron`: Django application that stores and handles Cron Jobs in the databases and synchronizes them with the crontab.\n\n* `scripts`: Contains script for making http request to a given URL, request method and authentication token could be specified in the program arguments.\n\n* `services`: Contains services such as `CrontabService`, and allows creation, deletion and refresh of jobs in the crontab.\n\n* `poker`: Contains app settings, server configuration and url routes.\n\n## Using Docker\n\nAlternatively, the application could be run as docker containers, running the API server and one running postgres.\n\nInstall docker from [here](https://docs.docker.com/engine/install/ubuntu/) \n\nMake sure that docker is properly installed in your system.\n```shell script\ndocker run hello-world\n```\n\n### Building the Docker container\n\nIn order to build the docker container for poker API from `Dockerfile`, use:\n```shell script\ndocker build -t codingblocks/poker .\n```\n### Running docker container\nSince this is a multi-container application, use `docker-compose` to create and start all the services from the configuration.\n```shell script\ndocker-compose up\n```"
 },
 {
  "repo": "monicanagent/cypherpoker",
  "language": "ActionScript",
  "readme_contents": "CypherPoker\n===========\n\n**Note: Further development on the ActionScript CypherPoker project has been halted. Please visit the new [CypherPoker.JS GitHub repository](https://github.com/monicanagent/cypherpoker.js) for updates.**\n\nCypherPoker is an open source implementation of peer to peer cryptographic poker, or Mental Poker, written in Adobe ActionScript 3 (for Flash and AIR), and built using open source software and tools.\n\nIt is the culmination of decades' worth of research and analysis by some of the best minds in cryptography; Ron Rivest, Leonard Adleman,  Adi Shamir, Don Coppersmith, Shafi Goldwasser, and Silvio Micali to name only a few.\n\nThe full game, as hinted at in the 1979 Mental Poker paper, was not practical on the computer hardware of the time. Although capabilities have since greatly increased, to date the most complete implementation has been Heiko Stamer's LibTCMG library and source code for the game Skat. Unfortunately, the simple game and Stamer's library have been dormant for years. Only a handful of other attempts at Mental Poker presently exist in nascent stages and as nothing more than proofs-of-concept.\n\nMeanwhile there have been many interesting and exciting discussions about how software of this nature could be used, extended, and adapted. However, these have all been mostly theoretical in the absence of a practical implementation. With CypherPoker I intend to provide this implementation and refresh the dialogue with new possibilities.\n\n---\n\n\nTo get started with the CypherPoker source code please visit the wiki: https://github.com/monicanagent/cypherpoker/wiki\n\n*Note: The trunk CypherPoker respository should be considered the most unstable, in-development copy. For stable development snapshots see branches (https://github.com/monicanagent/cypherpoker/branches).\n\nFamiliarity with ActionScript 3 or its weakly-typed cousin JavaScript are not a requirement in order to compile the software but are useful when desiring to make changes to the code.\n\nWhere possible, third-party or other external libraries have been included. You are encouraged to check the official distributions for these libraries from time to time to ensure that you have the most appropriate version(s) available.\n\n---\n\nIf you'd like to support this project Bitcoin donations can be sent to the following address:\n1N5nkMSWf1vTkbekst4PvsGq3Q5eK38ga5\n"
 },
 {
  "repo": "Bryanx/poker",
  "language": "Java",
  "readme_contents": "# Description\nOnline multiplayer poker application, can be played in browser and on an Android device.\n\nMade in Spring and Angular.\n\n# Screenshots\nThe main poker table:\n\n![poker1](https://github.com/Bryanx/poker/blob/master/web-client/src/assets/img/poker1.png)\n\nThe main menu:\n\n![poker2](https://github.com/Bryanx/poker/blob/master/web-client/src/assets/img/poker2.png)\n\nNotifications:\n\n![poker3](https://github.com/Bryanx/poker/blob/master/web-client/src/assets/img/poker3.png)\n\n# Notice\nThis was a school project and at the moment I would only use this as an inspiration if you want to create a Poker app. The core mechanics of Poker are fine and the services are internally connected but were never really fully fleshed out and optimized.\n\nIf you really want to deploy it, here is how we did it:\n- The game-service and user-service are Spring Boot projects that were deployed on Heroku Postgress DB.\n- The web-client is an Angular 7 project that was also deployed on Heroku.\n- We didn't release the Android app to the Play Store. But you can run it locally and connect it to service layer.\n\nSome known issues:\n- Because a Spring Boot project takes quite some time to build and deploy it's possible Heroku thinks the app is timed out before it can startup.\n- Because a Spring Boot projects takes up a lot of resources it's possible the limit is achieved very fastly on Heroku free version (i think it was about 2GB at the time).\n- In hindsight, if you want to build a small-scale poker app, it's probably a better idea to build the core services in NodeJS or Ktor as they require much less resources to deploy.\n"
 },
 {
  "repo": "WayneYe/ScrumPoker",
  "language": "JavaScript",
  "readme_contents": "#Story Point Team Poker [![Build Status](https://travis-ci.org/WayneYe/ScrumPoker.svg?branch=master)](https://travis-ci.org/WayneYe/ScrumPoker)\n================\nA realtime agile planning web app powered by HTML5 WebSocket and nodejs/Socket.IO.\n\n#Screenshots\n###Creating Poker Room\n[![Create Room](https://raw.githubusercontent.com/WayneYe/ScrumPoker/master/Screenshots/ScrumPoker-Create-Room.png)][ss1]\n###Poker Room Overview\n[![Poker Room Overview](https://raw.githubusercontent.com/WayneYe/ScrumPoker/master/Screenshots/ScrumPoker-RoomInfo.png)][ss2]\n###View Voting Result\n[![View Voting Result](https://raw.githubusercontent.com/WayneYe/ScrumPoker/master/Screenshots/ScrumPoker-View-Result.png)][ss3]\n\n#Online Demo Location\n<http://teampoker.jit.su/>\n\n\n[ss1]: https://raw.githubusercontent.com/WayneYe/ScrumPoker/master/Screenshots/ScrumPoker-Create-Room.png\n[ss2]: https://raw.githubusercontent.com/WayneYe/ScrumPoker/master/Screenshots/ScrumPoker-RoomInfo.png\n[ss3]: https://raw.githubusercontent.com/WayneYe/ScrumPoker/master/Screenshots/ScrumPoker-View-Result.png\n\n"
 },
 {
  "repo": "donnemartin/poker",
  "language": "C++",
  "readme_contents": "![alt text](http://donnemartin.com/wp-content/uploads/2014/10/poker_cover.jpg)\n\npoker\n============\n\nPoker hand ranker written in C++.\n\n##License\n\n    Copyright 2014 Donne Martin\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n##Ranked Hands\n\nUses the set of hands from http://en.wikipedia.org/wiki/Hand_rankings to demonstrate its functionality:\n\n![alt tag](https://raw.githubusercontent.com/donnemartin/poker/master/res/pokerhands.png)"
 },
 {
  "repo": "pandaant/poker-cfrm",
  "language": "C++",
  "readme_contents": "# NLTH Poker Agent using Counterfactual Regret Minimization\n\n* Trains strategies for Kuhn-, Leduc- and Texas Holdem Poker\n* Supported Training methods:\n  * External Sampling\n  * Chance Sampling\n  * Outcome Sampling\n\n## Requirements\n* Clang (For C++11 support)\n* Boost Programmoptions 1.55+\n\n## Installation\n* Clone repositories and copy HandRanks.dat into cfrm:\n```\n$ git clone https://github.com/pandaant/cfrm.git\n$ git clone https://github.com/christophschmalhofer/poker.git\n$ cp poker/XPokerEval/XPokerEval.TwoPlusTwo/HandRanks.dat cfrm/handranks.dat\n$ #rm -r poker # was only needed for handranks.dat\n```\n* Compile required libraries:\n```shell\n$ cd cfrm/lib\n$ cd libpoker && make && cd ..\n$ cd libecalc && make && cd ..\n```\n* Compile EHS tool and generate Expected Handstrength table (EHS.dat):\n```shell\n$ cd cfrm/tools/ehs_gen\n# tweak values for number of threads and number of samples in src/gen_eval_table.cpp if neccessary\n$ make\n$ ./gen_eval_table #( may take some time! )\n$ mv ehs.dat ../../ehs.dat\n```\n* Build agent binaries\n```shell\n$ cd cfrm \n$ make\n```\n\n## Usage\nIf the build process was successful 4 binaries have been created:\n\n* ./cfrm is the main executable that trains a strategy.\n* ./cluster-abs generates card abstractions based of different metrics ( explained below ).\n* ./potential-abs generates a potential based card abstraction based on a precalculated cluster abstraction.\n* ./player can be used to play the agent against itself or other agents ( The server can be found [here](http://www.computerpokercompetition.org/repos/project_acpc_server/trunk/). )\n\n* The scripts folder contains example scripts to generate abstractions and strategies for different games.\n\n### Action Abstraction\n\nA action abstraction discretizes the range of betting possibilities a player may choose from.\nThis abstraction can reduce the number of states drastically. \n\n* NullActionAbstraction \n* PotRelationAbstraction\n\n### Card Abstraction\n\nNLTH has a large number of chance events due to private-card dealings preflop and public-card\ndealings post-flop. To reduce the number of outcomes that a chance event may result in, card\ncombinations that are similar in strength are combined into buckets. These buckets are then\nused as new chance events in the abstract game.\n\n#### NullCardAbstraction\n#### BlindCardAbstraction\n#### ClusterCardAbstractions\n* SI\n\n* EHS - Expected Hand Strength\n\n  E[HS] or E[HS 2] metric groups hands into buckets.\n  Although E[HS] is a good first estimator it can\u2019t distinguish between hands that realize their\n  expectation in different stages of the game.\n\n* EMD - Earth Movers Distance\n\n* OCHS - Opponent Cluster Hand Strength\n\n  OCHS can only be applied to the River phase. The E[HS] value is the probability to win against a random\n  distribution of opponent holdings. OCHS splits the opponents possible holdings into n buckets.\n  Each index in the histogram then corresponds to the probability of winning against hands that\n  are in the bucket with the same index.\n\n  OCHS can be used cluster river hands using a distribution-aware approach. It has been shown\n  that OCHS based river abstractions outperformed expectation based abstractions.\n\n* Mixed Abstractions\n\n  N stands for no abstraction, S for E[HS ], E for EMD clustering over histograms, O for OCHS and P for\n  the potential aware abstraction. The Ordering of the letters determines which abstraction is used in which phase of the game (preflop, flop, turn, river).\n\n  * MIXED_NEEO\n  * MIXED_NEES\n  * MIXED_NSSS\n  * MIXED_NOOO\n\n### Sampling Schemes\n\n* ChanceSampling\n\n  Chance sampled CFR randomly selects private and public chance events. The portion of the\n  game-tree that is reachable through the sampled chance events is traversed recursively. A vector\n  of probabilities is passed from the root down the tree containing the probability of each players\n  contribution to reach the current node in the tree. In all reached terminal nodes the utility can\n  be calculated in O(1).\n\n* ExternalSampling\n\n  External sampling only samples factors that are external to the player, namely chance nodes\n  and opponents actions. It has been proven that external sampling only requires a constant\n  factor more iterations in contrast to vanilla CFR. It still archives an asymptotic improvement in\n  equilibrium computation time because of an order reduction in cost per iteration. External\n  sampling performs a post-order depth-first traversal during an iteration.\n\n* OutcomeSampling\n\n  Outcome sampling only visits one terminal history in each iteration and updates the\n  regrets in information sets visited along the path traversed.\n\n### Action Translation \n\n* PseudoHarmonicMapping\n"
 },
 {
  "repo": "PhillipTaylor/PokerServer",
  "language": "C++",
  "readme_contents": "\nBrand New Poker Server written by Phillip Taylor in C++.\n\nDemonstrates the following:\n\t- The ability to write a non-trivial C++ application.\n\t- Good Object Orientated design skills\n\t- Use of Classes, Enums, Structs, Abstract Base Classes\n\t- Use of appropriate STL data structures and functions such as\n\t  std::random_shuffle\n\t- Use of C++11 features\n\t  (range based for-loop, initialiser lists, nullptr, auto)\n\t- Use of nontrivial syntax (dispatch function pointer table)\n\t- Appropriate use of const, references, pointers and namespaces\n\t- Does not leak memory.\n\t- Use of value type like objects (Logger)\n\t- Contains unit testing code\n\nOutput from valgrind on last run:\n\n   [23:57: (master) Debug$] valgrind ./PokerServer --verbose\n   ==5683== Memcheck, a memory error detector\n   ==5683== Copyright (C) 2002-2011, and GNU GPL'd, by Julian Seward et al.\n   ==5683== Using Valgrind-3.7.0 and LibVEX; rerun with -h for copyright info\n   ==5683== Command: ./PokerServer --verbose\n   ==5683== \n   (program output)\n   ==5683== \n   ==5683== HEAP SUMMARY:\n   ==5683==     in use at exit: 0 bytes in 0 blocks\n   ==5683==   total heap usage: 12,979 allocs, 12,979 frees, 908,869 bytes allocated\n   ==5683== \n   ==5683== All heap blocks were freed -- no leaks are possible\n   ==5683== \n   ==5683== For counts of detected and suppressed errors, rerun with: -v\n   ==5683== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 4 from 4)\n"
 },
 {
  "repo": "dirusali/pokerodds",
  "language": "Python",
  "readme_contents": ""
 },
 {
  "repo": "code-squad/swift-pokergameapp",
  "language": null,
  "readme_contents": "# swift-pokergameapp\nSTEP15 \ud3ec\ucee4\uac8c\uc784 \uc571 \uc800\uc7a5\uc18c\n"
 },
 {
  "repo": "carwow/pokerwars",
  "language": "Elixir",
  "readme_contents": "# Pokerwars\n\n[![CircleCI](https://circleci.com/gh/carwow/pokerwars.svg?style=svg)](https://circleci.com/gh/carwow/pokerwars)\n\nCheck out the wiki: https://github.com/carwow/pokerwars/wiki\n"
 },
 {
  "repo": "rocketacademy/video-poker-bootcamp",
  "language": "JavaScript",
  "readme_contents": "# Rocket Academy Coding Bootcamp: Video Poker\n"
 },
 {
  "repo": "somnusand/Poker",
  "language": "Erlang",
  "readme_contents": "# Poker\n\u68cb\u724c5\u54081\n"
 },
 {
  "repo": "andyxhadji/Simple-Poker",
  "language": null,
  "readme_contents": "Simple-Poker (Java)\n===================\n\nOne player simple poker, gives you a hand, option to draw a new card, and then evaluates your hand.\n\nHOW TO USE:\n\nRun the program, and it'll show you your cards and ask you to keep or\nredraw each one. After you do that, it will display your new hand and \ntell you its evaluation. Then you will be prompted to play again.\n\nTo test the program, use the makeHand() method in the Game class. You\ncan use it to set each card's rank and suit. You also must uncomment\n\"this.makeHand();\" in the play() method.\n\nGameTest class:\n\nThis class instantiates the Game class and calls game.play().\n\n\nGame class:\n\nThis class is responsible for instantiating the Deck and PLayer classes\nIt calls methods in Deck to fill and shuffle it, and then calls a method\nin Player to draw from the Deck. The hand is sorted and then it prompts\nredraws. Then the hand is sorted again before it is evaluated, to make\nevaluation easier. The evaluate() method evaluates the hand, starting \nfrom royal flush all the way down to highest card. Then the user is\nasked if they want to play again.\n\n\nCard class:\n\nThe Card class keeps track of the suit and rank of each card. It also\nhas a compareTo class so that I can use Arrays.sort() to sort the hand.\n\n\nPlayer class:\n\nThe Player class has two methods. One is a draw method which returns \nthe hand, and the other is a redraw method which returns the next card\nthe deck.\n\n\nDeck class:\n\nThe Deck class is responsible for filling the deck with 52 Card objects.\nIt shuffles by taking two random numbers from the size of the deck and \nswitching those two card. It does this 2000 times, but it can be changed\nby changing SHUFFLE_EXCHANGES in the constructor. Method deal() returns\na hand of 5 cards. redeal() returns the next card in the deck. The \nposition of the counter must be refreshed everytime the deck is redealed,\nsolved by refreshDeckPosition().\n"
 },
 {
  "repo": "ylboerner/easyPokerHUD",
  "language": "C#",
  "readme_contents": "# easyPokerHUD\n\neasyPokerHUD is a free and open-source poker HUD for PokerStars and 888 Poker. It is build with C# and SQLite. The code is released under the GPLv3-license.\n\n## Getting Started\n\nThese instructions will get you a copy of the project up and running on your local machine for development.\n\n1. Download and install Visual Studio 2017\n2. Download easyPokerHUD's repository into a folder of your choice\n3. Import easyPokerHUD via \"import\" in Visual Studio\n4. Download the full SQLite package via the NuGet package manager\n5. Set .net framework to 4.6.1 if it hasn't been already\n6. All set!\n\n\n## Contributing\n\nIn case you want to contribute, these are the current points of interest:\n\n* Extending easyPokerHUD to other poker rooms\n* Reworking the overlay\n* Adding new stats\n* Building a proper database scheme for SQLite\n* Code refactoring\n\n## Extending easyPokerHUD to a new poker room\n\nEach poker room has its own folder located in the [poker rooms folder](https://github.com/ylboerner/easyPokerHUD/tree/master/easyPokerHUD/Source/Poker%20Rooms). Three classes are needed for easyPokerHUD to support a poker room:\n\n#### Main.cs\nThe main.cs file instantiates a new directory watcher to monitor the directory where the poker room stores the users hand history. It also contains a cache for the players as well as as method to store them in the database. Additionally, there is a method to check if the hand is valid to be processed (This can be limited by player count, game mode etc.)\n\n#### Hand.cs\nThis class represents a hand for that specific poker room. It gets the path to the hand as input and outputs an object of type hand. This can then be used by the overlay. This class must inherit the class \"PokerRoomHand.cs\" which can be found in the \"Inheritance\" folder. It sports a few different methods which are handy to process the .txt containing the played hand.\n\n\n#### Overlay.cs\nOverlay.cs inherits low level functions needed for the overlay. The only thing to implement is a method for differentiating the different player counts and positioning the stats windows for each player accordingly. The current implementation uses hardcoded positions. A solution for a dynamic positioning would be highly appreciated.\n\n## Authors\n\n* **Yannick Boerner** - *Initial work* - (https://github.com/ylboerner)\n\n## License\n\nThis project is licensed under the GPL v3 License - see the [LICENSE.md](LICENSE.md) file for details\n"
 },
 {
  "repo": "pokermania/pokerengine",
  "language": "Python",
  "readme_contents": "Poker Engine\n============\n\nWhat is it ?\n------------\n\npokerengine is a python library that implements poker rules according to\nvariants and betting structures specified in configuration files.\n\nIt's designed to be used by a multiplayer poker server, a poker AI or a\npoker client.\n\nDevelopment status : Production [![Build Status](https://travis-ci.org/pokermania/pokerengine.png)](https://travis-ci.org/pokermania/pokerengine)\n-------------------------------\n\nFeedback and bug reports\n\nhttp://github.com/pokermania/pokerengine/\n\nInstallation\n------------\n\n> python setup.py install\n\nRequirements\n------------\n\n* python 2.6, 2.7\n* libxml2\n* libxslt\n* pypokereval\n* reflogging\n* pokerdistutils\n"
 },
 {
  "repo": "halomademeapc/pokeR",
  "language": "TypeScript",
  "readme_contents": "# PokeR\n[![Build Status](https://travis-ci.org/halomademeapc/pokeR.png?branch=master)](https://travis-ci.org/halomademeapc/pokeR) [![Docker Pulls](https://img.shields.io/docker/pulls/halomademeapc/poker)](https://hub.docker.com/repository/docker/halomademeapc/poker)\n\nRealtime planning poker with [SignalR](https://github.com/SignalR/SignalR).\n\n*Check out [the demo](https://app.planning.rocks)!*\n\nPokeR is a realtime planning poker app built with .NET Core and Angular.  It features a custom-built frontend with some slick animations to make your next planning session just a little bit nicer.  There's also a REST API that you can use to customize the game to your liking. \n\nPokeR uses Entity Framework Core in-memory.  If you need persistence for some reason, you can swap this out for SQLite or another provider.  Data is seeded on startup from the json files in the project's root directory. You can also edit options via the exposed REST API.  Documentation for the API can be viewed in the Swagger UI at `/swagger`.\n\n## Quickstart\nThe easiest way to get going is by pulling down a ready-to-go image from Docker Hub.  \n```powershell\ndocker run --name poker --restart always -d -p 80:80 halomademeapc/poker\n```\n\n## Overview\n![Room creation screen](https://i.imgur.com/UdVZaty.png)\nYou can pick any integer that isn't already taken to be your room number.  This number will appear in share links to your room.  Options for the deck to play with are Modified Fibonacci (.5, 1, 2, 3, 5, 8, 13, 20) and T-Shirt Sizes, but more can be added by configuring the defaults JSON file or by posting new decks to the REST API at runtime.  \n\n![Room join screen](https://i.imgur.com/0l1dU76r.png)\nUsers can join your room by going directly to `/rooms/{roomId}` or by going to the homepage and clicking on the \"Join a room\" button.  The first person into the room (assumed to be the person who created it) is designated as the host and gets extra controls to manage voting.\n\n![Roster pane](https://i.imgur.com/mjIJbfS.png)\nIf you need to change who is in the host role, expanding the Roster tab on the left then dragging-and-dropping the crown icon onto another user will transfer ownership of the room to them.  \n\n![Playfield](https://i.imgur.com/P55ujrs.png)\nCards are played face-down and revealed once everyone has played.  If someone changes their vote mid-round, you will see an animation of the original card being withdrawn and the new one being played in its stead.\n\n![Confetti](https://i.imgur.com/VEaMsyxr.png)\nIf everybody happens to have the same vote, you'll be greeted with some celebratory confetti for the concensus courtesy of [confetti-js](https://www.npmjs.com/package/confetti-js).  One danger with this is that people like it so much it can start to encourage groupthink.  \n\n![Countdown](https://i.imgur.com/2CB9CkIr.png)\nIf a user is AFK or otherwise responsive and is holding things up, the host can set a deadline for the voting round.  Everyone will see the countdown and once time is up, votes will be revealed even if not everyone has responded.\n\n![New round button](https://i.imgur.com/sOS8wjE.png)\nThe host can begin a new round to clear out any existing votes and start things off fresh.\n\n![Theme icon](https://i.imgur.com/amy7wtL.png) ![Theme switcher](https://i.imgur.com/yCJJYFG.png)\nThe app will respect your OS dark mode preference by default.  If you hover over the icon in the top-right corner, you can switch themes manually.\n\n## Requirements\n**To build**\n* .NET Core 3.1 SDK\n* Node.js\n\n**To run**\n* .NET Core 3.1 Runtime\n\n## Building\n```powershell\ndotnet publish ./PokeR.csproj\n```\n\n## Running\n```powershell\ndotnet ./PokeR.dll\n```\n"
 },
 {
  "repo": "forestturner/PokerHandRangeCalc",
  "language": "JavaScript",
  "readme_contents": "# PokerHandRangeCalculator\n\n[PokerHandRange](http://forestturner.github.io/PokerHandRangeCalc)\n\nThis Calculator was a frontend project developed with React and Redux. \n\nSee equities, combination counts, and hand value breakdowns: instantly. This Poker hand Range Calculator will help you learn flop textures, how ranges split up on boards, how equities shift on turn and river cards. A tool to learn and improve your Texas Poker Hold'em strategy.\n\nFirst, we start with a preflop range.\nGet started by selecting a preflop range for the scenario you are analyzing.\n\n## Features\n\n### Single-page app\n\nThis Calculator uses react and redux to display and pass data around very smoothly. The odds are instantly calculated and displayed as a card is added to the table or the dead card grid.\n\n\n![image of site](http://res.cloudinary.com/dnuopy1ir/image/upload/v1474874798/PokerHandCalc1.3_mgpp3w.png)\n"
 },
 {
  "repo": "thlorenz/phe",
  "language": "JavaScript",
  "readme_contents": "# phe [![build status](https://secure.travis-ci.org/thlorenz/phe.png)](http://travis-ci.org/thlorenz/phe)\n\nPoker hand evaluator, a port of [PokerHandEvaluator](https://github.com/HenryRLee/PokerHandEvaluator).\n\nIt's super fast even though still 3x slower than the C version it was ported from, but hey you can use this directly\nwith Node.js or even in the browser.\n\nIt's fast, cause it's using a hash algorithm relying on masking and tables. However the table data isn't huge like I've\nseen in other projects. This is possible because flushes are considered separately from other rankings\n\nI highly recommend reading the [informative writeup on how this all\nworks](https://github.com/HenryRLee/PokerHandEvaluator/tree/master/Documentation).\n\n```js\nconst { rankBoard, rankDescription } = require('phe')\n\nconst board = 'As Ks 4h Ad Kd'\nconst rank = rankBoard(board)\nconst name = rankDescription[rank]\n\nconsole.log('%s is a %s', board, name)\n```\n\n    As Ks 4h Ad Kd is a Two Pair\n\n## Installation\n\n    npm install phe\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n**Table of Contents**  *generated with [DocToc](https://github.com/thlorenz/doctoc)*\n\n- [API](#api)\n  - [evaluateCardCodes](#evaluatecardcodes)\n  - [evaluateCards](#evaluatecards)\n  - [evaluateCardsFast](#evaluatecardsfast)\n  - [evaluateBoard](#evaluateboard)\n  - [rankCards](#rankcards)\n  - [rankCardsFast](#rankcardsfast)\n  - [rankCardCodes](#rankcardcodes)\n  - [rankBoard](#rankboard)\n  - [setCardCodes](#setcardcodes)\n  - [setStringifyCardCodes](#setstringifycardcodes)\n  - [ranks](#ranks)\n  - [rankDescription](#rankdescription)\n  - [handRank](#handrank)\n  - [rankCodes](#rankcodes)\n  - [suitCodes](#suitcodes)\n  - [stringifyCardCode](#stringifycardcode)\n  - [stringifyRank](#stringifyrank)\n  - [stringifySuit](#stringifysuit)\n  - [cardCode](#cardcode)\n  - [cardCodes](#cardcodes)\n  - [boardCodes](#boardcodes)\n- [License](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## [API](https://thlorenz.github.io/phe)\n\n<!-- Generated by documentation.js. Update this documentation by updating the source code. -->\n\n### evaluateCardCodes\n\nEvaluates the 5 - 7 card codes to arrive at a number representing the hand\nstrength, smaller is better.\n\n**Parameters**\n\n-   `cards` **[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)&lt;[Number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)>** the cards, i.e. `[ 49, 36, 4, 48, 41 ]`\n\nReturns **[Number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)** the strength of the hand comprised by the card codes\n\n### evaluateCards\n\nEvaluates the 5 - 7 cards to arrive at a number representing the hand\nstrength, smaller is better.\n\n**Parameters**\n\n-   `cards` **[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)&lt;[String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)>** the cards, i.e. `[ 'Ah', 'Ks', 'Td', '3c', 'Ad' ]`\n\nReturns **[Number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)** the strength of the hand comprised by the cards\n\n### evaluateCardsFast\n\nSame as `evaluateCards` but skips `cards` argument type check to be more\nperformant.\n\n**Parameters**\n\n-   `cards`  \n\n### evaluateBoard\n\nEvaluates the given board of 5 to 7 cards provided as part of the board to\narrive at a number representing the hand strength, smaller is better.\n\n**Parameters**\n\n-   `board` **[String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** the board, i.e. `'Ah Ks Td 3c Ad'`\n\nReturns **[Number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)** the strength of the hand comprised by the cards of the board\n\n### rankCards\n\nEvaluates the 5 - 7 cards and then calculates the hand rank.\n\n**Parameters**\n\n-   `cards` **[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)&lt;[String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)>** the cards, i.e. `[ 'Ah', 'Ks', 'Td', '3c', 'Ad' ]`\n\nReturns **[Number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)** the rank of the hand comprised by the cards, i.e. `1` for\n`FOUR_OF_A_KIND` (enumerated in ranks)\n\n### rankCardsFast\n\nSame as `rankCards` but skips `cards` argument type check to be more\nperformant.\n\n**Parameters**\n\n-   `cards`  \n\n### rankCardCodes\n\nEvaluates the 5 - 7 card codes and then calculates the hand rank.\n\n**Parameters**\n\n-   `cardCodes` **[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)&lt;[Number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)>** the card codes whose ranking to determine\n\nReturns **[Number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)** the rank of the hand comprised by the card codes, i.e. `1` for\n`FOUR_OF_A_KIND` (enumerated in ranks)\n\n### rankBoard\n\nEvaluates the given board of 5 to 7 cards provided as part of the board to\nand then calculates the hand rank.\n\n**Parameters**\n\n-   `board` **[String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** the board, i.e. `'Ah Ks Td 3c Ad'`\n\nReturns **[Number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)** the rank of the hand comprised by the cards, i.e. `1` for\n`FOUR_OF_A_KIND` (enumerated in ranks)\n\n### setCardCodes\n\nConverts a set of cards to card codes.\n\n**Parameters**\n\n-   `set` **[Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set)&lt;[String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)>** card strings set, i.e. `Set({'Ah', 'Ks', 'Td', '3c, 'Ad'})`\n\nReturns **[Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set)&lt;[Number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)>** card code set\n\n### setStringifyCardCodes\n\nConverts a set of card codes to their string representations.\n\n**Parameters**\n\n-   `set` **[Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set)&lt;[Number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)>** card code set\n\nReturns **[Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set)&lt;[String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)>** set with string representations of the card codes,\n                       i.e. `Set({'Ah', 'Ks', 'Td', '3c, 'Ad'})`\n\n### ranks\n\nEnumeration of possible hand ranks, each rank is a number from 0-8.\n\n    STRAIGHT_FLUSH\n    FOUR_OF_A_KIND\n    FULL_HOUSE\n    FLUSH\n    STRAIGHT\n    THREE_OF_A_KIND\n    TWO_PAIR\n    ONE_PAIR\n    HIGH_CARD\n\n### rankDescription\n\nProvides a description of a hand rank number.\nIt's an {Array} which can be indexed into with the hand rank\nin order to retrieve the matching description.\n\nExample: `rankDescription[rank.FULL_HOUSE] === 'Full House'`\n\n### handRank\n\nConverts a hand strength number into a hand rank number\n`0 - 8` for `STRAIGHT_FLUSH - HIGH_CARD`.\n\n**Parameters**\n\n-   `val` **[Number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)** hand strength (result of an `evaluate` function)\n\nReturns **[Number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)** the hand rank\n\n### rankCodes\n\nThe ranks of the cards sorted highest to lowest.\n\n-   2 = 0\n-   3 = 1\n-   4 = 2\n-   5 = 2\n-   6 = 4\n-   7 = 5\n-   8 = 6\n-   9 = 7\n-   T = 8\n-   J = 9\n-   Q = 10\n-   K = 11\n-   A = 12\n\n6 bits each.\n\nReturns **[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)** the ranks indexed as described above\n\n### suitCodes\n\nThe suitCodes\n\n-   s = 0\n-   h = 1\n-   d = 2\n-   c = 3\n\nReturns **[Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)** the suits indexed as described above\n\n### stringifyCardCode\n\nConverts the given card code into a string presentation.\n\n**Parameters**\n\n-   `code` **[Number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)** the card code, i.e. obtained via `cardCode(rank, suit)`.\n\nReturns **[String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** a string representation of the card in question, i.e. `Ah`\n\n### stringifyRank\n\nConverts the given rank index into a rank.\n\n**Parameters**\n\n-   `rank` **[Number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)** the rank to stringify, i.e. `0b000100`\n\nReturns **[String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** the string of the rank, i.e. `'2'`\n\n### stringifySuit\n\nConverts the given suit index to a suit.\n\n**Parameters**\n\n-   `suit` **[Number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)** the suit to stringify, i.e. `0b1`\n\nReturns **[String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** the string of the sut, i.e. `'c'` (clubs)\n\n### cardCode\n\nDetermines the code for the given hand.\n\n**Parameters**\n\n-   `rank` **[String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** the rank of the hand, i.e. `A`\n-   `suit` **[String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** the suit of the hand, i.e. `h`\n\nReturns **[Number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)** the card code that can be used to further evaluate the hand\n\n### cardCodes\n\nDetermines the code for the given hands.\n\n**Parameters**\n\n-   `cards` **[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)&lt;[String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)>** the cards to convert into card codes, i.e. `[ 'Ah', 'Kd' ]`\n\nReturns **[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)&lt;[Number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)>** the card codes that can be used to further evaluate the hands\n\n### boardCodes\n\nDetermines the code for the given hands.\n\n**Parameters**\n\n-   `board` **[String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** the board to convert into card codes, i.e. `'Ah Kd Qh'`\n\nReturns **[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)&lt;[Number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)>** the card codes that can be used to further evaluate the hands\n\n## License\n\nMIT\n"
 },
 {
  "repo": "czanoci/Poker",
  "language": "Python",
  "readme_contents": "Poker\n=====\n\nAn implementation of a poker AI agent. This project was submitted as a final project for CS 221: Artificial Intelligence:\nPrinciples and Techniques at Stanford University. \n\nThis is an AI agent that plays Texas Hold'em. The game is cast as a Markov Decission Process (MDP) and I use QLearning\ntogether with Monte Carlo simulations and epsilon-greedy algorithm to train the agent. \nFirst, the bot learns by playing against fixed policy opponents (tight-aggressive, loose-aggressive, tight-passive, \nloose-passive and random opponents). Then it can play against itself or a human user. \n"
 },
 {
  "repo": "schalermthai/pokerhand",
  "language": "TypeScript",
  "readme_contents": "# pokerhand - OOP vs FP\n\nThis kata is to demonstrate different ways of acheiving the same results using different pardigmns, (OOP vs FP). \n\nOne paradigmn is not superior than the other as long as developer followed good design principles such as SOLID.\n\n# More about the kata\n\nhttp://codingdojo.org/kata/PokerHands/\n"
 },
 {
  "repo": "kripod/mental-poker",
  "language": "JavaScript",
  "readme_contents": "# mental-poker\n\n[![Version (npm)](https://img.shields.io/npm/v/mental-poker.svg)](https://npmjs.com/package/mental-poker)\n[![Build status](https://img.shields.io/travis/kripod/mental-poker/master.svg)](https://travis-ci.org/kripod/mental-poker)\n[![Dependencies](https://img.shields.io/david/kripod/mental-poker.svg)](https://david-dm.org/kripod/mental-poker)\n[![Code style: Prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg)](https://github.com/prettier/prettier)\n\nA purely functional mental poker library, based on the [thesis of Choongmin Lee][].\n\n[thesis of choongmin lee]: http://www.clee.kr/thesis.pdf\n\n## Introduction\n\nMental poker makes it possible to play a fair game of poker over a physical distance without the need for a trusted third party, using cryptographic methods to shuffle and then deal from a deck of cards.\n\nA coalition, even if it is of the maximum size, shall not gain advantage over honest players, except that players in a coalition may know the hands of each other.\n\n## Getting started\n\n_It is strongly recommended to [read the specification][] before exploring the interface of the implementation._\n\nAn example of using the API can be found [here](example).\n\n[read the specification]: specs\n\n### Establishing a game\n\n#### Configuration\n\nFirstly, a configuration object has to be created and agreed upon by players.\n\n```js\nimport { createConfig } from 'mental-poker';\n\n// Set up a game with a standard 52-card deck\nconst config = createConfig(52);\n```\n\n#### Initial deck setup\n\nEach player shall generate a codeword fragment for each card of the configured deck type. Fragments which correspond to the same card will be combined to produce a deck of cards, represented as an array of codewords.\n\nPlayers should share codeword fragments with each other through a commitment scheme, to prevent malicious entities from manipulating the generated codewords in their own favor.\n\n```js\nimport { createPlayer, createDeck } from 'mental-poker';\n\nconst self = createPlayer(config);\n\n// Players should share their public data with each other\n// Sensitive information (e.g. private keys) shall be kept in secret\nconst opponents = [\n  /* Received from others */\n];\n\n// Points generation (Thesis, 3.1.1)\nconst cardCodewords = createDeck(\n  [self, ...opponents].map(player => player.cardCodewordFragments),\n);\n```\n\nAfter that, the deck shall be shuffled and each of its cards must be encrypted one by one.\n\n```js\nimport { encryptDeck, decryptDeck } from 'mental-poker';\n\n// Any kind of array shuffling algorithm may be used\nimport shuffle from 'lodash.shuffle';\n\n// The deck may also be received from the previous player in turn\nlet deck = cardCodewords;\n\n// Cascaded shuffling (Thesis, 3.1.2)\n// Each player shall shuffle the deck and encrypt it as a whole\ndeck = encryptDeck(shuffle(deck), self.keyPairs[config.cardCount].privateKey);\n\n// The deck shall be passed on to the next player\ndeck = [\n  /* And then received from someone else */\n];\n\n// Locking (Thesis, 3.1.3)\n// Each player shall decrypt the deck as a whole and encrypt its cards one by one\ndeck = encryptDeck(\n  decryptDeck(deck, self.keyPairs[config.cardCount].privateKey),\n  self.keyPairs.map(keyPair => keyPair.privateKey),\n);\n```\n\n### Drawing cards\n\nThe value of a card may be known by anyone in possession of its corresponding private keys it has been encrypted with.\n\n```js\nimport { decryptCard } from 'mental-poker';\n\n// Drawing/opening (Thesis, 3.2-3.3)\n// Choose an encrypted card at random\nconst cardEncrypted = deck[i];\n\n// Find out the codeword of the card after all the required keys are available\nconst cardDecrypted = decryptCard(\n  cardEncrypted,\n  [self, ...opponents].map(player => player.keyPairs[i].privateKey),\n);\n\n// The resulting codeword index below represents a card ID\n// If its value is -1, then someone has violated the protocol\nconst codewordIndex = cardCodewords.findIndex(cardCodeword =>\n  cardCodeword.equals(cardDecrypted),\n);\n```\n\n## API\n\nPlease see the [API reference][] for further information.\n\n[api reference]: docs/API.md\n"
 },
 {
  "repo": "wzdwc/TexasPokerGame",
  "language": "TypeScript",
  "readme_contents": "Texas Poker Game\r\n================\r\n>  This is an online Texas Hold'em game, base on TypeScript,Egg,Node.js,Vue\r\n## Server\r\n> base on midway.js,TypeScript, socket.io, mysql.\r\n\r\nDetail: [server-readme](https://github.com/wzdwc/TexasPokerGame/tree/master/server)\r\n## Client\r\n> base on vue-cli, TypeScript, socket.io.\r\n\r\nDetail: [client-readme](https://github.com/wzdwc/TexasPokerGame/tree/master/client)\r\n## Project structure\r\n```\r\n\u251c\u2500client\r\n\u251c\u2500database\r\n\u2502  \u2514\u2500poker.sql\r\n\u2514\u2500server\r\n```\r\n## Demo\r\nSee: [demo](http://www.jojgame.com)\r\n![img](https://github.com/wzdwc/TexasPokerGame/blob/master/gif/qr.jpg)\r\n\r\n![img](https://github.com/wzdwc/TexasPokerGame/blob/master/gif/demo1.gif)\r\n\r\n![img](https://github.com/wzdwc/TexasPokerGame/blob/master/gif/demo2.gif)\r\n\r\n![img](https://github.com/wzdwc/TexasPokerGame/blob/master/gif/demo3.gif)\r\n\r\n![img](https://github.com/wzdwc/TexasPokerGame/blob/master/gif/demo4.gif)\r\n## License\r\nThe MIT License (MIT)\r\n"
 },
 {
  "repo": "siimon/Web-Planning-Poker",
  "language": "JavaScript",
  "readme_contents": "# SCRUM Planning Poker\n\nThis application is used during planning poker meetings and is useful when the team isn't at the same location.\n\n## Requirements\n\n* HTML5 supporting browser that supports websockets.\n* node.js and npm installed\n* socket.io (included in repo)\n* express (npm install express)\n* some kind of webserver, only tested on apache.\n\n## Setup\n\n* Copy webdir to a new directory where your webserver can access it.\n* Adjust settings in scripts/settings.js and settings.js.\n* Start the server with node scrum_cards_server.js <admin_nick>\n* Browse to host/admin.html and enter your admin nick as name.\n* All participants should browse to host url and just enter their name to participate in the planning poker.\n\n## Credits\n\n* socket.io\n* express\n* node.js\n"
 },
 {
  "repo": "igreshev/lightning-poker",
  "language": "JavaScript",
  "readme_contents": "## Bitcoin Lightning Network Texas Hold'em Poker\n\nUsing [Firebase](https://firebase.google.com) as platform\n\n## License\n\nLightning Poker is released under the terms of the MIT license. See https://opensource.org/licenses/MIT for more information.\n\nThis project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).\n"
 },
 {
  "repo": "siavashg87/poker-odds-calc",
  "language": "TypeScript",
  "readme_contents": "# Poker Odds Calc\n\n[![Build Status](https://travis-ci.org/rundef/node-poker-odds-calculator.svg?branch=master)](https://travis-ci.org/rundef/node-poker-odds-calculator)\n[![Node version required](https://img.shields.io/node/v/poker-odds.svg)](https://www.npmjs.com/package/poker-odds-calc)\n[![Latest Stable Version](https://img.shields.io/npm/v/poker-odds-calc.svg)](https://www.npmjs.com/package/poker-odds-calc)\n\nFastest and most accurate node module for calculating odds of poker games Texas Hold'em, Texas Shortdeck/Sixplus and Omaha.\n\n## Installation\n\n```bash\nnpm install -g poker-odds-calc\n```\n\n### Usage\n\n```bash\npoker-odds-calc -p AdKh -p AcKh -b 5sTd9c\n\n# options\n-g, --game texas_holdem     # Select between texas_holdem, shortdeck_holdem and omaha. Default texas_holdem.\n-b, --board 5sTd9cTh        # Define community cards.\n-p, --player AcKh           # Define any number of player hand.\n-l, --limit 1000            # Limit number of iterations. Default 100,000.\n-e, --exhaustive            # Run all possible board combinations, regardless limit option.\n-d, --dead 2s2d             # Dead card(s) to exclude from calculation.\n--tripsbeatstraight         # Option only available for -g shortdeck_holdem\n-h, --help                  # Show help\n```\n\npoker-odds-calc -p QsKs -p QdKd -b JsTs5hTd\n\n![--example](https://i.imgur.com/CDxNZcz.png)\n\n## API Usage\n\nLet's take the previous example, but use the API instead:\n\n```js\nimport {TexasHoldem, SixPlusHoldem, Omaha} from './index';\n\nconst Table = new TexasHoldem();\nTable\n  .addPlayer([\"Qs\", \"Ks\"])\n  .addPlayer([\"Qd\", \"Kd\"])\n\n  .setBoard([\"Js\",\"Ts\",\"5h\",\"Td\"])\n  // or\n  .boardAction(board => {\n    board\n      .setFlop([\"Js\", \"Ts\", \"5h\"])\n      .setTurn(\"Td\")\n  })\n  ;\n\nconst Result = Table.calculate();\n\nResult.getPlayers().forEach(player => {\n  console.log(`${player.getName()} - ${player.getHand()} - Wins: ${player.getWinsPercentageString()} - Ties: ${player.getTiesPercentageString()}`);\n});\n\nconsole.log(`Board: ${Result.getBoard()}`);\nconsole.log(`Iterations: ${Result.getIterations()}`);\nconsole.log(`Time takes: ${Result.getTime()}ms`);\n\n// Outputs:\n// Player #1 - QsKs - Wins: 20.45% - Ties: 79.55%\n// Player #2 - QdKd - Wins: 0.00% - Ties: 79.55%\n// Board: JsTs5hTd\n// Iterations: 44\n// Time takes: 8ms\n\n```\n\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details."
 },
 {
  "repo": "Rainist/pycon-2018-banksalad-holdem",
  "language": "Python",
  "readme_contents": "<h1 align=\"center\">Pycon 2018 x Banksalad Hold'em</h1>\n\n<p align=\"center\">\n  <img src=\"./resources/banksalad-holdem.png\" alt=\"banksalad-hold'em\" width=\"256px\" />\n</p>\n\n<p align=\"center\">\n  <a href=\"https://travis-ci.org/Rainist/pycon-2018-banksalad-holdem\">\n    <img src=\"https://travis-ci.org/Rainist/pycon-2018-banksalad-holdem.svg?branch=develop\" alt=\"Travis CI Build Status\" />\n  </a>\n  <a href=\"https://www.python.org/downloads/release/python-370/\">\n    <img src=\"https://img.shields.io/badge/python-3.7-blue.svg\" alt=\"python 3.7\" />\n  </a>\n  <a href=\"https://rainist.com/recruit\">\n    <img src=\"https://img.shields.io/badge/%3C%2F%3E%20with%20%E2%99%A5%20by-Rainist-blue.svg\" alt=\"love\" />\n  </a>\n</p>\n<p align=\"center\">\n    <a href=\"https://pycon2018.banksalad.com\">https://pycon2018.banksalad.com</a>\n</p>\n\n- \ubc45\ud06c\uc0d0\ub7ec\ub4dc \ud640\ub364\uc740 \uae30\uc874\uc758 \ud14d\uc0ac\uc2a4 \ud640\ub364\uc5d0\uc11c \uba87 \uac00\uc9c0 \uaddc\uce59\uc744 \ubcc0\uacbd\ud558\uc5ec \uad6c\ud604\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\n- 5\uba85\uc758 \ud50c\ub808\uc774\uc5b4\uac00 \ud558\ub098\uc758 \uac8c\uc784\uc5d0 \ucc38\uc5ec\ud558\uc5ec \ud50c\ub808\uc774\ud558\uac8c \ub418\uba70, 2\uba85\uc758 \ud50c\ub808\uc774\uc5b4\uac00 \ub0a8\uac70\ub098 100\ub77c\uc6b4\ub4dc\uac00 \ub05d\ub0ac\uc744 \uacbd\uc6b0 \ud55c \uac8c\uc784\uc774 \ub05d\ub098\uac8c \ub429\ub2c8\ub2e4.\n    - \ub450 \uba85\uc758 \ud50c\ub808\uc774\uc5b4\uac00 \uc0b4\uc544 \ub0a8\uc744 \uacbd\uc6b0, \ub450 \uba85\uc774 \ubaa8\ub450 \ub2e4\uc74c \ub77c\uc6b4\ub4dc\uc5d0 \uc9c4\ucd9c\ud569\ub2c8\ub2e4.\n    - 100 \ub77c\uc6b4\ub4dc\uac00 \ub05d\ub098 \uc138 \uba85 \uc774\uc0c1\uc758 \ud50c\ub808\uc774\uc5b4\uac00 \uc0b4\uc544 \ub0a8\uc744 \uacbd\uc6b0, \uce69\uc744 \uac00\uc7a5 \ub9ce\uc774 \uc18c\uc9c0\ud55c \ud50c\ub808\uc774\uc5b4 \ub458\uc774 \ub2e4\uc74c \ub77c\uc6b4\ub4dc\uc5d0 \uc9c4\ucd9c\ud569\ub2c8\ub2e4.\n- \ubcf8 \uac8c\uc784\uc740 \ud574\ucee4\ud1a4 \ud488\uc9c8\uc758 \ucf54\ub4dc\ub85c \ub9cc\ub4e4\uc5b4\uc838 \ud589\uc0ac \ub3d9\uc548 \uc218\uc2dc\ub85c \ud328\uce58\uac00 \uc62c\ub77c\uc62c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub54c\ub54c\ub85c \ubcc0\uacbd\uc0ac\ud56d\uc774 \uc788\ub294\uc9c0 \ud655\uc778 \ubd80\ud0c1\ub4dc\ub9bd\ub2c8\ub2e4.\n\n## How to Play\n\n### Code\n\n[turn.py](holdem/turn.py) \uc758 `bet(...)` \ud568\uc218\ub97c \uad6c\ud604\ud558\uc2e0 \ud6c4, \ud504\ub85c\uadf8\ub7a8\uc744 \uc2e4\ud589\ud574\ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n```python\ndef bet(\n    my_chips: int, # \ub0a8\uc740 \uce69 \uc218\n    my_cards: List[Card], # \ud50c\ub808\uc774\uc5b4\uc758 \uc190 \ud328 (2\uc7a5)\n    bet_players: List[Other], # \uc774\ubc88 \ud134\uc5d0 \ubca0\ud305\ud55c \ud50c\ub808\uc774\uc5b4\ub4e4\n    betting_players: List[Other], # \uc544\uc9c1 \ubca0\ud305\ud558\uc9c0 \uc54a\uc740 \ud50c\ub808\uc774\uc5b4\ub4e4\n    community_cards: List[Card], # \ucee4\ubba4\ub2c8\ud2f0 \uce74\ub4dc + \ud134 \uce74\ub4dc + \ub9ac\ubc84 \uce74\ub4dc (3\uc7a5 ~ 5\uc7a5)\n    min_bet_amt: int, # \uac00\ub2a5\ud55c \ucd5c\uc18c \ubca0\ud305\uc561\n    max_bet_amt: int, # \uac00\ub2a5\ud55c \ucd5c\ub300 \ubca0\ud305\uc561\n    total_bet_amt: int # \uc5ec\ud0dc\uae4c\uc9c0 \ubca0\ud305\ud55c \ub204\uc801 \uae08\uc561\n) -> int:\n    pass\n```\n\n#### Return\n\n- \ubca0\ud305\ud560 \uce69\uc758 \uc218 (Int)\n  - `0`\uc744 `return` \ud558\uac8c \ub418\uba74 \ud574\ub2f9 \ud134\uc740 \ud3ec\uae30(`die`)\ud55c\ub2e4\ub294 \uc758\ubbf8\uc785\ub2c8\ub2e4.\n  - \ubc18\ub4dc\uc2dc `min_bet_amt`\uc640 `max_bet_amt`\ub97c \uace0\ub824\ud558\uc5ec \ubca0\ud305\ud560 \uce69 \uc218\ub97c \uacb0\uc815\ud574\uc8fc\uc138\uc694. (\uc62c\ubc14\ub974\uc9c0 \uc54a\uc740 \ubc94\uc704\uc758 \uac12\uc744 \ubc18\ud658\ud560 \uacbd\uc6b0, \uc790\ub3d9\uc73c\ub85c \ud574\ub2f9 \ub77c\uc6b4\ub4dc\uc5d0\uc11c \uc81c\uc678\ub429\ub2c8\ub2e4.)\n  - \uac00\uc9c0\uace0 \uc788\ub294 \ubaa8\ub4e0 \uce69\uc744 \ubca0\ud305\ud560 \uacbd\uc6b0 \uc62c\uc778 \ud615\ud0dc\ub85c \uc9c4\ud589\ub429\ub2c8\ub2e4.\n- \ud568\uc218 \uc2e4\ud589 \uc911 \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud560 \uacbd\uc6b0, \ud574\ub2f9 \ub77c\uc6b4\ub4dc\uc5d0\uc11c \uc81c\uc678\ub429\ub2c8\ub2e4.\n- \ud568\uc218 \uc2e4\ud589 \uc2dc\uac04\uc774 1\ucd08 \uc774\uc0c1 \uac78\ub9b4 \uacbd\uc6b0, \ud574\ub2f9 \ub77c\uc6b4\ub4dc\uc5d0\uc11c \uc81c\uc678\ub429\ub2c8\ub2e4. \n\n#### Example\n\n```python\ndef always_bet(\n    my_chips: int,\n    my_cards: List[Card],\n    bet_players: List[Other],\n    betting_players: List[Other],\n    community_cards: List[Card],\n    min_bet_amt: int,\n    max_bet_amt: int,\n    total_bet_amt: int\n) -> int:\n    if my_chips >= min_bet_amt:\n        return min(max_bet_amt, min_bet_amt)\n    else:\n        return 0\n\n```\n\n[example.py](holdem/example.py)\uc758 `always_bet(...)` \uc758 \uacbd\uc6b0, \ud604\uc7ac \uac8c\uc784 \uc0c1\ud669\uc744 \uace0\ub824\ud558\uc9c0 \uc54a\uace0 \ubc18\ub4dc\uc2dc \ubca0\ud305\uc744 \ud558\ub3c4\ub85d \uad6c\ud604\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \n\n\n### Run\n\n> \ubc45\ud06c\uc0d0\ub7ec\ub4dc \ud640\ub364\uc740 Python3.7 \uc774\uc0c1\uc758 \ubc84\uc804\uacfc UNIX \ud658\uacbd\ub9cc \uc9c0\uc6d0\ud569\ub2c8\ub2e4. \ud574\ub2f9 \ud658\uacbd\uc5d0\uc11c \uc9c4\ud589\uc774 \uc5b4\ub824\uc6b0\uc2e0 \ubd84\uc740 Docker\ub97c \uc774\uc6a9\ud558\uc5ec \uc9c4\ud589 \ubd80\ud0c1\ub4dc\ub9bd\ub2c8\ub2e4.\n\n\uc791\uc131\ud558\uc2e0 \ucf54\ub4dc\ub97c \ud14c\uc2a4\ud2b8\ud574\ubcf4\uae30 \uc704\ud574, \uc9c1\uc811 \ud504\ub85c\uadf8\ub7a8\uc744 \uc2e4\ud589\ud574\ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. [\\_\\_main\\_\\_.py](holdem/__main__.py)\uc758 \ud558\ub2e8 \uc2e4\ud589\ubd80 \ucf54\ub4dc\ub97c \ubcc0\uacbd\ud558\uc5ec, \ub2e4\uc591\ud55c \ud658\uacbd\uc5d0\uc11c \uc2e4\ud5d8\ud574\ubcf4\uc2e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n```bash\npython3 -m holdem\n```\n\nUNIX \uc774\uc678\uc758 \ud658\uacbd\uc5d0\uc11c\ub294 \uc62c\ubc14\ub974\uac8c \ub3d9\uc791\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. UNIX \uc774\uc678\uc758 \ud658\uacbd\uc5d0\uc11c\ub294 **Docker**\ub97c \ud65c\uc6a9\ud558\uc5ec \ucf54\ub4dc\ub97c \uc2e4\ud589\ud574\ubcf4\uc2e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n```bash\ndocker-compose run holdem\n```\n\n> \uac8c\uc784\uc774 \uc2e4\ud589 \ud6c4 \uc0dd\uc131\ub41c `play.log` \ud30c\uc77c\uc744 [\ubc45\ud06c\uc0d0\ub7ec\ub4dc \uce74\uc9c0\ub178](https://pycon2018.banksalad.com)\uc5d0 \uc5c5\ub85c\ub4dc\ud558\uc2dc\uba74 \uac8c\uc784\uc774 \uc9c4\ud589\ub41c \uacfc\uc815\uc744 \ub208\uc73c\ub85c \ud655\uc778\ud558\uc2e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4!\n\n\n## Submission\n\n- **2018\ub144 8\uc6d4 19\uc77c \uc77c\uc694\uc77c \uc624\ud6c4 4\uc2dc\uae4c\uc9c0** \uc81c\ucd9c\ub41c \ucf54\ub4dc\uc5d0 \ub300\ud574\uc11c\ub9cc \ucc38\uc5ec\uc790\uaca9\uc774 \ubd80\uc5ec\ub429\ub2c8\ub2e4.\n- \uc791\uc131\ud558\uc2e0 \ucf54\ub4dc([turn.py](holdem/turn.py))\ub97c [GitHub Gist](https://gist.github.com/)\uc5d0 \uc5c5\ub85c\ub4dc \ud558\uc2e0 \ud6c4, \uc5c5\ub85c\ub4dc\ub41c Gist \ub9c1\ud06c\ub97c [\uc5ec\uae30](https://goo.gl/forms/v4Nup2q7kgBlmmUh1)\ub97c \ud1b5\ud574 \uc81c\ucd9c\ud574\uc8fc\uc138\uc694.\n\n## Prize\n\n<p align=\"center\">\n  <img src=\"./resources/ipad-pro.png\" alt=\"ipad\" width=\"256px\" />\n</p>\n<h3 align=\"center\">1\ub4f1 / iPad Pro 10.5\"</h3>\n\n<p align=\"center\">\n  <img src=\"./resources/airpods.png\" alt=\"ipad\" width=\"154px\" />\n</p>\n<p align=\"center\">2\ub4f1 / AirPods</p>\n\n<p align=\"center\">3\ub4f1 / Starbucks \uc0c1\ud488\uad8c</p>\n\n### Tournament\n\n1. \uc81c\ucd9c\ud558\uc2e0 \ubd84\ub4e4\uc744 \ub79c\ub364\ud558\uac8c 5\uc778 \uc870\ub85c \ub098\ub220\uc11c, \ud1a0\ub108\uba3c\ud2b8 \ubc29\uc2dd\uc73c\ub85c \uc9c4\ud589\ud558\uc5ec \uacb0\uc2b9 \uc9c4\ucd9c\uc790 \ub2e4\uc12f \ubd84\uc744 \uc120\ubc1c\ud569\ub2c8\ub2e4. \n1. \ucd5c\uc885 \uc6b0\uc2b9\uc790\ub97c \uac00\ub9ac\ub294 \uacb0\uc2b9\uc804\uacfc \uc2dc\uc0c1\uc2dd\uc740 __8\uc6d4 19\uc77c \uc624\ud6c4 4\uc2dc 30\ubd84\uc5d0 \ubc45\ud06c\uc0d0\ub7ec\ub4dc OST \ub8f8(202)\uc5d0\uc11c \uc9c4\ud589\ub429\ub2c8\ub2e4.__ \n1. \uc2dc\uc0c1\uc2dd\uc5d0 \ucc38\uc5ec\ud558\uc9c0 \ubabb\ud558\uc2e0 \ubd84\uaed8\ub294 \uc8c4\uc1a1\ud558\uc9c0\ub9cc \uc0c1\ud488 \uc81c\uacf5\uc774 \uc5b4\ub835\uc2b5\ub2c8\ub2e4. \uc0c1\ud488 \uc218\ub839\uc744 \uc704\ud574 __\ubc18\ub4dc\uc2dc \uc2dc\uc0c1\uc2dd\uc5d0 \ucc38\uc5ec \ubd80\ud0c1\ub4dc\ub9bd\ub2c8\ub2e4.__\n\n\n-----\n\n## Rule\n\n### \uac8c\uc784\uc758 \uc9c4\ud589\n\n> \uac8c\uc784\uc758 \uc9c4\ud589\uc740 \uc77c\ubc18\uc801\uc778 [\ud14d\uc0ac\uc2a4 \ud640\ub364](https://en.wikipedia.org/wiki/Texas_hold_%27em)\uacfc \ube44\uc2b7\ud569\ub2c8\ub2e4.\n>\n> \ubc45\ud06c\uc0d0\ub7ec\ub4dc \ud640\ub364\uc5d0\uc11c\ub294 \ub77c\uc6b4\ub4dc\ub9c8\ub2e4 \ubb34\uc791\uc704\ub85c \uc120\uc815\ub41c \ud50c\ub808\uc774\uc5b4\ubd80\ud130 \uac8c\uc784\uc744 \uc2dc\uc791\ud558\uac8c \ub429\ub2c8\ub2e4.\n\n1. \uac8c\uc784\uc5d0 \ucc38\uc5ec\ud55c \ud50c\ub808\uc774\uc5b4\ub294 \ucc38\uac00\ube44\ub85c 1\uac1c\uc758 \uce69\uc744 \ub0c5\ub2c8\ub2e4.\n1. 2\uc7a5\uc758 \uce74\ub4dc\ub97c \ubc1b\uace0 \ubca0\ud305\uc744 \ud569\ub2c8\ub2e4.\n1. 3\uc7a5\uc758 \ud50c\ub78d \uce74\ub4dc\uac00 \uc624\ud508\ub418\uace0 \ubca0\ud305\uc744 \ud569\ub2c8\ub2e4.\n1. 1\uc7a5\uc758 \ud134 \uce74\ub4dc\uac00 \uc624\ud508\ub418\uace0 \ubca0\ud305\uc744 \ud569\ub2c8\ub2e4.\n1. 1\uc7a5\uc758 \ub9ac\ubc84 \uce74\ub4dc\uac00 \uc624\ud508\ub418\uace0 \ubca0\ud305\uc744 \ud569\ub2c8\ub2e4.\n1. \ub0a8\uc740 \ud50c\ub808\uc774\uc5b4\uac00 \uacf5\ud1b5\uc73c\ub85c \uc624\ud508\ub41c 5\uc7a5\uc758 \ucee4\ubba4\ub2c8\ud2f0 \uce74\ub4dc\uc640 2\uc7a5\uc758 \ud578\ub4dc\ub97c \ube44\uad50\ud558\uc5ec \uc21c\uc704\ub97c \ub9e4\uae34 \ud6c4 \ubca0\ud305\ub41c \uce69\uc744 \uac00\uc838\uac11\ub2c8\ub2e4.\n\n\ubca0\ud305(2-5\ubc88 \uacfc\uc815) \uc911 \ud50c\ub808\uc774\uc5b4\uc758 \ubca0\ud305 \uc0c1\ud0dc\uc5d0 \ub530\ub77c\n\n1. \ubaa8\ub4e0 \ud50c\ub808\uc774\uc5b4\uac00 \uc8fd\uc744<sub>die</sub> \uacbd\uc6b0\uc5d0\ub294 \ubca0\ud305\ub41c \uce69\uc774 \ubaa8\ub450 \uc0ac\ub77c\uc9d1\ub2c8\ub2e4. \n1. \ud55c \uba85\uc758 \ud50c\ub808\uc774\uc5b4\ub9cc \ub0a8\uc744 \uacbd\uc6b0 \ud574\ub2f9 \ud50c\ub808\uc774\uc5b4\uac00 \ubca0\ud305\ub41c \uce69\uc744 \ubaa8\ub450 \uac00\uc838\uac11\ub2c8\ub2e4.\n\n### \ucf54\ub4dc \uc791\uc131 \uaddc\uce59\n\n1. \ud30c\uc774\uc36c \ud2b9\uc720\uc758 \ud574\ud0b9\uc744 \uc774\uc6a9\ud55c \ud50c\ub808\uc774\ub294 \uac8c\uc784\uc758 \uc7ac\ubc0c\ub294 \uc9c4\ud589\uc744 \uc704\ud574 \uae08\uc9c0\ud569\ub2c8\ub2e4. \uc81c\ucd9c\ud558\uc2e0 \ucf54\ub4dc\ub97c \uc0b4\ud3b4\ubcf8 \ud6c4 \ubb38\uc81c\uac00 \uc788\uc744 \uacbd\uc6b0 \ub9d0\uc500\ub4dc\ub9ac\uaca0\uc2b5\ub2c8\ub2e4.\n1. \uae30\uc874\uc5d0 \uc791\uc131\ub41c \ucf54\ub4dc([madehands.py](holdem/core/madehands.py) \ub4f1)\ub294 \ud544\uc694\ud558\uc2e4 \uacbd\uc6b0 \uc5bc\ub9c8\ub4e0\uc9c0 \uc0ac\uc6a9\ud558\uc154\ub3c4 \uad1c\ucc2e\uc2b5\ub2c8\ub2e4. \ub2e8 `import` \uad6c\ubb38 \uc791\uc131\uc774 \uc62c\ubc14\ub974\uac8c \ub418\uc5c8\ub294\uc9c0 \ud655\uc778 \ubd80\ud0c1\ub4dc\ub9bd\ub2c8\ub2e4.\n1. \uc0ac\uc6a9\uc744 \uc6d0\ud558\uc2dc\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac(ex.[Keras](https://keras.io/))\uac00 \uc788\uc73c\uc2dc\ub2e4\uba74 [Issue](https://github.com/Rainist/pycon-2018-banksalad-holdem/issues)\ub85c \uc758\uacac \ub0a8\uaca8\uc8fc\uc2dc\uac70\ub098, \ud30c\uc774\ucf58 \ubc45\ud06c\uc0d0\ub7ec\ub4dc \ubd80\uc2a4\uc5d0 \ub4e4\ub7ec\uc8fc\uc138\uc694 :)\n\n### \uc6a9\uc5b4\n\n- \ucf5c<sub>call</sub>: \uc55e \uc21c\uc11c\uc758 \ud50c\ub808\uc774\uc5b4\uac00 \ud310\ub3c8\uc744 \uc62c\ub9b0 \uac83\uc744 \ubc1b\uc544\ub4e4\uc778\ub2e4\ub294 \uc758\ubbf8\uc785\ub2c8\ub2e4.\n- \ub808\uc774\uc988<sub>raise</sub>: \uc55e \uc21c\uc11c\uc758 \ud50c\ub808\uc774\uc5b4\uac00 \ud310\ub3c8\uc744 \uc62c\ub9b0 \uac83\uc744 \ubc1b\uc544\ub4e4\uc774\ub418, \ucd94\uac00\ub85c \ubca0\ud305\uc744 \ud558\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4.\n- \ud3f4\ub4dc<sub>fold</sub> : \ud574\ub2f9 \ub77c\uc6b4\ub4dc\ub97c \ud3ec\uae30\ud569\ub2c8\ub2e4. \ub2e4\uc774<sub>die</sub>\ub77c\uace0\ub3c4 \ud569\ub2c8\ub2e4.\n- \ud578\ub4dc<sub>hands</sub> : \ud50c\ub808\uc774\uc5b4\uc758 \uc190\uc5d0 \uc788\ub294 2\uc7a5\uc758 \uce74\ub4dc\n- \ud50c\ub78d<sub>flop</sub> : \ucc98\uc74c\uc73c\ub85c \uc5f4\ub9ac\ub294 3\uc7a5\uc758 \uce74\ub4dc\n- \ud134 \uce74\ub4dc<sub>turn card</sub> : 2\ubc88\uc9f8\ub85c \uc5f4\ub9ac\ub294 1\uc7a5\uc758 \uce74\ub4dc\n- \ub9ac\ubc84 \uce74\ub4dc<sub>river card</sub> : \ub9c8\uc9c0\ub9c9\uc73c\ub85c \uc5f4\ub9ac\ub294 1\uc7a5\uc758 \uce74\ub4dc\n- \ucee4\ubba4\ub2c8\ud2f0 \uce74\ub4dc<sub>community cards</sub> : \ubc14\ub2e5\uc5d0 \ub193\uc5ec \uacf5\ud1b5\uc73c\ub85c \uc0ac\uc6a9\ub418\ub294 \uce74\ub4dc\n- \uc1fc\ub2e4\uc6b4<sub>showdown</sub> : \ub9ac\ubc84 \uce74\ub4dc\uae4c\uc9c0 \uc5f4\ub9ac\uace0 \ub0a8\uc740 \uc0ac\ub78c\ub4e4\ub07c\ub9ac \ud328\ub97c \ube44\uad50\ud558\ub294 \uacfc\uc815\n- \uc62c\uc778<sub>all-in</sub> : \ud604\uc7ac \ud50c\ub808\uc774\uc5b4\uac00 \uac00\uc9c4 \ubaa8\ub4e0 \uae08\uc561\uc744 \uac70\ub294 \ud589\uc704\n\n### \ubca0\ud305 \uc870\uac74\n\n- \uac8c\uc784\uc774 \uc2dc\uc791\ub418\uba74 \ubaa8\ub4e0 \ud50c\ub808\uc774\uc5b4\ub294 200\uac1c\uc758 \uce69\uc744 \uac00\uc9c0\uace0 \uc2dc\uc791\ud569\ub2c8\ub2e4.\n- \ub77c\uc6b4\ub4dc\ub9c8\ub2e4 \ucc38\uc5ec\ube44 \uce69 \ud55c \uac1c\ub97c \ubaa8\ub4e0 \ud50c\ub808\uc774\uc5b4\uc5d0\uac8c \ubc1b\uc2b5\ub2c8\ub2e4.\n- \ubc45\ud06c\uc0d0\ub7ec\ub4dc \ud640\ub364\uc5d0\uc11c\ub294 \uc790\uae30 \ucc28\ub840\uc5d0 \ucf5c, \ub808\uc774\uc988\ub97c \ud560 \uc218 \uc788\uc73c\uba70 \uc120\uc73c\ub85c \ubf51\ud78c \ud50c\ub808\uc774\uc5b4\ubd80\ud130 \ud310\ub3c8\uc744 \uc81c\uc2dc\ud558\uace0 \ub2e4\ub978 \ud50c\ub808\uc774\uc5b4\ub4e4\uc5d0\uac8c \ub3cc\uc544\uac00\uba70 \uc81c\uc2dc\ub41c \ud310\ub3c8\uc5d0 \ub300\ud574 \ucf5c\uc744 \ud560\uc9c0, \ub808\uc774\uc988\ub97c \ud560\uc9c0 \uc815\ud558\uac8c \ub429\ub2c8\ub2e4.\n  - \ucf5c\uc744 \ud560 \uacbd\uc6b0 \ub2e4\ub978 \ud50c\ub808\uc774\uc5b4\ub85c \uc21c\uc11c\uac00 \ub118\uc5b4\uac11\ub2c8\ub2e4.\n  - \ub808\uc774\uc988\ub97c \ud560 \uacbd\uc6b0, \ud574\ub2f9 \ud50c\ub808\uc774\uc5b4\ub97c \uae30\uc900\uc73c\ub85c \ud55c \ubc14\ud034\ub97c \ub2e4\uc2dc \ub3cc\uac8c \ub429\ub2c8\ub2e4.\n- \ub77c\uc6b4\ub4dc\ub97c \uc9c4\ud589\ud558\ub294 \uc911\uc5d0 \uc62c\uc778\uc744 \ud558\uac8c \ub418\uba74 \ud574\ub2f9 \ud50c\ub808\uc774\uc5b4\ub97c \uae30\uc900\uc73c\ub85c \ud55c \ubc14\ud034\ub97c \ub2e4\uc2dc \ub3cc\uace0 \ubaa8\ub4e0 \ud50c\ub808\uc774\uc5b4\uc758 \uc120\ud0dd\uc774 \ub05d\ub09c \ud6c4\uc5d0\ub294 \ub9c8\uc9c0\ub9c9 \uc1fc\ub2e4\uc6b4\uae4c\uc9c0 \ubca0\ud305 \uc5c6\uc774 \uc9c4\ud589\ub429\ub2c8\ub2e4.\n\n### \ubc45\ud06c\uc0d0\ub7ec\ub4dc \ud640\ub364 \uc871\ubcf4\n\n> \ubc30\uc810\uc774 \ub192\uc740 \uc21c\uc11c\ub300\ub85c \ub098\uc5f4\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.\n\n#### \ub85c\uc5f4 \ud50c\ub7ec\uc2dc\n\n<br><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/h10.png\" width=\"15%\"></img><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/h11.png\" width=\"15%\"></img><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/h12.png\" width=\"15%\"></img><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/h13.png\" width=\"15%\"></img><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/h1.png\" width=\"15%\"></img>\n\n#### \uc2a4\ud2b8\ub808\uc774\ud2b8 \ud50c\ub7ec\uc2dc\n\n<br><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/c3.png\" width=\"15%\"></img><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/c4.png\" width=\"15%\"></img><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/c5.png\" width=\"15%\"></img><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/c6.png\" width=\"15%\"></img><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/c7.png\" width=\"15%\"></img>\n\n#### \ud3ec\uce74\ub4dc\n\n<br><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/s9.png\" width=\"15%\"></img><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/d9.png\" width=\"15%\"></img><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/h9.png\" width=\"15%\"></img><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/c9.png\" width=\"15%\"></img>\n\n#### \ud480\ud558\uc6b0\uc2a4\n\n<br><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/h2.png\" width=\"15%\"></img><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/s2.png\" width=\"15%\"></img><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/h12.png\" width=\"15%\"></img><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/c12.png\" width=\"15%\"></img><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/d12.png\" width=\"15%\"></img>\n\n#### \ud50c\ub7ec\uc2dc\n\n<br><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/h2.png\" width=\"15%\"></img><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/h5.png\" width=\"15%\"></img><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/h6.png\" width=\"15%\"></img><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/h8.png\" width=\"15%\"></img><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/h11.png\" width=\"15%\"></img>\n\n#### \uc2a4\ud2b8\ub808\uc774\ud2b8\n\n<br><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/c7.png\" width=\"15%\"></img><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/c8.png\" width=\"15%\"></img><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/h9.png\" width=\"15%\"></img><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/s10.png\" width=\"15%\"></img><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/h11.png\" width=\"15%\"></img>\n\n#### \ud2b8\ub9ac\ud50c\n\n<br><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/h3.png\" width=\"15%\"></img><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/s3.png\" width=\"15%\"></img><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/d3.png\" width=\"15%\"></img><br>\n<img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/d13.png\" width=\"15%\"></img><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/h13.png\" width=\"15%\"></img><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/s13.png\" width=\"15%\"></img>\n\n#### \ud22c \ud398\uc5b4\n\n<br><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/s11.png\" width=\"15%\"></img><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/h11.png\" width=\"15%\"></img>\n<img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/c5.png\" width=\"15%\"></img><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/s5.png\" width=\"15%\"></img><br>\n<img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/s1.png\" width=\"15%\"></img><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/c1.png\" width=\"15%\"></img>\n<img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/h8.png\" width=\"15%\"></img><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/d8.png\" width=\"15%\"></img>\n\n#### \uc6d0 \ud398\uc5b4\n\n<br><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/h10.png\" width=\"15%\"></img><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/s10.png\" width=\"15%\"></img><br>\n<img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/c2.png\" width=\"15%\"></img><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/d2.png\" width=\"15%\"></img>\n\n#### \ud558\uc774 \uce74\ub4dc\n\n<br><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/c1.png\" width=\"15%\"></img><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/h4.png\" width=\"15%\"></img><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/h7.png\" width=\"15%\"></img><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/s9.png\" width=\"15%\"></img><img src=\"https://cdn.banksalad.com/pycon2018/casino/cards/h11.png\" width=\"15%\"></img>\n\n### \uac19\uc740 \uc871\ubcf4\uc77c \uacbd\uc6b0\uc758 \ud310\ub2e8\n\n- \ub85c\uc5f4 \ud50c\ub7ec\uc2dc\uac00 \ub450\ubc8c \uc774\uc0c1 \ub098\uc654\uc744 \uacbd\uc6b0\uc5d0\ub294 _(\uac70\uc758 \ubd88\uac00\ub2a5\ud55c \ud655\ub960)_ **\uc2a4\ud398\uc774\ub4dc > \ub2e4\uc774\uc544\ubaac\ub4dc > \ud558\ud2b8 > \ud074\ub85c\ubc84** \uc21c\uc73c\ub85c \ub192\uc740 \ud328\ub85c \uc778\uc815\ub429\ub2c8\ub2e4.\n- \ub85c\uc5f4 \ud50c\ub7ec\uc2dc\uac00 \uc544\ub2cc \uacbd\uc6b0\uc5d0\ub294 \ud328\uac00 \ub9cc\ub4e4\uc5b4\uc9c4 \uce74\ub4dc \uc911 \uac00\uc7a5 \ub192\uc740 \uc22b\uc790\ub9cc\uc744 \ube44\uad50\ud569\ub2c8\ub2e4.\n- \ud328\uac00 \uac19\uc740 \ud50c\ub808\uc774\uc5b4\uac00 \uc5ec\ub7ec \uba85\uc778 \uacbd\uc6b0\uc5d0\ub294 \ub9cc\ub4e4\uc5b4\uc9c4 \ud328\uc758 \uc22b\uc790\ub97c \ube44\uad50\ud569\ub2c8\ub2e4.\n- \ub9cc\ub4e4\uc5b4\uc9c4 \ud328\uc758 \uc22b\uc790\ub3c4 \uac19\uc740 \uacbd\uc6b0\uc5d0\ub294 \uadf8 \ud310\uc740 \ub3d9\uc810\uc774 \ub418\uc5b4 \ud310\ub3c8\uc740 \ud50c\ub808\uc774\uc5b4 \uc218\ub85c \ub098\ub204\uc5b4 \uac00\uc838\uac11\ub2c8\ub2e4.\n\n## Any Questions?\n\n[Issue](https://github.com/Rainist/pycon-2018-banksalad-holdem/issues)\ub97c \ud1b5\ud574 \uc9c8\ubb38\uc744 \ub0a8\uaca8\uc8fc\uc2dc\uac70\ub098, \ud30c\uc774\ucf58 \ubc45\ud06c\uc0d0\ub7ec\ub4dc \ubd80\uc2a4\ub97c \ubc29\ubb38\ud574\uc8fc\uc138\uc694 \ud83d\ude0e\n"
 },
 {
  "repo": "philroberts/FPDB-for-OSX",
  "language": "Python",
  "readme_contents": "Qt branch notes\n===============\n\nThis is a port of fpdb to Qt (specifically, PyQt5).  It is a work in\nprogress.  Please\n[report](https://github.com/philroberts/FPDB-for-OSX/issues) bugs or\nmissing features!  Note: despite the name of this repository, I have\nbeen publishing windows builds with releases for a while now.\n\nWhy?\n----\n\nI use a mac.  To use the GTK version of fpdb, I need to install a\nbunch of libraries, and install and run an X server.  This irks me.\nThere was recently some talk on the fpdb mailing list suggesting a\nport to Qt would make Windows development easier too.\n\nAnother win is that it is now possible to build an OSX app for\ndistribution using pyinstaller.\n\nHow?\n----\n\nIf you just want to try the prebuilt app, check the\n[wiki](https://github.com/philroberts/FPDB-for-OSX/wiki/Initial-install).\n\nOtherwise, read on:\n\nGrab the code from this git branch.  Install dependencies - I use\nmacports to install things on mac.\n\nI _believe_ these are the required packages:\n\npy27-matplotlib, py27-pyqt5, py27-pyobjc-quartz.\n\nA couple of the HH parsers (Merge and Winamax) require\npy27-beautifulsoup.  I have not installed this package or tested those\nparsers.\n\nMacports should install everything else you need automagically.\n\nUsers on other platforms don't need the pyobjc stuff.\n\nIf you want all-in EV calculation, you'll also want pokereval and\npypokereval.  I had to build pypokereval myself to add python 2.7\nsupport, so if you can't be bothered with that you'll want to\nsubstitute the py26 versions of the above.\n\nNext you'll have to run `sudo port select --set python python27` and\npossibly `hash -r` in case your shell has the system python command\ncached.\n\nNow you should be able to start fpdb like this:\n`./run_fpdb.py`\n\nCaveats/Known Bugs\n------------------\n\nAlmost all of the basic functionality has now been ported.  Exceptions:\n\n* Configure -> HUD Stats Settings.  This probably merits a rework.\n* Import -> Import through eMail/IMAP.  Is this solving a real problem?  I'll port this when someone tells me they use it.\n* Cash -> Positional Stats.  This seems to replicate functionality available in Ring Player Stats.  Again, I'll port this when someone complains.\n* Cash -> Stove.  This doesn't do anything useful anyway.\n* Tournament -> Tourney Viewer.  Unless I'm missing something, this is not very functional yet anyway.\n\nPlease report any problems using the\n[github issue tracker](https://github.com/philroberts/FPDB-for-OSX/issues).\n"
 },
 {
  "repo": "robopoker/robopoker",
  "language": "Python",
  "readme_contents": "## Install\n\nSimply put sources somewhere in your filesystem.\n\n## Usage\n\n * http://robopoker.org/about/sdk/\n * http://robopoker.org/about/api/\n\n## License\n\nRoboPoker engine is released under the MIT license:\n\n * http://www.opensource.org/licenses/MIT"
 },
 {
  "repo": "acebusters/acebusters-frontend",
  "language": "JavaScript",
  "readme_contents": "# Acebusters Web App\n\nWeb app to play a fair and secure game of poker.\n\n## Quick Start\n\n1. Clone this repo using `git@github.com:parsec-labs/acebusters-frontend.git`\n2. Run `npm start` to see the app at `http://localhost:3000`.\n\nNow you're ready to rumble!\n\n## How to Contribute\n\nRead [Fork & Pull Workflow](https://github.com/acebusters/ab-web/wiki/Standard-Fork-&-Pull-Request-Workflow).\n\n## Developer Onboarding\n\nRead this [Development Onboarding](https://github.com/acebusters/ab-web/wiki/Developer-Onboarding) Page.\n"
 },
 {
  "repo": "theaigames/poker-engine",
  "language": "Java",
  "readme_contents": "poker-engine\n============\n\nPoker engine for Heads-up Omaha at TheAIGames.com\n\nThis version of our Poker engine has been set up for local use, for your own convenience. Notice that this engine is not *only* for Heads-up Omaha and can play other versions of poker as well. We will probably host other poker competitions in the future.\n\nTo compile (Windows cmd):\n    \n    cd [project folder]\n    dir /b /s *.java>sources.txt\n    md classes\n    javac -d classes @sources.txt\n    del sources.txt\n\nTo compile (Linux):\n\n    cd [project folder]\n    mkdir bin/\n    javac -sourcepath src/ -d bin/ `find src/ -name '*.java' -regex '^[./A-Za-z0-9]*$'`\n    \nTo run:\n\n    java nl.starapple.backend.RunPoker 2000 [your bot1] [your bot2] 2>err.txt 1>out.txt\n    \n[your bot1] could be any command for running a bot process. For instance \"java main.BotStarter\" or \"node /home/user/bot/Bot.js\"\n\n2000 is the starting stack for both bots.\n\nErrors will be logged to err.txt, output dump will be logged to out.txt.\n"
 },
 {
  "repo": "rggibson/open-pure-cfr",
  "language": "C++",
  "readme_contents": "Open Pure CFR\n=============\n\nPure CFR is a time and memory-efficient variant of the [Counterfactual Regret Minimization (CFR) algorithm](http://poker.cs.ualberta.ca/publications/NIPS07-cfr.pdf) algorithm for computing strategies for an extensive-form game with imperfect information, such as poker.  Unlike [Monte Carlo CFR (MCCFR)](http://mlanctot.info/files/papers/nips09mccfr.pdf), Pure CFR samples a *pure* strategy profile (exactly one action assigned probability 1 at every state) on each iteration and performs an update assuming the players and chance follow the sampled pure profile.  In practice, strategies improve faster over time than the original CFR algorithm.  In addition, while previous CFR algorithms require floating-point values (doubles), Pure CFR uses integer values (ints) and thus uses approximately half the memory of other common variants.  Furthermore, Pure CFR retains the theoretical guarantees of MCCFR, and thus converges (probabilistically) to an equilibrium profile in two-player zero-sum games.  More details regarding Pure CFR can be found in [my PhD dissertation](http://richardggibson.appspot.com/static/work/thesis-phd/thesis-phd-paper.pdf).  Credit goes to Oskari Tammelin for inventing the algorithm.\n\nAbout this Implementation\n-------------------------\n\nThis implementation of Pure CFR computes poker strategies that are playable in the [Annual Computer Poker Competition (ACPC)](http://www.computerpokercompetition.org).  In addition to games played at the ACPC, this implementation can also be run on any game that can be defined under the [project_acpc_server framework](http://www.computerpokercompetition.org/downloads/code/competition_server/project_acpc_server_v1.0.41.tar.bz2).  The code runs on both Linux and Windows under [Cygwin](http://www.cygwin.com/).  The code has not been tested on a Mac, but feel free to give Mac a shot if you are feeling adventurous. \n\nInstalling\n----------\n\nFirst, you must have both `make` and `gcc-g++` installed on your machine.  Then, in your open-pure-cfr directory, simply run `make` and wait for the code to finish compiling.  Once complete, you should have three new programs in your open-pure-cfr directory: `pure_cfr`, `print_player_strategy`, and `pure_cfr_player`.\n\n`pure_cfr`\n----------\n\nThis is the main program that generates strategies for games specified under the [project_acpc_server framework](http://www.computerpokercompetition.org/downloads/code/competition_server/project_acpc_server_v1.0.41.tar.bz2).  Sets of three files are generated during the run, a `.regrets`, `.avg-strategy`, and `.player` file.  Run `./pure_cfr` with no additional arguments to display the usage information.  We will now describe in detail each of the required and optional arguments before providing some examples of how to run `pure_cfr` on a variety of games.\n\n###Command-line Arguments\n\n`pure_cfr` requires two arguments.  The first argument must be a file that defines the game to be played.  The games provided by the [project_acpc_server code](http://www.computerpokercompetition.org/downloads/code/competition_server/project_acpc_server_v1.0.41.tar.bz2) can be found in the `games/` subdirectory, along with a definition for [Kuhn Poker](http://en.wikipedia.org/wiki/Kuhn_poker).  The second argument is a prefix that specifies where and what name the output files will be and have respectively.  \n\nAfter these two arguments are specified, a number of different options can be selected:\n  * `--config=<file>` - Overwrites the two required arguments and the default options through values specified in `file`.  See `parameters.cpp::read_params( )` for details on how to format this file.\n  * `--rng=<seed1:seed2:seed3:seed4|TIME>` - Specifies the seeds to be used to initialize the random number generator, where `seed1`, `seed2`, `seed3`, and `seed4` are integer values.  The random number generator is used to sample a pure strategy profile on each iteration from chance and the players.  Alternatively, passing the option `--rng=TIME` initializes the random number generator according to the current time.\n  * `--card-abs=<NULL|BLIND>` - Specifies a card abstraction to be used.  Only two card abstractions are currently implemented.  `--card-abs=NULL` specifies no card abstraction (not even suit isomorphisms), while `--card-abs=BLIND` specifies that all hands fall into the same bucket.  NULL is only feasible in toy games, like Kuhn Poker, that use very few cards, while BLIND essentially means that the players never look at the public or their private cards.\n  * `--action-abs=<NULL|FCPA>` - Specifies an action abstraction to be used.  This option should only be used for nolimit games.  `--action-abs=NULL` specifies that all actions remain legal in the abstract game, while `--action-abs=FCPA` specifies that only fold, call, pot-sized raises, and all-ins are legal in the abstract game.  NULL is only feasible in small nolimit games with low stack sizes.  \n  * `--load-dump=<dump_prefix>` - Loads the regrets and (if `--no-average` is not selected) average strategy from a previous run from the files prefixed by `dump_prefix`.  This prefix should be the full name of the files to be loaded, but without the `.regrets` or `.avg-strategy` suffix.\n  * `--threads=<num_threads>` - Specifies the number of threads to use.  Additional threads provide a near-linear speed-up in the algorithm, so use as many as you can afford.\n  * `--status=<dd:hh:mm:ss>` - Prints status updates to `stderr` every `dd` days, `hh` hours, `mm` minutes, and `ss` seconds.\n  * `--checkpoint=<start_time[,mult_time[,add_time]]>` - Specifies how frequently the program should dump the regrets and average strategy to disk, where `start_time`, `mult_time`, and `add_time` are specified using the `dd:hh:mm:ss` format.  First, the program will dump after `start_time` has passed from the time the program started.  Later dump times depend on whether `mult_time` and `add_time` are provided.  If `mult_time` is provided, the next dump will come after `start_time` * `mult_time`, then again after `start_time` * `mult_time` * `mult_time`, and so on until the program terminates.  If, in addition, `add_time` is provided, then the next dump will come after `start_time` * `mult_time` + `add_time`, then again after (`start_time` * `mult_time` + `add_time`) * `mult_time` + `add_time`, and so on.  If `mult_time` is not specified, then the next dumps will occur at 2 * `start_time`, then again after 3 * `start_time`, and so on.\n  * `--max-walltime=<dd:hh:mm:ss>` - Specifies when it is time to perform a final dump of regrets and average strategy to disk.  After the final dump, the program is terminated.\n  * `--no-average` - Specifies that no average strategy is to be computed.  Currently, average strategy computation in games with more than two players is not supported, and so for such games, this option is mandatory.\n\n###Examples\n\nLet's start with a very simple example that requires very little computing resources to run:\n\n    ./pure_cfr games/kuhn.game test.kuhn --status=1 --max-walltime=30\n\nThis runs `pure_cfr` on unabstracted Kuhn Poker for 30 seconds, with status updates printed every second.  In all likelihood, the resulting average strategy should be an approximate Nash equilibrium profile.  Once complete, you should have three files that look something like:\n* `test.kuhn.iter-???.secs-60.regrets` - This is a binary file that contains the accumulated regret for both players at every information set in the game.\n* `test.kuhn.iter-???.secs-60.avg-strategy` - This is another binary file that specifies the (sampled) average strategy for both players.\n* `test.kuhn.iter-???.secs-60.player` - This is a human-readable wrapper file that contains information about the command-line arguments specified and the prefix of the binary files.  On repeated runs, you can instead pass in `--config=test.kuhn.iter-???.secs-60.player` rather than specifying the options on the command line.  In addition, the `DO_AVERAGE` line in this file specifies whether the average strategy (`DO_AVERAGE TRUE`) or the current strategy (`DO_AVERAGE FALSE`) is to be played and printed by `pure_cfr_player` and `print_player_strategy` respectively.\n\nOur second example converges to an equilibrium for abstract heads-up limit Texas hold'em where neither player looks at the cards dealt:\n\n    ./pure_cfr games/holdem.limit.2p.reverse_blinds.game test.holdem.2pl --rng=TIME --card-abs=BLIND \n    --threads=4 --checkpoint=1:0:0 --max-walltime=1:0:0:0\n\nHere, we specify the random number generator to be initialized by the current time, use 4 processors, dump regrets and average strategy to disk every hour, and terminate after 1 day.\n\nFinally, we also provide an example of running `pure_cfr` on abstract three-player nolimit Texas hold'em:\n\n    ./pure_cfr games/holdem.nolimit.3p.game test.holdem.3pn --card-abs=BLIND --action-abs=FCPA \n    --threads=4 --max-walltime=3:0:0:0 --no-average\n    \nIn addition to the players not being able to see any cards, the players may also only take the actions fold, call, pot-sized raise, and all-in.  The options specify 4 processors to be used and to terminate after 3 days of computation.  In addition, no average strategy is computed (recall that this is currently required for games with more than two players). Thus, upon completion, only the `.regrets` and `.player` files are written to disk.\n\n`print_player_strategy`\n-----------------------\n\nThis program is a simple tool for displaying the outputted strategy in a human-readable format.  Running `./print_player_strategy` with no arguments displays the usage.  \n\nOne argument is required and a second argument is optional.  For the required argument, `print_player_strategy` takes the filename of a `.player` file generated from `pure_cfr`.  The optional argument `--max-round=<round>` can be used to only print the strategy up to and including round `round`.  \n\nFor example, we can print our Kuhn Poker strategy generated from the example above as follows:\n\n    ./print_player_strategy test.kuhn.iter-???.secs-60.player\n    \nIn addition, you can also display the *current* strategy specified by the regrets.  To do so, in the `.player` file, change the line `DO_AVERAGE TRUE` to `DO_AVERAGE FALSE` and run `print_player_strategy` again.  This strategy may not be an approximate equilibrium.\n\nAs a second example, to print out the pre-flop strategy of our heads-up limit hold'em profile generated above after one hour, we would run\n\n    ./print_player_strategy test.holdem.2pl.iter-???.secs-3600.player --max-round=1\n    \n`pure_cfr_player`\n-----------------\n\nThis program allows a strategy profile generated by `pure_cfr` to be played through the [ACPC protocol](http://www.computerpokercompetition.org/downloads/documents/protocols/protocol.pdf).  It is based on `example_player` from the [project_acpc_server framework](http://www.computerpokercompetition.org/downloads/code/competition_server/project_acpc_server_v1.0.41.tar.bz2) that communicates back and forth with a dealer program.  Similar to the examples provided by the project_acpc_server package, a bash script or something similar is required to run an agent.  For example, to run a heads-up limit hold'em profile generated after 1 hour, write a bash script that looks something like this:\n\n    #!/bin/bash\n    cd path/to/open-pure-cfr/\n    ./pure_cfr_player test.holdem.2pl.iter-???.secs-3600.player $1 $2\n    \n(Note that ACPC submissions in the past require the `cd path/to/open-pure-cfr/` line to be removed).  Save this to a file called, say, `test.holdem.2pl.iter-???.secs-3600.sh` and make it executable via `chmod +x test.holdem.2pl.iter-???.secs-3600.sh`.  This bash script can then be used to play through the ACPC protocol.  For more information on running a match through the ACPC framework, please see the documentation included with the [project_acpc_server framework](http://www.computerpokercompetition.org/downloads/code/competition_server/project_acpc_server_v1.0.41.tar.bz2).\n\nImplementation Quirks\n---------------------\n\n###Parallelization\n\nWhen multiple threads are specified for `pure_cfr` through the `--threads` option, these threads act independently on the regrets and average strategy in shared memory.  Each thread runs independent iterations through the entire tree visited by the sampled pure strategy profile and no safety precautions are taken to avoid the threads from conflicting with one another.  This means that if two threads happen to update the regret at the same location at the same time, one of the updates will be overwritten.  Because the chances of this occurring in a large game tree are slim, and because billions of iterations are typically required before competent play is reached, a few iterations of lost updates are not a big concern.\n\n###Data Types\n\nAs mentioned in the opening of this README, Pure CFR stores regrets and the average strategy using integer values rather than floating-point values.  In this implementation, each regret entry is stored as an `int` and each average strategy entry is stored as an `int32_t`.  One exception to this is that each average strategy entry in the preflop round is stored as an `int64_t`.  The reason 64-bit ints are used in the preflop instead of 32-bit ints is because the preflop entries are updated (incremented) most frequently of all the average strategy entries and will be the first to overflow.  I found cases where overflow occurred with 32-bit ints in the preflop long before the strategy had finished improving, and so 64-bit ints are now used to prevent early overflow.  Since the preflop round is also the smallest, the increase in memory usage in very minor.\n\nAcknowledgements\n----------------\n\nFirst of all, thanks to Oskari Tammelin for sharing his ideas for Pure CFR.  I must also thank Neil Burch and [Michael Johanson](http://cs.ualberta.ca/~johanson) of the [Computer Poker Research Group](http://poker.cs.ualberta.ca) as many of the optimization tricks in this implementation were learned from them.\n\nMore Information\n----------------\n\nA [demo of Pure CFR](http://jeskola.net/cfr) and other variants are provided by Oskari Tammelin.\n\nContact\n-------\n\nFeel free to email me at [richard.g.gibson@gmail.com](mailto:richard.g.gibson@gmail.com) with any questions about this project.\n"
 },
 {
  "repo": "scrumpypoker/i18n",
  "language": null,
  "readme_contents": "# Scrumpy Planning Poker Translations\nTranslations for Scrumpy Planning Poker\n\n## File naming\nThe name of the file must be ``<language>_<COUNTRY>.json``, for example en_US.json for the USA version or en_UK.json for the English version.\n\n## File format\nThe file format is JSON\n\n## File encoding\nThe JSON files encoding must be UTF-8\n\n## Special instructions\n* Please do not translate texts in curly braces, e.g. {time}, {user}, {certainty}, those placeholders are programmatically replaced\n* If you don't want to translate a text, please keep it in English instead of deleting it. We don't have English fallback for missing identifiers.\n\n## Testing\n* Please follow the [instructions on developing and testing your translation](https://scrumpy.poker/2020/09/20/gitlab-sorting-and-voting-improvements-in-release-sep-20-2020/) with the new PASTEBIN integration. You can edit the texts through a PASTEBIN paste and receive immediate update of the look and feel of the application. This way you'll know how the application will look like before the official release.\n\n# Contributions\nPlease feel free to create a translation at any time. We'll be glad to review and approve the translations as soon as possible. The accepted translations will be included in the next release.\n\n* Please first create a branch and push the changes\n* Then create a pull request against the master branch\n* We'll review and approve then merge\n* The translations will be released soon after that\n\nMany, many thanks to all contributors involved! We really value your help!\n"
 },
 {
  "repo": "conch76/poker",
  "language": "Java",
  "readme_contents": "# Sample Lecture material for TDD poker\n"
 },
 {
  "repo": "ngokevin/pokery",
  "language": "JavaScript",
  "readme_contents": "pokery\n======\n\n[![npm version](https://badge.fury.io/js/pokery.svg)](http://badge.fury.io/js/pokery)\n[![travis build](https://travis-ci.org/ngokevin/pokery.svg)](https://travis-ci.org/ngokevin/pokery)\n\nNode poker library for poker crunchers. Also compatible with Browserify.\n\nReviving the ghost of PokerStove for all platforms.\n\nCurrently, Pokery only supports Hold'em. Omaha support will come in the future.\n\n\n## EV Approximations\n\nPokery has a Monte Carlo Simulator to run EV approximations.\n\nThe Simulator takes an array of ranges and an array of board cards.\n\n```javascript\n> import Simulator from 'pokery';\n> new Simulator(['AhAd', 'KK', 'JTs', '72o'], ['Qd']).run();\n[ { range: 'AhAd',\n    wins: 605,\n    losses: 395,\n    ties: 0,\n    lossPct: 39.5,\n    tiePct: 0,\n    winPct: 60.5,\n    ev: 0.605 },\n  { range: 'KK',\n    wins: 120,\n    losses: 880,\n    ties: 0,\n    lossPct: 88,\n    tiePct: 0,\n    winPct: 12,\n    ev: 0.12 },\n  { range: 'JTs',\n    wins: 207,\n    losses: 793,\n    ties: 0,\n    lossPct: 79.3,\n    tiePct: 0,\n    winPct: 20.7,\n    ev: 0.207 },\n  { range: '72o',\n    wins: 68,\n    losses: 932,\n    ties: 0,\n    lossPct: 93.2,\n    tiePct: 0,\n    winPct: 6.800000000000001,\n    ev: 0.068 } ]\n```\n\n## Command Line Usage\n\nPokery works on the command line!\n\n```bash\n$ pokery simulate -h AA -h KK -b 2d3h4s -n 5000\nRunning AA vs. KK on 2d,3h,4s board, 5000 times\n[ { range: 'AA',\n    wins: 807,\n    losses: 191,\n    ties: 2,\n    lossPct: 19.1,\n    tiePct: 0.2,\n    winPct: 80.7,\n    ev: 0.808 },\n  { range: 'KK',\n    wins: 191,\n    losses: 807,\n    ties: 2,\n    lossPct: 80.7,\n    tiePct: 0.2,\n    winPct: 19.1,\n    ev: 0.192 } ]\n```\n\n## Hand Evaluations\n\nPokery can evaluate and compare hands.\n\nTo be more portable and use less memory, Pokery currently does not use a lookup\ntable, which would be 250MB.\n\n```javascript\n> import Hand from 'pokery';\n> new Hand(['Ac', 'Ad', 'Ah', 'As', 'Jc', 'Td', '2h']);\n{ strength: 7,\n  ranks: [ [ 14 ], [ 11 ] ],\n  cards: [ 'Ac', 'Ad', 'Ah', 'As', 'Jc' ] }\n> new Hand(['Kc', '3d', '4h', '7s', '6c', '5d', 'Kh']);\n{ strength: 4,\n  ranks: [ [ 7, 6, 5, 4, 3 ] ],\n  cards: [ '3d', '4h', '7s', '6c', '5d' ] }\n```\n\n## Range Parsing\n\nPokery can expressively breakdown hand ranges and return random hands from a\nrange.\n\nYou can learn more about [hand range\ngrammar](http://pokerini.com/help/holdem_range_notation.php).\n\n```javascript\n> import Range from 'pokery';\n> new Range('AQ').hands\n[ ['Ac', 'Qc'],\n  ['Ac', 'Qd'],\n  ['Ac', 'Qh'],\n  ['Ac', 'Qs'],\n  ['Ah', 'Qc'],\n  ['Ah', 'Qd'],\n  ['Ah', 'Qh'],\n  ['Ah', 'Qs'],\n  ['Ad', 'Qc'],\n  ['Ad', 'Qd'],\n  ['Ad', 'Qh'],\n  ['Ad', 'Qs'],\n  ['As', 'Qc'],\n  ['As', 'Qd'],\n  ['As', 'Qh'],\n  ['As', 'Qs'] ]\n> new Range('55').hands\n[ ['5c', '5d'],\n  ['5c', '5h'],\n  ['5c', '5s'],\n  ['5d', '5h'],\n  ['5d', '5s'],\n  ['5h', '5s'] ]\n> new Range('QQ, 93s').hands\n[ ['Qc', 'Qd'],\n  ['Qc', 'Qh'],\n  ['Qc', 'Qs'],\n  ['Qd', 'Qh'],\n  ['Qd', 'Qs'],\n  ['Qh', 'Qs']\n  ['9c', '3c'],\n  ['9d', '3d'],\n  ['9h', '3h'],\n  ['9s', '3s'] ]\n```\n"
 },
 {
  "repo": "wolo-research/bulldog",
  "language": "C++",
  "readme_contents": "![](icon.jpg?raw=true)\n\n## todos\n\n## architecture\n- core (logging, game def, hand eval and game state protocol)\n- agent (connector, playing logic)\n- engine (playing engine interface , ag, cfr, and train)\n\n## build and run\n```bash\n### require_warn cmake \n\ngit clone git://bulldog...\ncd bulldog\ngit submodule init\ngit submodule update\ngit pull\ngit submodule update --recursive\n\n## build using cmake\nmkdir build\ncd build\ncmake ..\nmake\nmake test\n\n### third party (best option 1)\n1. git submodule add xxxx && git submodule init && git submodule update\n2. hpp whole files\n3. Cmake External\n```\n\n##Example Configurations\n```bash\n./bin/train\n\n--cfr_config=cfr_simple.json\n--ag_config=ag_simple.json\n--log_level=debug\n--log_output=train.log\n--max_iter=10000\n--exp_name=norm_max\n--checkpoint_interval=1000\n--save_final=true\n--load_checkpoint=dcfr_naive-1007\n--profiler_checkpoint=2 \n\n./bin/agent\n--game=holdem.nolimit.2p.game\n--engine_params=engine_offline_simple.json\n--connector=0\n--connector_params=localhost,52001\n--log_level=trace\n\n```\n\n##Prerequisite\nbrew install cpprestsdk & tbb\nadd cmake options in the IDE, -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl\n```$xslt\nsudo apt install libcpprest-dev\nsudo apt install libtbb-dev\nsudo apt-get install uuid-dev\n```\nlibtorch on linux install\n\n### remove a submodule you need to:\n```$xslt\nDelete the relevant section from the .gitmodules file.\nStage the .gitmodules changes git add .gitmodules\nDelete the relevant section from .git/config.\nRun git rm --cached path_to_submodule (no trailing slash).\nRun rm -rf .git/modules/path_to_submodule (no trailing slash).\nCommit git commit -m \"Removed submodule \"\nDelete the now untracked submodule files rm -rf path_to_submodule\n```\n\nlinux torch cmake fix: https://github.com/pytorch/pytorch/issues/40965\n\n"
 },
 {
  "repo": "whatsdis/pluribus",
  "language": "Python",
  "readme_contents": "# Pluribus\n\nImplementation of Pluribus, a Superhuman AI for 6-MAX No-Limit Holdem Poker Bot based on Supplementary Material https://science.sciencemag.org/highwire/filestream/728919/field_highwire_adjunct_files/0/aay2400-Brown-SM.pdf from the paper, \"Superhuman AI for multiplayer poker\" by Noam Brown and Tuomas Sandholm \n\n# Goal \n\nI am interested in Bodog.eu for the time being because of its HTML5 Client accessible with only a browser. This is infinitely easier than forcing people to run a Virtualized instance of a Poker software client which is actively hostile to any sort of automation. Our aim is to create a simple Chrome Extension which will monitor a Bodog.eu 6-MAX NL Holdem Poker game during real-time depth limited search that will be performed on an AWS EC2 r5a.16xlarge instance with 64 cores and 512GB of memory.\n\n  1. Solver: Translating the pseudo code and deploying it successfully on AWS. Returns solution showing the action to take.\n\n  2. Parser: Computer vision to parse screenshots of Bodog.eu game for the purpose of extracting current game state.\n  \n  3. Client: Chrome Extension which upon click will upload the game screenshot to be parsed and solved.\n  \n  \n ## 1. Solver (wIP)\n \n The code is a port of @EAT-CODE-KITE-REPEAT's javascript implementation. For Python, I decided to use the Deuces library, however, it has not been tested. \n \n ## 2. Parser (WIP):\n \n Seems like Bodog.eu uses an HTML5 renderer so will not require any computer vision. \n \n ## 3. Client (WIP)\n  \n \n\n"
 },
 {
  "repo": "scascar/PokerDeepLearning",
  "language": "Jupyter Notebook",
  "readme_contents": "# PokerDeepLearning\nImplementing a Q learning algorithm for no-limit head's up poker\n"
 },
 {
  "repo": "DogLooksGood/holdem",
  "language": "Clojure",
  "readme_contents": "# Holdem\n\n![screencast](https://user-images.githubusercontent.com/11796018/129900764-999487ac-a8aa-4949-890b-afc5a0c3402c.png \"Screencast\")\nA lightweight Texas Hold'em Poker game, WIP.\n\n## Install requirements\n```sh\nclojure -P\nnpm i\n```\n\n## Development\nStart Clojure/Script REPL via `cider-jack-in-clj&cljs` in Emacs.\n\nStart backend system by type `(start)` in Clojure REPL.\n\nWEB services will be available at `http://localhost:4000`.\n\nWorkspace cards will be available at `http://localhost:8000/workspaces.html`.\n\nShadow CLJS UI is `http://localhost:9630`.\n\n## Release\n\n- `make cljs-release` will compile ClojureScript\n- `make release` will compile Clojure and generate uberjar\n\n```\nmake\n```\n\nUberjar will be generated at `target/holdem.jar`, run with:\n\n```\nmake run\n```\n\nor\n\n```\njava -jar target/holdem.jar\n```\n\nOpen http://localhost:4000 in your browser.\n\n## Testing\n### Backend\nRun backend tests with kaocha. The configuartion is tests.edn.\n```\nmake kaocha\n```\n\n### Frontend\nRun frontend tests with karma.\n```\nmake karma\n```\n\n## License\nThis is free and unencumbered software released into the public domain.\n"
 },
 {
  "repo": "erichkeane/poker2firmwarehacking",
  "language": "C",
  "readme_contents": "poker2firmwarehacking\n=====================\nKBC/Vortex Poker 2 Mechanical Keyboard Firmware hacking\n\nFlash tool and firmware files can be found attached to this post: https://geekhack.org/index.php?topic=50245.0\n\nBrief debugging/firmware file decoding has been done here: \n\nhttp://reverseengineering.stackexchange.com/questions/5945/finding-the-actual-thumb-code-in-firmware\n\nSeemingly doing this decodes the firmware:\nrotate left 4 bits and invert:  \nc = (((c & 0x0f) << 4) | ((c & 0xf0) >> 4)) ^ 0xff\n\nProcessor is an ARM Cortex-M0 in a NUC122SC1AN:\n\nhttp://www.nuvoton.com/hq/products/microcontrollers/arm-cortex-m0-mcus/nuc120-122-123-220-usb-series/nuc122sc1an/?__locale=en\n\n\"Valid\" code seems to begin at 0x120.  Header is potentially everything before that, Footer is the last 16 bytes.  Last 4 bytes look to be some sort of checksum.\n\n1/30/15 update:\nI've since picked up a Nu-Link-Pro programmer that should allow me to both see what is on the chip, and program it directly.  The hope is that I can decode the firmware format from Vortex using that.\n\nTODO:\n=====\n1- Solder leads to my poker (Done!)\n\n2- Use the Vortex tool to flash a known firmware file (Done)\n\n3- Dump said firmware using the Nu-Link-Pro, compare the two firmware files to check for compatibility.  :: Apparently the Processor has a 'flash-lock' in place that prevents the tool from downloading firmware.  I'm going to try a USB Sniffer to see what actually gets written to the device.\n\n4- If possible and necessary, write a tool to convert the 'dumped' to the Vortex tool format.  This would allow for programming WITHOUT the NU-Link, since the version on the chip would be in the 'programmed' state.\n\n5- Begin custom firmware development!\n\n5a- Start with getting IPS mode to work as closely to the Vortex version as possible, since hopefully this would allow us to reuse their tool to program the boards\n\n5b- Attempt identification of keys on board and dip-switches\n\n5c- write base version for key functionality\n\n5d- LEDs? (difficult, since my board doesn't have LEDs installed, might have to solder them on).\n\n5e- NKRO?\n\n5f- More firmware functionality?  Programability?  Layers? etc?\n"
 },
 {
  "repo": "inovex/planning-poker",
  "language": "JavaScript",
  "readme_contents": "planning-poker\n==============\nAn online Planning Poker based on node.js and WebSockets. Supports english and german language.\n\nCurrent Version\n===============\n0.4.5\n\n\nScreenshots\n===========\n[![Login](https://github.com/djungowski/planning-poker/raw/master/misc/screenshot-1.png)](https://github.com/djungowski/planning-poker/raw/master/misc/screenshot-1.png)\n[![Altering the userstory](https://github.com/djungowski/planning-poker/raw/master/misc/screenshot-3.png)](https://github.com/djungowski/planning-poker/raw/master/misc/screenshot-3.png)\n[![Using the chat](https://github.com/djungowski/planning-poker/raw/master/misc/screenshot-4.png)](https://github.com/djungowski/planning-poker/raw/master/misc/screenshot-4.png)\n[![Laying cards](https://github.com/djungowski/planning-poker/raw/master/misc/screenshot-5.png)](https://github.com/djungowski/planning-poker/raw/master/misc/screenshot-5.png)\n[![Showing cards](https://github.com/djungowski/planning-poker/raw/master/misc/screenshot-6.png)](https://github.com/djungowski/planning-poker/raw/master/misc/screenshot-6.png)\n\n\nInstallation\n============\n1. Install dependencies\n\n\t\tnpm install\n\n2. Run server\n\n\t\tnode poker-server.js\n\n3. If you are running  the server on port 80\n\n\t\tsudo node poker-server.js\n\n\nConfiguration\n=============\n1. General\n------\nChange of any configuration requires a server restart.\n\n2. Server config\n----------------\nYou can configure the details for your server in the file config.ini in the section http. By default Planning Poker runs on port 80 listening to all IPs and hosts. The setting \"address\" in the http section configures the web address at which your Planning Poker is reachable. If you are running your poker server on planningpoker.mydomain.com you should configure the following:\n\n\t\taddress = planningpoker.mydomain.com\n\nImportant: Leave out the http://. This setting is also used for the WebSockets connection, so adding http:// will break the website.\n\n3. Poker cards\n--------------\nIf for any reason you need other poker card values, you can edit these in the config.ini in the cards section.\n\n\nRunning the specs\n=================\n1. If you don't have jasmine-node installed globally (jasmine-node is provided with the installation - see above)\n\n        node_modules/.bin/jasmine-node spec/\n\n2. If you have installed jasmine-node globally\n\n        jasmine-node spec/\n\nLicense\n=======\nThis source code of this software is licensed under [AGPLv3](http://www.gnu.org/licenses/agpl-3.0.html). See [license file](LICENSE) for details.\n"
 },
 {
  "repo": "evandam/Poker",
  "language": "Java",
  "readme_contents": "Poker\n=====\n\nNo-limit Texas Hold 'em on Android\n"
 },
 {
  "repo": "elliottneilclark/rs-poker",
  "language": "Rust",
  "readme_contents": "# rs-poker\n\n[![Crates.io](https://img.shields.io/crates/v/rs-poker.svg)](https://crates.io/crates/rs-poker)\n\nRS Poker is a rust library aimed at being a good starting place\nfor lots of poker rust code. Correctness and performance are the two main goals.\n\nDocumentation is uploaded [here](https://docs.rs/rs_poker)\nThe crates.io page is [here](https://crates.io/crates/rs_poker)\n\n## Core\n\nThe Core module contains code that is not specific to different\ntypes of poker games. It contains:\n\n* Suit type\n* Value type\n* Card type\n* Deck\n* Hand iteration\n* Poker hand rank type\n* Poker hand evaluation for five card hands.\n* Poker hand evaluation for seven card hands.\n\nThe poker hand (5 card) evaluation will rank a hand in ~20 nanoseconds\nper hand. That means that 50 Million hands per second can be\nranked. The seven card hand evaluation will rank a hand in < 25 ns.\n\nThe hand evaluation is is fully accurate, it does not rely on just single\nkicker. This allows for breaking ties on hands that are closer.\n\n\n## Holdem\n\nThe holdem module contains code that is specific to holdem. It\ncurrently contains:\n\n* Starting hand enumeration\n* Hand range parsing\n* Monte Carlo game simulation helpers.\n\n## Testing\n\nThe code is pretty well tested and benchmarked. If you find\nsomething that looks like a bug please submit a pr with test\ncode.\n\n5 Card + Hand iteration has been used in conjunction with fuzzing to validate\nthe seven card hand evaluation.\n"
 },
 {
  "repo": "allenfrostline/PokerHandsDataset",
  "language": "Python",
  "readme_contents": "# Poker Hands Dataset\n\nSimple scripts to extract, clean and browse the IRC Poker Database. Note here only hold 'em hands are included. Most (over 95%) hands are dropped either because they're not hold 'em or because of lack of features.\n\n## Data Preparation\n\nRun the following codes in order:\n\n```bash\nwget http://poker.cs.ualberta.ca/IRC/IRCdata.tgz  # download the database (-> IRCdata.tgz)\ntar -xvf IRCdata.tgz                              # unzip the tgz file (-> IRCdata)\npython3 extract.py                                # extract data (-> hands.json)\npython3 clean.py                                  # drop invalid hand data (-> hands_valid.json)\n```\n\nEventually there're 10,233,955 hands in `hands.json` and 437,862 in `hands_valid.json` after cleaning.\n\n## Data Inspection\n\nYou may run the following code to inspect hands in their original order. Any time you'd like to stop browsing, you can just use `Ctrl+C` to interrupt the process.\n\n```bash\npython3 browse.py                                 # print hands in a formatted way\n```\n\nThe script lists extracted hands history as below.\n\n    ############################################################\n       time : 199612            id : 2093\n      board : ['Qd', '6s', 'Td', 'Qc', 'Jh']\n       pots : [(2, 60), (2, 60), (2, 60), (2, 60)]\n    players : \n                             Tiger (#1)                         \n    {'action': 30,\n     'bankroll': 2922,\n     'bets': [{'actions': ['B', 'r'], 'stage': 'p'},\n              {'actions': ['k'], 'stage': 'f'},\n              {'actions': ['k'], 'stage': 't'},\n              {'actions': ['k'], 'stage': 'r'}],\n     'pocket_cards': ['9s', 'Ac'],\n     'winnings': 30}\n    \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \u00b7 \n                            jvegas2 (#2)                        \n    {'action': 30,\n     'bankroll': 139401,\n     'bets': [{'actions': ['B', 'c'], 'stage': 'p'},\n              {'actions': ['k'], 'stage': 'f'},\n              {'actions': ['k'], 'stage': 't'},\n              {'actions': ['k'], 'stage': 'r'}],\n     'pocket_cards': ['9c', 'As'],\n     'winnings': 30}\n    ############################################################\n\n## References\n\n- [IRC Poker Database](http://poker.cs.ualberta.ca/irc_poker_database.html), Computer Poker Research Group, University of Alberta, 2017.\n- [Miami Data Science Meetup](https://github.com/dksmith01/MSDM/blob/987836595c73423b89f83b29747956129bec16c2/.ipynb_checkpoints/MDSM%20Project%201%20Poker%20Python%20Wrangling%20Code-checkpoint.ipynb), 2015."
 },
 {
  "repo": "NextZeus/poker",
  "language": "CMake",
  "readme_contents": ""
 },
 {
  "repo": "whatsdis/pluribus",
  "language": "Python",
  "readme_contents": "# Pluribus\n\nImplementation of Pluribus, a Superhuman AI for 6-MAX No-Limit Holdem Poker Bot based on Supplementary Material https://science.sciencemag.org/highwire/filestream/728919/field_highwire_adjunct_files/0/aay2400-Brown-SM.pdf from the paper, \"Superhuman AI for multiplayer poker\" by Noam Brown and Tuomas Sandholm \n\n# Goal \n\nI am interested in Bodog.eu for the time being because of its HTML5 Client accessible with only a browser. This is infinitely easier than forcing people to run a Virtualized instance of a Poker software client which is actively hostile to any sort of automation. Our aim is to create a simple Chrome Extension which will monitor a Bodog.eu 6-MAX NL Holdem Poker game during real-time depth limited search that will be performed on an AWS EC2 r5a.16xlarge instance with 64 cores and 512GB of memory.\n\n  1. Solver: Translating the pseudo code and deploying it successfully on AWS. Returns solution showing the action to take.\n\n  2. Parser: Computer vision to parse screenshots of Bodog.eu game for the purpose of extracting current game state.\n  \n  3. Client: Chrome Extension which upon click will upload the game screenshot to be parsed and solved.\n  \n  \n ## 1. Solver (wIP)\n \n The code is a port of @EAT-CODE-KITE-REPEAT's javascript implementation. For Python, I decided to use the Deuces library, however, it has not been tested. \n \n ## 2. Parser (WIP):\n \n Seems like Bodog.eu uses an HTML5 renderer so will not require any computer vision. \n \n ## 3. Client (WIP)\n  \n \n\n"
 },
 {
  "repo": "miguelzf/PokerBot",
  "language": "C#",
  "readme_contents": "PokerBot\n========\n\nAutomatic intelligent playing bot for PokerStars. \nThis bot is still in its infancy, the only component done so far is the hand evaluator.\nStarted it a couple years back, and I haven't got the time to touch it again since, so it's been on hiatus.\n\n\nIncluded here is Keith Rule's C# Port of the Pokersource Evaluator, which I used to test my own odds evalutor.\nKeith Rule's version here:\nhttp://www.codeproject.com/Articles/12279/Fast-Texas-Holdem-Hand-Evaluation-and-Analysis\n\nMore info on Poker hand evaluators:\nhttp://www.codingthewheel.com/archives/poker-hand-evaluator-roundup/\n\n\n"
 },
 {
  "repo": "Ian-MacLeod/Poker-Solver",
  "language": "Python",
  "readme_contents": ""
 },
 {
  "repo": "AlgorithmsMeetup/PokerHands",
  "language": "JavaScript",
  "readme_contents": "# PokerHands\nCategorize and compare 5-card poker hands.\n\n![card gif](http://animationsa2z.com/attachments/Image/cards/cards2.gif)\n##Goal:\nYour task for today is to classify poker hands!  You have two functions to complete:\n\n  - labelHand, which gives the name of a single hand.\n\n##Info:\nHands are 14-character strings that look like \"8H TC KS 2C AD\", where\n  - there are exactly five cards\n  - each card is separated by a space\n  - each card is represented by a value followed by a suit\n  - ace is \"A\" (remember, aces can be either low or high!)\n  - king is \"K\"\n  - queen is \"Q\"\n  - jack is \"J\"\n  - ten is \"T\"\n  - all other cards are represented by their number.\n  - the four suits are represented by \"H\", \"C\", \"S\", and \"D\"\n\nHands will be legal, with no duplicate cards.\n\nRemember, the order of hands, from highest to lowest is\n  - Royal flush:      like a straight flush from Ten to Ace\n  - Straight flush:   5 cards in a row of the same suit\n  - Four of a kind:   4 cards of the same value\n  - Full house:       3 cards of the same value and one pair.\n  - Flush:            5 cards of the same suit\n  - Straight:         5 cards in a row\n  - Three of a kind:  3 cards of the same value\n  - Two pair:         you got this one.\n  - Pair:             this one too.\n  - High card:        basically, no hand.\n\nThere are no helper functions provided this time.\nYou're on your own, but feel free to write whatever helpers you need!\n"
 },
 {
  "repo": "Fubinator/planning-poker-discord-bot",
  "language": "JavaScript",
  "readme_contents": "# Planning Poker Discord bot\n\nA bot to play planning poker on Discord.\n\n## Getting Started\n\n### Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/Fubinator/planning-poker-discord-bot.git\n\n# Enter into the directory\ncd planning-poker-discord-bot/\n\n# Install the dependencies\nnpm install\n```\n\n### Configuration\n\nAfter cloning the Repository and installing the dependencies, you need to copy the `.env.example` File to `.env` and add your Discord API Token to the environment variable `DISCORD_SECRET` (_getting your API token is covered in the next section._)\n\n### Create a Bot app on Discord\n\nTo run your own instance of **planning-poker-discord-bot** you will need to creat a bot app on Discord's Developer Portal.\n\n1. Go to the [Discord Developers Portal](https://discord.com/developers/applications) in your browser.\n2. Sign in with your Discord login details.\n3. In the top right of the page, click the button **\"New Application\"**.\n4. Enter a relevant name and click **\"Create\"**.\n5. From the panel on the left, select the menu option **\"Bot\"** then click on the button **\"Add Bot\"**.\n6. There will now be a _Token_ that is hidden, copy it and add it your `.env` file you created previously. The _Token_ is your `DISCORD_SECRET`.\n7. From the panel on the left, select the menu option **\"OAuth2\"**\n8. Give your bot the _bot_ scope with the _Send Messages_ permissions.\n9. Paste the link it generates into your browser, this links to the bots invitation portal where you can add it to a server you control.\n10. The link should look like: `https://discord.com/api/oauth2/authorize?client_id={YOUR_CLIENT_ID}&permissions=2048&scope=bot`\n11. Once the bot arrives in your server, you are ready to run the bot.\n\n### Running the bot\n\n```bash\nnpm start\n```\n\n## Playing the game\n\n### What is Planning Poker?\n\nPlanning Poker is a gamified estimating and planning technique used frequently in agile teams to get an idea of how long certain task will take. A short video explanation can be [found here.](https://www.youtube.com/watch?v=TxSzo3lwwWQ)\n\n### Starting\n\nOnce your instance of the bot is added to your chosen server, gather your participants in text channel you wish to play in. It may be a good idea to make a channel specifically for playing planning poker.\n\nOnce every has there focus in the right channel, to start playing, type `!start`. The bot will will commence the game.\n\n### Running a question\n\nTo put forward a user story or question to consider, just type `!play` followed by the question or feature to be considered. All players will then have 30 seconds to send their estimation to the bot via direct message.\n\nAfter 30 seconds the bot will automatically close the question and display all players estimations in the text channel the game was started in.\n\nIf there are conflicting estimations, players will then have time to discuss there reasoning for the response they gave.\n\n#### Example\n\n`!play How long will it take to do implement x?`\n\n### Finishing a question\n\nAfter a consensus has been reached and the team has decided on an amount of storypoints / ideal days / etc. for the proposed user story, you can type `!storypoints` followed by the agreed amount of effort to tell the bot that the question has finished.\n\n#### Example\n\n`!storypoints 15`\n\n### Ending the game\n\nAfter all user stories have had an agreed upon amount of storypoints assigned to them you can then finish the game by typing `!end`. The bot will end the game and send all questions with the amount of given story points to the channel the game was started in.\n\n## Contributing\n\nIf you want to contribute, have a look [here](CONTRIBUTING.md).\n\n## License\n\nMIT\n"
 },
 {
  "repo": "mdp/hoyle",
  "language": "CoffeeScript",
  "readme_contents": "[![Build\nStatus](https://secure.travis-ci.org/mdp/hoyle.png)](http://travis-ci.org/mdp/hoyle)\n\n![Hoyle](http://img.mdp.im.s3.amazonaws.com/2013m15u0001_2008035_0000084.jpg_18631321mjcge.jpg)\n\n# Hoyle\n\n## A Javascript poker hand evaluator (Written in Coffeescript)\n\n### Example\n\n    Hand = require('hoyle').Hand\n\n    describe \"Finding winning hands\", ->\n      it \"should detect the winning hand from a list\", ->\n        gary = Hand.make([\"2s\",\"3s\",\"4h\",\"5c\",\"As\",\"Ts\",\"8d\"])\n        mike = Hand.make([\"5s\",\"Ts\",\"3h\",\"Ac\",\"2s\",\"Ts\",\"8d\"])\n        steve = Hand.make([\"5s\",\"5h\",\"3s\",\"3c\",\"2s\",\"Ts\",\"3d\"])\n        winners = Hand.pickWinners([gary, mike, steve])\n        winners.length.should.equal 1\n        winners[0].should.equal steve\n        winners[0].name.should.equal \"Full house\"\n\n### Install\n\n    npm install hoyle\n\n### Install and use locally\n\n    git clone git://github.com/mdp/hoyle.git\n    cd hoyle\n    npm install\n    npm run-script prepublish\n    npm link\n\n### Testing\n\n    npm install\n    npm test\n\n### Notes\n\n- Handles making the best poker hand out of 5-7 cards\n- Written for code clarity, not speed (But still plenty fast for many\nuses) See\n[\"The Great Poker Hand Evaluator\nRoundup\"](http://web.archive.org/web/20140625212722/http://codingthewheel.com/archives/poker-hand-evaluator-roundup/)\nfor a deeper dive into speedy poker hand evaluators.\n"
 },
 {
  "repo": "VitamintK/pluribus-hand-parser",
  "language": "Python",
  "readme_contents": "# pluribus-hand-parser\nStandalone parser for the hands that pluribus played\n\nthe raw data is available by downloading [Data File S1 here](https://science.sciencemag.org/content/suppl/2019/07/10/science.aay2400.DC1).\n\nTHIS API IS SUBJECT TO EXTREME CHANGE.  This is version -1.\n\n# Usage\n\n```\n$ python3 -i plur.py\n>>> h = Hand('STATE:42:r200fcffc/cr650cf/cr3000f:8c6h|7hJs|AdJh|9s2h|TdTs|5c3s/QdKc9d/Ac:-50|-200|-650|0|900|0:Budd|MrWhite|MrOrange|Hattori|MrBlue|Pluribus')\n>>> h.parse()\n>>> print(h.get_poker_stars_str())\nPokerStars Hand #42: Hold'em No Limit (50/100) - 2017/08/08 23:16:30 MSK [2017/08/08 16:16:30 ET]\nTable 'Pluribus Session TODO-42' 6-max (Play Money) Seat #6 is the button\nSeat 1: Budd (10000 in chips)\nSeat 2: MrWhite (10000 in chips)\nSeat 3: MrOrange (10000 in chips)\nSeat 4: Hattori (10000 in chips)\nSeat 5: MrBlue (10000 in chips)\nSeat 6: Pluribus (10000 in chips)\nBudd: posts small blind 50\nMrWhite: posts big blind 100\n*** HOLE CARDS ***\nDealt to Budd [8c 6h]\nDealt to MrWhite [7h Js]\nDealt to MrOrange [Ad Jh]\nDealt to Hattori [9s 2h]\nDealt to MrBlue [Td Ts]\nDealt to Pluribus [5c 3s]\nMrOrange: raises 100 to 200\nHattori: folds\nMrBlue: calls 200\nPluribus: folds\nBudd: folds\nMrWhite: calls 100\n*** FLOP *** [Qd Kc 9d]\nMrWhite: checks\nMrOrange: bets 450\nMrBlue: calls 450\nMrWhite: folds\n*** TURN *** [Qd Kc 9d] [Ac]\nMrOrange: checks\nMrBlue: bets 2350\nMrOrange: folds\nMrBlue collected 3900 from pot\n*** SUMMARY ***\nTotal pot 3900 | Rake 0\nBoard [Qd Kc 9d Ac]\n```\n\n# Updates and ongoing work\n\nSorry to those who have requested a version that works with Hold'em Manager - I'll get around to approving that pull request eventually.  It looks like Hold'em Manager doesn't like the \"play money\" designation and needs $ amount to function correctly.\n\n# Discussion\n[reddit post](https://www.reddit.com/r/poker/comments/cdhasb/download_all_10000_hands_that_pluribus_poker_ai/)\n"
 },
 {
  "repo": "UPRM-Advanced-Programming-Course/PokerMemory",
  "language": "Java",
  "readme_contents": ""
 },
 {
  "repo": "nateyolles/slack-pokerbot",
  "language": "Python",
  "readme_contents": "# Slack Pokerbot for AWS Lambda\n\nPokerbot is a [Slash Command](https://api.slack.com/slash-commands) for [Slack](https://slack.com/). It's easily hosted on [Amazon Web Services' Lambda](https://aws.amazon.com/lambda/).\n\n![Screenshot of Pokerbot in Slack](https://raw.githubusercontent.com/nateyolles/slack-pokerbot/master/images/screenshot.png)\n\n## Configure Slack Slash Command\n\n1. Navigate to https://<your-team-name>.slack.com/apps/manage/custom-integrations\n2. Click on \"Slash Commands\" and \"Add Configuration\" \n3. Set the Command to \"/pokerbot\"\n4. Set the URL to the path provided by AWS\n5. Set the Method to \"POST\"\n6. Set Custom Name to \"pokerbot\"\n7. Customize Icon if you wish\n8. Check \"Show this command in the autocomplete list\"\n9. Set Description to \"Play Scrum planning poker\"\n10. Set Usage Hint to \"help [or deal, vote <number>, tally, reveal]\"\"\n11. Copy the Token\n\n## Configure\n\n1. Paste the Slack Token\n2. Set the path to your images\n3. Set the planning poker values you want to use (e.g. 0, 1, 2, 3, 5, 8, 13, 20, 40, 100)\n\n## AWS Lambda\n\n1. Create a AWS Lambda; following the instructions from Amazon\n2. Paste the _app.py_ file into the web editor or upload as directed by AWS\n3. Afterwards adjust the _Integration Mapping_ of your API Gateway that is triggering the Lambda function\n\n    3.1 Add a mapping for `application/x-www-form-urlencoded`\n    \n    3.2 Paste the snippet below into the provided template\n    ```\n    {\"body\" : $input.json('$')}\n    ```\n> :exclamation: Do not forget to deploy your API after changing the integration mapping\n\n## Play Poker Planning\n1. Type \"/pokerbot deal\" in a channel\n2. Everyone votes by typing \"/pokerbot vote <your vote>\"\n3. Type \"/pokerbot tally\" in the channel to show the names of those who have voted\n4. Type \"/pokerbot reveal\" in the channel to reveal the voting results\n"
 },
 {
  "repo": "jgao18/PokerRoom",
  "language": "PHP",
  "readme_contents": "# PokerRoom\nAn poker website that supports the following:\n  - Account creation, utilizing mySQL databases to store user information\n  - Personal servers for hosting lobbies, using Node.js and Socket.IO \n  - A robust browser based multiplayer Texas Hold'em game in each server, using CreateJS\n"
 },
 {
  "repo": "near-examples/poker",
  "language": "Rust",
  "readme_contents": "# Poker\n\nPlay online poker without third parties (and without fees). Bet with NEAR. **Profit**.\nBased on [Mental Poker](https://en.wikipedia.org/wiki/Mental_poker) algorithm [proposed by Shamir, Rivest, Adleman](https://apps.dtic.mil/dtic/tr/fulltext/u2/a066331.pdf).\n\n## Security details\n\nThe `poker` contract is a \"fair game\" with some caveats.\n\n**Pros:**\n\n- Unbiased deck shuffling.\n- Provable and secret card drawing.\n\n**Cons:**\n\n- If a player leaves the game the game stalls. Tokens of the player that left the game are slashed and remaining tokens are turned back to other participants.\n- ZK-Proofs are required to avoid:\n  - players submitting invalid data while shuffling deck and partially revealing a card.\n  - players learning secret information from other players.\n\n## Setup\n\n1. `npm install -g near-shell`. This will create a global command `near`. Check with `near --version`.\n\n2. `pip install -r client/requirements.txt`\n\n3. Log in with wallet. Make sure you have access to you keys, usually they are stored on `neardev/**/<account_id>.json`\n    - Create an account at [the wallet](https://wallet.nearprotocol.com/).\n    - Log in using `near login`\n\n4. Launch the python client: `python3 client /path/to/account_id_key.json`\n\nOnce you start using the python client watch `poker.log` to see all the interactions taking place with the blockchain.\n\n## How to play\n\nThis is how a games look using the client. On start type `help` as suggested to see all commands:\n\n```\n[bob]>>> help\nAvailable commands:\n[d]deck_state   Show raw deck state.\n                args: <room_id>\n\n[e]enter        Enter a room. Can only enter to play in rooms that are Initiating.\n                args: <room_id>\n\n[f]fold         Fold your cards for this round.\n                args: <room_id>\n\n[h]help         Show this help\n                args:\n\n[l]list         List all rooms.\n                args:\n\n[n]new_room     Create a new room.\n                args: <name>\n\n[p]poker_state  Show raw poker table state.\n                args: <room_id>\n\n[r]raise        Increase your current bet TO amount.\n                args: <amount> <room_id>\n\n[s]start        Start the game in a room if it is Initiating or Idle\n                args: <room_id>\n\n[t]state        Show game state.\n                args: <room_id>\n```\n\n### Create a new room\n\n```\n[bob]>>> new_room poker_arena\nCreated room poker_arena with id 1\n```\n\n### List all rooms\n\n```\n[bob]>>> list\n000 qwerty Idle\n001 poker_arena Initiating\n```\n\nEach row of the output describes a room: `id name current_status`\nYou can only enter in rooms with state: `Initiating`\n\n### Enter a room\n\n```\n[bob]>>> enter 1\n\n\n[bob]>>>\n  Name  | Cards | Total | Staked | On Game | Turn\n--------+-------+-------+--------+---------+------\n bob(*) |       |  1000 |   0    |   True  |\n\nStatus: Initiating\n```\n\nNotice that the id is an integer. So no need to provide leading 0.\nRight now fake tokens are used and all player start with 1000 tokens.\n\n### Start the game\n\nWait for other players join the game. Board is updated automatically as new players join:\n\n```\n  Name  | Cards | Total | Staked | On Game | Turn\n--------+-------+-------+--------+---------+------\n bob(*) |       |  1000 |   0    |   True  |\n--------+-------+-------+--------+---------+------\n alice  |       |  1000 |   0    |   True  |\n--------+-------+-------+--------+---------+------\n carol  |       |  1000 |   0    |   True  |\n\nStatus: Initiating\n```\n\nAfter entering a room you don't need to provide room argument necessarily for subsequent commands. Last room entered will be used by default.\n\nStart the game writing `start`. You should see something similar to this:\n\n```\n[bob]>>>\n  Name  | Cards | Total | Staked | On Game |    Turn\n--------+-------+-------+--------+---------+-----------\n bob(*) |       |  1000 |   0    |   True  |\n--------+-------+-------+--------+---------+-----------\n alice  |       |  1000 |   0    |   True  | Shuffling\n--------+-------+-------+--------+---------+-----------\n carol  |       |  1000 |   0    |   True  |\n\n[bob]>>>\n  Name  | Cards | Total | Staked | On Game |    Turn\n--------+-------+-------+--------+---------+-----------\n bob(*) |       |  1000 |   0    |   True  |\n--------+-------+-------+--------+---------+-----------\n alice  |       |  1000 |   0    |   True  |\n--------+-------+-------+--------+---------+-----------\n carol  |       |  1000 |   0    |   True  | Shuffling\n\n[bob]>>>\n  Name  | Cards | Total | Staked | On Game |    Turn\n--------+-------+-------+--------+---------+-----------\n bob(*) |       |  1000 |   0    |   True  |\n--------+-------+-------+--------+---------+-----------\n alice  |       |  1000 |   0    |   True  | Shuffling\n--------+-------+-------+--------+---------+-----------\n carol  |       |  1000 |   0    |   True  |\n\n[bob]>>>\n  Name  | Cards | Total | Staked | On Game |    Turn\n--------+-------+-------+--------+---------+-----------\n bob(*) |       |  1000 |   6    |   True  |\n--------+-------+-------+--------+---------+-----------\n alice  |       |  1000 |   0    |   True  | Revealing\n--------+-------+-------+--------+---------+-----------\n carol  |       |  1000 |   3    |   True  |\n\n[bob]>>>\n```\n\nThe board is being updated while state is changing. Initially all players need to shuffle and encrypt the deck (this is done automatically but requires some time). After deck is shuffled initial cards are dealt to participants.\n\n```\n[bob]>>>\n  Name  | Cards  | Total | Staked | On Game |   Turn\n--------+--------+-------+--------+---------+---------\n bob(*) | 10\u2660 9\u2666 |  1000 |   6    |   True  |\n--------+--------+-------+--------+---------+---------\n alice  |        |  1000 |   0    |   True  | Betting\n--------+--------+-------+--------+---------+---------\n carol  |        |  1000 |   3    |   True  |\n\n[bob]>>>\n```\n\nFor example carol will be seeing a different board:\n\n```\n[carol]>>>\n   Name   | Cards | Total | Staked | On Game |   Turn\n----------+-------+-------+--------+---------+---------\n   bob    |       |  1000 |   6    |   True  |\n----------+-------+-------+--------+---------+---------\n  alice   |       |  1000 |   0    |   True  | Betting\n----------+-------+-------+--------+---------+---------\n carol(*) | 8\u2666 9\u2665 |  1000 |   3    |   True  |\n\n[carol]>>>\n```\n\nAnd alice:\n\n```\n[alice]>>>\n   Name   | Cards | Total | Staked | On Game |   Turn\n----------+-------+-------+--------+---------+---------\n   bob    |       |  1000 |   6    |   True  |\n----------+-------+-------+--------+---------+---------\n alice(*) | 3\u2660 4\u2666 |  1000 |   0    |   True  | Betting\n----------+-------+-------+--------+---------+---------\n  carol   |       |  1000 |   3    |   True  |\n\n[alice]>>>\n```\n\nStaked column denotes how much is at stake at this moment by every participant. Initially there is a big blind of 6 token by player at seat 1, and small blind by previous player (at seat n). Player next to the big blind is first to play, in this case alice at seat 2.\n\nTurn column denotes which player should play and what is the expected type of action from it.\nUser interaction in the middle of a round is only required on state `Betting`.\n\nFor the purpose of demonstration we will show the point of view of each player. You can notice which player we are referring to from the context of from the name in the prompt.\n\n### Betting\n\nWhen is the turn to bet for a player it has two options: (`Fold` and `Raise`).\n\n**Folding**\n\nAlice will fold as she has very bad hand and nothing at stake.\n\n```\n[alice]>>> fold\n{'Ok': None}\n\n[alice]>>>\n   Name   | Cards | Total | Staked | On Game |   Turn\n----------+-------+-------+--------+---------+---------\n   bob    |       |  1000 |   6    |   True  |\n----------+-------+-------+--------+---------+---------\n alice(*) | 3\u2660 4\u2666 |  1000 |   0    |  False  |\n----------+-------+-------+--------+---------+---------\n  carol   |       |  1000 |   3    |   True  | Betting\n```\n\nAfter alice fold its Carol turn. The column *On Game* denotes player that haven't fold so far. Since Alice just fold it is not longer playing this hand.\n\n**Raise**\n\nWhen typing `raise amount` it imply you will increase your stake to `amount` (not adding). It is not valid to raise less than max stake or more than total amount of token. There is a particular case when it is allowed to raise less than max stake and it is when is raised to total token (*All-in*).\n\nCarol will raise the bet to 10 using:\n\n```\n[carol]>>> raise 10\n{'Ok': None}\n\n[carol]>>>\n   Name   | Cards | Total | Staked | On Game |   Turn\n----------+-------+-------+--------+---------+---------\n   bob    |       |  1000 |   6    |   True  | Betting\n----------+-------+-------+--------+---------+---------\n  alice   |       |  1000 |   0    |  False  |\n----------+-------+-------+--------+---------+---------\n carol(*) | 8\u2666 9\u2665 |  1000 |   10   |   True  |\n\n[carol]>>>\n```\n\n**Calling**\n\nAnd Bob will see Carol bet.\n\n```\n[bob]>>> raise 10\n{'Ok': None}\n\n...\n\n[bob]>>>\n  Name  | Cards  | Total | Staked | On Game |   Turn\n--------+--------+-------+--------+---------+---------\n bob(*) | 10\u2660 9\u2666 |  1000 |   10   |   True  |\n--------+--------+-------+--------+---------+---------\n alice  |        |  1000 |   0    |  False  |\n--------+--------+-------+--------+---------+---------\n carol  |        |  1000 |   10   |   True  | Betting\n\nTable: 9\u2663 4\u2665 8\u2665\n```\n\nA lot of boards will be displayed before this last board, since to reveal each card all participants needs to interact with the blockchain which might take some time.\n\nNotice in the bottom of the board the three cards revealed on the *Flop*.\n\n## Summary\n\nUp to this point you have the basics about how to interact with this tool. Notice that rounds might take long time since it requires communication with the blockchain sequentially (not in parallel) from all players.\n\n## Deploying the poker contract\n\n1. Login with the account you will use to fund the contract. (Let's call it `macboy`).\n\n2. Create the account to deploy the contract (Let's call it `poker`)\n\n    `near create_account poker --masterAccount macboy --initialBalance 100 --keyPath neardev/default/macboy.json`\n\n3. Build the contract. Requires to have [rust installed](https://www.rust-lang.org/tools/install).\n\n    `./scripts/build.sh`\n\n4. Deploy the binary:\n\n    `near deploy --wasmFile res/poker.wasm  --accountId poker --keyPath neardev/default/poker.json`\n\n## Disclaimer\n\nThis project is work in progress, it is missing some features and has some bugs. See TODO in the code for more details.\n\n### Roadmap\n\n1. Determine round winners and give pot back to them.\n2. Use NEAR tokens.\n3. Player who loose al its cash should be removed from the game.\n4. Slash participant that stalls the game and recover from that state.\n5. Add ZK-Proof to avoid invalid data while interacting with the deck.\n    - [Shuffle and encrypt](http://www.csc.kth.se/~terelius/TeWi10Full.pdf)\n6. Improve communication performance.\n"
 },
 {
  "repo": "itb-ie/poker",
  "language": "Python",
  "readme_contents": "# Session 19&20 Poker Simulator\n\nAdded a GUI to the homework exercise. Look at it, try to undersatnd how the GUI works.<br>\nThe pictures of the cards are zipped, so you need to unzip them once you fork/clone<br>\n:sparkles: :sparkles: Enjoy :sparkles: :sparkles:\n"
 },
 {
  "repo": "wajahatkarim3/EasyFlipView",
  "language": "Java",
  "readme_contents": "<div align=\"left\"><p><a href=\"https://android.jlelse.eu/easyflipviewpager-the-flip-animations-for-your-viewpager-fd66b34f4703\"><img alt=\"New in the EasyFlipView\" align=\"center\" src=\"https://img.shields.io/badge/%F0%9F%93%84%20-NEW-red.svg\" /></a>&nbsp;\nThe article on how this library was created is now published. You can <a href=\"https://android.jlelse.eu/easyflipviewpager-the-flip-animations-for-your-viewpager-fd66b34f4703\">read it on this link here. \u2192</a>.\n</p></div>\n\n\n\ud83d\udcb3 EasyFlipView\n============\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/b6f4c512c5cf4705a41a04fe101a6c6e)](https://www.codacy.com/app/wajahatkarim3/EasyFlipView?utm_source=github.com&utm_medium=referral&utm_content=wajahatkarim3/EasyFlipView&utm_campaign=badger)\n[![Build Status](https://travis-ci.org/wajahatkarim3/EasyFlipView.svg?branch=master)](https://travis-ci.org/wajahatkarim3/EasyFlipView) [ ![Download](https://api.bintray.com/packages/wajahatkarim3/EasyFlipView/com.wajahatkarim3.EasyFlipView/images/download.svg) ](https://bintray.com/wajahatkarim3/EasyFlipView/com.wajahatkarim3.EasyFlipView/_latestVersion) [![Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-EasyFlipView-brightgreen.svg?style=flat)](https://android-arsenal.com/details/1/5051) [![API](https://img.shields.io/badge/API-15%2B-blue.svg?style=flat)](https://android-arsenal.com/api?level=15) [![](https://img.shields.io/badge/MaterialUp-EasyFlipView-yellowgreen.png)](https://material.uplabs.com/posts/easyflipview) [![Say Thanks!](https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg)](https://saythanks.io/to/wajahatkarim3)\n\n<div align=\"center\">\n  <sub>Built with \u2764\ufe0e by\n  <a href=\"https://twitter.com/WajahatKarim\">Wajahat Karim</a> and\n  <a href=\"https://github.com/wajahatkarim3/EasyFlipView/graphs/contributors\">\n    contributors\n  </a>\n</div>\n<br/>\n\nA quick and easy flip view through which you can create views with two sides like credit cards, poker cards etc. \n\n![](https://github.com/wajahatkarim3/EasyFlipView/blob/master/Art/demo.gif)\n\n\u2714\ufe0f Changelog\n=========\nChanges exist in the [releases](https://github.com/wajahatkarim3/EasyFlipView/releases) tab.\n\n\ud83d\udcbb Installation\n============\nAdd this in your app's `build.gradle` file:\n```groovy\ndependencies {\n  implementation 'com.wajahatkarim:EasyFlipView:3.0.3'\n}\n```\n\n<img alt=\"New in the EasyFlipView\" align=\"center\" src=\"https://img.shields.io/badge/%F0%9F%93%84%20-NEW-red.svg\" /> From the version `3.0.0`, this library will only support Android X naming artifacts. If you want to use the `android.support` versions, then use `2.1.2` version.\n\nOr add EasyFlipView as a new dependency inside your pom.xml\n\n```xml\n<dependency> \n  <groupId>com.wajahatkarim</groupId>\n  <artifactId>EasyFlipView</artifactId> \n  <version>3.0.3</version>\n  <type>pom</type> \n</dependency>\n```\n\u2754 Usage\n=====\n\nXML\n---\nEasyFlipView In XML layouts(\"Vertical\")\n```xml\n<com.wajahatkarim3.easyflipview.EasyFlipView\n\tandroid:layout_width=\"match_parent\"\n\tandroid:layout_height=\"wrap_content\"\n\tapp:flipOnTouch=\"true\"\n\tapp:flipEnabled=\"true\"\n\tapp:flipDuration=\"400\"\n\tapp:flipType=\"vertical\"\n\tapp:flipFrom=\"front\"\n\tapp:autoFlipBack=\"true\"\n\tapp:autoFlipBackTime=\"1000\"\n\t>\n\n\t<!-- Back Layout Goes Here -->\n\t<include layout=\"@layout/flash_card_layout_back\"/>\n        \n\t<!-- Front Layout Goes Here -->\n\t<include layout=\"@layout/flash_card_layout_front\"/>\n\n</com.wajahatkarim3.easyflipview.EasyFlipView>\n```\n\nEasyFlipView In XML layouts(\"Horizontal\")\n```xml\n<com.wajahatkarim3.easyflipview.EasyFlipView\n\tandroid:layout_width=\"match_parent\"\n\tandroid:layout_height=\"wrap_content\"\n\tapp:flipOnTouch=\"true\"\n\tapp:flipEnabled=\"true\"\n\tapp:flipDuration=\"400\"\n\tapp:flipFrom=\"right\"\n\tapp:flipType=\"horizontal\"\n\tapp:autoFlipBack=\"false\"\n\t>\n\n\t<!-- Back Layout Goes Here -->\n\t<include layout=\"@layout/flash_card_layout_back\"/>\n\n\t<!-- Front Layout Goes Here -->\n\t<include layout=\"@layout/flash_card_layout_front\"/>\n\n</com.wajahatkarim3.easyflipview.EasyFlipView>\n```\n\n# \ud83c\udfa8 Customizations & Attributes\nAll customizable attributes for EasyFlipView\n<table>\n    <th>Attribute Name</th>\n    <th>Default Value</th>\n    <th>Description</th>\n    <tr>\n        <td>app:flipOnTouch=\"true\"</td>\n        <td>true</td>\n        <td>Whether card should be flipped on touch or not.</td>\n    </tr>\n    <tr>\n        <td>app:flipDuration=\"400\"</td>\n        <td>400</td>\n        <td>The duration of flip animation in milliseconds.</td>\n    </tr>\n    <tr>\n        <td>app:flipEnabled=\"true\"</td>\n        <td>true</td>\n        <td>If this is set to false, then it won't flip ever in Single View and it has to be always false for RecyclerView</td>\n    </tr>\n     <tr>\n            <td>app:flipType=\"horizontal\"</td>\n            <td>vertical</td>\n            <td>Whether card should flip in vertical or horizontal</td>\n        </tr>\n        <tr>\n                    <td>app:flipType=\"horizontal\"</td>\n                    <td>vertical</td>\n                    <td>Whether card should flip in vertical or horizontal</td>\n                </tr>\n        \t <tr>\n                    <td>app:flipFrom=\"right\"\n        \t\tapp:flipFrom=\"back\"</td>\n                    <td>left\n        \t\tfront</td>\n                    <td>Whether card should flip from left to right Or right to left(Horizontal type) or car should flip to front or back(Vertical type)</td>\n                </tr>\n     <tr>\n        <td>app:autoFlipBack=\"true\"</td>\n        <td>false</td>\n        <td>If this is set to true, then he card will be flipped back to original front side after the time set in <i>autoFlipBackTime</i>.</td>\n     </tr>  \n     <tr>\n             <td>app:autoFlipBackTime=\"1000\"</td>\n             <td>1000</td>\n             <td>The time in milliseconds (ms), after the card will be flipped back to original front side.</td>\n          </tr> \n    </table>\n\nIn Code (Java)\n----\n```java\n// Flips the view with or without animation\nmYourFlipView.flipTheView();\nmYourFlipView.flipTheView(false);\n\n// Sets and Gets the Flip Animation Duration in milliseconds (Default is 400 ms)\nmYourFlipView.setFlipDuration(1000);\nint dur = mYourFlipView.getFlipDuration();\n\n// Sets and gets the flip enable status (Default is true)\nmYourFlipView.setFlipEnabled(false);\nboolean flipStatus = mYourFlipView.isFlipEnabled();\n\n// Sets and gets the flip on touch status (Default is true)\nmYourFlipView.setFlipOntouch(false);\nboolean flipTouchStatus = mYourFlipView.isFlipOnTouch();\n\n// Get current flip state in enum (FlipState.FRONT_SIDE or FlipState.BACK_SIDE)\nEasyFlipView.FlipState flipSide = mYourFlipView.getCurrentFlipState();\n\n// Get whether front/back side of flip is visible or not.\nboolean frontVal = mYourFlipView.isFrontSide();\nboolean backVal = mYourFlipView.isBackSide();\n\n// Get/Set the FlipType to FlipType.Horizontal\nboolean isHorizontal = mYourFlipView.isHorizontalType();\nmYourFlipView.setToHorizontalType();\n\n// Get/Set the FlipType to FlipType.Vertical\nboolean isVertical = mYourFlipView.isVerticalType();\nmYourFlipView.setToVerticalType();\n\n// Get/Set if the auto flip back is enabled\nboolean isAutoFlipBackEnabled = mYourFlipView.isAutoFlipBack();\nmYourFlipView.setAutoFlipBack(true);\n\n// Get/Set the time in milliseconds (ms) after the view is auto flip back to original front side\nint autoflipBackTimeInMilliseconds = mYourFlipView.getAutoFlipBackTime();\nmYourFlipView.setAutoFlipBackTime(2000);\n\n// Sets the animation direction from left (horizontal) and back (vertical)\neasyFlipView.setFlipTypeFromLeft();\n\n// Sets the animation direction from right (horizontal) and front (vertical)\neasyFlipView.setFlipTypeFromRight();\n\n// Sets the animation direction from front (vertical) and right (horizontal)\neasyFlipView.setFlipTypeFromFront();\n\n// Sets the animation direction from back (vertical) and left (horizontal)\neasyFlipView.setFlipTypeFromBack();\n\n// Returns the flip type from direction. For horizontal, it will be either right or left and for vertical, it will be front or back.\neasyFlipView.getFlipTypeFrom();\n\n```\n\nFlip Animation Listener\n---\n```java\nEasyFlipView easyFlipView = (EasyFlipView) findViewById(R.id.easyFlipView);\neasyFlipView.setOnFlipListener(new EasyFlipView.OnFlipAnimationListener() {\n            @Override\n            public void onViewFlipCompleted(EasyFlipView flipView, EasyFlipView.FlipState newCurrentSide) \n            {\n                \n                // ...\n                // Your code goes here\n                // ...\n                \n            }\n        });\n```\n\n\u274c Known Issues\n=============\nThe `EasyFlipView` doesn't flip when used in `RecyclerView`. This is because the `EasyFlipView` uses the `onTouch()` method to intercept the touch events and flip the view accordingly. One easier solution is to disable the `flipOnTouch` attribute in XML by this.\n```xml\napp:flipOnTouch=\"false\"\n```\nNow, your `RecyclerView` will scroll but the `EasyFlipView` will not flip or animate on touch etc. You will have to manually flip the view by calling the method `mYourFlipView.flipTheView()` inside the adapter or `ViewHolder` class of the `RecyclerView`. For example,\n```java\npublic class MyRecyclerViewAdapter extends RecyclerView.Adapter<MyRecyclerViewAdapter.ViewHolder> {\n\n    private List<Object> mData;\n    private LayoutInflater mInflater;\n    private ItemClickListener mClickListener;\n\n    // data is passed into the constructor\n    MyRecyclerViewAdapter(Context context, List<Object> data) {\n        this.mInflater = LayoutInflater.from(context);\n        this.mData = data;\n    }\n\n    // inflates the row layout from xml when needed\n    @Override\n    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n        View view = mInflater.inflate(R.layout.recyclerview_row, parent, false);\n        return new ViewHolder(view);\n    }\n\n    // binds the data to the TextView in each row\n    @Override\n    public void onBindViewHolder(ViewHolder holder, int position) {\n        String textData = (String) mData.get(position);\n        holder.myTextView.setText(textData);\n    }\n\n    // total number of rows\n    @Override\n    public int getItemCount() {\n        return mData.size();\n    }\n\n\n    // stores and recycles views as they are scrolled off screen\n    public class ViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener {\n        TextView myTextView;\n\tEasyFlipView myEasyFlipView;\n\n        ViewHolder(View itemView) {\n            super(itemView);\n            myTextView = itemView.findViewById(R.id.tvAnimalName);\n\t    myEasyFlipView = itemView.findViewById(R.id.myEasyFlipView);\n            itemView.setOnClickListener(this);\n        }\n\n        @Override\n        public void onClick(View view) {\n\t    myEasyFlipView.flipTheView();\n            if (mClickListener != null) {\n\t    \tmClickListener.onItemClick(view, getAdapterPosition());\n\t    }\n        }\n    }\n\n    // convenience method for getting data at click position\n    String getItem(int id) {\n        return mData.get(id);\n    }\n\n    // allows clicks events to be caught\n    void setClickListener(ItemClickListener itemClickListener) {\n        this.mClickListener = itemClickListener;\n    }\n\n    // parent activity will implement this method to respond to click events\n    public interface ItemClickListener {\n        void onItemClick(View view, int position);\n    }\n}\n```\n___\n\nThe `EasyFlipView` has a strange behaviour when the back and front layouts are a `CardView`. To workaround it, wrap your `CardView` in a `FrameLayout` or other `ViewGroup`.\n\n\ud83d\udcb0 Donations\n=============\n\nThis project needs you! If you would like to support this project's further development, the creator of this project or the continuous maintenance of this project, feel free to donate. Your donation is highly appreciated (and I love food, coffee and beer). Thank you!\n\n**PayPal**\n\n* **[Donate $5](https://www.paypal.me/WajahatKarim/5)**: Thank's for creating this project, here's a tea (or some juice) for you!\n* **[Donate $10](https://www.paypal.me/WajahatKarim/10)**: Wow, I am stunned. Let me take you to the movies!\n* **[Donate $15](https://www.paypal.me/WajahatKarim/15)**: I really appreciate your work, let's grab some lunch!\n* **[Donate $25](https://www.paypal.me/WajahatKarim/25)**: That's some awesome stuff you did right there, dinner is on me!\n* **[Donate $50](https://www.paypal.me/WajahatKarim/50)**: I really really want to support this project, great job!\n* **[Donate $100](https://www.paypal.me/WajahatKarim/100)**: You are the man! This project saved me hours (if not days) of struggle and hard work, simply awesome!\n* **[Donate $2799](https://www.paypal.me/WajahatKarim/2799)**: Go buddy, buy Macbook Pro for yourself!\n\nOf course, you can also choose what you want to donate, all donations are awesome!\n\n\ud83d\udc68 Developed By\n============\n```\nWajahat Karim\n```\n- Website (http://wajahatkarim.com)\n- Twitter (http://twitter.com/wajahatkarim)\n- Medium (http://www.medium.com/@wajahatkarim3)\n- LinkedIn (http://www.linkedin.com/in/wajahatkarim)\n\n\ud83d\udc96 Special Thanks\n=========\n- [**iGio90**](https://github.com/iGio90) for adding dynamic views support [Pull Request # 10](https://github.com/wajahatkarim3/EasyFlipView/pull/10)\n- [**Sachin Varma**](https://www.linkedin.com/in/sachin-varma-58b243118/) for adding vertical animations support [Pull Request # 12](https://github.com/wajahatkarim3/EasyFlipView/pull/12)\n- [**Sachin Varma**](https://www.linkedin.com/in/sachin-varma-58b243118/) for adding multi-dimension animations support [Pull Request # 23](https://github.com/wajahatkarim3/EasyFlipView/pull/23)\n- [**Sachin Varma**](https://www.linkedin.com/in/sachin-varma-58b243118/) for adding multi-dimension animations support [Pull Request # 23](https://github.com/wajahatkarim3/EasyFlipView/pull/23)\n- [**Daniel Luque**](https://github.com/DrankoLQ) for updating the `targetSdk` to 28 [Pull Request # 30](https://github.com/wajahatkarim3/EasyFlipView/pull/30)\n- [**Aditya Zope**](https://github.com/adzo261) for adding the feature to flip card only once. [Pull Request # 33](https://github.com/wajahatkarim3/EasyFlipView/pull/33)\n- [**Bruno Correia**](https://github.com/bffcorreia) for removing `<application>` tag from `AndroidManifest.xml`. [Pull Request # 38](https://github.com/wajahatkarim3/EasyFlipView/pull/38) and fixing the card animation glitch issue [Pull Request # 39](https://github.com/wajahatkarim3/EasyFlipView/pull/39)\n\n\n# \ud83d\udc4d How to Contribute\n1. Fork it\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am 'Add some feature')\n4. Push to the branch (git push origin my-new-feature)\n5. Create new Pull Request\n\n# \ud83d\udcc3 License\n\n    Copyright 2018 Wajahat Karim\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n"
 },
 {
  "repo": "ta-data-mexpt/-lab-poker-master",
  "language": "Jupyter Notebook",
  "readme_contents": "![Ironhack logo](https://i.imgur.com/1QgrNNw.png)\n\n# Lab | Calculating Game of Chances\n\n## Introduction\n\nIn the lesson we have shown you how to use Python to calculate the probabilities and odds of the royal flush and straight flush in poker. In this lab you will calculate the probabilities of all other hands such as four of a kind, full house, flush, straight, and so on. We'll also provide you a mini lesson on how to apply statistical skills in real poker playing by calculating the pot odds and outs.\n\n## Getting Started\n\nOpen `main.ipynb` in Jupyter Notebook and work on the challenges.\n\n## Deliverables\n\n- `main.ipynb` with your responses.\n\n## Submission\n\nUpon completion, add your version of `main.ipynb` to git. Then commit git and push your branch to the remote.\n\n## Resources\n\n[Learn How to Play Poker - Texas Hold 'Em (aka Texas Holdem)](https://www.instructables.com/id/Learn-To-Play-Poker---Texas-Hold-Em-aka-Texas-Ho/)\n\n[How to play Texas Hold'em](https://www.youtube.com/watch?v=KKMac6tQKiI)\n\n[Poker Odds for Dummies](https://www.cardschat.com/odds-for-dummies.php)\n\n[Texas Hold'em Poker Odds Calculator](https://www.cardplayer.com/poker-tools/odds-calculator/texas-holdem)\n"
 },
 {
  "repo": "ethnt/poker",
  "language": "Java",
  "readme_contents": "# [Poker](http://www.fpsct.org/cfhttp.cfm?script=extensions/includes/resource/resourcecontent.cfm&rid=14676&pageid=2133p://www.fpsct.org/cfhttp.cfm?script=extensions/includes/resource/resourcecontent.cfm&rid=14676&pageid=2133)\n\n**Authors:** [Ethan Turkeltaub](http://github.com/eturk), [Brett Morris](http://github.com/bmorr)\n\nThis is a project for AP Computer Science. It recreates a game of poker (or, by extension, any card game). It can/will be able to work with betting and be extensible by other child classes.\n"
 },
 {
  "repo": "pusabless/texas-poker-engine",
  "language": "JavaScript",
  "readme_contents": "# texas-poker-engine\nDummy Texas Poker Engine open source edition\n\n### Sub projects\n* dummy-engine : An multiple instances based back-end engine for management and game service\n* dummy-the : The front end of Texas Poker game, including AI programing documents, tools, game and live client\n\nPlease refer to README.md in each sub project\n"
 },
 {
  "repo": "mikhailshilkov/FsPokerLogic",
  "language": "F#",
  "readme_contents": "Poker bot implemented in F#\n---------------------------\n\nFor some information over this code please read my blog posts\nof **Building a Poker Bot** series where I describe my experience \ndeveloping bot software to play in online poker rooms. I'm building \nthe bot with .NET framework and F# language which makes the task relatively \neasy and very enjoyable. Here are the published parts:\n\n- [Building a Poker Bot: Card Recognition](http://mikhail.io/2016/02/building-a-poker-bot-card-recognition/)\n- [Building a Poker Bot: String and Number Recognition](http://mikhail.io/2016/02/building-a-poker-bot-string-recognition/)\n- [Building a Poker Bot: Mouse Movements](http://mikhail.io/2016/03/building-a-poker-bot-mouse-movements/)\n- [Building a Poker Bot with Akka.NET Actors](http://mikhail.io/2016/04/building-a-poker-bot-with-akka-net-actors/)\n- [Building a Poker Bot: Functional Fold as Decision Tree Pattern](http://mikhail.io/2016/07/building-a-poker-bot-functional-fold-as-decision-tree-pattern/)\n"
 },
 {
  "repo": "pret/pokerevo",
  "language": "Assembly",
  "readme_contents": "# Pok\u00e9mon Battle Revolution\n\nThis is a decompilation of Pok\u00e9mon Battle Revolution\n\nIt builds the following DOL:\n\n* main.dol: `sha1: ffcd539d239722b8bb27e45c9ad4aacc818c8933`\n\nTo set up the repository, see [INSTALL.md](INSTALL.md).\n\n## See also\n\nOther disassembly and/or decompilation projects:\n* [**Pok\u00e9mon Red and Blue**](https://github.com/pret/pokered)\n* [**Pok\u00e9mon Gold and Silver (Space World '97 demo)**](https://github.com/pret/pokegold-spaceworld)\n* [**Pok\u00e9mon Yellow**](https://github.com/pret/pokeyellow)\n* [**Pok\u00e9mon Trading Card Game**](https://github.com/pret/poketcg)\n* [**Pok\u00e9mon Pinball**](https://github.com/pret/pokepinball)\n* [**Pok\u00e9mon Stadium**](https://github.com/pret/pokestadium)\n* [**Pok\u00e9mon Gold and Silver**](https://github.com/pret/pokegold)\n* [**Pok\u00e9mon Crystal**](https://github.com/pret/pokecrystal)\n* [**Pok\u00e9mon Ruby and Sapphire**](https://github.com/pret/pokeruby)\n* [**Pok\u00e9mon Pinball: Ruby & Sapphire**](https://github.com/pret/pokepinballrs)\n* [**Pok\u00e9mon FireRed and LeafGreen**](https://github.com/pret/pokefirered)\n* [**Pok\u00e9mon Emerald**](https://github.com/pret/pokeemerald)\n* [**Pok\u00e9mon Mystery Dungeon: Red Rescue Team**](https://github.com/pret/pmd-red)\n\n\n## Contacts\n\nYou can find us on [Discord](https://discord.gg/d5dubZ3) and [IRC](https://kiwiirc.com/client/irc.freenode.net/?#pret).\n\n## Contributions\n\nContributions and PRs are welcome.\n"
 },
 {
  "repo": "tsuntsuntsuntsun/Pokerbot",
  "language": "Java",
  "readme_contents": "## Granblue Fantasy Pokerbot\nThis is a free bot that plays Granblue Fantasy's poker game for you.\n\n* This bot is meant to be used with the browser version of the game in chrome (http://game.granbluefantasy.jp/). It currently supports Medium and Large window settings.\n\n* The bot makes use of screenshots (image recognition) to determine its next move (no http requests at all or anything like that) and moves/clicks with the cursor to emulate a human, making it pretty much undetectable. \n\n* Earns about 3.5M coins an hour, note that the bot goes for \"big\" wins, meaning that it's possible you won't be seeing gains for a while (usually 1m every ~20 minutes).\n\n* The recommended runtime for this bot is 1-2 hours. Anything more than 2 hours is dangerous and not recommended.\n\n* If you decide to bot for more than 2 hours, keep in mind every ~3 hours or so you will have to fill in the captcha (the bot freezes when the captcha pops up and plays a warning sound) to keep going. Not filling in the captcha may get your account suspended.\n\n* System requirements: runs on practically anything. On my i5 2500k, cpu usage sits at 2-10%.\n* Requires [java 8](https://java.com/en/download/) installed. \n\nIf you want to support the author, you can donate here\n\n[![paypal](https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=N6YUUYVD4A32Y)\n\n<br /><br /><br />\n\n[1. Compilation](#1-compilation) <br />\n[2. Ingame settings](#2-ingame-settings) <br />\n[3. Starting the bot](#3-starting-the-bot) <br />\n[4. Bot settings](#4-bot-settings) <br />\n \n\n\n# 1. Compilation\n## (note: this is NOT necessary, only do this if you don't trust the .jar that I already generated or you are changing the code yourself)\n\n* Windows: Simply run compile.bat to compile the jar (requires [jdk](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html) installed ).\n\n# 2. Ingame settings \n## you MUST do this or the bot won't work at all\n1. Go to settings (click top right on \"menu\", the red button \"settings\" is on the bottom right)\n2. Click on \"Animation/Resolution settings\"\n3. Set \"Version Settings\" to \"Beta\"\n4. Set \"Animations Settings\" to \"Standard\" and set \"Resolution Settings\"  to \"Lite\" and save changes\n\n![Step 3 settings](/src/img/readme/settings3.jpg)\n\n5. Go back to settings, click on \"Browser Version Settings\"\n6. Set \"Bottom Menu\" to \"OFF\" (not necessary, only do this if your screen is too small to fit the poker gameboard)\n7. Set \"Automatic Resizing\" to \"OFF\" and save changes\n\n![Step 4 settings](/src/img/readme/settings4.jpg)\n\n8. Set \"Window Size\" to \"Large\" or \"Medium\" (note that if you want to use medium window size, you must edit the settings.txt file, see: [Bot settings](#4-bot-settings))\n\n# 3. Starting the bot\n1. Download the zipfile and extract it\n2. Open the settings.txt and change the runtime (edit the line that says \"runtime=60\", change 60 to the amount of minutes you want the bot to run). If you are using medium window settings, change the line \"medium=0\" to \"medium=1\". I recommend leaving the other settings alone. (see: [Bot settings](#4-bot-settings) ).\n3. \n* Windows: Run the \"Pokerbot.bat\" file (if you get an error here, make sure you have the latest version of java installed https://java.com/en/download/). A cmd window will open. The bot will show you the current settings and start loading assets.\n* Linux: open a console. Type \"java -version\", the version should be 1.8.* (* is any number) or 1.9.*, if you get an error or your java is outdated, search in google how to update/download java for your system.<br />\nIf you have the right java version, run the following commands (replace PATH with the full path to the directory where you unpacked the zip):<br />\ncd PATH<br />\njava -jar Pokerbot.jar settings.txt<br />\n\n4. Open your game in chrome and start a poker game with 1000-Chip Bet and 2 CARDS\n5. Now you need to make sure that the gameboard is visible.\nIf your screen is big enough just do it like this (expand your browser so the whole board is visible).\n\n![Step 5 setup](/src/img/readme/step5.jpg)\n\nFor people who have small screens, you can make your browser a bit smaller:\n\n![Step 5 setup small](/src/img/readme/step5new.jpg)\n\nThis is the ABSOLUTE MINIMUM that must be visible (just above the \"full house x10\" line and the buttons on the bottom of the gameboard fully visible). If you show any less than this the bot will probably not work.\n\n![Step 5 setup minimum](/src/img/readme/step5minimum.jpg)\n\n6. Place your browser window as close to the top left of the screen as you can (this makes the next step faster)\n* IF YOU ARE USING VIRAMATE, DISABLE THE IMPROVED ENGLISH FONT SETTINGS (OR DISABLE VIRAMATE ENTIRELY), THE BOT WON'T WORK AT ALL WITH DIFFERENT FONTS\n7. Press enter on the cmd window, the bot will now try to find the gameboard on your screen (DON'T MOVE YOUR BROWSER WINDOW AFTER THIS STEP)\n8. The bot will start working as soon as the gameboard is found and will stop after the amount of minutes in the settings file. (If you want to stop it earlier just close the cmd window)\n\n## Troubleshooting\n\nIf you get an error after 7 (\"GAMEBOARD NOT FOUND\"):\n* Make sure your ingame settings are correct and you saved changes.\n* Make sure you can see the gameboard as shown on the pictures of step 5. Also don't cover the gameboard with your mouse.\n* It's possible your browser is zoomed out/in even if your ingame settings are right (compare the size of your gameboard to the screenshots used in this guide). Use ctrl+mouse wheel to fix it.\n* Press enter again to restart the process on the cmd window.\n\nIf you keep seeing \"CURRENT STAGE: OTHER\" after the gameboard was found:\n* You are probably using viramate and didn't disable it\n* Reread the ingame setting section, your resoultion might be wrong\n* If you are using Windows, you may have to enable ClearType (google how to enable it, it differs depending on your windows version)\n\nIf none of this helps you can make an issue here https://github.com/tsuntsuntsuntsun/Pokerbot/issues .\nYou can also contact me on discord at tsun\\#3515 and I will try to help you set it up.\n\n\n# 4. Bot settings\nTo change the bot settings, open the \"settings.txt\" file and change the values as needed.\nHere is an overview of the settings you can change. I recommend leaving everything as is and simply changing the runtime.\n\n## Runtime (line 6)\nThe most important setting is \"runtime\" on line 6 of the settings file (\"runtime=60\"). Change the 60 to the amount of minutes you want the bot to run.\n\nRecommended value: 30 to 90\n\n## Ingame window size (line 10)\nThe bot currently supports \"Medium\" or \"Large\" ingame window settings. Set this value to 0 to use LARGE settings (default), set it to 1 to use MEDIUM settings.\n\nIf you want to use the default (recommended) settings, just skip the rest of this section.\n\n## Higher-or-Lower settings\nThe following 2 settings will influence when the bot will stop playing Higher-or-Lower (HL).\n### safeRound (line 16)\n* after this round, the bot will start to \"play safe\" (= the bot won't continue HL if the odds are too low)\n* value between 1 and 10\n* a value of 1 will make it so the bot always plays safe\n* a value of 10 will make it so the bot never plays safe (= always goes for 10 round wins)\n\nRecommended value: 7-8 (for longer runs, runtime 60+ minutes), 5-6 (quick wins, useful when you are just short of being able to buy something) or 10 (big wins, runtime 90+ minutes, it could take a while for you to see gains if you get unlucky, but it should be ok in the long run)\n\n### HLBound (line 20)\n* this is the value used to determine whether the odds are too low or not, it is only used when \"playing safe\"\n* the bot will continue playing HL only if the absolute difference between the current card and 8 is HIGHER than the HLBound value\n* example: HLBound=1: the bot will stop if the next card is 7,8,9. for HLBound=2: the bot will stop if the next card is 6,7,8,9,10.\n\nRecommended value: 1-2 (what I usually use is 2, any higher values are not efficient)\n\nHere is an example of how it works:\n\n* using safeRound=7, HLBound=2\n* First 7 rounds: when asked to play another round (to double up again), the bot will always click \"YES\".\n* After round 7: when asked to play another round, the bot will look at the next card that will be used.\n* if the next card value is 6,7,8,9,10 the bot will click \"NO\".\n* if it is any other card, the bot will click \"YES\".\n\n## Delay settings\nThe bot uses a base \"delay\" between actions (while waiting for animations to finish, it does nothing). These values can be changed if your animations take longer (due to lag) or less (I play from Europe so my game lags from time to time compared to other people).\n\nAlso note that these value are not the exact values that will be used: all the delays are slightly randomized (0-500ms added randomly to every delay) to avoid automatic detection.\n\nWARNING: changing these values may cause the bot to not work properly and desync (not the end of the world, the bot will still work but it will pause from time to time). ONLY CHANGE THESE SETTINGS IF YOUR GAME LAGS A LOT OR IF YOU FEEL LIKE IT COULD GO FASTER.\n\nAll values are in ms (millisecond).\n\n### delayNormal (line 29)\n* this is the delay while picking what cards to keep / dealing hand\n\nRecommended value: 3000\n\n### delayHL (line 32)\n* this is the delay during the Higher-or-Lower segment\n* animations during these segments are shorter, the delay used should be delayNormal-500\n\nRecommended value: 2500\n\n### clickDelay (line 35)\n* How long it takes to move the cursor from one point to another\n* The randomized value added to this delay is 0-250ms\n* WARNING: don't set this value TOO low, the bot will try to click too fast and some of the clicks might not register. It may also trigger some detection flags if you do too many actions in a short period of time.\n\nRecommended value: 150-200. \n\n## Other settings\n### Sound warning\nWhen the bot stops working (something blocks the gameboard / captcha shows up), a warning sound will play. You can change the warning sound in the settings (line 41).\nThese are the current available sounds:\n1. Lyria singing\n2. Ifrit screaming\n3. Sagitarius warning\n\nYou can test this out by blocking the gameboard for a few seconds while the bot is running.\n\n\n"
 },
 {
  "repo": "ta-data-mex/lab-poker-master",
  "language": "Jupyter Notebook",
  "readme_contents": "![Ironhack logo](https://i.imgur.com/1QgrNNw.png)\n\n# Lab | Calculating Game of Chances\n\n## Introduction\n\nIn the lesson we have shown you how to use Python to calculate the probabilities and odds of the royal flush and straight flush in poker. In this lab you will calculate the probabilities of all other hands such as four of a kind, full house, flush, straight, and so on. We'll also provide you a mini lesson on how to apply statistical skills in real poker playing by calculating the pot odds and outs.\n\n## Getting Started\n\nOpen `main.ipynb` in Jupyter Notebook and work on the challenges.\n\n## Deliverables\n\n- `main.ipynb` with your responses.\n\n## Submission\n\nUpon completion, add your version of `main.ipynb` to git. Then commit git and push your branch to the remote.\n\n## Resources\n\n[Learn How to Play Poker - Texas Hold 'Em (aka Texas Holdem)](https://www.instructables.com/id/Learn-To-Play-Poker---Texas-Hold-Em-aka-Texas-Ho/)\n\n[How to play Texas Hold'em](https://www.youtube.com/watch?v=KKMac6tQKiI)\n\n[Poker Odds for Dummies](https://www.cardschat.com/odds-for-dummies.php)\n\n[Texas Hold'em Poker Odds Calculator](https://www.cardplayer.com/poker-tools/odds-calculator/texas-holdem)\n"
 },
 {
  "repo": "venil7/ScrumPoker",
  "language": "JavaScript",
  "readme_contents": "# scrum planning poker\n\nTechnologies used (2013):\n\n- node.js\n- socket.io\n- knockout.js\n- bootsrap\n- jQuery\n\n### run locally:\n\n```\n $ npm install\n $ node server.js\n```\n\nnavigate to http://localhost:3000\n\n#### [Live demo @ Heroku](http://scrumpoker.herokuapp.com/)\n"
 },
 {
  "repo": "matthewkennedy5/Poker",
  "language": "Python",
  "readme_contents": "# Poker\n\n## Introduction\n\nRecent advancements in game AI have produced astounding results, such as Google's AlphaGo and OpenAI's Dota bot. However, for many years, the goal of writing a computer program to beat humans at No Limit Texas Holdem has remained elusive. That is until 2017, when researchers at Carnegie Mellon University were finally able to crack the barrier, when their bot Libratus defeated top human opponents with statistical significance. (cite) Libratus required a supercomputer, but in 2018 a technique called Depth Limited Solving was discovered which vastly reduced the required computational resources to the point that a superhuman poker program could run on your laptop. (cite) The goal of this project is to use depth-limited solving to implement the first opensource superhuman AI for Heads Up No Limit Texas Holdem. \n\n## Running the program\nTODO\n\n## How this works\n\nPoker is an \"imperfect information game\", which means it's a lot harder to solve than perfect information games like chess. In chess you can just search the game tree for the best move, but in poker, you don't actually know where you are in the game tree because you can't see your opponent's cards. So instead of solving for a \"best move\" you have to solve for an optimal strategy--the Nash equilibrium.\n\nA simple example of a Nash equilibrium is for Rock Paper Scissors. The optimal strategy is to choose randomly between rock, paper, and scissors, and if you do this, you can't lose in the long run. This is the only strategy that is unexploitable, because if you're biased towards any one move, the opponent can use that information against you. There is no one \"best move\" because you need to choose randomly, otherwise the opponent can adapt to beat you. This is like in poker, when sometimes there is no one optimal move, but you have to switch it up between several actions, because if you did the same thing every time in each spot, your opponent could figure it out and know what cards you have. \n\nIt's guaranteed that for any two player imperfect information game (like Heads Up No Limit Texas Holdem) there exists at least one Nash Equilibrium strategy, and if you play by it, you cannot lose in the long run. In real life though, if you play a Nash Equilibrium strategy in poker, you will destroy your opponents since chances are they aren't playing anything close to an optimal strategy. \n\nSo we know that this strategy exists, but how do we solve for it? In 2007, researchers at the University of Alberta invented a technique known as \"Counterfactual Regret Minimization\" (cite) which solves for the Nash Equilibrium. This algorithm works by having two bots play against each other. First they just make random moves, but at each decision point, they write down what they regret not doing. Then over time, they do more of what they regret doing and less of what they don't regret. It is proven that if you run this algorithm for long enough, it will give you a Nash Equilibrium strategy. \n\nWhile this algorithm works in theory, in reality HUNL Texas Holdem is just too big a game to solve directly. Checkers has 10<sup>21</sup> possible positions, chess has 10<sup>120</sup>, but HUNL has more like 10<sup>160</sup>, which is more than the number of atoms in the universe squared. So in order to solve it before the universe ends, you need to find a way to shrink the game down. This is accomplished using a technique known as **abstraction**, with two prongs of attack:\n1. Treat similar hands as identical. AsKs 2c3cAc is close enough to AsKs 3c4cAc. \n2. Treat similar bet sizes as equal. A bet of $1000 is close enough to a bet of $1001. \n\nWhen the bot is training, it translates the bets and cards that it sees into their abstracted versions, and calculates its strategy only for those. Then when it comes to playing the game, you have to hope that your abstract strategy will work well for the full game. However, in practice it turns out that this is hard to do, and a worst-case opponent will be able to destroy most abstract strategies, because there will be chinks in the armor that can be exploited. As the abstraction becomes more realistic, better representing the full game, this becomes less of a problem, and historically poker bots have improved by adopting better and better abstractions, which usually required a ton of memory. For example, the bot Baby Tartanian 8 needed 18 TB of RAM and 2 million core hours. (depth limited paper)\n\nSo it would be nice if there were a way to use a mediocre abstraction and improve on it in real time. This can be accomplished using **Depth Limited Solving** (cite) which refines the abstract strategy by playing it against several possible opponent strategies. (explain more once I understand it better) Using Depth Limited Solving allows the bot to close the chinks in the abstract strategy and play a true approximate Nash equilibrium. \n\n## Implementation Details\n\n### Abstraction\n\n#### Card abstraction\n\nFinding good ways to group hands together for abstraction has historically been a hot research area, and finding better abstractions was the key driver of progress before nested subgame solving was invented. Initially, people would manually write down rules to classify hands, such as by type, draws, and stuff like that. Over time, numeric techniques were used to greater success, such as calculating a hand's expected equity or expected equity squared. However, if you just look at these variables, you run into an issue because some vastly different hands can have similar equities. For example, a straight draw could have a similar equity to a low pair, even though they are vastly different types of hands. To better classify hands, it pays to look at the full **equity distribution** over all possible rollouts. *add pictures of graphs* Then these equity distributions are clustered using k-means clustering with the **Earth Mover's Distance** so that hands with similar equity distributions will be put together. (cite paper)\n\nThe above analysis only applies to the flop and turn. On the river, there are no rollouts and no notion of an equity distributions, so hands are just clustered based on their equity. On the preflop, there are only 169 strategically distinct hands, so we can just include all of them in the abstraction.\n\nIt is up to the programmer to decide how many clusters to use--more clusters will produce a better strategy, but will be slower to train. I chose to use ?? buckets on the flop, ?? on the turn, and ?? on the river. \n\n#### Action abstraction\n\nSimplifying the actions is a much simpler task and can be succesfully done by a human. Since there are many possible Nash equilibria, chances are good that one will exist for the actions you choose to include in your abstraction. For my bot I allowed the following bet sizes: (half pot, full pot, 2x pot, all in). \n\n### Training\n\nOnce the abstraction is all set, it is time to calculate a blueprint Nash equilibrium strategy. It's okay if this strategy isn't great, because the bot will improve on it later using depth-limited solving. I trained the blueprint strategy using a variant CFR called **Discounted Regret Minimization** (cite) with parameters ???. \n\n### Measuring Exploitability\n\nIt is useful to have a notion of the quality of a strategy, akin to \"loss\" in machine learning. This quantity is called **exploitability**, which is a measurement of how badly your opponent could beat you if they knew the exact strategy you play by. The exploitability of a Nash equilibrium strategy is 0 because it is not possible to beat a Nash equilibrium strategy in expectation. \n\nHowever, to truly calculate the exploitability, you'd have to run CFR to train an opponent against your strategy, and that would take a while. Fortunately, researchers at ??? came up with a greedy way to calculate a lower bound of the exploitability known as the **Local Best Response** (cite) which ends up being pretty good in practice. You can run this during training to see how good your blueprint strategy is getting. \n\n\n## Papers cited\n\n1. [Superhuman AI for heads-up no-limit poker: Libratus beats top professionals](https://science.sciencemag.org/content/359/6374/418)\n2. [Depth-Limited Solving for Imperfect-Information Games](https://arxiv.org/abs/1805.08195)\n3. [Regret Minimization in Games with Incomplete Information](https://poker.cs.ualberta.ca/publications/NIPS07-cfr.pdf)\n4. [Potential-Aware Imperfect-Recall Abstraction with Earth Mover\u2019s Distance in Imperfect-Information Games](https://www.cs.cmu.edu/~sandholm/potential-aware_imperfect-recall.aaai14.pdf)\n5. [Solving Imperfect-Information Games via Discounted Regret Minimization](https://arxiv.org/abs/1809.04040)\n6. [Equilibrium Approximation Quality of Current No-Limit Poker Bots](https://arxiv.org/abs/1612.07547)\n\n## Further resources\n\n- [An Introduction to Counterfactual Regret Minimization](http://modelai.gettysburg.edu/2013/cfr/cfr.pdf)\n- [Noam Brown - YouTube](https://www.youtube.com/channel/UCIOWAxXS5dvYKf73B6FR2iw)\n- [AI for Imperfect-Information Games: Beating Top Humans in No-Limit Poker](https://www.youtube.com/watch?v=McV4a6umbAY)\n- [The State of Techniques for Solving Large Imperfect-Information Games, Including Poker](https://www.youtube.com/watch?v=QgCxCeoW5JI)\n"
 },
 {
  "repo": "jacobhyphenated/iPadPokerGameClient",
  "language": "Objective-C",
  "readme_contents": "iPad Poker Game Client\n====\n\nThis is an iPad application designed to work with the Poker Server: https://github.com/jacobhyphenated/PokerServer\n\nThis is a basic iPad app that can serve as the game controller for a texas holdem poker game.  The game controller displays the community cards, decides when to deal the cards, and decides when to end the hand.  Player clients are used to represent the players in the game; these are a separate project.\n\n**I have every intention of completely re-writing this application for iOS8. Until then, there will be no further active development on this project.**\n\nVersion\n----\nThis project will work with iOS 6.0+\n\nThis application is designed to work with [Poker Server API](https://github.com/jacobhyphenated/PokerServer) Version 0.4. This is subject to change.\n\nDevelopment\n----\nThe basic functionality for this project is complete.  However, much more needs to be done.\n\nObviously there is not much design work, and a lot of the UX is in desperate need of improvement.  I will be working on this intermittently, but pull requests are welcome :)\n\nThis project uses AFNetworking (https://github.com/AFNetworking/AFNetworking) as a submodule.  Make sure to initialize the submodules when cloning the repository.\n\nLicense\n---\nThe MIT License (MIT)\n\nCopyright (c) 2014 Jacob Kanipe-Illig\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
 },
 {
  "repo": "pokerwars/pokerwars.io-starterbot-python",
  "language": "Python",
  "readme_contents": "\n# pokerwars.io-starterbot-python\nThis is a simple example of how you could implement a pokerwars.io bot with Python and [Bottle](https://bottlepy.org/docs/dev/). This bot will fold every hand, you should change this and try to implement your own strategy!\n\n## Quick start\nA few requirements to play:\n- have [python](https://www.python.org/) installed\n- make sure that the computer where your bot runs is visible from the internet, so we can communicate with it. [This is a useful service](http://canyouseeme.org/) to double check this. Bot default port is `3000`, but you can change this on the `server.js` file. If you need help to open a port on your router [check this guide](https://www.noip.com/support/knowledgebase/general-port-forwarding-guide/) or [contact us](mailto:contact@pokerwars.io). We are always willing to help you.\n- [Register with us](https://www.pokerwars.io/) and retrieve your [API token](https://www.pokerwars.io/token) and [username](https://www.pokerwars.io/profile).\n- check out this repo with git or download it from [this link](https://github.com/pokerwars/pokerwars.io-starterbot-python/archive/master.zip).\n- in the code you just downloaded, rename `.env_example` as `.env` and update with your username, API token and bot ip address:\n```\nUSERNAME=insert here your bot username, find it at https://www.pokerwars.io/profile\nAPI_TOKEN=insert here your api token, find it at https://www.pokerwars.io/token\nBOT_ENDPOINT=insert here your bot ip address. i.e.: http://1.2.3.4:3000\n```\n\nNow you can implement your own poker strategy and play!\n\n## Play!\nNow you are ready to run the bot!\n\nInstall dependencies:\n```\n$ pip install -r requirements.txt\n```\n\nRun the bot:\n```\n$ python starterbot.py\n```\n\nThe bot will try to subscribe to pokerwars.io when it starts up. If no errors happens, it will start playing straightaway, otherwise you should see an error. The most common is that we cannot see your bot, please double check [your bot is visible from the internet](http://canyouseeme.org/) and [you have configured your router correctly](https://www.noip.com/support/knowledgebase/general-port-forwarding-guide/). If you do not have access to your router or your bot is behind a firewall, try [ngrok](https://ngrok.com/).\n\n### Playing on Glitch.com?\nIt's easy:\n\n- Import this repo into a new Glitch project\n- Check the Live App URL for your project under `Share` (it will look like https://<MY_POKERWARS_BOT>.glitch.me), you will use it as your BOT_ENDPOINT\n- Update your `.env` file as described above\n- Start remixing!\n\nHave fun!\n\n## Bot subscription to pokerwars\nWhen the bot starts up, the ```subscribe()``` method waits for its ```/pokerwars.io/ping``` endpoint to become available before subscribing the bot with pokerwars.io. This lets us know that your bot is ready to play and if we can ping your bot then it will be added to the next available tournament.\n\nIf the subscription request is not accepted or fails, for whatever reason, the bot will exit.\n\n## Extending this bot\nIf something is not clear in this code, refer to also to [our documentation](https://www.pokerwars.io/docs) for the structure and content of the data we send to your bot. How you choose to manipulate that information to inform your bot's strategy is up to you!\n"
 },
 {
  "repo": "androidjp/TDD-poker-hands",
  "language": null,
  "readme_contents": "# TDD-poker-hands\n![Nt7a2q.png](https://s1.ax1x.com/2020/06/23/Nt7a2q.png)\n![N4wOjH.png](https://s1.ax1x.com/2020/06/30/N4wOjH.png)\n![N40SEt.png](https://s1.ax1x.com/2020/06/30/N40SEt.png)\n![N40PC8.png](https://s1.ax1x.com/2020/06/30/N40PC8.png)\n# Branchs\nHere are various languages and testing frameworks to practice TDD:\n* `java-maven-testng`\n* `java-gradle-junit5`\n* `nodejs-jest`\n* `python3-unittest`\n* `go-testing`\n\nFork this project and pick a branch you're good at or interested in, and practice it.\n\n# Homework\nYou should finish the request by teacher and push your commit at your own github after training time.\n\nhomework format\uff1a\n```\nAuthor: Jasper Wu, Mike Zhang\nGithub: https://github.com/androidjp/TDD-poker-hands\nBranch: java-maven-testng, nodejs-jest, ....\n```\n"
 },
 {
  "repo": "Pokereum/pokereum",
  "language": null,
  "readme_contents": "Pokereum\n========\nEthereum using Telehash RTC, cryptography and smart contract technology to provide a secure, efficient, provably fair and decentralized global poker. This repository is a largely a resource for documentation and ponter to other relevant components http://www.pokereum.io \n\n\n### Table of Contents\n\n* [Whitepaper](#Whitepaper)\n* [Demo](#Demo)\n* [Routing](#Routing)\n* [Pokereum RTC Multi-Party Computation](#Pokereum-RTC)\n* [Security & Data Athentication](#SecurityDataAthentication)    \n* [Shadow Poker](Shadow-Poker)\n* [Network](#Network)\n* [Client Downloads](#Downloads)\n* [Wiki](#wiki)\n* [Tests](#Tests)\n* [Tech Stack](#Tech-Stack)\n\n\n\n\n\n\n\n#<a name=\"whitepaper\"></a>     \n##Whitepaper    \n\nUnder peer review here :: https://github.com/Pokereum/pokereum/wiki/Whitepaper           \n\n\n\nOnly a few components parts provided here most of the code base is hosted on a private repo here : https://bitbucket.org/innovator256/pokereum    \n\n-  \n-  \n      \n      \n\n#<a name=\"Demo\"></a>   \n##Demo\nPreview implementation : [P2p UX Demo:]( https://www.youtube.com/watch?v=ydqsLi2CAgQ)      \n\n\n\n-  \n-     \n\n\n\n#<a name=\"Routing\"></a>\n##Routing      \nRouting library usinggraceful degradation for the most efficient available transport for signaling node for uplinking on the pokereum Network    \n\nRouting Library : [Pokereum-Telehash-Router](https://github.com/Pokereum/Pokereum-Telehash-Router)\n\n\n\n\n\n\n-  \n-     \n      \n      \n\n\n\n#<a name=\"Pokereum-RTC\"></a>                \n##Pokereum RTC Multi-Party Computation    \nMulti-Party-Computation-RTC represents \"poc 1\" of the Pokereum real time game state synchrony and private computation between poker nodes on the pokereum network. Note there is no actual security in this version; i.e state signing, private encryption and authentication which is partially accomplished with integration of the Shadow Poker protocol     \n\n[Pokereum-Multi-Party-Computation-RTC](https://github.com/Pokereum/Pokereum-Multi-Party-Computation-RTC)\n\n\n\n-  \n-      \n      \n     \n       \n       \n#<a name=\"SecurityDataAthentication\"></a>                 \n##Security and Data Athentication             \n\n\n\n-  \n-  \n      \n      \n\n \n \n \n \n\n#<a name=\"Shadow-Poker\"></a>     \n##Shadow Poker          \n        \n\n\n\n-  \n-  \n      \n    \n#<a name=\"Network\"></a>    \n##Network                   \n\n\n\n-  \n-  \n      \n      \n     \n#<a name=\"Downloads\"></a>    \n##Client Downloads             \n     \n\n\n-  \n-  \n      \n      \n\n\n#<a name=\"wiki\"></a>     \n##wiki         \n\n\n\n\n-  \n-  \n      \n      \n#<a name=\"Tests\"></a>      \n##Tests           \n   \n\n\n-  \n-  \n      \n      \n\n\n#<a name=\"Tech-Stack\"></a>     \n##Tech Stack           \n- Electron <br/>\n- Nodejs<br/>\n- jQuery<br/>\n- html5 framework: phaserjs<br/>\n- Telehash // Nat hole punching and routing via UDP and RTC<br/>\n- Ethereum whisper/IPFS<br/>\n- Ethereum solidity<br/>\n- Hashing, encryption, secret sharing\n"
 },
 {
  "repo": "rafanoronha/scala-poker",
  "language": "Scala",
  "readme_contents": "# Scala Poker\n\nScala Poker aims to be a whole online poker platform solution looking like attractive stuff to serious online poker businesses.\n\nThere's a long road ahead. We are working in the core functionality and not even begun to touch other platform pieces such as the network server and the UI client.\n  \n## Contribute\n\nYou are welcome. Pick an issue, have fun writing code and submit your pull request.\n\nIssues labeled as [up-for-grabs](http://github.com/rafanoronha/scala-poker/issues?labels=up-for-grabs&page=1&state=open) are the recommended place to jump aboard.\n\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/rafanoronha/scala-poker/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n\n"
 },
 {
  "repo": "dperezcabrera/jpoker",
  "language": "Java",
  "readme_contents": "[![License](http://img.shields.io/:license-gpl3-blue.svg)](http://www.gnu.org/licenses/gpl-3.0.html)\n[![Build Status](https://travis-ci.org/dperezcabrera/jpoker.svg?branch=master)](https://travis-ci.org/dperezcabrera/jpoker)\n[![Coverage Status](https://coveralls.io/repos/github/dperezcabrera/jpoker/badge.svg?branch=master)](https://coveralls.io/github/dperezcabrera/jpoker?branch=master)\n[![GitHub issues](https://img.shields.io/github/issues-raw/dperezcabrera/jpoker.svg?maxAge=2592000)](https://github.com/dperezcabrera/jpoker/issues)\n\n# JPoker\n\nA simple poker game with gui.\n\n[Manual](http://www.javahispano.org/portada/2015/2/2/nuevo-tutorial-desarrollando-con-java-8.html)\n\n[Manual mobi](https://github.com/dperezcabrera/jpoker/blob/master/Desarrollando%20con%20Java%208:%20Poker.mobi)\n[Manual epub](https://github.com/dperezcabrera/jpoker/blob/master/Desarrollando%20con%20Java%208:%20Poker.epub)\n"
 },
 {
  "repo": "yule/poker-croupier",
  "language": "Ruby",
  "readme_contents": "poker-croupier\n==============\n\n[![Build Status](https://travis-ci.org/devill/poker-croupier.png?branch=master)](https://travis-ci.org/devill/poker-croupier)\n\nRobot poker croupier for poker retreats. The project is incomplete, and we are looking for contributors.\n\n# What is a poker retreat\n\nA poker retreat is a planned event much like a code retreat, but with a slightly different format and purpose.\n\n## The purpose\n\nA poker retreat's aim is for participants to practice concepts related to lean start ups and continuous deployment. A poker team is a small group of developers (ideally 4 people forming 2 pairs) whose aim is to incrementally build a highly heuristic algorithm within a one day timeframe that is just smart enough to beat the other robots. Professional poker robots are developed for years, so the purpose is definitely not to come up with something really smart, but to be the smartest among the current competitors. With this in mind teams can come up with simple to implement heuristics, examine their effect on game play during training rounds, and than improve their algorithm in a similar lean fashion.\n\n## The format\n\nSince no poker retreats have been organized yet the format has not been finalized. Everything below is more of a draft. Please feel free to contribute your thoughts.\n\nOne possibility is that 45 minute coding sessions are followed by sit-n-go games played by the robots, and a short break. In this case only the last sit-n-go round counts when we determine the winner. Other rounds are just for training from which teams can deduce hypothesises, and test them in subsequent training rounds.\n\nAnother way to do it would concentrate a bit more on the continuous delivery aspect. In this case each team has infinite chips they can use to rebuy into the game any time they lost all their chips. The game is played continuously, but each team has a small time frame between rounds for deploying a new version of their robot, and each robot is free to leave the room for a while. The croupier would enforce an SLA. If a player is away from the table for a certain amount of time a penalty has to be payed before the next rebuy. This version lets teams do more experiments, and also forces them to be careful with their deployments. The team that has the best cash flow by the end of the day is the winner.\n\n## The rules\n\nThere are not many rules, but please keep them in mind. All rules of no limit texas hold'em apply.\n\nOne of the most important rules is that there is no explicit prize for the winner (the other teams however are free to invite them for a beer after the event). Poker retreats - although they have a competitive feel to them - are not competitions. The emphasis should be on practice.\n\nAnother important rule is fair play: no one should try to exploit weaknesses of the framework, or deliberately inject back doors into its source code. Also no team should use any pre-written code. Only the language's standard library, and general purpose open source libraries are allowed.\n\nAs with any code retreat like event: provide a free lunch but avoid pizza.\n\n# How to get started as a contributor\n\nOur [story board](https://trello.com/b/IqfZyfzl) is on Trello. If you would like to contribute, please request an access from [DeVill](https://github.com/devill). To [get started](https://github.com/devill/poker-croupier/wiki/Architectural-guide) as a contributor, read the [architectural guide](https://github.com/devill/poker-croupier/wiki/Architectural-guide).\n\nWhen implementing rules consult the [Texas Hold'em rules](http://www.pokerstars.com/poker/games/texas-holdem/) and [poker hand ranks](http://www.pokerstars.com/poker/games/rules/hand-rankings/) pages on PokerStars. We wish to play sit-n-go tournaments of No Limit Texas Hold'em.\n"
 },
 {
  "repo": "garyjh126/MLFYP_Project",
  "language": "HTML",
  "readme_contents": "# Poker Bot Using Model-free Deep Reinforcement Learning Algorithms\n\n[Link to main code](https://github.com/garyjh126/MLFYP_Project/tree/master/main_files/holdem \"Named link title\")\n\n[My Dissertation *Building Poker Agent Using Reinforcement Learning*](https://drive.google.com/file/d/1s_U-9vSjbGeQGAQQIKFpax9t-2DY2SOl/view?usp=sharing \"Named link title\") \n\n## Requirements ##\n\n    pip install gym\n    pip install treys\n    pip install keras\n\nUbuntu 18.04\n\nPython 3.7.1\n\n## Instructions ##\n\nTo run the GUI, navigate to [this directory](https://github.com/garyjh126/MLFYP_Project/tree/master/main_files/holdem/GUI \"GUI\"), and run:\n\n     python tkinter_gui_application.py\n\nThe code can be run from the DQN.py script [here](https://github.com/garyjh126/MLFYP_Project/tree/master/main_files/holdem \"Named link title\"). The Monte-Carlo simulation can also be run here. \n    \n**Example**\n\n     python monte_carlo.py\n     python DQN.py\n   \nA graphical rendering will appear with the game played to 1000 episodes. The learner agent is at seat 0 by default.\n\nAlternatively, to review the DQN in google colab, go to [this open Jupyter Notebook](https://colab.research.google.com/drive/1L_fNNEGkZcBInyVv-br1gUkMOh7sWYYZ \"Named link title\"), and click 'Open in Playground'. Run all the cells in the notebook and observe the output. Rendering can be switched on and off.\n     \n ### Changing Hyperparameters ###\n \n The hyperparameters can be changed from within the text editor if the user wants to disable rendering etc. By default, they are set in both monte_carlo.py and DQN.py as follows: \n \n \n \n ![alt text](screenshots/hyperparameter_instruction.png \"Enable/Disable Rendering\")\n\n\n### Tkinter GUI enables users to play against various agent types ###\n ![alt text](screenshots/update_gui.png \"Tkinter Display\")\n \n### Terminal displaying hands being played by the AI bot ###\n ![alt text](screenshots/terminal_output.png \"Terminal Output\")\n \n\n# Background\n\nPoker is recognised as the quintessential game of imperfect information. Researchers around\nthe world have explored the depths of problems associated with solving such games and only a\nhandful have been successful in applying their methods to the game of poker. The recent\nsuccess of researchers sparked global interest and serves as the context for building a poker\nbot in today\u2019s climate. Contained in this project report will be a discussion about the research\ncarried out in solving the game of Limit Texas Hold\u2019em and a personal pursuit in building a bot\nthat can do something similar.\nThe main purpose of this project is to test applications of deep reinforcement learning methods\non an imperfect information environment, to derive results, and hopefully build an intelligent\npoker bot in the process.\n\nThe project is inspired by the work of the students and teachers at the [University of Alberta](http://poker.cs.ualberta.ca/). The project set out here was named [Cepheus](http://poker.srv.ualberta.ca/). I also take inspiration from other ambitious projects which set out to solve No limit Texas Hold 'em which has extended complications due to the continuous range of betting values; hence the label 'No limit'. Such projects include [Deepstack](https://matchpoker.net/deepstack-ai/) and [Libratus](https://www.cs.cmu.edu/~noamb/papers/17-IJCAI-Libratus.pdf).\n## Cepheus \u2013 AI playing Limit Texas Hold\u2019em Poker\n\nEven though the titles of the research papers claim solving poker \u2013 formally it was essentially solved. Essentially solving Heads Up Limit* Texas Hold\u2019em meant researchers were able to come up with an approximation (indistinguishable from original one for human during a lifetime) of a strategy profile coined 'Nash Equilibrium'. In two person zero-sum games playing a strategy from a Nash Equilibrium is also the best any player can do in case of no knowledge of his opponent\u2019s strategy.\n\n\n## DeepStack \n\nAround 2 years after Cepheus, another successful poker bot was revealed \u2013 this time it could win against humans in no limit version of Heads Up Texas Hold\u2019em. Its name was DeepStack and it used continual re-solving aided by neural networks as a core.\n\nRe-solving is one of the **subgame solving techniques**. Subgame is a game tree rooted in current decision point. From the very high-level view then subgame solving means solving a subgame in separation from the parent nodes. In other words re-solving is a technique to reconstruct a strategy profile for only the remainder of the game at given decision point.\n\nCreators of Deepstack used **continual re-solving** where only two vectors were maintained throughout the game. The two vectors turned out to be sufficient to continuously reconstruct a strategy profile that approximates Nash Equilibrium in a current subgame (decision point). \n\n\n## Approach to Problem\n\nThe solution carried out in this project has been developed by using an incremental build\napproach. The final application consists of a model-free deep reinforcement learning algorithm,\nand a Monte-Carlo simulation that works in an environment of two bots. The first bot serves as\nthe benchmark agent as used in that simply plays actions according to both the public game\nstate and their own private hole cards. The second bot acts as the \u2018learner\u2019 that learns to orient\nits own strategy according to the environment. The environment feeds rewards to the learner\nagent as a way of incentivising actions that performed well in a particular state. In the case of\npoker, optimal results are those which lead to building a higher profit margin. The agent must\nlearn the optimal policy which determines the best path for an agent to take. A policy simply\nmaps a state to an action.\nSolutions are tested using a unique approach taken by the researchers at the University of\nAlberta. This approach is called Counterfactual Regret Minimization (CFR), a self-play\niterative algorithm that learns by accumulating regret for each action at each decision point.\nActing as an initial approach, CFR was soon replaced by the idea of using deep reinforcement\nlearning in the hopes that deep learning could solve the problem. In Q-learning, a Neural\nnetwork acts as the agent that learns to map state-action pairs to rewards, thereby enabling a\nbot to learn the optimal Q-function \u2018 Q * ( s, a ) \u2019,\u200b and returning the policy that was associated with\nsuch high rewards.\n"
 },
 {
  "repo": "qJake/planning-poker",
  "language": "C#",
  "readme_contents": "# Planning Poker\n\n**Planning Poker** is an open-source browser-based .NET/C# planning poker card game app. The underlying communication protocol used between the client and the server is WebSockets.\n\n### What is planning poker?\n\nPlanning poker is commonly used in agile development to obtain arbitrary numeric estimates from developers. [Planning poker has a Wikipedia page](http://en.wikipedia.org/wiki/Planning_poker) if you'd like to learn more.\n\n### Project Overview and Features\n\nThis project is a client and server (and server manager) for a WebSocket-based planning poker application.\n\n#### Client\n\nThe client is a web-based Javascript/WebSocket client that communicates using JSON messages.\n\n#### Server\n\nThe server is a .NET console application that uses the [statianzo/Fleck](https://github.com/statianzo/Fleck) library for hosting the WebSocket server, and [Json.NET](http://james.newtonking.com/pages/json-net.aspx) for parsing the JSON messages.\n\n#### Server Manager\n\nThe server manager is able to spin up instances of servers automatically using a clean web interface, allowing anyone with access to the page the ability to create their own planning poker server that will appear in the server list to each client. The server manager communicates with the individual servers using [named pipes](http://en.wikipedia.org/wiki/Named_pipe).\n\n## Screenshots\n\n### Connecting\n\n![Planning Poker Screenshot](https://raw.github.com/qJake/planning-poker/master/readme-resources/pp1.png)\n\n### Playing as an admin\n\n![Planning Poker Screenshot](https://raw.github.com/qJake/planning-poker/master/readme-resources/pp2.png)\n\n![Planning Poker Screenshot](https://raw.github.com/qJake/planning-poker/master/readme-resources/pp3.png)\n\n![Planning Poker Screenshot](https://raw.github.com/qJake/planning-poker/master/readme-resources/pp6.png)\n\n### Playing as a standard user\n\n![Planning Poker Screenshot](https://raw.github.com/qJake/planning-poker/master/readme-resources/pp4.png)\n\n![Planning Poker Screenshot](https://raw.github.com/qJake/planning-poker/master/readme-resources/pp5.png)\n\n## Caveats\n\nPlanning Poker uses WebSockets as its underlying communication protocol. Specifically, it must be able to connect over the `ws://` protocol between ports 8000 and 9000.\n\nCurrently, Planning Poker is not set up to run in SSL-only environments. The game client must be loaded over HTTP, so that the WebSocket connection can be made. This also allows multiple game sessions to exist at the same time (if SSL were supported, only one game would be able to run, since the `wss://` protocol must connect over port 443 exclusively).\n\nThere are no plans to support HTTPS because of the way the game servers run on different ports.\n\n## Setup\n\nYou will need:\n\n* An IIS server\n* Chrome, Firefox, Safari, or IE10+ (due to the websocket requirement)\n\n### Setup Instructions\n\n1. Clone the code.\n2. Open it with Visual Studio 2010 / 2012.\n3. Make sure the solution builds.\n\n#### Client Setup\n\n1. Open the file `PokerWebClient/CardClient.js`\n2. Near the top you will see this code:\n\n    ```js\n    // Configure this to be wherever you put your poker server manager application at:\n    var PokerServerManagerPath = '/PokerServerManager/';\n    ```\n\n3. Change this value to the path that you will be using for your poker server manager. *(This has only been tested using the same webserver for both the client and the poker server manager, putting in a full http:// path here is untested but may work.)* Save your changes.\n4. Publish the PokerWebClient project to a folder or virtual app in IIS. There is only HTML/JS/CSS in the client so there is no need to set anything up in IIS beyond the basics.\n5. Browse to where you published the website to make sure it loads correctly in your browser.\n\n#### Server Setup\n\n1. Build the PokerServer project (you'll probably want to do this in Release mode for faster code).\n2. Navigate to /bin/Release (or whatever the active configuration is).\n3. Copy PokerServer.exe and the two .dll files (Fleck and Newtonsoft.Json) and place them somewhere on your server where they can be run. They do not have to (and should not) be accessible from the web.\n\n#### Server Manager Setup\n\n1. Open PokerServerManager/web.config\n2. You should see these three configuration values:\n\n    ```xml\n    <!-- Must be changed to the folder location of the EXE of the server executable. -->\n    <add key=\"SocketServerLocation\" value=\"C:\\Path\\To\\The\\Game\\\" />\n        \n    <!-- Name of the EXE, without '.exe' -->\n    <add key=\"SocketServerName\" value=\"PokerServer\" />\n        \n    <!-- Name of the computer / host that the servers get run on. This gets sent to the client, and they connect via WebSockets using ws://<MachineName>/.  -->\n    <add key=\"MachineName\" value=\"MyPokerGameServer\" />\n    ```\n\n3. **SocketServerLocation** is the name of the folder / path where the web socket server can be found.\n4. **SocketServerName** is the name of the EXE without '.exe'. This is almost always \"PokerServer\" unless you rename the exe or change the assembly name.\n5. **MachineName** is the name of the computer where the game servers are going to be running. The clients will use this value when trying to open a websocket connection in order to connect to the game server (i.e. `ws://MyPokerGameServer/`).\n\n## Contributing\n\nFork it, make improvements, and send me a pull request. If I like the changes, I'll accept the code. Simple as that!\n"
 },
 {
  "repo": "wangzi6147/TexasPoker",
  "language": "Java",
  "readme_contents": "TexasPoker\n==========\n\n\u8054\u673a\u5fb7\u5dde\u6251\u514b\n"
 },
 {
  "repo": "luk3vn/web-poker",
  "language": "TypeScript",
  "readme_contents": "# web-poker\r\n\r\nThis project is an Angular/Nativescript Web/Mobile poker client and Java/Spring websocket backend. Additionally, the persistence of data is provided by mysql.\r\n\r\nIn the past, i tried to start this proyect using php and simple html/javascript/jquery client, but for various reasons i never finished it. Now i started this project to continue this ambitious project, but this time using java and angular/Nativescript.\r\n\r\nDo't worry, I put simple instructions for you to install all without know how to work these technologies.\r\n\r\nThis project is only for fun, and i will write the code in a long term and including spaces of times without commit.\r\n\r\nAdditionally, sorry for my bad english, i speak spanish and learn english only reading books/papers.\r\n\r\n## Screenshots\r\n\r\n### Lobby\r\n\r\n![lobby](https://i.imgur.com/HUCeZBr.png)\r\n\r\n### Login\r\n\r\n![login](https://i.imgur.com/qaK4Nkv.png)\r\n\r\n# Roadmap\r\n\r\n## Short term\r\n\r\nI will code these subjects in respective order:\r\n\r\n### Sit and go\r\n\r\n* ~~Frontend register/login (simple) and mysql connected.~~\r\n* Lobby tables and user-data **(at this moment I'm working in this)**\r\n* Table servers registry and showed in the frontend.\r\n* Poker rules and gameplay.\r\n* Frontend design of simple table.\r\n\r\n## Medium term\r\n\r\n### Turnaments\r\n\r\n* Turnaments.\r\n* User statistics.\r\n* Full account.\r\n* Chat in the game.\r\n\r\n## Long term\r\n\r\n### Extended versions and tools\r\n\r\n* Mobile frontend.\r\n* Desktop frontend (with electronJS)\r\n* rank system\r\n* Servers Administration/Deployer tool (as jboss of redhat style but in this case working... xD)\r\n\r\n# Architecture\r\n\r\n## List of techs\r\n\r\nFrontend\r\n\r\n* Angular +6\r\n* Material Design (although only for login/signup)\r\n* Websocket\r\n* Stomp (for websocket routing)\r\n* Nativescript with Schematics\r\n* ~~GraphQL~~ (in first instance, I wanted to use gql in rest queries but as they are few, the effort make no sense)\r\n\r\nBackend\r\n\r\n* Java with Spring Boot\r\n* Websockets\r\n* JWT for session handling\r\n* Mysql\r\n* Hibernate\r\n* SLF4J\r\n\r\n## Frontend\r\n\r\nThe frontend is maked with Nativescript Schematics for Angular using shared code.\r\nIn my first app i decided to use Apache Cordova for build a web-view based mobile application, but in the last months i tried to apply nativescript, and in the last days they added support to codeshare/schematics to make web and mobile project in the same workspace.\r\nThen i decide to start this proyect with nativescript (by telerik).\r\n\r\nThe frontend use websockets to connect with the backend (see below).-\r\n\r\n### Build frontend:\r\n\r\nfirst clone the repo, then once time use the next command to download dependencies. (This require you download https://nodejs.org/es/) we use version 8.0.\r\n\r\nYou need Angular Cli (https://angular.io/guide/quickstart) and Nativescript with schematics, we resume the installations on this commands:\r\n\r\n\u00b4npm install -g @angular/cli\u00b4\r\n\r\n\u00b4npm install -g nativescript\u00b4\r\n\r\n\u00b4npm i -g @nativescript/schematics\u00b4\r\n\r\n\u00b4npm install\u00b4\r\n\r\n\u00b4tns update\u00b4\r\n\r\nFor build/run ~~i write the instructions soon~~ see the wiki.\r\n\r\n## Bakend\r\n\r\nThe backend is splitted in two proyects, the lobby (users login/tables), and the table/turnament severs, for simple test you can use the same physical server to run all of this (Frontend, backend lobby, and backends tables).\r\n\r\nYou need to start the lobby server and configure your ip in the frontend and the table backends proyect (see in the wiki soon), and start new tables executing process of backends tables. Then build/run the client and login/register.\r\n\r\n### Build backend:\r\n\r\nYou need jdk (http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html) and eclipse (we use oxygen 3).\r\n\r\nFor run the backend instructions and build/deploy this in a vps/dedicated server you see the wiki (i write the instructions ~~soon~~, including adding this to a apache/nginx server).-\r\n\r\nI'm not sure if this is deployable in shared web hosting, but I'll start an investigation after writing this readme :O.\r\n--Revision #1: about this last comment, i lied a little bit... twenty days later i didn't investigate nothing at all... :'(\r\n\r\n\r\n# Finally\r\n\r\nThanks for reading and I hope this project end in one moment of the universe history.\r\n"
 },
 {
  "repo": "AndrejsAbrickis/PlanningPoker",
  "language": "C#",
  "readme_contents": "# PlanningPoker\nThis is a proof of concept application to demonstrate how to start developing AspNetCore with SignalR. You can read the recap about the process of developing this demo here https://medium.com/@andrejsabrickis/recap-creating-a-demo-of-real-time-communication-app-using-aspnetcore-signalr-d8ac0afba081\n\nThere are a lot of hacks and shortcuts in the code to make it possible to push out a POC version of this app. I'm looking forward to finding some spare time to polish this. And hopefully one day it could be good enough to use for an agile team to estimate their work.\n \nAny help, comments, and critique are more than welcome!\n\n## Demo\nhttps://planning-poker-web.azurewebsites.net/\n\n## Build status\n\n| Azure Pipelines | CircleCI |\n| --------------- | -------- |\n| [![Build Status](https://abrickis.visualstudio.com/PlanningPoker/_apis/build/status/AndrejsAbrickis.PlanningPoker)](https://abrickis.visualstudio.com/PlanningPoker/_build/latest?definitionId=7) |[![CircleCI](https://circleci.com/gh/AndrejsAbrickis/PlanningPoker/tree/master.svg?style=svg)](https://circleci.com/gh/AndrejsAbrickis/PlanningPoker/tree/master) |\n"
 },
 {
  "repo": "codescape/jira-scrum-poker",
  "language": "Java",
  "readme_contents": "# Scrum Poker for Jira\n\nScrum Poker for Jira enables your agile teams to collaboratively estimate their work items using a clean and interactive user interface that is seamlessly integrated into Jira Software.\n\n[![Build Status](https://travis-ci.org/codescape/jira-scrum-poker.svg?branch=main)](https://travis-ci.org/codescape/jira-scrum-poker)\n[![GitHub issues](https://img.shields.io/github/issues/codescape/jira-scrum-poker.svg)](https://github.com/codescape/jira-scrum-poker/issues)\n[![GitHub tag (latest SemVer)](https://img.shields.io/github/tag/codescape/jira-scrum-poker.svg)](https://github.com/codescape/jira-scrum-poker/releases)\n[![License](https://img.shields.io/github/license/codescape/jira-scrum-poker.svg)](license.txt)\n[![Contributor Covenant](https://img.shields.io/badge/contributor%20covenant-v2.0%20adopted-ff69b4.svg)](code_of_conduct.md)\n[![CalVer](https://img.shields.io/badge/calver-YY.MM.MICRO-22bfda.svg)](https://calver.org/)\n\nVisit our official documentation at [jira-scrum-poker.codescape.de](https://jira-scrum-poker.codescape.de) to learn more about Scrum Poker for Jira and it's [features](https://jira-scrum-poker.codescape.de/features).\n\n![Screenshot of a Scrum Poker session](/docs/images/participate-in-scrum-poker-session-reveal-estimates.png)\n"
 },
 {
  "repo": "EvgenyKashin/TensorPoker",
  "language": "Jupyter Notebook",
  "readme_contents": "# TensorPoker\nNeural networks based, poker bots.\n\n\nThis project consists of three main parts:\n1. DQN based poker bot\n2. A3C based poker bot\n3. Cards embedding\n\n### DQN based poker bot\nThe most detailed solution - modular, customizable, commented and tested.\n\n### A3C based poker bot\nSolution placed in one jupyter notebook (todo: make it modular). It more powerful and efficiency.\nIt uses threading. Need more tests. \n\n### Cards embedding\nEmbedding for cards in a hand. Conv net was used. Training by predicting win rate from cards.\n\nAll parts use TensorFlow and TensorBoard, witch visualize losses, performance and validation metrics.\nFor example visualization of loss for DQN:\n![TensorBoard image](./imgs/tensorboard.png)\n\nTested in PyPokerEngine (Texas Holdem, no limit)."
 },
 {
  "repo": "aneopsy/PokerStats",
  "language": "Python",
  "readme_contents": "<img src=\"resources/logo.png\" align=\"right\" />\n# PokerStats [![Poker](https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg)](https://www.pokerstars.com/)\n> \"Luck doesn't exist\" doesn't mean \"Everything is under your control\" but it's only Probabilities\n\nPokerStats awesome Statistic for Texas Hold'em\n\n### Prerequisities\n\n- pyQt5\n- Python3\n\n\n## Examples\n\n## Authors\n\n* **AneoPsy** - *Initial work*\n\n## Contribute\n\nContributions are always welcome!\nPlease read the [contribution guidelines](contributing.md) first.\n\n\n## License\n\n[![CC0](https://licensebuttons.net/p/zero/1.0/88x31.png)](http://creativecommons.org/publicdomain/zero/1.0/)\n\nTo the extent possible under law, [Paul Theis](http://mts.io) has waived all copyright and related or neighboring rights to this work.\n"
 },
 {
  "repo": "jfilliben/poker-sim",
  "language": "Python",
  "readme_contents": "# poker-sim\nPython implementation of a Texas Hold'em Monte Carlo Simulator\n\n# Overview\nThis project provides a Monte Carlo simulator for Texas Hold'em hands.\nIt requires as input a number of iterations to run, as well as two 2-card Texas Hold'em hands.\nYou must also specify the community cards. You may specify each card, or allow the program to simulate them.\n\nThe program outputs how many times each hand won during the Monte Carlo simulation in absolute terms as well as percentage.\n\n# Program Help\n\n**Jeremys-Computer>** *python ./pokersim.py --help*\nusage: pokersim.py [-h] --hand1 HAND1 --hand2 HAND2 [--community COMMUNITY]\n                   num_iterations\n\nRun a Monte Carlo simulation of a Texas Hold'em Poker Hand\n\npositional arguments:\n  num_iterations        Number of simulations to run. For accurate results,\n                        run at least 1000 simulations.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --hand1 HAND1, -h1 HAND1\n                        Hand 1 in format [rank][suit], example AcTd\n  --hand2 HAND2, -h2 HAND2\n                        Hand 2 in format [rank][suit], example Qh5s\n  --community COMMUNITY\n                        Community cards in format [rank][suit], example\n                        AdTsXxXxXx. You may use Xx for up to five simulated\n                        cards\n\n#Sample Run\n\nSample run using examples from --help:\n  \n**Jeremys-Computer>** *python pokersim.py --hand1 AcTd --hand2 Qh5s --community AdTsXxXxXx 1000*\n\nTotal Hands: 1000\nHand1: 929 Hand2: 66 Ties: 5\nHand1: 92.90% Hand2: 6.60% Ties: 0.50%\n\n# Test Suite\nThe program also includes a test suite (test-pokersim.py) to validate that comparisons are working.\nIt is intended to be run with nosetests:\n\n**Jeremys-Computer>** *nosetests -v*\n\ntest_best_five (test-pokersim.TestPokerSim) ... ok\ntest_check_flush (test-pokersim.TestPokerSim) ... ok\ntest_check_straight (test-pokersim.TestPokerSim) ... ok\ntest_check_straightflush (test-pokersim.TestPokerSim) ... ok\ntest_compare_hands (test-pokersim.TestPokerSim) ... ok\ntest_fourofakind (test-pokersim.TestPokerSim) ... ok\ntest_fullhouse (test-pokersim.TestPokerSim) ... ok\ntest_hand_copy (test-pokersim.TestPokerSim) ... ok\ntest_hand_to_numeric (test-pokersim.TestPokerSim) ... ok\ntest_highest_card (test-pokersim.TestPokerSim) ... ok\ntest_highest_card_straight (test-pokersim.TestPokerSim) ... ok\ntest_onepair (test-pokersim.TestPokerSim) ... ok\ntest_readable_hand (test-pokersim.TestPokerSim) ... ok\ntest_threeofakind (test-pokersim.TestPokerSim) ... ok\ntest_twopair (test-pokersim.TestPokerSim) ... ok\n\n----------------------------------------------------------------------\nRan 15 tests in 0.008s\n\nOK\n"
 },
 {
  "repo": "changhongyan123/mypoker",
  "language": "Python",
  "readme_contents": "## Term Project\n\n### Set up environment\nusing the conda or pyenv\n\n- conda create -n cs3243 python=2.7\n- source activate cs3243\n\nreplace the cs3243 with whatever name you want\nhttps://conda.io/docs/index.html\n\npip install PyPokerEngine  \nhttps://ishikota.github.io/PyPokerEngine/\n\n\n\ntesting installmement:\n\n```\nimport pypokerengine   \nprint(\"hello world\")\n```\n\n\n\n### Create your own player\n#### Example player\n\n```\n\nclass RaisedPlayer(BasePokerPlayer):\n\n  def declare_action(self, valid_actions, hole_card, round_state):\n    #Implement your code\n    return action\n\n  def receive_game_start_message(self, game_info):\n    pass\n\n  def receive_round_start_message(self, round_count, hole_card, seats):\n    pass\n\n  def receive_street_start_message(self, street, round_state):\n    pass\n\n  def receive_game_update_message(self, action, round_state):\n    pass\n\n  def receive_round_result_message(self, winners, hand_info, round_state):\n    pass\n```\n#### Example Game\nThe example game is in the example.py\n\n#### Information for the game\n```valid_actions```: vaild action list\n\n\n```\n[\n    { \"action\" : \"fold\"  },\n    { \"action\" : \"call\" },\n    { \"action\" : \"raise\" }\n]\nOR \n[\n    {\"action\": \"fold\"},\n    {\"action\": \"call\"}\n]\n```\n\nIn the limited version, the user only allowed to raise for four times in one round street.\nIn each round, the players can only play raise four times.[In the pre-flop street, the big blind is considered as a Raise action.]\n\nOther information is similar to the PyPokerEngine,please check the detail about the parameter [link](https://github.com/ishikota/PyPokerEngine/blob/master/AI_CALLBACK_FORMAT.md)\n"
 },
 {
  "repo": "vikas0sharma/ScrumPoker",
  "language": "TypeScript",
  "readme_contents": "# ScrumPoker\n\nSample on how to use signalR with React.\n\n![Scrum](https://raw.githubusercontent.com/vikas0sharma/ScrumPoker/master/images/1.gif)\n![Scrum](https://raw.githubusercontent.com/vikas0sharma/ScrumPoker/master/images/2.gif)\n![Scrum](https://raw.githubusercontent.com/vikas0sharma/ScrumPoker/master/images/3.gif)\n![Scrum](https://raw.githubusercontent.com/vikas0sharma/ScrumPoker/master/images/4.gif)\n![Scrum](https://raw.githubusercontent.com/vikas0sharma/ScrumPoker/master/images/5.gif)\n\n# Steps to run\n1. Run API project in Visual Studio 2019.\n2. Restore packages by running yarn command from clientapp folder.\n3. Run yarn start command to run clientapp.\n"
 },
 {
  "repo": "zkayser/poker_ex",
  "language": "Elixir",
  "readme_contents": "# PokerEx\n\n[![CircleCI](https://circleci.com/gh/zkayser/poker_ex.svg?style=svg)](https://circleci.com/gh/zkayser/poker_ex)\n\nPokerEx is a Texas Hold 'Em game engine with a Phoenix API layer over top of it.\n\nTo run the project, fetch your dependencies and run the server:\n\n```bash\nmix deps.get\nmix phx.server\n```\n\nThe dev server is set to run on port 8080, but you can configure this in the `config/dev.exs`.\n"
 },
 {
  "repo": "thlorenz/hhp",
  "language": "JavaScript",
  "readme_contents": "# hhp [![build status](https://secure.travis-ci.org/thlorenz/hhp.svg)](http://travis-ci.org/thlorenz/hhp)\n\n<a href=\"https://www.patreon.com/bePatron?u=8663953\"><img alt=\"become a patron\" src=\"https://c5.patreon.com/external/logo/become_a_patron_button.png\" height=\"35px\"></a>\n\nPoker HandHistory Parser\n\n## Status\n\nParses PokerStars, Ignition, PartyPoker and Pacific (888) Hold'em hands, tourneys, SNGs and Cash.\n\n## Installation\n\n    npm install hhp\n\n## [API](https://thlorenz.github.io/hhp)\n\n<!-- Generated by documentation.js. Update this documentation by updating the source code. -->\n\n### parseHand\n\nParses PokerHand Histories as output by the given online Poker Rooms.\nAutodetects the game type and the PokerRoom.\n\nThe parsed hands can then be further analyzed with the\n[hha](https://github.com/thlorenz/hha) module.\n\nAs an example [this\nhand](https://github.com/thlorenz/hhp/blob/master/test/fixtures/holdem/pokerstars/actiononall.txt)\nis parsed into [this object\nrepresentation](https://github.com/thlorenz/hha/blob/master/test/fixtures/holdem/actiononall.json).\n\n**Parameters**\n\n-   `input` **[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** the textual representation of one poker hand as written to the HandHistory folder\n-   `opts` **[object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)?** various options\n    -   `opts.infoOnly` **[boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean)?** denotes that only the header line of the hand is parsed and only the info object returned\n    -   `opts.buyinFile` **[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)?** file name overrides buyin for rooms that don't include it in the history like Ignition\n\nReturns **[object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)** representation of the given hand to be used as input for other tools like hha\n\n### canParse\n\nDetermines if any of the parsers can parse the passed hand(s).\n\n**Parameters**\n\n-   `input` **[String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** to parse\n\nReturns **[Boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean)** `true` if it knows how to parse this text\n\n### extractHands\n\nExtracts all hands from a given text file.\n\n**Parameters**\n\n-   `txt` **[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** the text containing the hands\n\nReturns **[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)&lt;[Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)>** an array of hands, each hand split into lines\n\n### parseHands\n\nParses multiple hands from a given text.\n\n**Parameters**\n\n-   `input` **[string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)** the textual representation of the poker hands as written to the HandHistory folder\n-   `opts` **[object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)?** various options, passed along to `parseHand`\n\nReturns **[object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)** parsed hands and errors encountered: `{ parsedHands: Array, errors: Array, count: Number }`\n\n## License\n\nMIT\n"
 },
 {
  "repo": "redbooth/planning-time-android",
  "language": "Java",
  "readme_contents": "![](assets/header.png)\n\nProject Nevada\n==============\n\nPlanning Time! is the planning poker app designed and developed by Redbooth. Use it to make your sprint planning meetings even more fun! \n\nLearn the story behind these scrum cards (including the meaning of each card): [scrum-planning-poker-cards](https://redbooth.com/blog/scrum-planning-poker-cards)\n\nBut that\u2019s not all! You can also print your own deck. Design is open sourced too and you can find it [here](https://github.com/redbooth/Scrum-poker-cards)\n\n[![](https://developer.android.com/images/brand/en_generic_rgb_wo_45.png)](https://play.google.com/store/apps/details?id=com.redbooth.projectnevada)\n\nContributors\n============\n\n* Design and Illustration: _Polina Raevskaya_ ([@flegontovna](https://twitter.com/flegontovna))\n\n* Development: _Txus Ballesteros_ ([@txusballesteros](https://twitter.com/txusballesteros)), _Rub\u00e9n Serrano_ ([@akelael](https://twitter.com/akelael))\n\nLicense\n=======\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n"
 },
 {
  "repo": "amiller/instant-poker",
  "language": "Python",
  "readme_contents": "TODO\n"
 },
 {
  "repo": "fangdejia/HwTexasPoker",
  "language": "Python",
  "readme_contents": "# HwTexasPoker\n\n\u6b64\u4e3a2015\u5e74\u534e\u4e3a\u7cbe\u82f1\u6311\u6218\u8d5b\u4e2d\u5fb7\u5dde\u6251\u514b\u5ba2\u6237\u7aefAI\u4ee3\u7801\u3002\n\n\u8be5\u4ee3\u7801\u5b8c\u5168\u57fa\u4e8ePython\u5f00\u53d1\uff0c\u9700\u6c42\u89c4\u5b9a\u53ca\u57fa\u672c\u64cd\u4f5c\u8be6\u89c1docs\u5b50\u6587\u4ef6\u5939\u4e2d\u6587\u6863\uff0c\u6838\u5fc3\u4ee3\u7801\u89c1./works/source\u5b50\u6587\u4ef6\u5939\u3002\n\n\u4ee3\u7801\u6838\u5fc3\u57fa\u4e8e\u4e24\u90e8\u5206\uff1a\n\n* \u534f\u8bae\u5b9e\u73b0\n* AI\u903b\u8f91\n\n\u5176\u4e2d\uff0cAI\u903b\u8f91\u4e3b\u8981\u57fa\u4e8e\u7ecf\u9a8c\u6cd5\u5219\uff0c\u540c\u65f6\u5229\u7528\u5b66\u4e60\u529f\u80fd\u638c\u63e1\u5176\u4ed6\u73a9\u5bb6\u7684\u51fa\u724c\u884c\u4e3a\uff0c\u4ece\u800c\u505a\u51fa\u8f83\u4f18\u7684\u51b3\u7b56\u3002\n"
 },
 {
  "repo": "surranc20/pokered",
  "language": "Python",
  "readme_contents": "This is a project that I made for my video game design class. It is a playable elite four challenge based on Pok\u00e9mon Fire Red.\nThe game can be started by navigating into the second pokered folder and running 'python main.py' in the terminal.\nThe player is controlled by using wasd and the player interacts with objects by pressing enter. When applicable, the player can press 'b' to go back (when in a menu screen). There are certain aspects of the battle system, like weather for example, that are still not fully implemented. Moreover, not all of the moves have animations. \n\nRequires:\n   - Pygame\n   - Pandas\n\nControls:\n   - Movement: WASD\n   - Select: Enter key\n   - Back: B\n   - Menu: Shift key\n\nCurrent known bugs:\n   - Need to add a change of direction timer to player to make them stop for a couple ticks when changing direction. \n   - The PC is currently a work in progress and will likely crash if you mess around with it.\n   - In general, the game has only been tested on MacOS (everything seems to work in Linux as well). There are some weird bugs that pop up when the game is run on a Windows machine. For example, talking to the shop keeper will result in a list index out of bounds error on a PC but on Mac/Linux everything is fine. \n\nHere is a quick demo video! (The video is heavily compressed and there is some minor artifacting):\n\nhttps://user-images.githubusercontent.com/32883324/145290859-faa171cc-3b73-4db6-9a48-b4fdbf6d14b1.mp4\n\nThis project was for educational purposes and all Pok\u00e9mon assets are the property of Game Freak and Nintendo. The latest Pok\u00e9mon games can be purchased here: https://www.pokemoncenter.com/category/video-game\n\n\n\n\n\n"
 },
 {
  "repo": "buhrmi/svelte-poker",
  "language": "Svelte",
  "readme_contents": "# Poker \n\nA poker game made with [Svelte](http://svelte.dev). Here is a [test server](https://test.rocksolidpoker.net). It uses a proprietary backend, but unfortunately it never got finsihed.\n\n## What's new?\n\n2019-11-13\n\n- More UI / layout tweaks\n- Download hand histories in [Standardized Hand History Format](http://hh-specs.handhistory.org)\n\n![](https://i.imgur.com/BuocF4m.png)\n\n2019-11-05\n\n- UI work continuing\n\n![](https://i.imgur.com/VsDYY2V.gif)\n\n2019-11-01\n\n- Started to work on a better UI\n\n![](https://i.imgur.com/NWZxD1K.png)\n\n2019-10-29\n\n- Showdown phase\n- Some initial polish\n\n![](https://i.imgur.com/feIe9pE.gif)\n\n2019-10-23\n\n- Tweaks for small devices\n- Chip animations\n\n![](https://i.imgur.com/jPaUf8l.gif)\n\n2019-10-22\n\n- Hand Replayer\n- New internal Hand History Data Structure (https://hh-specs.handhistory.org)\n\n![](https://i.imgur.com/dTCrsZa.gif)\n\n\n2019-09-26\n\n![](https://i.imgur.com/nSXsl7G.png)\n\n\n2019-09-03\n\n![](https://i.imgur.com/SDdIFFL.gif)\n\n2019-08-25\n\n![](https://i.imgur.com/VcdFDch.png)\n\n2019-08-14\n\n![](https://i.imgur.com/hH1Q1it.png)\n\n2019-08-10\n\n![](https://i.imgur.com/gGChJZK.png)\n\n2019-07-31\n\n![](https://i.imgur.com/842wRNF.png)\n\n2019-07-29\n\n![](https://i.imgur.com/dsLydcL.png)\n\n2019-07-27\n\n![](https://i.imgur.com/rfNev4u.png)\n"
 },
 {
  "repo": "BlockChainClub/PokerGame",
  "language": null,
  "readme_contents": "# \u300a\u5e01\u987b\u8bf4\u300b\u4e92\u52a8\u6734\u514b\u724c\u6e38\u620f\n\n## \u4e00 \u5173\u4e8e\u5e01\u987b\u8fbe\u6469\n\n**\u5e01\u987b\u8fbe\u6469**\u662f\u4e00\u6b3e\u57fa\u4e8e\u4ee5\u592a\u574a\u533a\u5757\u94fe\u4e0a\u7684\u4e92\u52a8\u6251\u514b\u724c\u6e38\u620f\uff0c\u662f\u533a\u5757\u94fe\u4e0a\u7684\u201c\u77e5\u4e4e\u201d\u3002\u5e01\u987b\u8fbe\u6469\u5229\u7528\u4e86\u533a\u5757\u94fe\u6280\u672f\u9650\u91cf\u53d1\u884c\uff0c\u4e0e\u52a0\u5bc6\u732b\u4e00\u6837\uff0c\u53ef\u4ee5\u8f6c\u8ba9\u3001\u4ea4\u6613\u3002\u56e0\u4e3a\u9650\u91cf\u53d1\u884c\uff0c\u96c6\u9f50\u4e00\u526f\u7eb8\u724c\u7684\u4eba\u624d\u80fd\u6210\u4e3a\u62e5\u6709\u535a\u5f08\u6e38\u620f\u7684\u7ecf\u8425\u6743\uff0c\u73a9\u5bb6\u80fd\u5728\u6d77\u91cf\u7684\u77e5\u8bc6\u95ee\u7b54\u7b49\u6e38\u620f\u4e2d\u6536\u83b7\u8fbe\u6469\u5e01\uff08dmb\u5e01\uff09\u3001\u6251\u514b\u724c\u3002\u6240\u4ee5\u8fd9\u662f\u4e00\u6b3e\u5a31\u6559\u4e8e\u4e50\u7684\u533a\u5757\u94fe\u6e38\u620f\u3002\u6251\u514b\u724c\u4e00\u5f00\u59cb\u662f\u53ea\u662f\u666e\u901a\u7684\u6734\u514b\u7eb8\u7eb8\u724c\uff0c\u7eb8\u724c\u4e0e\u865a\u62df\u4eba\u7269\u6df7\u5408\u53ef\u751f\u6210\u6709\u56fe\u6848\u7684\u552f\u4e00\u7eb8\u724c\uff0c\u7c7b\u4f3c\u52a0\u5bc6\u732b\u7684\u751f\u4ed4\uff0c\u5177\u6709\u552f\u4e00\u6027\uff0c\u53ef\u4ea4\u6613\u6027\u3002  \n**\u5e01\u987b\u8fbe\u6469**\u7684\u613f\u666f\u662f\u5e0c\u671b\u901a\u8fc7\u8fd9\u4e00\u6b3e\u53bb\u4e2d\u5fc3\u5316\u6e38\u620f\uff08Dapp\uff09\u8ba9\u66f4\u591a\u7684\u4eba\u70ed\u7231\u5b66\u4e60\u533a\u5757\u94fe\u77e5\u8bc6\uff0c\u5e01\u987b\u8fbe\u6469\u5c06\u52aa\u529b\u57f9\u517b\u3001\u53d1\u73b0\u533a\u5757\u94fe\u4eba\u624d\uff0c\u5e26\u9886\u73a9\u5bb6\u8fdb\u884c\u8ba4\u77e5\u8fed\u4ee3\uff0c\u8fdb\u9636**\u8fbe\u6469\u9662**\u4e4b\u8def\u3002  \n\u52a0\u5165\u6211\u4eec\uff1a[github][]  \n[https://github.com/BlockChainClub/PokerGame][github]\n\n\u795e\u4ed9\u59d0\u59d0\uff1a\u5176\u5b9e\u73b0\u5728\u5df2\u7ecf\u5b9a\u597d\u4e86\u8c03\u8c03\uff0c\u4e5f\u6709\u4e86\u6545\u4e8b\u60c5\u8282\uff0c\u4eba\u7269\u539f\u578b\u4e5f\u6709\u4e86\u96cf\u5f62\uff0c\u5c31\u6bd4\u4e4b\u524d\u597d\u505a\u597d\u591a\u4e86\u3002\u8981\u4e0d\u53d1\u8d77\u60ac\u5956\u5427\u2026\u2026\u53bb**\u62db\u52df\u63d2\u753b\u5e08\u3002**\n\n\u5e01\u987b\u5927\u5e08\uff1a\u8fbe\u6469\u5e02\u96c6\u9700\u8981\u627e\u5230\u4f1a\u8bbe\u8ba1\u8fd9\u79cd\u7684\u4eba\uff0c\u56e2\u961f\u6700\u597d\u662f\u5728\u533a\u5757\u94fe\u9886\u57df\u6709\u4e86\u89e3\u7684\u3002\u8981\u4e0d\u7136\u4e0d\u660e\u767d\u6211\u4eec\u8981\u5e72\u561b\n\n\u8054\u7cfb\u4eba\uff1a\u6b27\u9633 \uff08\u795e\u4ed9\u59d0\u59d0\uff09\n\n#### bonny@dmb.top\n\n**\u5e0c\u671b\u7814\u4e60\u793e\u7684\u670b\u53cb\u51fa\u8c0b\u732e\u7b56\u3002**\n\n=======================\n\n![](https://upload-images.jianshu.io/upload_images/5511258-94297001ea5a3193.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n  \n\n\u505a\u51fa\u8fd9\u79cd\u8868\u60c5\u5305\u6548\u679c\u5c31\u5f88\u4e0d\u9519\uff01\n\n![](https://upload-images.jianshu.io/upload_images/5511258-85cae0c4af7d3587.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n\n\u73b0\u5728\u6ee1\u8111\u5b50\u90fd\u5728\u60f3\u865a\u62df\u5f62\u8c61\uff0c\u65e9\u4e0a\u4e00\u8d77\u6765\uff0c\u53d1\u73b0\u4e86\u4e2a\u7a7a\u74f6\u5b50\uff0c\u9a6c\u4e0a\u62cd\u7ed9\u795e\u4ed9\u59d0\u59d0\u770b\u4e86\u3002\n\n![](https://upload-images.jianshu.io/upload_images/5511258-2ae47bc03c042cba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700)\n  \n## \u4e8c \u4eba\u7269\uff1a\u5229\u7528\u533a\u5757\u94fe\u6280\u672f\u9650\u91cf\u53d1\u884c\uff0c\u4e0e\u52a0\u5bc6\u732b\u4e00\u6837\uff0c\u53ef\u4ee5\u8f6c\u8ba9\u3002\n```\n\u6734\u514b\u724c\u4eba\u7269\uff1a\u6bcf\u5f20\u90fd\u662f\u552f\u4e00\u7684\n\u5e01\u987b\u5927\u5e08\uff1a\u9650\u91cf\u53d1\u884c100\u5f20\n\u5200\u5200\uff1a\u9650\u91cf\u53d1\u884c500\u5f20\nPei:500\n\u6b23\u4e0e\uff1a500\n\u674e\u5c0f\u767d\uff1a1000\n\u6b27\u9633\u534e\uff1a1000\n...\n```\n\n## \u4e09 \u6251\u514b\u724c\n```\n\u6251\u514b\u724c\u4e00\u5f00\u59cb\u662f\u53ea\u662f\u666e\u901a\u7684\u6734\u514b\u7eb8\u7eb8\u724c\uff0c\u7eb8\u724c\u4e0e\u4eba\u7269\u6df7\u5408\u53ef\u751f\u6210\u6709\u56fe\u6848\u7684\u552f\u4e00\u7eb8\u724c\u3002\u7c7b\u4f3c\u52a0\u5bc6\u732b\u7684\u751f\u4ed4\u3002\n\u4e3b\u8981\u662fK Q J 10 A\u7b49\u82b1\u8272\u7684\u724c\u3002\n```\n\n## \u56db \u6251\u514b\u724c\u6e38\u620f\n```\n\u56e0\u4e3a\u9650\u91cf\u53d1\u884c\uff0c\u6240\u4ee5\u80fd\u96c6\u9f50\u4e00\u526f\u7eb8\u724c\u7684\u4eba\u624d\u80fd\u6210\u4e3a\u62e5\u6709\u535a\u5f08\u6e38\u620f\u7684\u7ecf\u8425\u6743\uff0c\u80fd\u572821\u70b9\u7b49\u6e38\u620f\u4e2d\u6536\u83b7\u533a\u7814\u5e01QYB\uff0c\u5f53\u7136\u53c2\u4e0e\u73a9\u5bb6\u4e5f\u53ef\u901a\u8fc7\u538b\u6ce8\u8d62\u5f97\u533a\u7814\u5e01\u3002\n\n\u516c\u5f00\u65b9\u6848\uff0c\u5438\u5f15\u4f1a\u5458\u4e00\u8d77\u7b56\u5212\uff0c\u8bbe\u8ba1\uff0c\u53c2\u4e0e\u3002\u6211\u4eec\u662f\u6e38\u620f\u7684\u751f\u4ea7\u8005\uff0c\u4e5f\u662f\u7684\u901a\u8fc7\u5e01\u987b\u4e92\u52a8\u6210\u4e3a\u7eb8\u724c\u62e5\u6709\u8005\uff0c\u8fd8\u662f\u53c2\u4e0e\u8005(\u6e38\u620f\u73a9\u5bb6)\n\n\u7814\u7a76\u8fc7\u52a0\u5bc6\u732b\u7684\u670b\u53cb\uff0c\u6216\u61c2\u4eba\u7269\u8bbe\u8ba1\u7684\n\uff0c\u6e38\u620fUI\u8bbe\u8ba1\u53ef\u4ee5\u52a0\u6211\u5fae\u4fe1\uff1agdwwl168\n-\u4f5c\u8005\uff1a\u963f\u9f99\u5b66\u533a\u5757\u94fe\n-\u94fe\u63a5\uff1ahttps://www.jianshu.com/p/57ab8cd22440\n```\n\n## \u4e94 \u6e38\u620f\u8bbe\u8ba1\n### 1 \u9879\u76ee\u540d\u79f0    \n```\n\u5e01\u987b\u8fbe\u6469\n```\n\n### 2 \u9879\u76ee\u76ee\u7684    \n```\n\u63d0\u9ad8\u7814\u4e60\u793e\u5458\u95f4\uff0c\u8fd8\u6709\u793e\u5458\u548c\u7814\u4e60\u793e\u7684\u7c98\u5ea6\uff0c\u56de\u5934\u7387\n```            \n\n### 3 \u57fa\u7840\u73a9\u6cd5\n```\n\u521d\u6b65\u8bbe\u60f3\u662f\uff0c\n<1 \u6bcf\u65e5\u53ef\u83b7\u53d6\u65b0\u5361\u724c\uff08\u7b54\u9898\u65b9\u5f0f\uff0cpk\u65b9\u5f0f\uff0c\u62bd\u5956\u65b9\u5f0f\uff09\uff0c\u53ef\u4ee5\u4ea4\u6362\u5361\u724c\uff08\u62cd\u5356\u884c or \u8d60\u9001  or pvp\uff09\uff0c\n<2 \u6536\u96c6\u5361\u724c\uff0c\uff08\u666e\u901a\u5361\u724c\u4e24\u5f20\u53ef\u4ee5\u7ec4\u5408\u751f\u6210\u5e26\u56fe\u6848\u65b0\u5361\u724c\uff0c\u539f\u666e\u901a\u5361\u724c\u9500\u6bc1)\uff0c\u5b8c\u621052\u5f20\u6709\u5956\u52b1\uff08\u533a\u7814\u5e01QYB\uff09\u3002\n<3 \u7136\u540e\u6bcf\u65e5\u91cd\u65b0\u4e00\u7ec4\u6e38\u620f\u3002\n<4 \u6bcf\u65e5\u5148\u7b97\u79ef\u5206\uff0c\u60f3\u62ffqyb\u5e01\u7684\u8bdd\uff0c\u6bcf\u5468\u7ed3\u7b97\u3002\n```\n\n### 4 \u8fdb\u9636\u73a9\u6cd5\n```\n <1 \u9080\u8bf7\u670b\u53cb\u7b54\u9898\u7ed9\u5956\u52b1\uff0c\u5956\u52b1\u662f\u79ef\u5206\n <2 \u5361\u724c\u96c6\u5e02\uff0c\u7528\u4e8e\u73a9\u5bb6\u4eec\u7684\u5361\u724c\u4ea4\u6362\u3002\n <3 \u95ee\u9898\u548c\u7b54\u6848\u662f\u8ba9\u4f1a\u5458\u63d0\u4f9b=> \u8fd0\u8425\u65b9\u91c7\u7528\u5c31\u6709\u79ef\u5206\u5956\u52b1\n```\n\n### 5 \u8bbe\u8ba1\u7ec6\u8282\n```\n <1 \u5361\u724c\u4e0a\u6709\u533a\u5757\u94fe\u57fa\u7840\u77e5\u8bc6\uff0c\u5bd3\u6559\u4e8e\u4e50\u3002\uff08\u5386\u53f2\uff0c\u539f\u7406\uff09\n <2 \u5f53\u5929\u7b54\u9898\u80dc\u51fa\u8005\u53ef\u751f\u4ed4\uff0c\u5f53\u7136\u4e5f\u8981\u60f3\u52a0\u5165\u8fd0\u6c14\u6210\u4efd.\n <3 \u5361\u724c\u751f\u6210\u5408\u6210\u751f\u4ed4\u4e48\uff0c\u968f\u673a\u54e6\u3002\u751f\u6210\u5e26\u56fe\u6848\u7684\u5361\u724c.\n <4 \u6536\u96c6\u73a952\u5f20\u724c\uff0c\u5956\u52b1\u4e00\u4e2a\u5927\u738b\u724c\uff0c\u5927\u738b\u724c\u5c31\u662f\u4e00\u4e2a\u8fbe\u6469\u724c\uff08\u7a00\u6709\uff09\n <5 \u7b54\u5b8c\u4e00\u9053\u9898\uff0c\u5fc5\u987b\u8981\u51fa\u4e00\u9053\u9898\n <6 \u53c2\u4e0e\u7684\u4eba\u6570\u8d8a\u591a\uff0c\u5c31\u9700\u8981\u56de\u7b54\u66f4\u591a\u9898\u76ee\uff0c\u5c31\u8981\u624d\u80fd\u83b7\u5f97\u4e00\u5f20\u666e\u901a\u724c\n <7 \u7b54\u9898\u4ee5\u786e\u5b9a\u6027\u9009\u62e9\u9898\u4e3a\u51c6\uff0c\n\n```\n\n### 6 \u5c55\u5f00\n```\n<1 \u8fbe\u6469\u9662\u7528\u5f00\u653e\u6027\u95ee\u9898,\u53ef\u4ee5\u505a\u6210\u4e00\u4e2a\u72ec\u7acb\u4ea7\u54c1\uff081 \u7531\u51fa\u9898\u4eba\u786e\u5b9a\u8c01\u7684\u7b54\u6848\u6b63\u786e   2 \u8d85\u65f6\u673a\u5236\uff0c\u5982\u8fc73\u5929\u51fa\u9898\u4eba\u672a\u786e\u8ba4\uff0c\u7b2c\u4e00\u4e2a\u7b54\u9898\u4eba\u83b7\u5f97\u79ef\u5206\uff09\n<2 \u6708\u5ea6\uff0c\u5b63\u5ea6\uff0c\u5e74\u5ea6\u5361\u724c\u8fbe\u6469\u6392\u540d\n```\n\n### 7 \u89c4\u5212\n```\n\u90a3\u5c31\u89c4\u5212\u4e00\u671f   \u4e8c\u671f  \u4e09\u671f\u7684\u529f\u80fd\u70b9\n\u4e00\u671f\uff1a \u767b\u5f55\uff0c\u5361\u724c\u5408\u6210\uff0c\u9009\u62e9\u9898\u7b54\u9898\n```\n"
 },
 {
  "repo": "PhillipTaylor/texas_holdem",
  "language": "C",
  "readme_contents": "\n             __                                                      \n            /|       /           /         /  |      /    |          \n           ( |  ___ (  ___  ___ (___      (___| ___ (  ___| ___  _ _ \n             | |___)| |   )|___)|         |   )|   )| |   )|___)| | )\n             | |__  | |  / |__  |__       |  / |__/ | |__/ |__  |  / \n\nTelnet Holdem is an Texas Holdem Poker game server that allows people to\nconnect and play with each other using their telnet clients.\n\nWritten purely as a way to test and build my own C development skills.\n\nYou can play the game by simple downloading the software, building and executing\nit and then players can join by simply pointing their client telent clients\nat the server's ip and port.\n\nTelnet holdem is written in C and uses basic object orientated techniques to\nexpress the business logic and demonstrates the use of network sockets and using\npoll() to manage multiple socket connections in a single thread.\n"
 },
 {
  "repo": "ylmbtm/PokerCraker",
  "language": "C++",
  "readme_contents": "# PokerCraker\n\u6251\u514b\u724c\u6b8b\u5c40\u7834\u89e3\uff0c \u901f\u5ea6\u6109\uff0c\u6548\u7387\u9ad8\n\n"
 },
 {
  "repo": "kmurf1999/rust_poker",
  "language": "Rust",
  "readme_contents": "# RustPoker\n\n[![Build Status](https://travis-ci.org/kmurf1999/rust_poker.svg?branch=master)](https://travis-ci.org/kmurf1999/rust_poker)\n[![docs.rs](https://docs.rs/rust_poker/badge.svg)](https://docs.rs/rust_poker)\n[![crates.io](https://img.shields.io/crates/v/rust_poker.svg)](https://crates.io/crates/rust_poker)\n\nA poker library written in rust.\n\n - Multithreaded range vs range equity calculation\n - Fast hand evaluation\n - Efficient hand indexing\n\n\n## Installation\n\nAdd this to your `Cargo.toml`:\n```\n[dependencies]\nrust_poker = \"0.1.13\"\n```\n**Note**: The first build of an application using `rust_poker` will take extra time to generate the hand evaluation table\n\n## Hand Evaluator\n\nEvaluates the strength of any poker hand using up to 7 cards.\n\n### Usage\n\n```rust\nuse rust_poker::hand_evaluator::{Hand, CARDS, evaluate};\n// cards are indexed 0->51 where index is 4 * rank + suit\nlet hand = Hand::empty() + CARDS[0] + CARDS[1];\nlet score = evaluate(&hand);\nprintln!(\"score: {}\", score);\n```\n\n## Equity Calculator\n\nCalculates the range vs range equities for up to 6 different ranges specified by equilab-like range strings.\nSupports monte-carlo simulations and exact equity calculations\n\n### Usage\n\n```rust\nuse rust_poker::hand_range::{HandRange, get_card_mask};\nuse rust_poker::equity_calculator::approx_equity;\nlet ranges = HandRange::from_strings([\"AK,22+\".to_string(), \"random\".to_string()].to_vec());\nlet public_cards = get_card_mask(\"2h3d4c\".to_string());\nlet stdev_target = 0.01;\nlet n_threads = 4;\nlet equities = approx_equity(&ranges, public_cards, n_threads, stdev_target);\nprintln!(\"player 1 equity: {}\", equities[0]);\n```\n\n## Credit\n\nThe hand evaluator and equity calculator library is a rust rewrite of **zekyll's** C++ equity calculator, [OMPEval](https://github.com/zekyll/OMPEval)\n\n## License\n\nThis project is MIT Licensed\n\nCopyright (c) 2020 Kyle Murphy\n"
 },
 {
  "repo": "ozeidan/pokerBot",
  "language": "C#",
  "readme_contents": "# pokerBot\n\n## What is it?\npokerBot is an artificial intelligence for Texas Holdem Poker which I created in my free time. It was written in C# and specifically runs on the **Pokerstars** client, but is extensible to every poker client. It was designed to run fully automatically on an unlimited number of poker sessions.\n\n## How does it work?\n\n\nFor gathering the information the pokerBot takes a screenshot of the poker session and analyzes the state of the game via OCR (Google's tesseract) and simple screen scamming. Due to the screen scamming being hard coded, the pokerBot currently only works on a very specific screen resolution (2736x1824). (Todo)\n\n\nOn the first round of betting (preflop) the pokerBot looks up the player's Odds from a look up table, which lists the odds depending on the cards the player has and the ammount of opponents that the player faces. In laters betting rounds odds are calculated via Monte Carlo Simulation. The pokerBot then decides on what to do considering the pot odds.\n\n\nAll interactions with the Pokerstars program are implemented via User32.dll function calls to move the mouse and the .Net SendKeys() to enter the betting ammount.\n\n## Results\n\nUntill now the pokerBot has had very succesfull runs on Pokerstars, despite having a simple AI. I am consistently able to multiply my starting ammount by 10, untill the pokerBot decides to go all in and loses, which represents a major flaw of the AI. \n\n"
 },
 {
  "repo": "J-Burnett/PokerPlayer",
  "language": "C#",
  "readme_contents": ""
 },
 {
  "repo": "pattern/react-poker",
  "language": "JavaScript",
  "readme_contents": "# react-poker\nA React component simulating a Texas holdem tournament game.\n\n### Usage\nRun `npm install`, `npm install -g webpack`, `webpack` to generate `bundle.js`.\n\n### Screenshot of the app:\n\n![react-poker example screenshot](react-poker-screenshot.png)\n"
 },
 {
  "repo": "microsoft/matchem-poker-wp",
  "language": "C#",
  "readme_contents": "Match'em Poker XNA 1.1\n======================\n\nMatch'em Poker is a traditional match3 type of game with a twist: Instead of \nmatching blocks of the same colour, the player is matching different poker \nhands. The game is a port from the Qt version which, in turn, is a port from \nthe original iOS version. \n\n![Start view](/doc/screenshots/mp_start_view_1_small.png?raw=true)&nbsp;\n![Playing](/doc/screenshots/mp_playing_small.png?raw=true)\n\nWhen porting, the intent was to do so with minimal effort, reusing everything \npossible. The code is NOT originally written with C# nor for WP7.\n\nFor more information, see the wiki:\nhttps://github.com/Microsoft/matchem-poker-wp/wiki\n\n\nPLAYING MATCH'EM POKER\n-------------------------------------------------------------------------------\n\nThe game is played in a rectangular grid. The player can swap the position of \nany two cards. When a 'poker hand' is formed, it will disappear from the level \nand the player's score increases. A card will drop down if there is an empty \nspace below it. New cards will appear in empty spaces in the first row. The \nlevel starts with a timer value of 40. This number decreases with time, and \nincreases when the player scores. The level is completed when the timer \nreaches a value of 100. If the timer drops to zero, the game is over.\n \nAccepted 'hands' are: \n   - 4 or more of the same color\n   - 3 or more of the same number\n   - a straight of 4 or more\n\nAccepted 'hands' are: 4 or more of the same colour, 3 or more of the same \nnumber, a straight of 4 or more. The hands can appear either horizontally or \nvertically. The difficulty increases when the player reaches higher levels. \nThe time spent will affect the timer more and more, and destroyed cards will \nincrease the timer less and less. Theoretically the game can continue forever. \nIn practice, it will get very difficult around level 20.\n\nThere are increasing numbers of empty cards in the levels. An empty card will \nnot be accepted to be a part of a hand until it's opened (by clicking it). \nWhen an empty card is opened, a small amount of time is removed from the timer \n(as a payment).\n\n\nPREREQUISITES\n-------------------------------------------------------------------------------\n\n- C# intermediate\n- Development environment 'Microsoft Visual Studio 2010 Express for Windows \n  Phone'\n\n\nLINKS\n-------------------------------------------------------------------------------\n\nGetting Started Guide:\nhttp://create.msdn.com/en-us/home/getting_started\n\nLearn About Windows Phone 7 Development:\nhttp://msdn.microsoft.com/fi-fi/ff380145\n\nApp Hub, develop for Windows Phone:\nhttp://create.msdn.com\n\nGame Development:\nhttp://create.msdn.com/en-us/education/gamedevelopment\n\n\nIMPORTANT FILES/CLASSES\n-------------------------------------------------------------------------------\n\nsource files:\n\n- Game1.cs: A main application class for the game\n- TileInterfaces: Interfaces for game and engine, some commonly used \nenumerations\n- ParticleEngine.cs: Consists of three classes; Particle, ParticleSpray, and \nParticleEngine. Simulates particles and handles drawing them on the screen.\n- npclevel.h: The match-grid-game part of the application\n- tilenpc.h: Implementation of interface ITileGame. The platform-independent\nmain game.\nTileGameRendererXNA.cs: XNA implementation of an ITileRenderer interface which \nworks as the engine for the framework. Rendering is implemented using XNA's \nSpriteBatch object.\n\n\nKNOWN ISSUES\n-------------------------------------------------------------------------------\n\nNone.\n\n\nBUILD & INSTALLATION INSTRUCTIONS\n-------------------------------------------------------------------------------\n\n**Preparations**\n\nMake sure you have the following installed:\n * Windows 7, may also work on Windows XP\n * Microsoft Visual Studio 2010 Express for Windows Phone\n * The Windows Phone Developer Tools January 2011 Update:\n   http://download.microsoft.com/download/6/D/6/6D66958D-891B-4C0E-BC32-2DFC41917B11/WindowsPhoneDeveloperResources_en-US_Patch1.msp\n * Windows Phone Developer Tools Fix:\n   http://download.microsoft.com/download/6/D/6/6D66958D-891B-4C0E-BC32-2DFC41917B11/VS10-KB2486994-x86.exe\n\n\n**Build on Microsoft Visual Studio**\n\n1. Open the SLN file:\n   File > Open Project, select the file XNAPuzzlePoker.sln.\n2. Select the 'Windows Phone 7 Emulator' target.\n3. Press F5 to build the project and run it on the Windows Phone Emulator.\n\n\n**Deploy to Windows Phone 7**\n\nPreparations:\n1. Register in the App Hub to get a Windows Live ID:\n   http://create.msdn.com/en-us/home/membership\n2. Install Zune for Windows Phone 7:\n   http://www.zune.net/en-us/products/windowsphone7/default.htm\n3. Register your device in your Windows Live account. \n   Select from Windows: Start > Windows Phone Developer Tools > Windows Phone \n   Developer Registration\n\nDeploy:\n1. Open the SLN file:\n   File > Open Project, select XNAPuzzlePoker.sln file.\n2. Connect the device to Windows via USB.\n3. Select the 'Windows Phone 7 Device' target.\n4. Press F5 to build the project and run it on your Windows device.\n\n   \nCOMPATIBILITY\n-------------------------------------------------------------------------------\n\n- Windows Phone 7\n- XNA Game Studio 4.0\n\nTested on:\n- Nokia Lumia 800\n- HTC 7 Mozart\n- Samsung Omnia 7\n\nDeveloped with:\n- Microsoft Visual Studio 2010 Express for Windows Phone\n\n\nCHANGE HISTORY\n-------------------------------------------------------------------------------\n\n* 1.1 Code style and convention fixes\n* 1.0 The first non-beta version\n* 0.9 Release candidate 1\n"
 },
 {
  "repo": "codesquad-members-2022/swift-pokergame",
  "language": null,
  "readme_contents": "# swift-pokergame\n2\uc8fc\ucc28 \uce74\ub4dc\uac8c\uc784 \uc800\uc7a5\uc18c\n"
 },
 {
  "repo": "puzza007/openpoker",
  "language": "Erlang",
  "readme_contents": "OpenPoker is released under a dual GPL/commercial license.\n\nPlease see doc/install.txt for installation instructions and visit http://groups.google.com/group/openpoker if you have questions.\n\nOld information may also be found at http://wagerlabs.com.\n"
 },
 {
  "repo": "onevcat/TexasPoker",
  "language": "Objective-C",
  "readme_contents": ""
 },
 {
  "repo": "mcostalba/poker",
  "language": "C++",
  "readme_contents": "## Poker bits\n\nA simple and lightweight Texas Hold'em 7-card equity calculator.\n\nThrough a Monte Carlo simulation, this command-line tool computes equities for\nany 7 cards hand, with any number of random cards.\n\nA simulation of a 2 player table with *Qh Qs* vs *Ad Jc* runs at **8.6 Milions\ngames/sec** on a quite old Intel I5 2.6GHz, single core. Tool supports multi-threading,\nusing 4 cores speed is almost 4X.\n\nIt has been fully validated for correctness against\n[SKPokerEval](https://github.com/kennethshackleton/SKPokerEval).\n\n\n### Usage\n\nSimply call with _go_ command and the given cards, like:\n\n```\n; 2 players table with given hole cards\n$ ./poker go AcKd 7h7s\n\n; 4 threads and 2 players, first one has a 3 of diamond, second has a range with\n; Ace-Queen suited or better or pocket ten or better. Third has Ace-King.\n$ ./poker go -t 4 -p 2 3d [AQs+,TT+] AK\n\n; 3 players and 10M games, player one has pocket kings, board is given\n$ ./poker go -p 3 -g 10M KK - 8c 4d 7c Ts Qs\n\n; 3 players, each one with a given hole card, the other is random. Full enumerate\n; instead of Monte Carlo.\n$ ./poker go -e Ac Td 7h - 5h 6h 9c Qs\n\n; Full enumeration with 2 threads and given hole cards\n$ ./poker go -e -t 2 AcKd 7h7s\n```\n\n\nThis is the option list:\n\n```\n  -p X  With X number of players. Default to number of holes\n\n  -t X  With X number of threads. Default to 1\n\n  -g X  With X number of games, like 10000, 150K, 8M. Default to 1M\n\n  -e    Full enumerate instead of running a Monte Carlo\n```\n\nRange syntax is the usual one (from PokerStartegy's Equilab):\n\n```\nSpecific hands\n  AhAd : Specific hand 'ace of hearts and ace of diamonds'\n\nHand groups\n  AA  : All 6 combos of a pocket pair type for example\n  AKs : All 4 ace king suited combos\n  AKo : All 12 ace king offsuit combos\n  AK  : All 16 ace king combos = AKo, AKs\n\nHand group ranges\n  QQ-99   : All pocket pairs from 99 to QQ, i.e. QQ, JJ, TT, 99\n  T7s-T3s : All suited tens from T3s to T7s , i.e. T7s, T6s, T5s, T4s, T3s\n  T7o-T3o : All offsuit tens from T3o to T7o, i.e. T7o, T6o, T5o, T4o, T3o\n  T7-T3   : All suited tens from T3s to T7s and all offsuit tens from T3o to T7o,\n            i.e. T7s, T6s, T5s, T4s, T3s, T7o, T6o, T5o, T4o, T3o\n  KJs-86s : All suited one gapper from 86s to KJs, i.e. KJs, QTs...86s\n  AJo-63o : All suited two gapper from 63o to AJo, i.e. AJo, KTo...63o\n  J8-52   : All two gapper from 52 to J8, i.e. J8s, T7s... 52s, J8o...52o\n\nOpen-ended hand group ranges\n  QQ+  : All pocket pairs of queens and better, i.e. QQ, KK, AA\n  T6s+ : All suited tens from T6s to T9s , i.e. T9s, T8s, T7s, T6s\n  T6o+ : All offsuit tens from T6o to T9o, i.e. T9o, T8o, T7o, T6o\n  T6+  : All offsuit tens from T6o to T9o and all suited tens from T6s to T9s\n```\n\n\n### How it works?\n\nInstead of the usual hashing scheme, used by most evaluators, this tool is based\non card bitboards. Any card in [0,52] range can be mapped into a bit of a 64bit\nunsigned integer, we leverage on this to build a score through a sequence\nof bitwise operations, one for each card.\n\nSuppose we have this 7-card hand: **Ks Tc Th 8s 5h 4d 2d**\n\nAfter striping the suit, cards are mapped into a 64bit _score_ like this:\n\n```\n    | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10| 11| 12| 13| 14| 15|\n+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n 48 |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n 32 |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n 16 |   |   |   |   |   |   |   |   | X |   |   |   |   |   |   |   |\n+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n  0 | X |   | X | X |   |   | X |   | X |   |   | X |   |   |   |   |\n+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n```\n\nThe inner code is very simple and fast (a card is 6 bits, highest 2 the suit\nand lowest 4 the value):\n\n```C++\n    uint64_t n = 1 << (card & 0xF);\n\n    while (score & n)\n        n <<= 16;\n    score |= n;\n```\n\nAnd this is *almost* our score: we can compare hands by a simple:\n\n```C++\n    uint64_t maxScore = 0;\n\n    for (size_t i = 0; i < numPlayers; ++i) {\n        if (maxScore < hands[i].score)\n            maxScore = hands[i].score;\n    }\n```\n\nUnfortunately the devil is in the details and there are subtle cases like hand\nwith 3 pairs or hand with 2 sets that break the above simple scheme. To fix this\nwe bitwise AND the score with a pre-computed mask, indexed by the first 2\nmost significant bits (msb) of the score, something like this:\n\n```C++\n    uint64_t v = score;\n    int idx1 = pop_msb(&v), idx2 = msb(v);\n    score &= ScoreMask[idx1][idx2]; // Set also special combination flags\n```\n\nScoreMask takes care of setting flags for some combination (full house, double\npair, etc). Flags are set in the unused part of the score (bits 13-15)\nin a way that makes our score comparison to work correctly in all the cases.\n\n\n#### Flush and straight\nThere is some special code for flushes and straights. For flushes we use a 32 bit\ninteger split in 4 slots (4 bit  each), each one inited at 3, and we add 1 for\nevery card according to card's suit. If one slot reaches 8, then we have a\nflush:\n\n```C++\n    constexpr uint32_t SuitInit  =   3 | (3 << 4) | (3 << 8) | (3 << 12);\n    constexpr uint32_t SuitAdd[] = { 1 , (1 << 4) , (1 << 8) , (1 << 12) };\n    constexpr uint32_t IsFlush   =   8 | (8 << 4) | (8 << 8) | (8 << 12);\n\n    suits = SuitInit;\n\n    for ( <all cards> )\n        suits += SuitAdd[card >> 4];\n\n    if (suits & IsFlush) {\n       unsigned r = lsb(suits & IsFlush) / 4; // Suite value in [0..3]\n       ...\n    }\n```\n\nFor straights we use the following:\n\n```C++\n    uint64_t v = score & Rank1BB;\n    v = (v << 1) | (v >> 12); // Duplicate an ace into first position\n    v &= v >> 1;\n    v &= v >> 1;\n    v &= v >> 2;\n    if (v)\n        score = v << 3; // We have a straight, value is (v << 3)\n```\n"
 },
 {
  "repo": "wwttaozong/Poker",
  "language": "Java",
  "readme_contents": "# Poker\n\u6597\u725b\uff0c\u6251\u514b\u724c\u6e38\u620f\n"
 },
 {
  "repo": "samcoppini/Discord-Poker-Bot",
  "language": "Python",
  "readme_contents": "# Discord Poker Bot\nThis is a bot written in python 3 using the [discord.py](https://github.com/Rapptz/discord.py) library. It allows you to play Texas Hold'em over discord.\n\n## Running this for yourself\nTo run this bot for yourself, first make you are using python 3.6+ and have the discord.py library installed.\n\n```\npip install discord.py\n```\n\nNext, head to the [discord applications page](https://discordapp.com/developers/applications/me) and click on the *New App* button.\n\nAdd whatever name, description and icon you want for your new app, and click on the *Create App* button.\n\nScroll down, and click on the *Create a Bot User* button.\n\nClick on the *click to reveal* button to get your bot's token. Next, either set your `POKER_BOT_TOKEN` environment variable to be that token, or replace `os.getenv(\"POKER_BOT_TOKEN\")` on line 9 of `bot.py` with your bot's token.\n\nNow, go to [this page](https://finitereality.github.io/permissions-calculator/?v=0), select all the Non-Administrative permissions, enter the client id from the bot's application page, and then select one of the servers you own to add it that server.\n\nFinally, when you have done all that, run `bot.py`, and message `!newgame` in the server to start a new game of Texas Hold'em.\n"
 },
 {
  "repo": "sky068/PokerLandlord",
  "language": "Roff",
  "readme_contents": "# PokerLandlord\n\u4f7f\u7528cocoscreator + node.js + mariadb\u521b\u5efa\u7684\u623f\u5361\u6597\u5730\u4e3b\u6e38\u620f\u3002\n"
 },
 {
  "repo": "dannye/pokered-gen-II",
  "language": "Assembly",
  "readme_contents": "# Pok\u00e9mon Red and Blue [![Build Status][travis-badge]][travis]\n\nThis is a disassembly of Pok\u00e9mon Red and Blue.\n\nIt builds the following ROMs:\n\n- Pokemon Red (UE) [S][!].gb `sha1: ea9bcae617fdf159b045185467ae58b2e4a48b9a`\n- Pokemon Blue (UE) [S][!].gb `sha1: d7037c83e1ae5b39bde3c30787637ba1d4c48ce2`\n- BLUEMONS.GB (debug build) `sha1: 5b1456177671b79b263c614ea0e7cc9ac542e9c4`\n\nTo set up the repository, see [**INSTALL.md**](INSTALL.md).\n\n\n## See also\n\n- **Discord:** [pret][discord]\n- **IRC:** [freenode#pret][irc]\n\nOther disassembly projects:\n\n- [**Pok\u00e9mon Yellow**][pokeyellow]\n- [**Pok\u00e9mon Gold/Silver**][pokegold]\n- [**Pok\u00e9mon Crystal**][pokecrystal]\n- [**Pok\u00e9mon Pinball**][pokepinball]\n- [**Pok\u00e9mon TCG**][poketcg]\n- [**Pok\u00e9mon Ruby**][pokeruby]\n- [**Pok\u00e9mon FireRed**][pokefirered]\n- [**Pok\u00e9mon Emerald**][pokeemerald]\n\n[pokeyellow]: https://github.com/pret/pokeyellow\n[pokegold]: https://github.com/pret/pokegold\n[pokecrystal]: https://github.com/pret/pokecrystal\n[pokepinball]: https://github.com/pret/pokepinball\n[poketcg]: https://github.com/pret/poketcg\n[pokeruby]: https://github.com/pret/pokeruby\n[pokefirered]: https://github.com/pret/pokefirered\n[pokeemerald]: https://github.com/pret/pokeemerald\n[discord]: https://discord.gg/d5dubZ3\n[irc]: https://kiwiirc.com/client/irc.freenode.net/?#pret\n[travis]: https://travis-ci.org/pret/pokered\n[travis-badge]: https://travis-ci.org/pret/pokered.svg?branch=master\n"
 },
 {
  "repo": "cschweda/vue-poker",
  "language": "Vue",
  "readme_contents": "# Video Poker Demo with Vue.js\n\n> A Vue.js project\n\nKey components:\n\n* Vue.js (https://vuejs.org/)\n* Vue-cli (https://github.com/vuejs/vue-cli)\n* Vue-router (https://github.com/vuejs/vue-router)\n* Vuex 2.0 (https://github.com/vuejs/vuex)\n* ~~Axios (https://github.com/mzabriskie/axios)~~ **REMOVED**\n* ~~Deck of Cards API (https://deckofcardsapi.com/)~~ **REMOVED**\n* Poker Hand Analyzer (http://www.codeproject.com/Articles/569271/A-Poker-hand-analyzer-in-JavaScript-using-bit-math)\n\nTODO:\n\n\n* ~~Variable bet sizes~~ **ADDED**\n* ~~Fisher-Yates Shuffle Algorithm~~ **ADDED**\n* Session stats\n* Custom decks\n* UI improvements\n\n\nLive demo:\n\nhttps://poker.metaincognita.com/\n\n\n## Build Setup\n\n``` bash\n# install dependencies\nnpm install\n\n# serve with hot reload at localhost:8080\nnpm run dev\n\n# build for production with minification\nnpm run build\n```\n\n"
 },
 {
  "repo": "philou/planning-poker",
  "language": "Ruby",
  "readme_contents": "# Planning-Poker\n\n[![CI Build Status Badge](https://api.travis-ci.org/philou/planning-poker.svg?branch=master)](https://travis-ci.org/philou/planning-poker)\n[![Code Climate](https://codeclimate.com/github/philou/planning-poker/badges/gpa.svg)](https://codeclimate.com/github/philou/planning-poker)\n[![Test Coverage](https://codeclimate.com/github/philou/planning-poker/badges/coverage.svg)](https://codeclimate.com/github/philou/planning-poker/coverage)\n[![Issue Count](https://codeclimate.com/github/philou/planning-poker/badges/issue_count.svg)](https://codeclimate.com/github/philou/planning-poker)\n[![Heroku App Status](http://heroku-shields.herokuapp.com/philous-planning-poker)](https://philous-planning-poker.herokuapp.com)\n\nAn app to enable agile teams to do effective remote [Planning Poker](https://en.wikipedia.org/wiki/Planning_poker) estimations.\n\n[![Screenshot of the tool](screenshot.jpg)](https://philous-planning-poker.herokuapp.com/)\n\n## Why\n\nDuring my career as a software engineer, I am more and more working in teams that span over many places. At the same time, I am a great proponent of the agile way which favor co-located teams.\n\nI am convinced that teams can be both remote *and* agile. Provided they have the correct tools.\n\nThis app enables remote teams to run effective [poker planning](https://en.wikipedia.org/wiki/Planning_poker) sessions. Without it, they would use a video conference to share their estimates through the camera. With this app, a phone call is enough.\n\nIn the long run, it could improve the estimation experience for both remote and co-located teams :\n\n* It could warn of a \"risky\" or \"unlikely\" estimations, by analyzing the distribution\n* It help to do \"Risk\" estimations, which have 2 axes (likelihood and criticality)\n\n## How to use it\n\n### Tutorial\n\nTo do a remote planning poker session, you'll all need 3 things :\n\n* an internet connection\n* be together in a voice teleconference\n* know what [poker estimation technique](https://en.wikipedia.org/wiki/Planning_poker)\n\nOnce this is ready, you should all go to [https://philous-planning-poker.herokuapp.com/](https://philous-planning-poker.herokuapp.com/).\n\n1. Type in your team name and pseudo, and enter your team space. The first to enter becomes the animator for the team.\n2. Discuss together about what you are going to estimate.\n3. The animator starts a vote.\n4. Everyone estimates the task in [story points](https://www.mountaingoatsoftware.com/blog/what-are-story-points).\n5. At the end of the vote, you should all see the distribution of the estimates.\n6. Discuss the results.\n7. At any moment, the animator can start a new vote.\n\nHere is a video demonstrating how the different contributors interact :\n\n[![Demo video on Youtube](video.jpg)](https://www.youtube.com/watch?v=yUTpabukwxE)\n\n### FAQ\n\n> What if no one is the animator ?\n\nYou must have entered a team space that is already used and which already has an animator. Pick another team name to fix that.\n\n> I entered my team name and pseudo, but it seems I am alone !\n\nYou must have used a different team name. The tool is case sensitive, be sure to use exactly the same team name.\n\n### Limitations\n\nHere are the main current limitations of the tool :\n\n* The animator is the first person in the team to log in, once someone is animator for a team, he cannot back out of this role\n* Each vote lasts for 30 seconds, even if everyone has voted\n* The only form of authentication are the team and persons names, this can lead to conflicts\n* The tool is not built to scale, new teams and contributors pill up in a Postgres DB but are not garbage collected.\n* The main instance runs on a free [Heroku](https://www.heroku.com/) app\n\nAnyone could fix these if needed.\n\n### Feedback is welcome\n\nI'd appreciate your feedback about this tool. Whether\n\n* to tell me what you think of it\n* to explain what you'd need before to start using it\n* to ask any question\n\nContact me or create a [Github issue](https://github.com/philou/planning-poker/issues).\n\n## Open Source\n\nThe tool is open source, under the [Apache License 2.0](https://www.apache.org/licenses/LICENSE-2.0). Among other things, this means that :\n\n* you can install it on your own server and run your own instance\n* you can contribute improvement to it\n\nCheck the [source code on Github](https://github.com/philou/planning-poker) to learn how to do this.\n\n## How to run it\n\n### Heroku\n\nThe app is continuously deployed to [Heroku](https://www.heroku.com) at https://philous-planning-poker.herokuapp.com/.\n\nDeploying to your own Heroku app is straightforward. It only requires an SQL DB and a Redis server. Here is the way to go :\n\n```bash\n# install the Heroku command line\nbrew install heroku\n\n# clone the repo\ngit clone git@github.com:philou/planning-poker.git\ncd planning-poker\n\n# create an Heroku app\nheroku apps:create\n\n# add a Postgres DB\nheroku addons:create heroku-postgresql:hobby-dev\n\n# add Redis\nheroku addons:create heroku-redis:hobby-dev\n\n# deploy\ngit push heroku master\n\n# migrate your database\nheroku run rake db:migrate\n```\n\nYour app should be running in the cloud !\n\n### Local machine\n\nDeploying on a local machine or server is pretty simple too. \n\n#### Pre-requisite\n\nYou need to have a few things installed first :\n\n* [Ruby](https://www.ruby-lang.org), I use [rbenv](https://github.com/rbenv/rbenv) for that\n* [Docker](https://www.docker.com/)\n* [PhantomJS](http://phantomjs.org/) if you want to run the tests\n\n#### Sources\n\nThen, clone the repo :\n\n```\ngit clone https://github.com/philou/planning-poker.git\ncd planning-poker\n```\n\n#### Dependencies\n\nThey are managed with bundler. Just run the following :\n\n```\nbundle install\n```\n\nbundle might complain that some dependencies are missing on your OS, in this case follow its advices and install them.\n\n#### Database\n\nThere is a docker compose configuration to start services dependencies. You can either use docker, or start these services yourself. Here is the docker way.\n\nYou'll need to have docker and docker compose installed :\n\n* https://docs.docker.com/engine/installation/\n* https://docs.docker.com/compose/install/\n\nThen, run the following to create the database :\n\n```\ndocker-compose up\nbundle exec rake db:create\nbundle exec rake db:migrate\n```\n\n#### Local run\n\nThe db should be started from previous step. Start the rails server the typical way\n\n```\nbundle exec bin/rails server\n```\n\nCheck that it's running at http://localhost:3000\n\n## How to contribute\n\n### Issues\n\nIssues and user stories are maintained in the [github issues](https://github.com/philou/planning-poker/issues) of this repo. [ZenHub](https://www.zenhub.com/) is a nice addition to visualize and prioritize the tasks to work on.\n\n### Continuous Delivery Chain\n\nThere is a [TravisCI Job](https://travis-ci.org/philou/planning-poker) continuously building any change on the github repo. When the build passes, the app is automatically deployed to [Heroku](https://philous-planning-poker.herokuapp.com/).\n\nThe repo is also linked to a [Code Climate project](https://codeclimate.com/github/philou/planning-poker) which performs static code analysis and monitors code issues.\n\n### Coding Conventions\n\nHere are the few guidelines I followed when building the initial version of this app\n\n* Stick to the standards : Code Climate is very good at pointing out any infringement to this rule\n* Do the simplest thing that could work. I did not build complex stuff when more down to earth solutions work perfectly in the current setting\n* Update the dependencies as often as possible. As the whole code is automatically tested, it's a lot easier to stay on the latest versions.\n* Test Driven Development is key in allowing Continuous Delivery\n* As few mocks as possible. Mocks are brittle, difficult to maintain and provide a false sense of security\n* I tracked technical debt (the things I decided not to do now) using #TODO comments, which appear in Code Climate\n\n## Authors\n\n* [Philippe Bourgau](http://philippe.bourgau.net)\n"
 },
 {
  "repo": "bcgraham/pokerserver",
  "language": "Go",
  "readme_contents": "# Hacker School Poker Engine\n\n## Overview\nThe Hacker School Poker Engine (HSPE) is a persistently running game server that coordinates and executes games of poker. Remote users can connect to HSPE and participate in games of poker against other remotely-connected users. The HSPE API provides a [Restful](http://en.wikipedia.org/wiki/Representational_State_Transfer) interface with lightweight [JSON](http://en.wikipedia.org/wiki/JSON)-formatted responses to interact with the HSPE.\n\nThis documentation provides an overview of how the Hacker School Poker Engine (HSPE) operates and how you can use the API to build AI bots to play games of poker.\n\n## Game Rules\n### General rules\nGames of poker in HSPE are played using the [rules](http://www.wsop.com/poker-games/texas-holdem/rules/) of No Limit Texas Holdem. We also enforce the following rules:\n\n- Each game has a maximum of 10 players allowed.\n\n- Each game has a minimum of 2 players required to play the game. If you are the only player in a game the game will not start until another player joins.\n\n- All players start with $10,000\n\n- Big blinds are $20, Small blinds are $10\n\n### Betting\nBetting is allowed in increments no smaller than $1 (no floating point bets). All bets sent to HSPE must be valid. Invalid bets will lead to you immediately folding your hand. Invalid bets are:\n\n- Bets with negative values\n\n- Bets greater than your current wealth\n\n- Bets less than the minimum required to call and less than your current wealth (you are allowed to bet less than the amount required to call if this bet would put you \u201call in\u201d)\n\n- Bets that raise on the previous bet, but do so less than the minimum raise amount as defined by the general rules of poker (you must raise at least as much as the last raise amount)\n\n### Understanding the state of the game\nIt is the responsibility of a player to query HSPE at regular intervals and get the state of the game they are playing. There is currently no rate limiting enforced but we suggest players to query HSPE no more than once every 50ms\n\n### Ordering and turns\nA player can join a game at any time. If a hand is in progress, the player will start playing at the beginning of the next hand. If the game is full, the player will be put in queue and will start playing once there is a seat open at the table.\n\nA player can fold and leave a game at any time.\n\nHSPE will only accept bet/fold orders from a player when it is that player's turn. Orders sent when it is not that player's turn will be ignored. When it is a player's turn, they will have a 15 second window to send a bet/fold instruction before HSPE times out and removes the player from the game.\n\n## Running the server\nFork the github repo, run ```go build```, then run ```pokerserver```. This will start up a server running on your machine on port 8080.\n\n## Accessing the API\nHSPE will be hosted on port 8080. Say you spin up a instance of the server running on ```127.0.0.1```. A request to retrieve all active games would look like:\n    \n    GET https://127.0.0.1:8080/games/\n\n## Authentication\nSome requests to HSPE need to be authenticated.  HSPE uses [HTTP basic authentication](http://en.wikipedia.org/wiki/Basic_access_authentication) for this purpose.\n\n## Output formats\nThe bodies of successful responses will be sent in JSON format. Unsuccessful responses, those with error codes, maybe be sent as plain text not formatted as JSON.\n\n## API Resources\nThe following documentation assume the server is running on  ```127.0.0.1:8080```. Replace this address with the appropriate location of the server.\n\n### Make a new user\n  \n|                     | Details                      |\n---------------------:|-------------------------------\n**URI**               | https://127.0.0.1:8080/users/\n**Synopsis**          | Create a new user\n**HTTP Method**       | POST\n**Parameters**        | --\n**Success code**      | 201 Created\n**Success body**      | string(GUID)\n**Error response**    | 400 Bad Request if can\u2019t parse request <br> 403 Forbidden if username already exists\n**Error body**        | Error details (if applicable)\n**Requires Auth**     | Y\n**Notes**           | There is no second registration step. Authentication user and password are used to create new user.\n\n### Get information about all active games\n\n|                     |       Details                 |\n---------------------:|-------------------------------|\n**URI**               | https://127.0.0.1:8080/games/\n**Synopsis**          | Get detailed information on all active games\n**HTTP Method**       | GET\n**Parameters**        | --\n**Success code**      | 200 OK\n**Success body**      | array(Game)\n**Error response**    | --\n**Error body**        | --\n**Requires Auth**     | N\n**Notes**             | If authenticated request is made from a user who is playing in the game, that player\u2019s \u201chole\u201d cards will be included in the response\n\n### Get information about a specific game\n\n|                     |       Details                 |\n---------------------:|-------------------------------|\n**URI**               |  https://127.0.0.1:8080/games/:gameID\n**Synopsis**          |  Get detailed information on game with :gameID\n**HTTP Method**       |  GET\n**Parameters**        |  --\n**Success code**      |  200 OK\n**Success body**      |  Game\n**Error response**    |  404 Not Found if can\u2019t find :gameID <br> 401 Unauthorized if auth credentials are invalid\n**Error body**        |  Error details (if applicable)\n**Requires Auth**     |  N\n**Notes**             |  If authenticated request is made from a user who is playing in the game, that player\u2019s \u201chole\u201d cards will be included in the response\n\n### Join a game\n|                     |       Details                 |\n---------------------:|-------------------------------|\n**URI**               | https://127.0.0.1:8080/games/:gameID/players/\n**Synopsis**          | Join game :gameID\n**HTTP Method**       | POST\n**Parameters**        | --\n**Success code**      | 201 Created if able to join game <br> 202 Accepted if table is full but game does exist\n**Success body**      | string(GUID)\n**Error response**    | 404 Not Found if can\u2019t find :gameID <br> 401 Unauthorized if auth credentials are invalid\n**Error body**        | Error details (if applicable)\n**Requires Auth**     | Y\n**Notes**             | --\n\n### Bet or Fold\n|                     |       Details                 |\n---------------------:|-------------------------------|\n**URI**               | https://127.0.0.1:8080/games/:gameID/players/:playerID/acts/\n**Synopsis**          | Place a bet or fold\n**HTTP Method**       | POST\n**Parameters**        | Act\n**Success code**      | 201 Created\n**Success body**      | --\n**Error response**    | 403 Forbidden if trying to act when it\u2019s not your turn <br> 404 Not Found if can\u2019t find :gameID or :playerID <br> 401 Unauthorized if auth credentials are invalid\n**Error body**        | Error details (if applicable)\n**Requires Auth**     | Y\n**Notes**             | --\n\n### Leave game\n|                     |       Details                 |\n---------------------:|-------------------------------|\n**URI**              | https://127.0.0.1:8080/games/:gameID/players/:playerID\n**Synopsis**         | Leave the game, forfeit winnings\n**HTTP Method**      | DELETE\n**Parameters**       | --\n**Success code**     | 200 OK\n**Success body**     | --\n**Error response**   | 404 Not Found if can\u2019t find :gameID or :playerID <br> 401 Unauthorized if auth credentials are invalid\n**Error body**       | Error details (if applicable)\n**Requires Auth**    | Y\n**Notes**            | -- \n\n## Types\n### Act\n**Fields**\n\n| Name                     | Type                 | Description     |\n---------------------------|----------------------|-----------------|\naction                   | int   | 0 for \"fold\", 1 for \"bet\"\nbetAmount                   | uint   | How much to bet\n\n### Game\n**Fields**\n\n| Name                     | Type                 | Description     |\n---------------------------|----------------------|-----------------|\ngameID           | string           | GUID for this game\ntable           | array(Player)           | Who is actively playing\nturn           | Turn           | Whose turn it is\ncards           | dict[string:array(string)]           | Dealt cards up to this point\npots           | array(Pot)           | Money bet so far.\n\n**Notes** <br>\nEach round will have at least one Pot. Some rounds might have multiple pots if side pots are needed. Pots are ordered chronologically earliest to latest\n\n### Player\n**Fields**\n\n| Name                     | Type                 | Description     |\n---------------------------|----------------------|-----------------|\nplayerID           | string           | GUID identifying player\nhandle           | string           | Player username\nstate           | string           | \u201cactive\u201d - Player needs to bet           <br> \u201cfolded\u201d - Player has folded their hand           <br> \u201ccalled\u201d - Player has called or raised\nwealth           | int           | Total money player has\nbet_so_far           | int           | Amount bet so far in round\nsmall_blind           | boolean           | Is this player small blind?\n\n### Turn\n**Fields**\n\n| Name                     | Type                 | Description     |\n---------------------------|----------------------|-----------------|\nplayerID    | string    | GUID identifying player\nbet_so_far    | int    | Amount bet so far in round\nbet_to_player    | int    | Total amount that must be matched to call\nminimum_raise    | int    | Minimum amount you can raise\nexpiry    | datetime    | Time you need to respond by in order to stay in the game\n\n### Cards Dictionary\n**Fields**\n\n| Name                     | Type                 | Description     |\n---------------------------|----------------------|-----------------|\nhole    | array(string)    | Player\u2019s hole cards. Only populated if request is authenticated\nflop    | array(string)    | Three cards dealt at the \u201cFlop\u201d\nturn    | array(string)    | Card dealt at the \u201cTurn\u201d\nriver    | array(string)    | Card dealt at the \u201cRiver\u201d\n\n**Notes** <br>\nflop, turn, and river are populated when the appropriate round is reached, and are otherwise null values. Cards are represented as strings of two characters. For example, the ace of spades is \u201cAS\u201d, the two of hearts is \u201c2H\u201d, and the ten of clubs is \u201cTC\u201d.\n\n### Pot\n**Fields**\n\n| Name                     | Type                 | Description     |\n---------------------------|----------------------|-----------------|\nsize     | int     | Amount of money in this pot\nplayers     | array(GUID)     | Players who have bet into this pot\n\n\n### Example JSON response \nRequest:\n\n```GET http://127.0.0.1:8080/games/fbbbbb44-bc4f-c3f6-6519-d81bd1a66d8a```\n\nResponse:\n```.json\n[\n   {\n      \"gameID\":\"fbbbbb44-bc4f-c3f6-6519-d81bd1a66d8a\",\n      \"table\":[\n         {\n            \"playerID\":\"2fd318e4-0947-64b9-8b63-14f5a5824b8b\",\n            \"handle\":\"\",\n            \"state\":\"active\",\n            \"wealth\":15002,\n            \"bet_so_far\":0,\n            \"small blind\":true\n         },\n         {\n            \"playerID\":\"0dd7d693-06f9-b5ba-694d-f8779579fa8a\",\n            \"handle\":\"\",\n            \"state\":\"active\",\n            \"wealth\":4006,\n            \"bet_so_far\":0,\n            \"small blind\":false\n         }\n      ],\n      \"turn\":{\n         \"playerID\":\"2fd318e4-0947-64b9-8b63-14f5a5824b8b\",\n         \"bet_so_far\":0,\n         \"bet_to_player\":0,\n         \"minimum_raise\":0,\n         \"expiry\":\"2014-09-24 15:14:53.021303798 -0400 EDT\"\n      },\n      \"cards\":{\n         \"hole\":[\n            \"AC\",\n            \"TD\"\n         ],\n         \"flop\":[\n            \"2S\",\n            \"3S\",\n            \"JS\"\n         ],\n         \"turn\":[\n            \"4D\"\n         ],\n         \"river\":[\n            \"AH\"\n         ]\n      },\n      \"pots\":[\n         {\n            \"size\":60,\n            \"players\":[\n               \"8c479795-adcb-a3c1-bebd-4bdf54016f4a\",\n               \"2fd318e4-0947-64b9-8b63-14f5a5824b8b\",\n               \"0dd7d693-06f9-b5ba-694d-f8779579fa8a\"\n            ]\n         },\n         {\n            \"size\":0,\n            \"players\":[\n               \"2fd318e4-0947-64b9-8b63-14f5a5824b8b\",\n               \"0dd7d693-06f9-b5ba-694d-f8779579fa8a\"\n            ]\n         },\n         {\n            \"size\":0,\n            \"players\":[\n               \"2fd318e4-0947-64b9-8b63-14f5a5824b8b\",\n               \"0dd7d693-06f9-b5ba-694d-f8779579fa8a\"\n            ]\n         }\n      ]\n   }\n]\n```\n\n\n"
 },
 {
  "repo": "chips-blockchain/pangea-poker",
  "language": "TypeScript",
  "readme_contents": "![Screenshot of Lightining CHIPS Poker](https://norbert.dev/chips_poker@2x.jpg)\n\n# Pangea Poker\n\n:warning: **Keep in mind that the game is in alpha stage. There is a risk of loosing funds.**\n\nPlay decentralized poker via the CHIPS blockchain.\n\nWe hope to release a publicly playable version in April. You can find the latest releases [here](https://github.com/chips-blockchain/pangea-poker/releases).\n\nCurrently, to play, you will need to run your own back-end nodes. We are working on a Docker container to make this easy, which is expected to ship in April. [Here](https://github.com/NOCTLJRNE/CHIPS-tuto/blob/master/README.md) you can find the old, complicated way of setting up the back-end nodes.\n\n## Development\n\n- Run `npm install` and `npm start` in the root folder This will fire up a web server and you can try the app via http://localhost:1234\n\n- Run `npm run electron-dev` to start the Electron app in development.\n\nRun `npm electron-pack` to package the app with electron-builder for MacOS, Windows and Linux.\n\n### Pre-push GitHook \n\nIn order not to fail Gitub CI all the time, set up a local git hook to check lint and run tests before a push to the repo.\n\n [Pre push Github docs](https://www.git-scm.com/docs/githooks#_pre_push)\n\n\n`nano ./.git/hooks/pre-push`\n\n```\nset -e\nnode_modules/eslint/bin/eslint.js './src/' --ext .js,.ts,.tsx\nnpm run test\n```\n\n`sudo chmod +x ./.git/hooks/pre-push`\n\n### State Management\n\nhttps://blog.logrocket.com/use-hooks-and-context-not-react-and-redux/\n\nGood video explaining redux vs context state management approach\nhttps://www.youtube.com/watch?time_continue=134&v=eBYJ7O482Dc&feature=emb_title\n\n### Developer Mode\n\nYou can activate developer mode and skip the startup modal by adjusting the `src/config/local.json`.\n\n### Environment variables in scripts\n\nREDUCER - adds extra logging from reducer to the console output.\n\n## Contributing\n\nPlease reach out to us via [Discord](https://discord.gg/NGPu4g) and check out the open [Issues](https://github.com/chips-blockchain/pangea-poker/issues).\n\n## Related links\n\n- [Backend repo](https://github.com/chips-blockchain/bet)\n- [Old back-end setup guide](https://github.com/NOCTLJRNE/CHIPS-tuto/blob/master/README.md)\n"
 },
 {
  "repo": "JaviSoto/SwiftPoker",
  "language": "Swift",
  "readme_contents": "# SwiftPoker\nExperimental implementation of Poker (Texas Hold'em) rules in Swift Lang\n"
 },
 {
  "repo": "wdi-sg/poker_refactor",
  "language": "Ruby",
  "readme_contents": "# Poker\n\nI've written a bunch of ugly code that makes the test pass. Your job will be to refactor the code.\n\nIndividual cards are described as a string with a combination of two characters:\n  * The first represents the value : A,2,3,4,5,6,7,8,9,T,J,Q,K\n  * The second represends the suit: s,h,d,c\n\nRemember the principles of good software design\n  * DRY\n  * Naming\n  * Test\n  * Small\n\nOther things to consider\n  * Formatting & Indentation\n  * Readability\n  * Consistency\n  * Encapsulation where appropriate\n  \n #### Running the code\n  ```\n  gem install rspec\n  ```\n  cd into the directory\n  ```\n  cd starter\n  ```\n  Run it.\n  ```\n  rspec\n  ```\n  \n#### Poker Hands\n![https://www.fgbradleys.com/images/poker_hands.gif](https://www.fgbradleys.com/images/poker_hands.gif)\n"
 },
 {
  "repo": "nberardi/consensus",
  "language": "JavaScript",
  "readme_contents": ""
 },
 {
  "repo": "hellomuthu23/planning-poker",
  "language": "TypeScript",
  "readme_contents": "\n<h1 align=\"center\">Planning Poker App</h1>\n\nFree / Open source Scrum/Agile Planning Poker Web App to estimate user stories for the Agile/Scrum teams. Create session and invite team members to estimate user stories efficiently. Intuitive UI/UX for voting the story points, showing team members voting status with emojis(\ud83d\udc4d - Voting Done, \ud83e\udd14 - Yet to Vote). Session Moderator has full control on revealing story points and restarting the session.\n\n<div align=\"center\">\n  \n[![Build and Tests](https://github.com/hellomuthu23/planning-poker/actions/workflows/build-and-tests.yml/badge.svg)](https://github.com/hellomuthu23/planning-poker/actions/workflows/build-and-tests.yml)\n[![Deploy to Firebase](https://github.com/hellomuthu23/planning-poker/actions/workflows/deploy-to-firebase-on-master.yml/badge.svg)](https://github.com/hellomuthu23/planning-poker/actions/workflows/deploy-to-firebase-on-master.yml)\n\n</div>\n\n## Live Site\n\n- <https://planning-poker-agile.web.app/>\n\n## Home Page\n\n<img src=\"docs/HomePage.jpg\"  />\n\n## Active Session\n\n<img src=\"docs/ActiveSession.jpg\"  />\n\n## Features\n\n1. Create new Session(Fibonacci or TShirt size)\n2. Join Session\n3. Invite Link\n4. Session controller - Moderator can Reveal and restart the session anytime.\n5. Reveal - Reveal the cards for all users\n6. Voting status - Users Cards show voting status using emojis - \ud83d\udc4d - Voting Done, \ud83e\udd14 - Yet to Vote\n\n## Tech Stack\n\n1. React - Frontend\n2. Material-ui - UI Components\n3. Firestore - Database\n4. Firebase - Hosting\n\n## How to run the app locally for development\n\n1. Clone the repo\n\n    ```bash\n    git clone https://github.com/hellomuthu23/planning-poker.git\n    ```\n\n2. Run `yarn` command to install the required npm package.\n3. Run `yarn start` to start the app.\n4. Access the app at `http://localhost:3000`.\n5. We use the same production database for local development too, so avoid creating too many new sessions and re-use existing one.\n\n## Development Guidelines\n\n1. Keep it simple as much as possible\n2. Add required unit tests\n3. Use strong type always\n4. Use functional and hooks based approach for components\n5. Avoid adding new colors\n6. Use css until we have scss in place\n7. Don't duplicate code and use service folder to keep non-component/shared codes\n\n## Pending features open to development\n\n1. Support for custom voting options\n2. Remove a user in session\n3. Add timer\n4. Export options\n5. Preserve history of voting and show it in session\n6. Provide option to enter user story name\n7. Make the default Session name random\n8. Delete Session\n\n## Tech Depts\n\n1. Add Semantic Release to generate changelog and release notes\n2. Add missing unit tests for services\n3. Add cookie notice\n"
 },
 {
  "repo": "cortesoft/PokerMatic",
  "language": "Ruby",
  "readme_contents": "h1. PokerMatic\n\nPokerMatic consists of two parts; a server and a set of bot libraries.  The server can be thought of\nas the virtual poker hall; it is in charge of setting up tables, giving chips to players, and dealing the cards.\nThe bot libraries can be thought of as the virtual poker players, playing at tables hosted by the server.\n\nh2. Setting up the dependencies\n\nBoth the PokerServer and PokerBots require the same following dependencies:\n\n* JRuby is recommended for threading performance\n** http://jruby.org/download\n** *If you choose not to use jruby, you may need to change the shebang line in the bin files*\n* Install the spire.io.rb gem (https://github.com/spire-io/spire.io.rb)\n** jgem install bundler\n** jgem install spire_io\n* Install OpenPGP and Gibberish (for encryption)\n** jgem install openpgp\n** jgem install gibberish\n\nh2. Setting up your config file\n\nBoth the server and client libraries read their settings from a file *config.rb*.  Make a copy\nof *config_example.rb* and name it *config.rb* in the root directory of PokerMatic.\n\nTo run a server, the only values that you need to set are *SPIRE_EMAIL* and *SPIRE_PASSWORD* This should be your spire.io\ncredentials.  (You can sign up for a spire.io account at http://www.spire.io/register.html)  If an account doesn't exist for that email,\na new account will be created.\n\nOnce the poker server is started (by running bin/poker_server), an *APP_KEY* will be displayed.\nThis is the value that clients will need in order to connect to the server.\nCopy the displayed line into your config file.  If you are connecting\nto a poker server running somewhere else, you will need their APP_KEY to connect.\n\nh2. Running a poker server\n\nStarting up the poker server is as simple as running bin/poker_server.  Since all communication \noccurs through spire.io, there is no need to worry about DNS, IP addresses, or port forwarding.\nThe only thing clients will need is the APP_KEY that is displayed when the server starts up.\n\nHere is an example output when a server starts up:\n\npre. >$ bin/poker_server.rb\nStarting up server\nServer running:\nAPP_KEY = 'Ap-JQY'\n\np. *Simply copy the last line printed into your config.rb file*\n\nh2. Connecting a bot to the server\n\nYou then have two ways to run a bot; as a single bot by running bin/bot or as a cluster of bots by running bin/bot_cluster.\nFirst make sure you have set your APP_KEY in your config.rb to match the server you are trying to\nconnect to, and then run either bin/bot or bin/bot_cluster; bin/bot will ask you which class of bot you want to run, while bin/bot_cluster\nwill ask how many bots of each class you want to run.  After the bots are created, you will be given the choice to either create a new table,\njoin an existing table, or join a tournament.\n\nHere is an example from bin/bot:\n\npre. >$ bin/bot\nChoose a bot:\n1: AllInBot\n2: HumanClient\n3: RandomBot\n4: SmartBot\n5: SuperSteadyBot\nChoose a bot class:\n> 2\nPlayer name?\n> Daniel\nTournament or table? (1 = tournament, 2 = table)\n\nh2. Creating and joining a table\n\nWith both bin/bot and bin/bot_cluster, after the bots are created you will be given the option to create or join a table:\n\npre. Tournament or table? (1 = tournament, 2 = table)\n> 2\nJoin an existing room or create a new one? type 'join' to join an existing room or the name of a room to create a new one\n> Awesome\nNumber of players to wait for before starting the table?\n> 5\n\np. This will create a table named 'Awesome' that will start once 5 people have joined\n\nTo join an existing table the process goes like this:\n\npre. Tournament or table? (1 = tournament, 2 = table)\n> 2\nJoin an existing room or create a new one? type 'join' to join an existing room or the name of a room to create a new one\n> join\nTable 1: Awesome Blinds 1 Min Players 5\nJoin which table?\n> 1\n\np. The bot will now join that table and wait for the table to start.\n\nh2. Creating and joining a tournament\n\nA PokerMatic tournament allows you to run a multi-table tournament with many bots competing against each other.  The tournament\ncode will take care of splitting players into tables of 10, rebalancing tables as players are eliminated, and also keep track\nof blind increases over time.  Each player starts with 5000 chips.  The tournament is over when only one bot remains!\n\nTo create a tournament, you need to use the admin tool. The admin tool will use the *SPIRE_EMAIL* and *SPIRE_PASSWORD* from your\nconfig.rb file, so make sure those values match the values that the server is using.\n\nThe easiest way to use it is from IRB.\n\npre. $> bin/admin\nTournament name?\n> Awesome Tournament\n1: Wed Feb 01 17:20:00 -0800 2012\n2: Wed Feb 01 17:21:00 -0800 2012\n3: Wed Feb 01 17:22:00 -0800 2012\n4: Wed Feb 01 17:23:00 -0800 2012\n5: Wed Feb 01 17:24:00 -0800 2012\n6: Wed Feb 01 17:25:00 -0800 2012\n7: Wed Feb 01 17:30:00 -0800 2012\n8: Wed Feb 01 17:35:00 -0800 2012\n9: Wed Feb 01 17:40:00 -0800 2012\n10: Wed Feb 01 17:45:00 -0800 2012\n11: Wed Feb 01 17:50:00 -0800 2012\n12: Wed Feb 01 18:50:00 -0800 2012\n13: Wed Feb 01 19:50:00 -0800 2012\n14: Wed Feb 01 20:50:00 -0800 2012\n15: Wed Feb 01 21:50:00 -0800 2012\nTime?\n> 3\nStarting Blinds?\n> 25\nIncrease blinds every how many seconds?\n> 600\n\np. This will create a tournament that starts at 5:22 PM with blinds starting at 25 and increasing every 10 minutes.\n\nTo join the tournament with a bot:\n\npre. Tournament or table? (1 = tournament, 2 = table)\n> 1\nTourney 1: Awesome Tournament Starting at Wed Feb 01 17:22:00 -0800 2012\nJoin which tourney?\n> 1\n\np. The bot will automatically be assigned to a table when the tournament starts.\n\nh2. Creating a client (bot)\n\nPokerMatic comes with a base class (PokerClientBase) that you can extend to create your own poker bots.  Bots are\nplaced in the /bots folder. Included are a few example bots to give you an idea of how a bot works.  Also included is a\nhuman_client, which is not really a bot but rather is a CLI client that asks a human for each move; you can use it to actually\nplay poker (albeit with a poor user interface).\n\nWhen subclassing PokerClientBase, there is only one method that MUST be defined: ask_for_move, which receives\na GameState object when it is called.  This function should return the move the client wants to take; valid moves are\n'fold', 'call', 'check', or an amount to bet. Note that all of these moves are not available at all times; you cannot check\nif a bet has already occurred, of course.  A list of available moves is accessible by calling #available_moves on the GameState\nobject (this will be explained in more detail below).\n\n*For your bot to be included as an available bot* when running bin/bot or bin/bot_cluster, just make sure the .rb file is in\nthe /bots directory and contains at least one class that is a subclass of PokerClientBase.  If you do this, it will automatically\nbe included as a bot option.\n\nh3. GameState\n\nThe GameState object that is passed to ask_for_move contains all of the information about the current hand being played\nand all of the players at the table.  It includes both a ruby representation of the JSON object that the poker server\nsends after each play at the table, as well as the pocket cards that the client has.\n\nThe information stored in a GameState object can be retrieved by either method call or hash.\nFor example, to access the current hand number, both of these will work:\n\ngame_state.hand_number\ngame_state['hand_number']\n\nHere is a list of all available attributes that the GameState object contains:\n\n*hand*\n\nAn array of the client's two pocket cards. For example:\n\n[{\"name\"=>5, \"suit\"=>\"Club\", \"value\"=>5, \"string\"=>\"5 of Clubs\"},\n   {\"name\"=>\"King\", \"suit\"=>\"Heart\", \"value\"=>13, \"string\"=>\"King of Hearts\"}]\n\n*hand_number*\n\nThe current hand number.  Starts at 1, each hand delt at a table increases this by one.\n\n*button*\n\nThe current position of the button (dealer) at the table.  Corresponds to the position in\nthe 'players' array (0 indexed).\n\n*players*\n\nAn array of hashes describing the players at the table.  For example:\n\n[{\"name\"=>\"Daniel\", \"bankroll\"=>506, \"id\"=>1804618},\n\t{\"name\"=>\"Rando\", \"bankroll\"=>494, \"id\"=>1804619}]\n\t\n*acting_seat*\n\nThe index of the currently acting player in the players array.\n\n*last_five_moves*\n\nAn array of (up to) the last 5 moves of the hand.  The most recent action is the last in the array.\nFor example:\n\n[\n\t{\"player\"=>1804618, \"action\"=>\"raise\", \"bet_amount\"=>3, \"current_total_bet\"=>4, \"pot\"=>6},\n  {\"player\"=>1804619, \"action\"=>\"raise\", \"bet_amount\"=>4, \"current_total_bet\"=>6, \"pot\"=>10},\n  {\"player\"=>1804618, \"action\"=>\"call\", \"bet_amount\"=>2, \"current_total_bet\"=>6, \"pot\"=>12}\n]\n\n*current_bet*\n\nThe total of the current bet.  This is the per player bet, not the total for the round.\n\n*minimum_bet*\n\nThe minimum bet a player can make.\n\n*player_bets*\n\nA hash of all the total bet each player has made in the current round, indexed by a string version\nof the player id.  For example:\n\n{\"1804618\"=> 6, \"1804619\" => 8}\n\n*available_moves*\n\nA hash of all the available moves a player has given the current state of the board and the players\nbankroll.  The key is the name of the move and the value is the cost to the player to take that move.  For example:\n\n{\"fold\"=>0, \"bet\"=>2, \"all_in\"=>494, \"check\"=>0}\n\nThe value for bet is the MINIMUM bet, but the bet can be anywhere between this value and the all_in value.\n\n*round_history*\n\nA complete history of the betting in the current round (pre-flop, flop, etc) in the same format as last_five_moves.  The most recent\naction is last.\n\n*phase_name*\n\nName of the current phase.  Possible values are 'New Hand', 'Pre-Flop', 'Flop', 'Turn', 'River'\n\n*phase*\n\nA numeric representation of the current phase.  Values are:\n\n0 - New Hand\n1 - Pre-Flop\n2 - Flop\n3 - Turn\n4 - River\n\n*players_waiting_to_join*\n\nA list of all players who wish to join the table.  If a player has money in their bankroll,\nthey will join the game at the start of the next hand.  This is also where players are placed after running\nout of money.\n\n*all_in*\n\nAn array of any players who are all in for the hand.  Each element of the array is a hash describing the player as\nwell as the size of the pot they are eligible for (due to side pots). For example:\n\n[\n\t{\"player\"=>{\"name\"=>\"Rando\", \"bankroll\"=>0, \"id\"=>1804619}, \"pot\"=>600},\n  {\"player\"=>{\"name\"=>\"Daniel\", \"bankroll\"=>0, \"id\"=>1804618}, \"pot\"=>1000}\n]\n\n*board*\n\nAn array describing the community cards.  Depending on the phase of the game, this will be either 0,3,4 or 5 cards.  For example:\n\n[\n\t{\"name\"=>5, \"suit\"=>\"Spade\", \"value\"=>5, \"string\"=>\"5 of Spades\"},\n  {\"name\"=>\"King\", \"suit\"=>\"Spade\", \"value\"=>13, \"string\"=>\"King of Spades\"},\n  {\"name\"=>\"Jack\", \"suit\"=>\"Diamond\", \"value\"=>11, \"string\"=>\"Jack of Diamonds\"}\n]\n\n*pot*\n\nThe current size of the pot\n\n*players_in_hand*\n\nAn array of the ids of players who are still in the hand (not folded).\n\n*acting_player*\n\nA hash describing the acting player. For example:\n\n{\"name\"=>\"Daniel\", \"bankroll\"=>494, \"id\"=>1804618}"
 },
 {
  "repo": "ChrisZieba/holdem",
  "language": "C++",
  "readme_contents": "# holdem\n\n[![Build Status](https://travis-ci.org/ChrisZieba/holdem.svg)](https://travis-ci.org/ChrisZieba/holdem) ![](https://img.shields.io/badge/license-MIT-blue.svg) ![](https://img.shields.io/badge/status-stable-green.svg)\n\n**holdem** is a heads-up (2 player) [Texas Hold'em](https://en.wikipedia.org/wiki/Texas_hold_%27em) simulator for hand ranges. It allows you to quickly calculate the total equity of your hand vs. a range of opponent hands. The simulations are calculated using `C++` via WebAssembly using up to `8` web workers in parallel. This is pretty bare bones as far as range evaluators go, and there are many improvements I would like to make if I hade more time, see below. \n\n[![MoodFuse](https://github.com/ChrisZieba/holdem/raw/master/common/demo.png)](http://chriszieba.com/2017/11/26/holdem)\n\nDemo\n---\n\n[http://chriszieba.com/2017/11/26/holdem](http://chriszieba.com/2017/11/26/holdem)\n\nInstalling\n---\n\n```\nmake wasm\n```\n\nCalling `make` will place the compiled wasm and a javascript \"glue\" file into the `/build` directory. You can then include those files on a webserver and just open the `index.html` page to get up and running.\n\n\nFAQ\n---\n* Why did you make this?\n  > I put this together as a weekend project to learn more about `WebAssembly`.\n\n* What's a simulation?\n  > A simulation plays a hand out as if the players are all in and no action is left. For example, if the board only has 3 cards (flop) and you run the simulation, the board will complete (turn and river) for every possible combination of hands in the oppoopenet range vs. the hero hand.\n\n* What does this use to compile to `wasm`?\n  > [emscripten](https://github.com/kripken/emscripten)\n\n* Why don't you use the `--proxy-to-worker` option from `emscripten`?\n  > I tried using this flag, but the `.js` file it produced was quite large and I could not get the message passing to work to the main thread.\n\n* Why doesn't this use a faster library for hand comparisons?\n  > There are many great options for an extrememly fast 7-card hand evaluator, but they all come with a large pre-computed table. Using a pre-computed table of values requires a large download (~100mb) before the app can be run, is not a great option for a web facing product. The speed difference between the [library](https://github.com/kennethshackleton/SKPokerEval) used in this app and other more well known libraries is not significant enough to justify the huge table downloads.\n\n* How many simulations can this run?\n  > Depends on the system architecture, but with `8` workers it should run about `20` million simulations a second.\n\n* What browsers does this work on?\n  > So far, I've tested on the following browsers  \n  > \n  >  * FireFox 57 (Mac OS 10, Ubuntu 16.04, Windows 10)\n  >  * Chrome 61 (Mac OS 10, Windows 10, Android 6)\n  >  * Safari 11 (Mac OS 10)\n  >  * Microsoft Edge 16 (Windows 10)\n\n\nTests\n---\n\n```\nmake tests\n```\n\n\n# Improvements\n\nThis was a weekend project for me, and as such a lot of corners were cut. If I had more time I would go back and improve a lot of things.\n\n- Faster card selector (remove select drop downs)\n- Better way to select multiple ranges (click & drag to highlight multiple cells)\n- Would like to add a lib like react to handle the state changes, and remove all the event listeners everywhere\n- Use `SIDE_MODULE` to load wasm as [side module](https://github.com/kripken/emscripten/wiki/Linking)\n- Loading the wasm is currently not optimal, a much better apprach would be to compile the wasmm and pass the bytes into the worker, something like this\n\n  ```\n     fetch('go.wasm').then(response =>\n       response.arrayBuffer()\n     ).then(bytes =>\n       WebAssembly.compile(bytes)\n     ).then(mod => {\n       worker1.postMessage(mod);\n       worker2.postMessage(mod);\n     });\n  ```\n\n- As far as I know, WASM does not support pthreads (although there seem to be some emcc` flgas realted to it) but it would be nice if the `C++` futures async library could be used as\na possible replacement for web workers. The simulation code could then be changed to something like this:\n\n  ```\n    std::vector<std::future<int>> futures;\n\n    for (int i = 0; i < COMBOS; i+=1) {\n      futures.push_back (std::async([]() {\n        // Run the simulation loop in new thread for each hand combination\n      } , heroCards[0], ...));\n    }\n\n    for(auto &e : futures) std::cout << e.get() << std::endl;\n  ```\n\n- better data transfering between workers, use of sharedArray\n"
 },
 {
  "repo": "ericdke/PokerHands",
  "language": "Swift",
  "readme_contents": "See the new version at https://github.com/ericdke/PokerHands2\n\n---\n\n\n![](https://img.shields.io/badge/Swift-4.2-green.svg?style=flat)\n\n## Holdem Poker Hand Simulator\n\nMixing several techniques in Swift to evaluate a Holdem poker hand.\n\n![Swifty Poker Hands](https://monosnap.com/file/cvebqCKISBpZDNwpN6cKarT6QDmx6S.png)\n\n## Techniques\n\n- Compute a rank for each card\n\n- Compute a rank for each possible 5 cards hand\n\n- Permutations of all possible hands of 5 cards among the 7 cards in play\n\n- Sort, filter, deduplicate the results\n\n- Compare ranks by byte matching\n\n- Reorder and extract results\n\n## Demo app\n\nA table view of a two-player hands simulator. Two players, with random or custom cards, go all-in each round.\n\nThere's a binary in the Resources folder.\n\n## Credits\n\nOriginal cards images are from [Playing Cards iOS Assets](https://github.com/hayeah/playing-cards-assets).\n\nThe 2-cards and 5-cards hand ranking algorithms are adapted from [swift-poker-hand-evaluator](https://github.com/s4nchez/swift-poker-hand-evaluator).\n\nSome collection operations are adapted from [ExSwift](https://github.com/pNre/ExSwift).\n"
 },
 {
  "repo": "Fossana/cplusplus-cfr-poker-solver",
  "language": "C++",
  "readme_contents": "This solver is based on the same algorithms as https://github.com/Fossana/discounted-cfr-poker-solver but this implementation is 2-3x faster due to code optimizations and the use of C++.\n\nUses the intel threading building blocks library.\n\nHandRanks.dat can be found here: https://github.com/christophschmalhofer/poker/blob/master/XPokerEval/XPokerEval.TwoPlusTwo/HandRanks.dat\n"
 },
 {
  "repo": "monicanagent/cypherpoker.js",
  "language": "JavaScript",
  "readme_contents": "<p align=\"center\"><img src=\"https://user-images.githubusercontent.com/9059336/53623709-de91ae80-3bcb-11e9-88ec-e3395fd06152.png\"></p>\n<p align=\"center\"><a href=\"https://github.com/monicanagent/cypherpoker.js/commits/master\"><img src=\"https://img.shields.io/github/last-commit/monicanagent/cypherpoker.js.svg\"/></a> <a href=\"https://github.com/monicanagent/cypherpoker.js/releases\"><img src=\"https://img.shields.io/github/release/monicanagent/cypherpoker.js.svg\"/></a> <a href=\"https://github.com/monicanagent/cypherpoker.js/issues\"><img src=\"https://img.shields.io/github/issues/monicanagent/cypherpoker.js.svg?style=flat-square\"/></a> <a href=\"https://www.codetriage.com/monicanagent/cypherpoker.js\"><img src=\"https://www.codetriage.com/monicanagent/cypherpoker.js/badges/users.svg\"/></a>\n</p>\n<p>CypherPoker.JS is a complete, white label, peer-to-peer poker platform that incorporates a flexible and highly customizable web / desktop game client, powerful P2P communication capabilities, account management system with database integration and extensible API services, automated cryptocurrency and wallet functionality, and much more.</p>\n\n\n<p>The open-source software stack makes extensive use of cutting-edge <a href=\"https://www.ecma-international.org/ecma-262/8.0/\">browser technologies</a> and desktop (<a href=\"https://nodejs.org/en/\">Node.js</a> / <a href=\"https://electronjs.org/\">Electron</a>) runtime environments.</p>\n\n<p>CypherPoker.JS is written by <a href=https://github.com/monicanagent/\">the same author</a> as the <a href=\"https://github.com/monicanagent/cypherpoker\">original ActionScript CypherPoker project</a> and employs many of the same features including the SRA cryptosystem and game / peer protocols as <a href=\"https://github.com/monicanagent/cypherpoker/wiki\">described in the original wiki</a>.</p>\n\n***\n<p align=\"center\"><img src=\"https://user-images.githubusercontent.com/9059336/53627116-94152f80-3bd5-11e9-8639-02819305018d.png\"/></p>\n\n<p align=\"center\">\n<b>You can try out the web demo here:<br/><a href=\"https://monicanagent.github.io/cypherpoker.js/demo/web/\">https://monicanagent.github.io/cypherpoker.js/demo/web/</a></b><br/>\n<br/>\n<b>Tagged releases, builds, and native installers can be found here:<br/><a href=\"https://github.com/monicanagent/cypherpoker.js/releases\">https://github.com/monicanagent/cypherpoker.js/releases</a></b>\n</p>\n\n***\nThe [CypherPoker.JS wiki](https://github.com/monicanagent/cypherpoker.js/wiki) is a good place to get started with the code. It includes a [simple and complete guide](https://github.com/monicanagent/cypherpoker.js/wiki/Building-and-Running-CypherPoker.JS-for-Desktop) detailing how you can build and run CypherPoker.JS for Desktop (Windows, macOS, Linux).\n\nWhen you're ready to customize the software further, the latest code documentation can be found here:\n\nBrowser (client): [https://monicanagent.github.io/cypherpoker.js/web/0.5.1/](https://monicanagent.github.io/cypherpoker.js/web/0.5.1/)<br/>\nNode.js (server): [https://monicanagent.github.io/cypherpoker.js/server/0.5.1/](https://monicanagent.github.io/cypherpoker.js/server/0.5.1/)<br/>\nDesktop (Electron): [https://monicanagent.github.io/cypherpoker.js/desktop/0.5.1/](https://monicanagent.github.io/cypherpoker.js/desktop/0.5.1/)\n***\n<p align=\"center\">Something you can't find? Just feel like chatting? Drop by the Telegram group!<br/>\n<a href=\"https://t.me/cypherpokerjs\" target=\"_blank\"><img src=\"https://img.shields.io/static/v1.svg?style=for-the-badge&logo=telegram&label=TELEGRAM&message=CypherPoker.JS%20Group&color=blue\" /></a></p>\n\n***\nCypherPoker.JS uses [semantic versioning](https://semver.org/).\n"
 },
 {
  "repo": "tom555cat/Poker2048",
  "language": "Objective-C",
  "readme_contents": "# Poker2048\n\n\u57fa\u4e8e2048\u7684\u6e38\u620f\u89c4\u5219\uff0c\u5c06\u6251\u514b\u7684\u6e38\u620f\u65b9\u6cd5\u878d\u5408\u8fdb\u6765\u3002\u901a\u8fc7\u6a2a\u7ad6\u6ed1\u52a8\uff0c\u53ef\u4ee5\u5bf9\u5b50\uff0c\u540c\u82b1\u548c\u987a\u5b50\u6d88\u9664\u6389\u3002\n\n\u6e38\u620f\u4e3b\u754c\u9762\n![Image text](https://raw.githubusercontent.com/tom555cat/pictures/master/Simulator%20Screen%20Shot%202017\u5e745\u670818\u65e5%20\u4e0b\u53485.27.50.png)\n\n\u5361\u80cc\u5c55\u793a\u754c\u9762\n![Image text](https://raw.githubusercontent.com/tom555cat/pictures/master/Simulator%20Screen%20Shot%202017\u5e745\u670818\u65e5%20\u4e0b\u53485.28.02.png)\n"
 },
 {
  "repo": "ZenithPoker/ZippySolver",
  "language": "C++",
  "readme_contents": "# ZippySolver \n\nAn open source solver developed by the Zenith Poker community.\n\n# Installation\n\nThe instructions here are for Windows 10.\n\n1.  Install the Windows Subsystem for Linux:\n\n    Run the following command in Windows Powershell:\n\n    ```powershell\n    Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux\n    ```\n\tThis will require a restart.\n\t\n2.  Install Ubuntu Linux from the Windows Store. Currently this is version\n    20.04::\n\n    Open up the Windows Store. Search for Ubuntu. Open up Ubuntu and press \"Get\"\n    to install this.\n\n3.  First time run of Ubuntu:\n\n    Click on the Start Button and choose the Ubuntu icon. Wait until the distro installs. \n\tProvide a username and password for the default user account. \n\t\n\tNote that this account is a member of the Linux administrators (sudo) group so choose a secure username and password combination.\n\n4.  Update / Upgrade packages (optional step)\n\n    ```bash\n    sudo apt-get update\n    sudo apt-get upgrade\n    ```\n\n5.  Install ZippySolver through git:\n\n    ```bash\n    git clone https://github.com/ZenithPoker/ZippySolver\n    cd ZippySolver/ZippyEngine\n    ```\n\t\n6.\tBuild whatever binaries you need from the top level. For example:\n\n\t```\n\tmake bin/build_hand_value_tree\n\t```\n\n7.\tTODO\n"
 },
 {
  "repo": "cornernote/autoit-poker_bot",
  "language": null,
  "readme_contents": "----------------------------------\nAutoIT Poker Bot\n----------------------------------\n\nCopyright (C) 2012 cornernote, Brett O'Donnell <cornernote@gmail.com>\n\nSource Code: https://github.com/cornernote/minetest-autoit-poker_bot\n\n\n\n----------------------------------\nLicense\n----------------------------------\n\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation; either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License along\nwith this program; if not, write to the Free Software Foundation, Inc.,\n51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\n\n\n----------------------------------\nDESCRIPTION\n----------------------------------\n\nAutoIT Poker Bot is a program written in AutoIT which attempts to fully automate the process of playing texas holdem poker.\n\n\n----------------------------------\nFEATURES\n----------------------------------\n\nOnce worked on some social poker sites.\n100% automated, joins tables, closes popups, reloads when stuck.\nFull SourceCode available to download.\nWorks in any size table with any bankroll.\nPlays the best hands, and then calculates odds to make decisions.\nAllows custom PlayerProfiles.\nTable hop if too few opponents.\nTable hop if the blinds are too big or too small.\nAllows custom user image.\nDetects number of opponents.\nRun multiple BackgroundBots."
 },
 {
  "repo": "gorel/C-Poker-AI",
  "language": "C",
  "readme_contents": "C-Poker-AI\n==========\n\nUpdate 2/4/2015: I finally got a chance to work on this again.  I've drastically increased the number of games I'm able to simulate when I found out that rand() isn't thread-safe.  I'm kind of surprised it has never been mentioned in any of my CS classes, and it makes me wonder how many other people are unaware of this.  Anyways, I've seen at least a 10-fold increase in how many games can be simulated.  Next time I get the chance to play around with this, I hope to improve the AI some more by adding in some machine learning.  Currently, the AI uses some hard-coded values for its logic.  I would like to find some good heuristics to use and change the AI to work like an SVM (or at least a Perceptron).\n\nFirst I made a poker AI in Ruby... not fast enough!\nThen I made another in Python... still too slow!\nSo this is my third poker AI written entirely in C using the 2+2 hand evaluator algorithm.\n\nThe HANDRANKS.DAT file needs to be generated from the given XPokerEval.TwoPlusTwo project.  You can find the source code for this at https://github.com/christophschmalhofer/poker/blob/master/XPokerEval/XPokerEval.TwoPlusTwo/\n\nI'm using libcurl to handle HTTP GET and HTTP POST in order to interact with any poker server.  urlconnection.[ch] also provides the ability to convert this data into a JSON format using cJSON.\n\nThe AI uses Monte Carlo simulations to simulate as many games as it can before the timeout threshold is reached.  It spawns pthreads to do this work concurrently, which allows quite a few more games to be simulated in the time limit.\n\nAfter doing some testing, the AI is able to simulate between 0.75M and 10M games per second on a mid-level laptop.  I have greatly improved the logging of the AI's choices to make it easy for someone to fine-tune their AI logic and see how it performs.  Here is an example of the output:\n```\nHand    Community\n3S TH   4D JH AS 8S\nCurrent pot: 14100\nMe:\n        initial_stack= 4176, call_amount=  947\n                stack= 1392, current_bet= 2784\nOpponents:\n      Will: initial_stack= 2096, stack= 1398, current_bet=  698\n   Charlie: initial_stack= 4298, stack= 3691, current_bet= 1138\n    Thomas: initial_stack= 4013, stack= 3578, current_bet=  435\n    Oliver: initial_stack= 9380, stack=  335, current_bet= 9045\nSimulated 4.184M games.\nWin probability: 1.33%\nRate of return:  0.21\nACTION: FOLDING\n```\n\nThis is the output that will be generated if the AI's logging level is set to LOGLEVEL_INFO.  When set to LOGLEVEL_NONE, you will see no output.  When set to LOGLEVEL_DEBUG, additional information about thread spawning will be available, including an identifier for each thread indicating when they start and stop, as well as how many games each thread was able to simulate.\n\nMonte Carlo Simulation\n======================\nUsing the AI Logic Test, it is easy to determine how efficient your machine is at simulating games using cat, grep, and the R programming language.\n\nFirst, extract the number of simulations from ailogictest.log using tools like cat, grep, cut, sed, etc.  Send this to a new file.\nThen, provided R is installed on your machine, you can use this command to get statistics about the results:\n```R -q -e \"x <- read.csv('OUTPUT.TXT', header = F); summary(x); sd(x[ , 1])\"```\nwhere OUTPUT.TXT is the name of the new file you created.\nThis will give you the five number summary and standard deviation of your results.  Here is what I have received when running AI Logic Test with numtrials=100 (Note: numbers represent millions of games simulated):\n```\nMin.   :0.703\n1st Qu.:3.993\nMedian :4.928\nMean   :4.864\n3rd Qu.:6.363\nMax.   :8.575\n[1] 2.220754\n```\n\nAI Logic Test\n=============\nThe AI Logic Test is useful for refining the logic used by the AI when making the fold/call/raise decision.  The test will create a random game state and ask the AI for its decision.  It will then simulate the rest of the game to see if the AI made the right choice or not.  With this information, it is easy to refine the bounds for when the AI should fold, call, or raise.\n\nAt the end of the test, a table like the following will be output:\n```\nResults:\nFolding:     24982 (33 wins,  3 losses,  0 unlucky)\nCalling:    114857 (13 wins, 22 losses, 11 unlucky)\nRaising:    144814 (13 wins,  4 losses,  1 unlucky)\n\nAverage logic score:  2846\n```\n\nNote that it is expected to have many \"Call\" losses if the AI could potentially win a lot of money and it doesn't cost much to play.\nExample:\n```\nAI must call 100 for a potential pot of 20k\n```\n\nPoker Server\n============\nI've been playing around with Python a little bit, and I realized it is ridiculously easy to write a server that supports CGI with it (import CGIHTTPServer, obviously).  In src/pokerserver, you'll find server.py, which starts a server on the local machine.  It takes an optional parameter representing the port the server should run on (or it will default to 9313).  The server will then take HTTP requests at that hostname and port and allow users to calculate their win probabilities in various situations.\n\nYes, I know I'm awful at web development.  I know there are ways to do some of the things easier, but I was looking for an easy way to get something running without having to install any other dependencies -- all you need is Python!\n\nNote: Be sure to set the location of the winprob binary in pokerserver/cgi/poker.py.  I made mine an absolute link in case I decide to move where the server code is.\n"
 },
 {
  "repo": "lxr1907/pokers-server",
  "language": "Java",
  "readme_contents": "# texas\ntexas holdem poker and three card poker games. \n\nA poker client useing html,jquery,websocket,canvas. \n\nOnly contains login,regist,three basic play rooms,rank by chips. \n\nYou can see this project at the website below. \n\nhttp://120.26.217.116:8080/texas/texasIndex.html. \n\n\u5fb7\u5dde\u6251\u514b\u7684\u670d\u52a1\u7aef\u4ee3\u7801\uff0c \n\n\u5305\u542b\u4e86\u5fb7\u5dde\u6251\u514b\u548c\u6b22\u4e50\u62fc\u4e09\u5f202\u4e2a\u6e38\u620f\u7684\u5ba2\u6237\u7aef\u90e8\u5206\u3002 \n\n\u5305\u542b\u767b\u9646\u6ce8\u518c\u529f\u80fd\uff0c\u7b79\u7801\u6392\u884c\u699c\uff0c\u5fb7\u5dde\u6251\u514b\u4ec5\u67093\u79cd\u4e0b\u6ce8\u989d\u5ea6\u7684\u623f\u95f4\u3002 \n\n\u53c2\u8003\u6548\u679c\u5730\u5740\n1\u5fb7\u5dde\uff1a\nhttp://120.26.217.116:8080/texas/texasIndex.html \n\n2\u62fc\u4e09\u5f20\uff1a\nhttp://120.26.217.116:8080/texas/threeCard.html\n\n\u5ba2\u6237\u7aef\u4ee3\u7801\u5730\u5740https://github.com/lxr1907/pokers.git\n"
 },
 {
  "repo": "wkantaros/cloudpoker",
  "language": "JavaScript",
  "readme_contents": "# cloudpoker\n\n[cloudpoker.io](https://cloudpoker.io) is a fully functional poker server built on React and Node.js with Socket.io.\n\n\n"
 },
 {
  "repo": "ethansbrown/acpc",
  "language": "C",
  "readme_contents": "# acpc\nProjects related to Annual Computer Poker Competition\n"
 },
 {
  "repo": "fattigerlee/poker",
  "language": "Go",
  "readme_contents": "\n"
 },
 {
  "repo": "Monadical-SAS/oddslingers.poker",
  "language": "JavaScript",
  "readme_contents": "# Oddslingers Gaming [![Codecov](https://codecov.io/gh/monadical-sas/oddslingers.poker/branch/dev/graph/badge.svg?token=FUrKdNe6wp)](https://codecov.io/gh/monadical-sas/oddslingers.poker) [![License: LGPL v3](https://img.shields.io/badge/License-LGPL%20v3-blue.svg)](https://www.gnu.org/licenses/lgpl-3.0)\n\u2665\ufe0f\ud83c\udcb1\u2663\ufe0f\ud83c\udcd1\u2666\ufe0f\ud83c\udcc1\u2660\ufe0f\ud83c\udca1\u2665\ufe0f\ud83c\udcb1\u2663\ufe0f\ud83c\udcd1\u2666\ufe0f\ud83c\udcc1\u2660\ufe0f\ud83c\udca1\u2665\ufe0f\ud83c\udcb1\u2663\ufe0f\ud83c\udcd1\u2666\ufe0f\ud83c\udcc1\u2660\ufe0f\ud83c\udca1\u2665\ufe0f\ud83c\udcb1\u2663\ufe0f\ud83c\udcd1\u2666\ufe0f\ud83c\udcc1\u2660\ufe0f\ud83c\udca1\u2665\ufe0f\ud83c\udcb1\u2663\ufe0f\ud83c\udcd1\u2666\ufe0f\ud83c\udcc1\u2660\ufe0f\ud83c\udca1\u2665\ufe0f\ud83c\udcb1\u2663\ufe0f\ud83c\udcd1\u2666\ufe0f\ud83c\udcc1\u2660\ufe0f\n\n## Project Quickstart\n\n```bash\n# make sure you've installed docker: https://docs.docker.com/engine/install/\n# and docker-compose: https://docs.docker.com/compose/install/\n# you may also have to add your user to the docker group: https://docs.docker.com/engine/install/linux-postinstall/\n\ngit clone https://github.com/monadical-sas/oddslingers.poker.git\ncd oddslingers.poker\n\n# Add to /etc/hosts  ->   127.0.0.1    oddslingers.l\n\ndocker-compose run django ./manage.py migrate\ndocker-compose run django ./manage.py createsuperuser\ndocker-compose up\n\n# Open http://oddslingers.l\n```\n\n## Commands\n\nFrom here, you could begin to do changes in the codebase and to run these commands for developing tasks:\n\n```bash\n# For installing yarn packages\ndocker-compose run --rm django oddslingers yarn_install\n# For testing\ndocker-compose run --rm django oddslingers testpy\ndocker-compose run --rm django oddslingers testjs\n# For linting\ndocker-compose run --rm django oddslingers lintpy\ndocker-compose run --rm django oddslingers lintjs\n# For rebuilding docker images and update the python packages\ndocker-compose build\n```\n\nSome useful docker-compose commands:\n```bash\n# Start the stack\ndocker-compose start\n# Stop the stack\ndocker-compose stop\n# List the services\ndocker-compose ps\n# Init the stack\ndocker-compose up\n# Destroy the stack (This delete the docker containers)\ndocker-compose down\n# Build the docker images\n```\n\n## Documentation\n \n - [Setup: Dev](https://github.com/monadical-sas/oddslingers.poker/wiki/Setup:-Dev) or [Setup: Prod](https://github.com/monadical-sas/oddslingers.poker/wiki/Setup:-Prod)\n - [Layers of the Stack](https://github.com/monadical-sas/oddslingers.poker/wiki/Layers-of-the-Stack)\n - [Quickstart & Common Tasks](https://github.com/monadical-sas/oddslingers.poker/wiki/Common-Tasks)\n - [Project Directory Structure](https://github.com/monadical-sas/oddslingers.poker/wiki/Folder-Locations)\n - [Configuration](https://github.com/monadical-sas/oddslingers.poker/wiki/Configuration)\n - [Running Tests & Linters](https://github.com/monadical-sas/oddslingers.poker/wiki/Running-Tests-&-Linters)\n - [Dependency Documentation](https://github.com/monadical-sas/oddslingers.poker/wiki/Dependency-Documentation)\n - [Game Engine Documentation](https://github.com/monadical-sas/oddslingers.poker/wiki/Game-Engine)\n - [Style Guide](https://github.com/monadical-sas/oddslingers.poker/wiki/Style-Guide)\n - [Debugging & Profiling Tools](https://github.com/monadical-sas/oddslingers.poker/wiki/Debugging-&-Profiling-Tools)\n - [Git Flow & Making Pull Requests](https://github.com/monadical-sas/oddslingers.poker/wiki/Git-Flow)\n\nWe use the Github [Wiki](https://github.com/monadical-sas/oddslingers.poker/wiki) for documentation, head over there for more info...\n\n## Issue Tracking\n\nTo get started, check out some of our \"Green Light\" issues in the [issue tracker](https://github.com/monadical-sas/oddslingers.poker/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+label%3A%22green+light%22+).\n\nOr, look for issues to work on in your [Project Board](https://github.com/monadical-sas/oddslingers.poker/projects).\n\n\u2665\ufe0f\ud83c\udcb1\u2663\ufe0f\ud83c\udcd1\u2666\ufe0f\ud83c\udcc1\u2660\ufe0f\ud83c\udca1\u2665\ufe0f\ud83c\udcb1\u2663\ufe0f\ud83c\udcd1\u2666\ufe0f\ud83c\udcc1\u2660\ufe0f\ud83c\udca1\u2665\ufe0f\ud83c\udcb1\u2663\ufe0f\ud83c\udcd1\u2666\ufe0f\ud83c\udcc1\u2660\ufe0f\ud83c\udca1\u2665\ufe0f\ud83c\udcb1\u2663\ufe0f\ud83c\udcd1\u2666\ufe0f\ud83c\udcc1\u2660\ufe0f\ud83c\udca1\u2665\ufe0f\ud83c\udcb1\u2663\ufe0f\ud83c\udcd1\u2666\ufe0f\ud83c\udcc1\u2660\ufe0f\ud83c\udca1\u2665\ufe0f\ud83c\udcb1\u2663\ufe0f\ud83c\udcd1\u2666\ufe0f\ud83c\udcc1\u2660\ufe0f\n"
 },
 {
  "repo": "Hazem-Ben-Khalfallah/scrum-poker-planning",
  "language": "Java",
  "readme_contents": "[![codecov](https://codecov.io/gh/Hazem-Ben-Khalfallah/scrum-poker-planning/branch/master/graph/badge.svg)](https://codecov.io/gh/Hazem-Ben-Khalfallah/scrum-poker-planning) \n[![Build Status](https://travis-ci.org/Hazem-Ben-Khalfallah/scrum-poker-planning.svg?branch=master)](https://travis-ci.org/Hazem-Ben-Khalfallah/scrum-poker-planning)\n[![Maintainability](https://api.codeclimate.com/v1/badges/d48d7dd87ff36de3b049/maintainability)](https://codeclimate.com/github/Hazem-Ben-Khalfallah/scrum-poker-planning/maintainability)\n\n![scrum-poker-planning](https://socialify.git.ci/Hazem-Ben-Khalfallah/scrum-poker-planning/image?description=1&descriptionEditable=A%20team%20friendly%20and%20realtime%20Scrum%20poker%20planning%20web%20app.&font=Raleway&forks=1&language=1&owner=1&pattern=Circuit%20Board&pulls=1&stargazers=1&theme=Dark)\n\n# Scrum Poker application\nVote your stories instantly & get the result in a blink!\n\nScrum Poker is a powerful tool to make faster and more accurate estimations and most important of all, no developer influences his team mates!\n\nThis app can be used in scrum poker planning sessions anywhere. It includes the numbered cards along with Pass, break and ? cards. 3 types of cards set can be selected when creating a voting session.\n\n## Demo\nYou are welcome to use this free app on: \nhttp://pokerscrum.herokuapp.com/\n\n## How to run locally\n### Prerequisites \n- **Docker** & **Docker Compose**: [How to install Docker compose?](https://docs.docker.com/compose/install/)\n\n### Build and Run \n1- Use docker compose to build a docker image and run the app in a container\n```bash\ndocker-compose up\n```\n\n2- Open your preferred browser and go to [localhost:28080](localhost:28080) \n\n## How to use this app\n1- In login page, click on **New Session** button to configure a new Poker planning session\n\n2- Configure your new Poker planning session\n* select you voting cards type\n    * **Time**: to estimate time in hours, days ...\n    * **Fibonacci**: to estimate your stories based on story points using Fibonacci sequence numbers\n    * **Modified Fibonacci**: to estimate your stories based on story points Modified Fibonacci sequence numbers\n* *[Optional]* configure a suffix to your stories names. For example, if you set the value of this field to *jira-*, all the stories that will be created next well be named *jira-xxx*.\n* *[Optional]* select a card theme. It makes the voting funnier!\n* *[Optional]* If you already know your stories ids or names before starting the voting session, you can enter them in the text area.\nDon't forget to click on **Convert to stories** button to generate the stories.\n\n![Configuration dashboard](./snapshots/planning-poker-configuration.jpg)\n\n3- After finishing the configuration, you can click on **save & start** button to start the new session. You'll be asked to enter your name that will be displayed during the voting session.\n\n4- You should be redirected to the Poker planning session dashboard where your team members can cast their votes. \nIn order to let them join your new session, you should send them the session Id.\n\n![Share the current session id](./snapshots/share.jpg)\n\n5- If you have not already created stories in configuration step, you can add a story name or id by entering a value in the following inputText. \nA new task will be added into the list with the prefix defined in the configuration step. \n\n![Share the current session id](./snapshots/add-story.jpg)\n\n6- Every team member can cast a vote if they click on a story from the list and select a card. Votes can be changed until the voting session has been ended manually by the session admin.\n\n![Voting on a Story](./snapshots/vote-in-progress.jpg)\n\n7- When everyone has finished voting, the session admin (the user who have created and configured the session) can stop the voting by clicking on **End vote** button. \nResults will be revealed to everyone right after that.\n\n![Display results](./snapshots/vote-results.jpg)\n\n## War file generation for Openshift\nFor all WebSocket connections on OpenShift, you need to use port 8000 (for Secured sessions it would be 8443).\nyou should generate a war file using following command.\n```bash\nmvn clean install -Dconfigure.ws=8000 -Dconfigure.wss=8443\n```\n\n## Developed by\n- Hazem Ben Khalfallah\n- Khaireddine Rezgui\n\n## Credits\nSpecial thanks to Redbooth team for their [creative card set](https://github.com/redbooth/Scrum-poker-cards).\n\nChris Aguilar for his [vector playing cards](https://sourceforge.net/projects/vector-cards/).\n"
 },
 {
  "repo": "bcldvd/real-time-planning-poker",
  "language": "CSS",
  "readme_contents": "# Real Time Planning Poker \n\nGot no playing cards to do your planning poker ? No worries, in **less than 5 minutes** form now, you'll be ready to plan !\n\n![Alt](http://f.cl.ly/items/1N1E1J2S3E2g163x033U/Capture%20d%E2%80%99e%CC%81cran%202014-02-27%20a%CC%80%2015.38.58.png)\n\n![Alt](http://f.cl.ly/items/3l1S1e0j0C3U3y25092J/Capture%20d%E2%80%99e%CC%81cran%202014-02-27%20a%CC%80%2015.39.38.png)\n\n![Alt](http://f.cl.ly/items/3b043n3P3J372H2f1l0v/Capture%20d%E2%80%99e%CC%81cran%202014-02-27%20a%CC%80%2012.45.50.png)\n\n![Alt](http://f.cl.ly/items/031l0G3t2E0u3A3P1N0E/Capture%20d%E2%80%99e%CC%81cran%202014-02-27%20a%CC%80%2012.47.07.png)\n\n## Table of Contents\n\n- [Features](#features)\n- [Prerequisites](#prerequisites)\n- [Getting Started](#getting-started)\n- [TODO](#todo)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Features\n\n- Random name given to new client\n- Change name\n- Change User Stories\n- Reveal cards\n- Play again\n- Change themes on-the-fly\n- Multi-room\n- Theme and name saved into localStorage\n- Facebook like Chat\n- Deployed on Heroku\n\n## Prerequisites\n\n- [Node.js](http://nodejs.org)\n- Command Line Tools\n - <img src=\"http://deluge-torrent.org/images/apple-logo.gif\" height=\"17\">&nbsp;**Mac OS X**: [Xcode](https://itunes.apple.com/us/app/xcode/id497799835?mt=12) (or **OS X 10.9 Mavericks**: `xcode-select --install`)\n - <img src=\"http://dc942d419843af05523b-ff74ae13537a01be6cfec5927837dcfe.r14.cf1.rackcdn.com/wp-content/uploads/windows-8-50x50.jpg\" height=\"17\">&nbsp;**Windows**: [Visual Studio](http://www.visualstudio.com/downloads/download-visual-studio-vs#d-express-windows-8)\n - <img src=\"https://lh5.googleusercontent.com/-2YS1ceHWyys/AAAAAAAAAAI/AAAAAAAAAAc/0LCb_tsTvmU/s46-c-k/photo.jpg\" height=\"17\">&nbsp;**Ubuntu**: `sudo apt-get install build-essential`\n - <img src=\"http://i1-news.softpedia-static.com/images/extra/LINUX/small/slw218news1.png\" height=\"17\">&nbsp;**Fedora**: `sudo yum groupinstall \"Development Tools\"`\n - <img src=\"https://en.opensuse.org/images/b/be/Logo-geeko_head.png\" height=\"17\">&nbsp;**OpenSUSE**: `sudo zypper install --type pattern devel_basis`\n\n:exclamation: **Note**: If you are new to Node.js or Express framework,\nI highly recommend watching [Node.js and Express 101](http://www.youtube.com/watch?v=BN0JlMZCtNU) screencast by Alex Ford that teaches Node and Express from scratch. Alternatively, here is another great tutorial for complete beginners - [Getting Started With Node.js, Express, MongoDB](http://cwbuecheler.com/web/tutorials/2013/node-express-mongo/).\n\n\n## Getting Started\n\n\nThe easiest way to get started is to clone the repository:\n\n```bash\n# Fetch only the latest commits.\ngit clone git@github.com:bcldvd/real-time-planning-poker.git my-project\n\ncd my-project\n\n# Install NPM dependencies\nnpm install\n\nnode app.js\n```\n\n>:exclamation: **Note**: I strongly recommend installing nodemon `sudo npm install -g nodemon`.\n>It will monitor for any changes in your node.js\n>application and automatically restart the server. Once installed, instead of `node app.js` use `nodemon app.js`.\n>It is a big time saver in the long run.\n\n\n## TODO\n- Tweaks\n\n## Contributing\nIf something is unclear, confusing, or needs to be refactored, please let me know. Please open an issue before submitting a pull request\n\n## Authors\n\n**David Bocl\u00e9** - http://github.com/bcldvd\n\n\n## Credits\n\n- [hackathon-starter](https://github.com/sahat/hackathon-starter) by [@sahat](https://github.com/sahat)\n- [animate.css](https://github.com/daneden/animate.css) by [@daneden](https://github.com/daneden)\n- [bootswatch](https://github.com/thomaspark/bootswatch) by [@thomaspark](https://github.com/thomaspark)\n- [jquery.clipboard](https://github.com/valeriansaliou/jquery.clipboard) by [@valeriansaliou](https://github.com/valeriansaliou/)\n- [jQuery.qrcode](https://github.com/lrsjng/jQuery.qrcode) by [@lrsjng](https://github.com/lrsjng/)\n\n\n## Copyright and license\n\n    The MIT License\n\n    Copyright (c) 2014 David Bocl\u00e9\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in\n    all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n    THE SOFTWARE.\n"
 },
 {
  "repo": "Sharp-Data/Data-Science-Poker-Projects",
  "language": "Jupyter Notebook",
  "readme_contents": "# Blog Posts: Data-Science-Poker-Projects\n\n\n### Overview\n\nAfter reading one of my Scikit-Learn tutorials I published on [DataCamp's blog](https://www.datacamp.com/community/authors/daniel-poston), [SpringBoard](https://www.springboard.com/) approached me to write a blog about Data Science and Poker.  This repository consists of the files and code related to that blog post along with a soon to be published blog post for DataCamp on Poker Probability and Statistics in Python.\n\n## [How I Used Professional Poker to Become a Data Scientist](https://medium.springboard.com/how-i-used-professional-poker-to-become-a-data-scientist-e49b75dfe8e3)\n\nApril 15th, 2011, is referred to as Black Friday in the poker community. It\u2019s the day that the United States Government shut down the top three online poker sites. About 4,000 US citizens played online poker professionally back then, and thus the exodus began. Canada and Costa Rica were popular destinations. I\u2019m from Southern California, so I\u2019m no stranger to Baja California. I decided to set up shop south of the border in a town called Rosarito, Mexico...\n\n### Related Files: \n- [Poker Segmentation.ipynb](https://github.com/Sharp-Data/Data-Science-Poker-Projects/blob/master/Poker%20Segmentation.ipynb): The post is based on the code in this file.  Python code in Jupyter notebook which builds a K Means Model to segment poker opponents.\n- Report25_vsPlayerFinal.csv: Actual data from my poker career on my opponents.  Consists of statistics on their playing tendencies and their win/loss totals.\n\n"
 },
 {
  "repo": "jtushman/pivotal_tools",
  "language": "Python",
  "readme_contents": "pivotal_tools\n=============\n\nGeeky command-line interface with additional scrum, planning poker, and changelog generation features\n\n[Blog post on its usage](http://jtushman.github.io/blog/2013/08/15/introducing-pivotal-tools/)\n\n\ninstall\n-------\n\n```bash\npip install pivotal_tools\n```\n\n\nsetup\n-----\nAdd PIVOTAL_TOKEN to your environment\n\nI put mine in ~/.zshenv, like so ...\n\n`export PIVOTAL_TOKEN='your token'`\n\nAlso make sure in your pivotal project settings that you have \"Allow API Access\" checked (which is currently the default behavior)\n\nusage\n-----\n\nA collection of tools to help with your pivotal workflow\n\n\nchangelog\n---------------\nList out projects stories that are delivered or finished (not accepted)\n\nshow stories\n---------------\nLists all stories for a given project (will prompt you if not specified)\nCan filter by user with the `for` option\nBy default show the top 20 stories, can specify more (or less) with the _number_ option\n\nshow story\n---------------\nShow the details for a given story.  passing the project-index parameter will make it faster\n\nopen\n---------------\nWill open the given story in a browser.  passing the project-index parameter will make it faster\n\nscrum\n---------------\nWill list stories and bugs that team members are working on.  Grouped by team member\n\npoker (aka planning)\n---------------\nHelp to facilitate a planning poker session\n\ncreate (feature|bug|chore)\n---------------\nCreate a story\n\n\n\nCLI\n---\n```\n  pivotal_tools create (feature|bug|chore) <title> [<description>] [--project-index=<pi>]\n  pivotal_tools (start|finish|deliver|accept|reject) story <story_id> [--project-index=<pi>]\n  pivotal_tools show stories [--project-index=<pi>] [--for=<user_name>] [--number=<number_of_stories>]\n  pivotal_tools show story <story_id> [--project-index=<pi>]\n  pivotal_tools open <story_id> [--project-index=<pi>]\n  pivotal_tools changelog [--project-index=<pi>]\n  pivotal_tools scrum [--project-index=<pi>]\n  pivotal_tools (planning|poker) [--project-index=<pi>]\n\nOptions:\n  -h --help             Show this screen.\n  --for=<user_name>     Username, or initials\n  --project-index=<pi>  If you have multiple projects, this is the index that the project shows up in my prompt\n                        This is useful if you do not want to be prompted, and then you can pipe the output\n```\n"
 },
 {
  "repo": "tansey/js_poker",
  "language": "JavaScript",
  "readme_contents": "js_poker\n========\n\nA simple, minimalist scaffold for a poker web app frontend"
 },
 {
  "repo": "ericgjackson/slumbot2019",
  "language": "C++",
  "readme_contents": "# Slumbot2019\n\nImplementations of Counterfactual Regret Minimization (CFR) for solving a variety of Holdem-like\npoker games\n\n## Features\n\n* Supports both CFR+ and MCCFR.\n* Supports resolving of endgames\n* Supports creation of card and betting abstractions\n* Supports head-to-head evaluation and real-game best-response\n* Supports multiplayer\n\n# Tutorial\n\n## Prerequisites\n\nYou should have a version of gcc that supports C++ 17.  gcc 7.3 is known to work.\n\nBy default, the various programs will read and write from the current directory.  If\nthis is not desirable, edit the paths in Files::Init() in src/files.cpp.  I'll sometimes\nkeep \"static\" files in a different director that \"cfr\" files, but that's not necessary.\n\nBuild whatever binaries you need from the top level.  For example:\n\n```\nmake bin/build_hand_value_tree\n```\n\n## CFR+\n\nA simple example using a two street game solved with a small betting abstraction and no card\nabstraction.\n\n```\ncd runs\n../bin/build_hand_value_tree ms1f3_params\n../bin/build_betting_tree ms1f3_params mb1b1_params \n../bin/run_cfrp ms1f3_params none_params mb1b1_params cfrps_params 8 1 200\n../bin/run_rgbr ms1f3_params none_params mb1b1_params cfrps_params 8 200 avg raw\n```\n\n## MCCFR\n\nRun external sampling on a four street game using the full 52-card deck but a crude card abstraction\nand a simple betting abstraction.\n\n```\ncd runs\n../bin/build_hand_value_tree holdem_params\n../bin/build_betting_tree holdem_params mb1b1_params \n../bin/build_null_buckets holdem_params 0\n../bin/build_null_buckets holdem_params 1\n../bin/build_rollout_features holdem_params 2 hs 1.0 wmls 0.5\n../bin/build_rollout_features holdem_params 3 hs 1.0 wmls 0.5\n../bin/build_unique_buckets holdem_params 2 hs hs\n../bin/build_unique_buckets holdem_params 3 hs hs\n../bin/run_tcfr holdem_params nhs2_params mb1b1_params tcfr_params 8 0 1 100000000 1\n```\n\nThe Targeted CFR implementation (in tcfr.cpp) is a little messy; there is a simpler implementation\nof External CFR in ecfr.cpp.  Run it like so:\n\n```\n../bin/run_ecfr holdem_params nhs2_params mb1b1_params ecfr_params 8 0 1 100000000 1\n```\n\n## Evaluation\n\n### Real-Game Best-Response\n\n```\n../bin/run_rgbr ms1f3_params none_params mb1b1_params cfrps_params 8 200 avg raw\n```\n\n### Head-to-head\n\nFirst run MCCFR for another batch of 100 million iterations:\n\n```\n../bin/run_ecfr holdem_params nhs2_params mb1b1_params ecfr_params 8 1 2 100000000 1\n```\n\nYou can compare the two checkpoints using head_to_head:\n\n```\n../bin/head_to_head holdem_params nhs2_params nhs2_params mb1b1_params mb1b1_params ecfr_params ecfr_params 0 1 10000 -1 false false\n```\n\nAlternatively you can use play:\n\n```\n../bin/play holdem_params nhs2_params nhs2_params mb1b1_params mb1b1_params ecfr_params ecfr_params 0 1 100000000\n```\n\n## Subgame Resolving\n\n### Resolving All Subgames\n\nSolve all the subgames and produce a new system that merges the base system with the resolved\nsubgames.\n\n```\n../bin/solve_all_subgames ms1f3_params none_params none_params none_params mb1b1_params mb1b1_params cfrps_params cfrps_params 1 200 200 unsafe cbrs card zerosum avg null mem 8\n../bin/assemble_subgames ms1f3_params none_params none_params none_params mb1b1_params mb1b1_params cfrps_params cfrps_params cfrpsmu_params 1 200 200 unsafe\n```\n\n### Head-to-head Evaluation with Resolving\n\nCompare a base system to a system with resolved subgames, sampling only some boards.\n\n```\n../bin/head_to_head holdem_params nhs2_params nhs2_params mb1b1_params mb1b1_params ecfr_params ecfr_params 0 1 10000 3 false true none_params mb1b1_params cfrps_params\n```\n\n### Resolving Methods\n\nTODO\n\n## Multiplayer\n\nMultiplayer (i.e., more than two players) does not work with all features of this package.\nFor example, multiplayer is only supported by MCCFR and not by CFR+.  And you cannot compute\nreal-game best responses on multiplayer games.\n\nBecause the betting tree can explode with multiplayer games, it is often advisable to use\na reentrant betting tree with multiplayer.  See the \"Betting Abstraction\" section below.\n\n## Disk-Based CFR+\n\nTODO\n\n## Asymmetric Betting Abstractions\n\nTODO\n\n# Discussion\n\nCFR+ is the preferred algorithm when it is feasible, ideally with no card abstraction.  It exhibits\nthe best convergence to equilibrium.  However, CFR+ makes a full iteration over the game tree\non each iteration and may take too long for large games.\n\nMCCFR is a sampling variant of CFR which makes it possible to come up with pretty good\napproximations of equilibrium for large games.  We support External Sampling and Targeted CFR\nwhich are good for large games.  Each iteration of MCCFR traverses a small fraction of the\ngame tree.\n\n# Configuring CFR\n\n## Parameter Files\n\nCFR can be configured through several parameter files which control the game being solved, the card\nabstraction, the betting abstraction, and solving parameters.\n\n### Game Params\n\nFor an example, see runs/holdem_params or runs/ms1f3_params.\n\nSpecifies the basic rules of the game including the number of streets (betting rounds), the\nsize of the deck, the number of players and how many community cards are dealt on each street.\n\nNotes:\n\n* Although there is a parameter for the number of hole cards, the code assumes two hole cards\nin many places.\n* The turn and river are assumed to involve one community card being dealt.  Only the flop is\nconfigurable, and the flop may only involve one, two or three community cards.\n* Games involving \"draws\" like 5-card draw are not supported.\n\n### Card Abstraction Params\n\nSpecifies the card abstraction.  For each street we specify a bucketing.  A bucketing is a way\nof reducing the size of the card space by mapping raw hands into buckets which are collections\nof very similar hands.\n\nThere are two reserved names for bucketing:\n\n* \"none\": CFR+ can operate without a card abstraction.  To specify no abstraction, use \"none\"\nfor the bucketing.\n* \"null\": the null abstraction only groups together groups of cards that are functionally equivalent\n(sometimes called \"isomorphic\").  For example, the preflop hands AsKs and AhKh can safely be\ngrouped together in the same bucket.  MCCFR requires a card abstraction so use the \"null\"\nabstraction if you want a \"lossless\" abstraction.\n\nSee the \"Card Abstraction\" section later for more information on card abstraction.\n\n### Betting Abstraction Params\n\nFor an example, see runs/mb1b1_params.\n\nSpecify things like the stack size, and what bet sizes are allowed per street and how many bets.\n\n### CFR Params\n\nFor an example, see runs/cfrps_params or runs/ecfr_params.\n\nSpecify whether you are using CFR+ or MCCFR and set other parameters that control solving.\n\n## Card Abstraction\n\nUse build_null_buckets to create the \"null\" bucketing\".\n\nYou can also create your own card abstractions.\n\nUse build_rollout_features to create a map associating hands with certain hand strength\nrelated features.\n\nUse build_unique_buckets or build_kmeans buckets to create a bucketing from features.\n\nYou may also wish to look into prify and combine_features.\n\n## Betting Abstraction\n\nOnce you have create a betting abstraction parameter file, build the betting tree\nwith build_betting_tree:\n\n```\n../bin/build_betting tree <game params> <betting params>\n```\n\nYou can also view your betting tree:\n\n```\n../bin/show_betting tree <game params> <betting params>\n```\n\n### Reentrant Betting Abstractions\n\nFor an example, see runs/mb1b1r3_params.\n\nTODO\n"
 },
 {
  "repo": "TheScarletSword/pokereddeluxe",
  "language": "Assembly",
  "readme_contents": "# Pok\u00e9mon Red and Blue DX\n\nThis is a disassembly of Pok\u00e9mon Red and Blue DX, a hack by TheScarletSword based off of the pokered disassembly.\n\nTo set up the repository, see [**INSTALL.md**](INSTALL.md).\n\nTo control what version you want to compile, check out the constants.asm file.\n\n## Credits\n\nKeys:\n[Original] denotes the code has not been touched at all.\n[Replaced] denotes the code has been rewritten entirely.\n\n* Sanqui / Sanky - Porting of Crystal audio engine, instant text [replaced], separation of trainer ids, porting of pinball music: https://github.com/sanqui/pokered-randomizer\n* FroggestSpirit - Some songs from CrystalComplete, porting of TCG/Pinbal music, worked on the colorized patch: https://github.com/froggestspirit/crystalcomplete\n* Drenn - colorized patch: https://github.com/dannye/pokered-gbc\n* Danny-E - Gen 2 Graphics Patch HUD / Pokemon Red Colorized: https://github.com/dannye/pokered-gbc\n* Mateo - Running Shoes, Field Moves (additional credit to Yenatch), Ingame trade name OTs: https://github.com/TheFakeMateo/RedPlusPlus\n* ShantyTown - Battle Factory, Shiny Pokemon, max DV/shiny ball idea, lucky egg/amulet coin code, Sucker Punch hit detection [original], Automated Repel System [original]: https://github.com/huderlem/pokered_battle_factory\n* dabomstew (+ luckytyphlosion) - stronger AI: https://github.com/luckytyphlosion/pokered-challenge\n* Pigu-A, etc. - Battle Tent, female trainer sprites, leader rematches, oak: https://github.com/TwitchPlaysPokemon/pokemonAnniversaryRed\n\nSee sprite credits and etc. in the pokecommunity thread or somethin'.\n\n## See also\n\n(btw, the following places are the only places this hack should be popping up at - if you post it elsewhere, include this github and one of the links below. if this is not the case, contact TheScarletSword.)\n\n* [**pokecommunity thread**][pokecommunity]\n* [**pokemon reborn thread**][reborn]\n* [**serenespace thread**][serenespace]\n* [**pokered disassembly**][pokered]\n\n[pokecommunity]: http://www.pokecommunity.com/showthread.php?t=360339\n[reborn]: http://www.pokemonreborn.com/forum/index.php?showtopic=19254\n[serenespace]: http://s15.zetaboards.com/SereneSpace/topic/8289096/1/\n[pokered]: https://github.com/pret/pokered\n"
 },
 {
  "repo": "iOS-Dev-Kurs/poker",
  "language": "Swift",
  "readme_contents": ""
 },
 {
  "repo": "pcafstockf/PokerFace",
  "language": "Java",
  "readme_contents": "## PokerFace <(\u25d5___\u25d5)>\n\n**PokerFace** is a free, lightweight, asynchronous, streaming, scriptable, http(s) **reverse proxy**.  \n\nIn addition to traditional reverse proxy features such as, web server, http(s) sanitizer, load balancer, and ssl bridge, PokerFace is **scriptable**.  \n\nScriptability means **PokerFace** can be used for sophisticated A/B testing, dynamic load balancing, analytics, mock data services, JavaScript \"servlets\", content caching, or any other task requiring more than a simple regex match.  \n\nPokerFace is small (e.g. easy to audit), extremely fast, portable, and built on the popular Apache HttpCore NIO libraries to provide top performance, scalability, and standards compliance.\n\nHere are some short guides focused on specific objectives to help you get started.\n\n* [Reverse proxy to one or more remote servers](http://pcafstockf.github.io/PokerFace/reverseproxy.html).\n* [Serve local files and/or cache remote resources](http://pcafstockf.github.io/PokerFace/fileserver.html).\n* [Create web pages and services using JavaScript](http://pcafstockf.github.io/PokerFace/servletscripting.html).\n* [A/B testing using JavaScript](http://pcafstockf.github.io/PokerFace/abscripting.html).\n* [Using log4j or other logging frameworks](http://pcafstockf.github.io/PokerFace/loggingconfig.html).\n* [Https configuration and SSL bridging](http://pcafstockf.github.io/PokerFace/httpsconfig.html).\n\n### Command line options\nSimple / common scenarios can be easily configured via [the command line](http://pcafstockf.github.io/PokerFace/cmdlineopts.html).  \nMore complex scenarios are configured via an [XML configuration file](http://pcafstockf.github.io/PokerFace/configfile.html).  \n\n### Site\nThe web site and user documentation can be found [here](http://pcafstockf.github.io/PokerFace/index.html).\n\n### Contributing\nClarity and simplicity are key principles of PokerFace, so suggestions for improving the documentation are eagerly solicited.\n\nIf you like PokerFace, tell everybody about it.  Like any opensource project, the more people using it the better it's going to become.  \n\nIf you want to understand and/or contribute code, here is a [quick developer overview](http://pcafstockf.github.io/PokerFace/overview-dev.html) to get you started.\n\n[List of things that need to be done](./ToDo.md).\n"
 },
 {
  "repo": "platatat/SnapCall",
  "language": "C#",
  "readme_contents": "# SnapCall\nFast C# poker hand evaluator for five to seven cards.\n\n<h2>Overview</h2>\nSnapCall is a high performance poker hand evaluation library made for Texas Hold'Em, though it can be used for any poker game with the same hand ranks. High speed lookups are achieved by precomputing all possible hand strengths and storing them in a hash table. The lookup table sizes (using the default load factor) are as follows:\n\n\tFive Card: ~25MB\n\tSix Card: ~300MB\n\tSiven Card: ~2GB\n\nWhile the table sizes increase with hand size, the lookup times are constant as long as the whole table fits in memory.\n\n<h2>Performance</h2>\nSnapCall provides a massive improvement over python libraries, but still falls short of a C implementation. SnapCall aims to eventually match or surpass the performance of a fast C library - see the Future Development section. Since SnapCall is based entirely on lookup tables, performance doesn't degrade at all as hand size increases.\n\n**Five Card Evals Per Second**\n\n\tPokerhand-Eval (Python) ......... 100\n\tDeuces (Python) ............. 250,000\n\tSKPokerEval (C++) ........... 400,000\n\tSnapCall (C#) ............. 7,500,000\n\tPoker-Eval (C) ........... 30,000,000\n\n**Seven Card Evals Per Second**\n\n\tPokerhand-Eval (Python) .......... 50\n\tDeuces (Python) .............. 15,000\n\tSKPokerEval (C++) ........... 140,000\n\tSnapCall (C#) ............. 7,500,000\n\tPoker-Eval (C) ........... 30,000,000\n\n<h2>Usage</h2>\n\nThe Evaluator constructor called with no arguments will create a new five card lookup table from scratch, which can then be saved to a file for later reuse. Note that each constructor is inclusive, so the seven card evaluator can evaluate five and six card hands as well.\n```c#\nvar fiveCardEvaluator = new Evaluator();\nfiveCardEvaluator.WriteToFile(\"./eval_tables/five_card.ser\");\n\nvar sixCardEvaluator = new Evaluator(sixCard: true);\nsixCardEvaluator.WriteToFile(\"./eval_tables/six_card.ser\");\n\nvar sevenCardEvaluator = new Evaluator(sixCard: true, sevenCard: true);\nsevenCardEvaluator.WriteToFile(\"./eval_tables/seven_card.ser\");\n```\n\nFirst time table creation is slow - five card takes about a minute, six card about 10 minutes, and seven card can take over an hour. You'll only want to do this once, and then save the table to a file and reuse it. Loading a seven card table takes about 20 seconds, and five and six cards are less than 5 seconds.\n\n```c#\nvar fiveCardEvaluator = new Evaluator(fileName: \"./eval_tables/five_card.ser\");\nvar sixCardEvaluator = new Evaluator(fileName: \"./eval_tables/six_card.ser\");\nvar sevenCardEvaluator = new Evaluator(fileName: \"./eval_tables/seven_card.ser\");\n```\n\nCards are represented as 64 bit masks, with the most significant 12 bits unused and the remaining 52 bits representing each possible card.\n\n\t0x00000001 => 2\u2660\n\t0x00000002 => 2\u2661\n\t0x00000004 => 2\u2662\n\t0x00000008 => 2\u2663\n\t0x00000010 => 3\u2660\n\t0x00000020 => 3\u2661\n\t...\n\nA hand is a bitwise OR of all the cards making up the hand. To evaluate a hand, pass its bitmask (UInt64) to the evaluator, and it will return a number from 0 to 7461 representing the hand's strength equivalence class. If two hands have the same equivalence class, they tie. If the class of hand A is greater than the class of hand B, then A beats B. Each equivalence class can contain many unique hands, but there are only 7462 distinct ranks.\n\n\t7461 => A, K, Q, J, T (flush) Ace high straight flush (4 possible hands)\n\t7460 => K, Q, J, T, 9 (flush) King high straight flush (4 possible hands)\n\t...\n\t7452 => 5, 4, 3, 2, A (flush) Five high straight flush (4 possible hands)\n\t7451 => A, A, A, A, K (no flush) Quad aces, king kicker (4 possible hands)\n\t...\n\t0    => 2, 3, 4, 5, 7 (no flush) Seven high (1020 possible hands)\n\n<h2>Dependencies</h2>\nSnapCall uses the Combinatorics library for generating bitmaps, and the Net-ProtoBuf library for object serialization. Both are available through NuGet.\n\n<h2>Future Development Goals</h2>\n* Remove dependency on Combinatorics package.\n* Improve HashMap class perfomance to achieve 30M+ evals per second.\n* Be able to evaluate 2, 3, and 4 card hands efficiently.\n"
 },
 {
  "repo": "mr-feek/global-poker-hand-history-converter-chrome-extension",
  "language": "JavaScript",
  "readme_contents": "# global-poker-hand-history-converter-chrome-extension\nThis chrome extension enables you to download your Global Poker hand histories in the same format that Poker Stars uses for its hands for importing into Poker Tracker 4.\n\nThis repository holds the source code for the chrome extension. The source code for actually converting hand histories to poker stars lives [here](https://github.com/mr-feek/global-poker-hand-history-converter). Therefore, any issues regarding the actual conversion of hand histories should be opened up there.\n\n## Installation\n~[Chrome Extension](https://chrome.google.com/webstore/detail/global-poker-hand-history/mfafilnnjcmjfbpcnkjcddcnjcjopopa?hl=en)~\nPer the request of Global Poker, this extension has been removed from the web store.\n\nPre reqs to install:\n- Git: https://git-scm.com/book/en/v2/Getting-Started-Installing-Git\n- Node: https://nodejs.org/en/\n- Yarn: https://yarnpkg.com/lang/en/docs/install/#windows-stable\n\nSteps:\n\n- clone this repository `git clone https://github.com/mr-feek/global-poker-hand-history-converter-chrome-extension.git`\n- `cd global-poker-hand-history-converter-chrome-extension`\n- Install dependencies: `yarn install`\n- Build the extension\n    - OS X: `npm run dist`\n    - WINDOWS: `SET NODE_ENV=production & npm run build`\n  you will now notice that `build/` directory has files. This is where you will load the chrome extension into chrome from.\n- open up chrome and navigate to `chrome://extensions`\n- in the top left, click on `Load unpacked`\n- select the `build` directory of the plugin (it will be inside of wherever you cloned the chrome extension to)\n\n\n## Usage\nLogin to global poker and navigate to Profile > Hand History. You will see a new piece of UI inserted on the page which will enable you to download the converted hand histories.\n\nImage coming soon...\n\n## Support on Beerpay\nHey dude! Help me out for a couple of :beers:!\n\n[![Beerpay](https://beerpay.io/mr-feek/global-poker-hand-history-converter-chrome-extension/badge.svg?style=beer-square)](https://beerpay.io/mr-feek/global-poker-hand-history-converter-chrome-extension)  [![Beerpay](https://beerpay.io/mr-feek/global-poker-hand-history-converter-chrome-extension/make-wish.svg?style=flat-square)](https://beerpay.io/mr-feek/global-poker-hand-history-converter-chrome-extension?focus=wish)\n"
 },
 {
  "repo": "predrag-njegovanovic/poker-hand-recognition",
  "language": "Python",
  "readme_contents": "# PokerHandRecognition\n\n _Description of project_ \n \n Recognition of playing cards and classification of poker hands. \n\n **Libraries** necessary to run scripts:\n    \n    -python 2.7\n    -opencv 3.2\n    -numpy 1.12 or greater\n    -sckit-learn 0.18\n    -sckit-image 0.10\n    -h5py\n    -keras\n    -Theano or Tensorflow\n\n  All libraries can be installed via pip. Run command pip install <_library_name_>.\n\n  Run main.py -> Load models and recognize all cards from folder 'data/test_dataset/' and write result in /results/results.txt. If models aren't saved run train_nn.py first.\n  \n  card_manipulation.py -> Script contains functions for image processing\n  \n  crop_cards.py and preprocess_crop_cards.py -> Create dataset to run through neural network\n  \n  train_nn.py -> Create models for NN and Random Forest and save to file\n  \n  \n\n\n"
 },
 {
  "repo": "CoinPokerOfficial/poker-decentralized-rng",
  "language": "C++",
  "readme_contents": "# Decentralized RNG libraries for [CoinPoker](https://coinpoker.com) client\n\nThis project consist of multiple projects that are used to implement decentralized card shuffle/verification for hand and award structure selection.\n\nThe purpose of this project is that any client, with some knowledge of c++, can verify and test decentralized rng protocol themselves.  \n\n* [AwardInterface](award_interface/README.md) - defines decentralized rng interface for award selection.\n* [DeckInterface](deck_interface/README.md) - defines decentralized rng interface for poker hand shuffling and verification.\n* [Utils](utils/README.md) - various utily functions that is used in implementing decentralized rng protocols.\n* [AwardRNG](award_rng/README.md) - shared library that implements [AwardInterface](award_interface/README.md).\n* [DeckRNG](deck_rng/README.md) - shared library that implements [ShuffleInterface](deck_interface/README.md).\n\n### Building instructions\n\nProject uses `CMake` as build generator. In order to test/modify [AwardRNG](award_rng/README.md) or [DeckRNG](deck_rng/README.md) yourself, generate project to that builds shared libs.\nEnter following commands from project root.\n```shell\nmkdir build && cd build\ncmake -DBUILD_SHARED_LIBS=ON ..\n```\nAfter project is built, rename shared libraries `DeckRNG`, `AwardRNG` to `DeckRNG_custom`, `AwardRNG_custom` and copy to poker client root directory.\n"
 },
 {
  "repo": "Malonrio/Cocos-Shader-Poker",
  "language": "JavaScript",
  "readme_contents": "# Cocos Shader\u5b9e\u8df5\n\n\u8be6\u7ec6\u6559\u7a0b\u8bf7\u8bbf\u95ee:http://blog.zovew.com\n\n\u89c6\u9891\u6548\u679c:http://zovew.com/blog/video/pokerEffect.mp4\n\nCocos Creator 1.9.X + \u6a21\u62df\u5668\u8fd0\u884c,\u6d4f\u89c8\u5668\u6682\u4e0d\u652f\u6301\u3002\n"
 },
 {
  "repo": "cwoolner/flex-poker",
  "language": "Kotlin",
  "readme_contents": "# Summary\n\nFlex Poker is a poker-playing (Texas hold 'em) web app.  It was originally written with Flex on the front-end, hence the name.  It's been rewritten many times since using various technologies.\n\n# Running the app\n\n### w/ Docker\n1. NOTE: Requires docker >= 17.05 due to using a multi-stage build.  This runs the default dev version, which just uses an in-memory database\n2. `docker build -t flex-poker:1.0-SNAPSHOT .`\n3. `docker run -d -p 8080:8080 flex-poker:1.0-SNAPSHOT`\n4. Hit [http://localhost:8080/](http://localhost:8080/)\n5. Users created by default: player1/player1, player2/player2, player3/player3, player4/player4\n\n### w/o Docker\n1. `npm install`\n2. Run the server:\n   * Default version (JDK 17 required): `mvn spring-boot:run`\n   * Redis version (Redis and JDK 17 required): `mvn -Dspring-boot.run.profiles=redis spring-boot:run`\n3. Hit [http://localhost:8080/](http://localhost:8080/)\n4. Users created by default: player1/player1, player2/player2, player3/player3, player4/player4\n\n# Technologies\n\n## Build/dev tools\n* Node.js/npm\n* Java 17\n* Maven\n* Redis - only required if using the `redis` Spring profile\n* Docker (>= 17.05) - if you want to use the provided Dockerfile to build/run\n\n## Front-end libraries/frameworks\n* SockJS\n* STOMP\n* React\n* Redux\n* React Router\n* React-Bootstrap\n\n## Back-end libraries/frameworks\n* Spring - MVC/WebSocket/etc.\n* Spring Data Redis\n* Spring Security\n\n# Dev environment setup\n\n* Just been using Eclipse, so to generate the .classpath file, from the top-level directory: `mvn eclipse:eclipse`\n* While developing, running `npm start` launches webpack in watch mode\n\n# Testing\n\nThe basic unit tests run as part of a normal Maven lifecycle.  No external systems are hit.\n\nBeen recently playing around with mutation testing.  The PIT plugin has been included.  To run (after building): `mvn org.pitest:pitest-maven:mutationCoverage`\n\n# Motivation\n\nIt would be nice to actually make a fully usable product at some point, but so far the project has mostly served as a non-trivial project to learn new technologies and try out different design patterns.  That said, any contributions that move toward the goal of making something useful are most definitely welcomed.\n\n# Brief tech/design history\n\n### Back-end\n* 2009 - BlazeDS, Spring, Hibernate, MySQL\n* 2013 - BlazeDS replaced with Spring WebSocket\n* 2014 - Rewrote to incorporate DDD, CQRS, and ES\n* 2020 - Converted to Kotlin\n\n### Front-end\n* 2009 - Flex\n* 2013 - Angular, WebSocket\n* 2015 - ES6, WebComponents\n* 2016 - React\n\n# Persistence\n\nTo keep development simple, the use of a database has been removed in the default Spring profile.  The in-memory \"database\" (HashMaps and such) will be the main/first implementation, so no datastore will be required to run locally.  As time/interest allows, new implementations of the repositories will be added for various datastores.  When currently using the `redis` Spring profile, Redis is used and will be required to be running on startup.  Redis was chosen not because of fitness for a particular feature, but just for learning purposes.\n\nThe app generally allows each domain, and the command/query pieces within those domains, to use whatever persistence storage they like.  The command-side of one domain might store your data in memory while the query side of the same domain might be in-memory by default, but can be switched on app startup to use Redis instead.  As best as possible, the choice of persistence should not infect the rest of the application.\n\nSince the app uses Event Sourcing, Greg Young's [Event Store](https://github.com/EventStore/EventStore) will be considered on the command side in the future.  On the query side, some sort of NoSQL document database will probably be considered.  Really happy with using in-memory structures and Redis for the time being.\n\n# Spring profiles\n\nThe two main profiles are `default` (when you don't specify one) and `redis`.  In addition, there are more specific profiles that allow you to mix and match different datastores.  For example, if you run this extremely long list of profiles: `mvn -Dspring-boot.run.profiles=login-inmemory,signup-redis,game-command-redis,game-query-redis,table-command-inmemory,table-query-redis spring-boot:run`, you'll use the in-memory db for login and the command side of the table domain, but redis for everything else.\n\nThis is overly complicated, and it's only being used to show that these different domains and sub-domains can be persisted in a truly independent manner.  It keeps details (how to store your data) away from the real logic of the application.  The query side of the domains can be made even more granular, but that seems a bit extreme at this point.\n\n# Security\n\nSpring Security is being used, but only the user role at the moment.  Four players are hard-coded (loaded on app startup) in both the in-memory and Redis implementations.  Their logins are player1/player1, player2/player2, etc.\n\n# Heroku\n\nThanks to Heroku for making it so simple (and free) to get a WebSocket-enabled Java app up and running on the public cloud.\n\nNode.js: The Heroku config had to be changed to add a heroku/nodejs buildpack as well as the existing heroku/java buildpack.  The pack by default just runs npm install, so the webpack build has been added to the postinstall script.\n\nJava: A Procfile is included that contains the java -jar command that Heroku uses to launch the app.\n\nHeroku auto-deploys whenever changes are made to master: [https://flex-poker.herokuapp.com/](https://flex-poker.herokuapp.com/)\n\nNOTE: Since the app uses in-memory persistence, the entire state of the app is essentially reset after Heroku puts it to sleep from inactivity.  Feel free to hit that URL and try it out.\n\n# Current status\n\n## What works\n\n* Login\n* Sign-up/registration (w/o email)\n* Creating a new game\n* Joining a game\n* Call, check, fold\n* Time-out and countdown timer for check/fold\n* Timed blind increment\n\n## Not done\n\n* Extremely ugly\n* No sounds\n* Sign-up/registration (w/ email)\n* Awarding chips/points for winning a game\n* Shortcut buttons to bet the min/max/pot\n* Logic to show more than just the winning hand\n* Ability to muck winning/losing hands\n* Winning hand determination, including split pots\n"
 },
 {
  "repo": "ptwu/distributed-texasholdem",
  "language": "JavaScript",
  "readme_contents": "# Multiplayer Texas Hold 'Em\n[![GitHub license](https://img.shields.io/github/license/Naereen/StrapDown.js.svg)](https://github.com/ptwu/distributed-texasholdem/blob/master/LICENSE)\n![1.0.0](https://img.shields.io/badge/version-1.0.0-blue.svg)\n![CI](https://github.com/ptwu/distributed-texasholdem/workflows/CI/badge.svg)\n\nPlay at https://poker.peterlwu.com. Note that the site has to cold start because I'm a college student who doesn't want to pay for more dynos on Heroku.\n\nUsing `socket.io`, `Node.js`, and `express` to make a distributed poker game. Allows for multiple\ngameplay rooms simultaneously across different devices.\n\n![Image of Distributed Texas Hold Em Gameplay](https://i.imgur.com/eGj6iHU.png)\n![Image of Distributed Texas Hold Em Lobby](https://i.imgur.com/TCusHG0.png)\n\n## Commands\n`yarn install` installs all the dependencies required to run the webapp.\n\n`yarn dev` starts the game with hot reloading provided by `nodemon`.\n  - The game will be viewable by navigating to `localhost:3000`.\n\n`yarn start` runs the Node server without hot reloading. Intended for deployment use.\n\n`yarn test` evaluates the unit tests located in test/classes/.\n"
 },
 {
  "repo": "drewtorg/poker",
  "language": "Python",
  "readme_contents": "# poker\nA simple pygame poker application\n\nThis stemmed from a project euler problem that required you to find the winner of 10,000 poker hands.  Now it is a full on 5 card draw poker application made using pygame.  Can be run with pygame installed on your machine and by running PokerView.py.\n"
 },
 {
  "repo": "TNG/next-generation-scrum-poker",
  "language": "TypeScript",
  "readme_contents": "# next-generation-scrum-poker\n\nPrototype for a new Scrum Poker\n\n## Development\n\nYou need a running [docker](https://docs.docker.com/get-docker/) demon for local development. To test and develop backend and frontend, run\n\n```shell\nnpm start\n```\n\nThis will spin up the database via `docker` and launch the local API gateway.\n\nIn parallel, it will use [Vite](https://vitejs.dev) to serve your app on [http://localhost:3000](http://localhost:3000). Vite will automatically update the browser via hot module reloading on save while providing extremely fast rebuilds.\n\n## Production Build\n\nTo generate a production build for the frontend, run\n\n```sh\nAPI_URL=wss://my.api.gateway.com npm run build:frontend\n```\n\nreplacing the API gateway with your production gateway. If you do not specify it, the development gateway will be used.\n\nThis will generate a folder `frontend/dist` that contains a directly deployable artifact without external dependencies that can be served as a static web site.\n\nTo test the production build locally, run\n\n```shell\nnpm run preview\n```\n\nNote that you can also specify an `API_URL` for `npm start` and `npm run preview`.\n\nTo build the backend, run\n\n```shell\nnpm run build:backend\n```\n\nwhich will generate `build` folders for each backend function that can be deployed as AWS lambda functions.\n\n## License\n\n[Licensed under Apache License Version 2.0](LICENSE)\n"
 },
 {
  "repo": "chmccc/poker",
  "language": "JavaScript",
  "readme_contents": "## Functionality\n\n### Dealing\n\n- set proper card distribution at each game stage \u2714\ufe0f\n\n### Score checking\n\n- test & build score object creator for 5-card hands \u2714\ufe0f\n- test & build best score function for 7-card hands \u2714\ufe0f\n- determine winners between hands \u2714\ufe0f\n- determine winners based on kicker cards \u2714\ufe0f\n\n### Ability to fold\n\n- not scoring a folded player \u2714\ufe0f\n\n#### Ability to bet\n\n#### Ability to raise\n\n### AI strategy\n\n- when to fold\n- when to call\n- when to raise\n\n## Display and messaging\n\n### Display\n\n- show a tabletop with 4 positions and space for table cards \u2714\ufe0f\n- should show a \"next stage\" button initially \u2714\ufe0f\n- should highlight cards used in winning hand once round is over \u2714\ufe0f\n- show controls at the bottom right \u2714\ufe0f\n\n### Folding\n\n- fold button in control panel \u2714\ufe0f\n- game should continue until final stage until player folds \u2714\ufe0f\n- players who've folded should have their cards \"greyed out\"\n\n\n### Message window\n- should report the winner of a hand \u2714\ufe0f\n- should report when a hand was won by a high card \u2714\ufe0f"
 },
 {
  "repo": "cmccabe/poker-odds",
  "language": "Go",
  "readme_contents": "poker-odds is a program for calculating the odds in a Texas Hold 'Em poker\ngame.  It tells you how likely you are to make each category of hand.  For\nexample, it can tell you how likely it is that, if you start with two aces, you\nwill get four of a kind.\n\nCurrently, poker-odds only takes into account one player. You cannot augment it\nwith your knowledge, actual or suspected, about what other players hold (and\nwhat therefore cannot be revealed by the dealer).\n\nI wrote poker-odds partly to learn the Google Go (Golang) programming language.\npoker-odds can be configured to use as many or as few goprocs as you like. More\ngoprocs means more parallelism, of course.\n\nI hope you have fun with this and with Go!\n\nColin McCabe\n"
 },
 {
  "repo": "lean-poker/poker-player-js",
  "language": "JavaScript",
  "readme_contents": "poker-player-js\n===============\n\nJavascript client skeleton for Lean Poker For more information visit: http://leanpoker.org\n"
 },
 {
  "repo": "notsapinho/powercord-together",
  "language": "JavaScript",
  "readme_contents": "# Powercord Together\n\n### \u26a0\ufe0f Disclaimer \u26a0\ufe0f\n\nAs it seems discord now handles activities sessions on the backend, meaning that bypassing tier 1/2/3 requirements are not possible. However some activities like **Watch Youtube** will work normally.\n\n---\n\nA plugin that makes it easy to watch YouTube, play Poker and many others games together on Discord!\n\n<img src=\"https://i.imgur.com/s5y2pEY.gif\" align=\"center\" alt=\"\">\n"
 },
 {
  "repo": "genjix/kartludox",
  "language": "Python",
  "readme_contents": "Forums:\nhttp://poker.bitcoinvegas.com/\n\nChatroom:\n(for IRC users irc://irc.freenode.org/pokerface)\n\nWebsite:\nhttp://www.kartludox.org/\n\n=========================\nRunning the server\n=========================\n\nOnly tested under Ubuntu. Install twisted-python, pypoker-eval.\n\n  $ cd srv/\n  $ python irc.py\n\nJoin irc://irc.freenode.org/pangaea to verify it's working. The channel & server can be changed by editing irc.py\n\nRun the dummy_client to test.\n\n  $ python dummy_client.py\n\nOnce connected, your nickname will appear in the top right. Commands are prefixed with !. To start you will want to !join, then !buyin 10000 and !sitin. After another player sits in (you can run 2 instances of dummy_client) then a new game will begin.\n\nUseful commands:\n\n  !show\n    Display table and who's seated.\n  !postsb\n    Post the small blind.\n  !postbb\n  !fold\n  !call\n  !raise 300\n    Must be within the valid range displayed.\n  !sitout\n    Sit out.\n  !buyin 5000\n    Add 50 big blinds to your stack.\n"
 },
 {
  "repo": "gorel/pokerAI",
  "language": "Python",
  "readme_contents": "pokerAI\n=======\n\nA Texas Hold 'Em AI utilizing multi-core Monte Carlo simulations\n"
 },
 {
  "repo": "sudocrystal/CS2-Poker",
  "language": "Java",
  "readme_contents": "# CS2-Poker\nBen teaching OOP Poker Evaluation Lab\n"
 },
 {
  "repo": "BoiseCodeWorks/VideoPoker",
  "language": "JavaScript",
  "readme_contents": "## Video Poker Instructions\n\n---\n\n### User Interface\n\n1. When the page loads:\n\t* Display the player account.\n\t* Display a Bet input box.\n\t* Display 5 card backs.\n\t* Display a Deal button.\n2. The Deal button should be disabled until a bet value is entered.\n3. After the hand is over, the Bet input should be empty and the Deal button should be disbled.\n\n<br>\n\n### Game Loop\n\n1. Set the player account to 1000.\n2. The player enters a bet and clicks the Deal button.\n\t* The players account is reduced by the bet amount.\n\t* The deck is shuffled.\n\t* 5 cards are dealt to the players hand and displayed on the screen.\n3. The player replaces unwanted cards.\n\t* Cards to keep are chosen by clicking each card.\n\t* The player clicks the Deal button.\n\t* Each card not marked is replaced by the next card from the deck.\n4. The hand is evaluated.\n\t* The hand is evaluated using the functions listed below.\n\t* The player account is credited by multiplying the bet by the payouts specified below.\n5. Return to step 2.\n\n<br>\n\n### Required Javascript Objects\n\n#### Card Object\n<img src=\"https://boisecodeworks.github.io/VideoPoker/docs/CardObject.png\">\n\n<br>\n\n#### Hand Object\n<img src=\"https://boisecodeworks.github.io/VideoPoker/docs/HandObject.png\">\n\n<br>\n\n#### Deck Object\n<img src=\"https://boisecodeworks.github.io/VideoPoker/docs/DeckObject.png\">\n\n<br>\n\n#### PlayerObject\n<img src=\"https://boisecodeworks.github.io/VideoPoker/docs/PlayerObject.png\">\n\n<br>\n\n#### GameObject\n<img src=\"https://boisecodeworks.github.io/VideoPoker/docs/GameObject.png\">\n\n*Game Object Event Handlers*\n<br>\n<img src=\"https://boisecodeworks.github.io/VideoPoker/docs/GameLoop.png\">\n\n<br>\n\n### Hand Payouts\n* Royal Flush - 250:1\n* Straight Flush - 50:1\n* 4 of a Kind - 40:1\n* Full House - 10:1\n* Flush - 7:1\n* Straight - 5:1\n* 3 of a Kind - 3:1\n* 2 Pairs - 2:1\n* 1 Pair Jacks or Better - 1:1 \n\n<br>\n\n### Scoring\n* Card Object (5)\n* Hand Object (5)\n* Deck Object (5)\n* Player Object (5)\n* Game Object (5)\n* Game Loop Logic (10)\n* Bootstrap CSS (5)\n* Project in GitHub (5)\n* GitHub Pages Enabled (5)\n* Missed deadline (-10)\n\n#### Total Possible (50)\n\n"
 },
 {
  "repo": "mjwestcott/pypokertools",
  "language": "Python",
  "readme_contents": "# pypokertools\n\n## The project\n\nThis is a sample of Python code from a larger No-Limit Texas Hold'em (NLHE)\npoker analysis project. It may be of interest to someone building their own\npoker library.\n\nYou can find many other examples of poker programs online, most of which deal\nwith random dealing, ranking hands, keeping track of betting etc. This project\nhas a different focus. It is designed to solve more unusual analysis problems\nthat I encountered as a professional poker player such as finding\nisomorphic/canonical representations of the flop, and finding nuanced hand\nproperties (e.g. having 'three-to-a-straight' and 'two overcards') rather than\n'which hand ranks higher'.\n\n## In this repository\n\n- pokertools.py: providing the basic building block: a Card type\n- properties: many predicates of tuples of cards, e.g. is_twopair, is_rainbow\n- examples/bluffing.py: finding nuanced flop hand properties for bluffing\n- examples/translation.py: parsing PokerStove-style card notation using a tokeniser\n- examples/isomorph.py: working with suit isomorphisms on the flop\n\n## A Note on Terminology\n\nThe word 'hand' in poker is ambiguous. It could mean: the two hole cards I have\nbeen dealt; the best 5-card poker hand I can make with any combination of my\nhole cards and the board; the unit of a poker game starting with dealing hole\ncards and ending with the winner collecting the pot.\n\nIn this library, the first two meanings are important to distinguish. I reserve\n`holecards` for the former and `hand` for the latter.\n\n## TODO\n\nSome of the techniques in the above have been used to create an approximate\nNash Equilibrium strategy solver for a simplified version of NLHE. One day I\nmight release more code from that project, such as:\n\n- a tool to construct simplified NLHE game trees recursively\n- an iterative constraint-satisfaction algorithm using NumPy to split ranges\nof holecards into e.g. betting and checking actions according to given criteria\nsuch as equity and polarity\n- a tool using the 'sklearn' machine learning framework to analyse hand\nhistory data\n"
 },
 {
  "repo": "yociduo/scrum-planning-poker",
  "language": "TypeScript",
  "readme_contents": "Scrum\u654f\u6377\u4f30\u7b97\n=====================\nScrum\u6251\u514b\u8ba9\u654f\u6377\u9879\u76ee\u4f30\u7b97\u66f4\u52a0\u7cbe\u786e\u7b80\u5355\u5e76\u5145\u6ee1\u4e50\u8da3\uff01\n\n\u626b\u7801\u4f53\u9a8c\n---------------------\n\u6253\u5f00\u5fae\u4fe1\u626b\u4e00\u626b\n\n![image](https://github.com/yociduo/scrum-planning-poker/blob/develop/img/\u5c0f\u7a0b\u5e8f\u641c\u4e00\u641c.png)\n\n\u4ea7\u54c1\u4f18\u52bf\n-----------------\n* \u8fdc\u7a0b\u529e\u516c\u60c5\u51b5\u4e0b\u4e5f\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u6253\u5206\u3002\n* \u6253\u5206\u53ef\u4ee5\u505a\u5230\u53ea\u6709\u623f\u4e3b\u53ef\u89c1\uff0c\u5145\u5206\u4fdd\u62a4\u4e2a\u4eba\u9690\u79c1\u3002\n* \u591a\u79cd\u5206\u6570\u8ba1\u7b97\u65b9\u5f0f\uff0c\u518d\u4e5f\u4e0d\u7528\u4e3a\u5927\u56e2\u961f\u7684\u7b97\u5206\u95ee\u9898\u56f0\u6270\u3002\n* \u8bb0\u5f55\u6240\u6709\u4eba\u7684\u6253\u5206\u60c5\u51b5\uff0c\u65b9\u4fbf\u4ee5\u540e\u590d\u76d8\u8ffd\u6eaf\u3002\n\n\u5feb\u901f\u5f00\u59cb\n-----------------\n```sh\ncd client\nnpm i\ncd ..\ncd server\nnpm i\ncd ..\nnpm i\nnpm start\n```\n\n\u5982\u6709\u4efb\u4f55\u610f\u89c1\u6216\u5efa\u8bae\u8bf7\u52a0\n----------------\n\u5fae\u4fe1: darrick\n\n\nScrum-Planning-Poker\n=======================\nScrum Planning Poker makes agile project planning and estimation more accurate, simple, and fun.\n\nBrief\n------\nScrum Planning Poker is a WeChat mini program, which aims to make project planning and estimation more accurate, simple and effortless. In the future, it's designed to become a skill maturity management platform to analyze personal skills and provide advice for personalized learning path.\n\nHave a Try\n--------\nOpen Wechat and scan the Mini Program code below:\n\n![image](https://github.com/yociduo/scrum-planning-poker/blob/develop/img/\u5c0f\u7a0b\u5e8f\u641c\u4e00\u641c.png)\n"
 },
 {
  "repo": "StefanKarpinski/Cards.jl",
  "language": "Julia",
  "readme_contents": "# Cards\n\n[![Build Status](https://travis-ci.org/StefanKarpinski/Cards.jl.svg?branch=master)](https://travis-ci.org/StefanKarpinski/Cards.jl)\n[![Coverage Status](https://coveralls.io/repos/StefanKarpinski/Cards.jl/badge.svg?branch=master&service=github)](https://coveralls.io/github/StefanKarpinski/Cards.jl?branch=master)\n[![codecov.io](http://codecov.io/github/StefanKarpinski/Cards.jl/coverage.svg?branch=master)](http://codecov.io/github/StefanKarpinski/Cards.jl?branch=master)\n\nThis package defines three types:\n\n* `Suit` uses 2 low bits of a `UInt8` to represent four suits of cards: \u2663, \u2662, \u2661, \u2660.\n\n* `Card` uses 6 low bits of a `UInt8` to represent 64 possible card values:\n  * 2 bits for the `Suit` (\u2663, \u2662, \u2661, \u2660)\n  * 4 bits for the rank from 0-15, meaning:\n    * 0 \u2013 low joker\n    * 1 \u2013 low ace\n    * 2-10 \u2013 number cards\n    * 11-13 \u2013 jack, queen, king\n    * 14 \u2013 high ace\n    * 15 \u2013\u00a0high joker\n\n* `Hand` uses 64 bits of a `UInt64` to represent all possible hands (sets) of cards.\n\nThe design of having high and low aces and jokers allows hands from many different games to be represented in a single scheme, with consistent rank ordering. If you're representing hands from a game with aces high, use the `A\u2663`, `A\u2662`, `A\u2661`, `A\u2660` cards; if you're representing hands from a game with aces low, use the `1\u2663`, `1\u2662`, `1\u2661`, `1\u2660` cards instead.\n\n## Example usage:\n\n```julia\njulia> using Cards\n\njulia> hand = rand(Hand)\nHand([2\u2663, 3\u2663, 6\u2663, 7\u2663, 8\u2663, 9\u2663, 2\u2662, 3\u2662, 4\u2662, 7\u2662, 10\u2662, J\u2662, A\u2662, 4\u2661, 5\u2661, 6\u2661, 7\u2661, Q\u2661, K\u2661, A\u2661, 4\u2660, 6\u2660, 9\u2660, K\u2660, A\u2660])\n\njulia> 2\u2663 in hand\ntrue\n\njulia> 4\u2663 in hand\nfalse\n\njulia> A\u2663 in hand\nfalse\n\njulia> A\u2660 in hand\ntrue\n\njulia> \u2661 \u2229 hand\nHand([4\u2661, 5\u2661, 6\u2661, 7\u2661, Q\u2661, K\u2661, A\u2661])\n\njulia> \u2660 \u2229 hand\nHand([4\u2660, 6\u2660, 9\u2660, K\u2660, A\u2660])\n\njulia> length(\u2663 \u2229 hand)\n6\n```\n"
 },
 {
  "repo": "soederpop/poker",
  "language": "JavaScript",
  "readme_contents": "# Poker\n\nRun a game of Texas Holdem poker, played by computer actors who can have their strategies programmed.\n\n![Screenshot](docs/webapp-screenshot.png)\n\nA strategy is used to decide between a range of possible actions in a single poker hand. At each decision point,\na strategy can incorporate any amount of information it can extract from the environment, to decide which action to take.\n\nIn order to support this decision making process, each actor has access to various utilities which can be used to estimate or calculate equity,\nusing combinations and math that most good poker players have committed to memory and can do intuitively in the heat of battle.\n\nThese utilities are also made available for general poker situation analysis away from the table.\n\nUltimately, the goal would be to arrive at a game theory optimal poker strategy using various approaches out there in the wild.\n\n## Contributing\n\n1. Clone this repo\n\n```shell\n$ git clone git@github.com:soederpop/poker.git\n$ cd poker\n$ npm install\n```\n\nSee [Applications](#Applications) for more info about the available applications that can be run.\n\n### Development Scripts\n\n- `npm run dev` will start a development server, for both the backend API and frontend React application, which will open in your browser.\n- `npm run dev:console` will do the same, but drop you into a REPL so you can work with the game instances from the server\n- `npm run build` will build the library and server code for distribution, and running in production\n- `npm run play` will start the terminal based view of the game simulation. Follow the instructions on the screen for interacting with the game.\n- `npm run console` will open up a REPL\n- `npm run test` will run the test suite\n\n## Project Structure\n\n- The [server](server) folder contains a library for powering the various poker analysis and simulation tools.\n\n- The [src](src) folder contains a React frontend application. This application is a workspace for viewing poker game simulations that are\n  running, where the different actors are carrying out their programmed strategies. It provides you with various tools for comparing the equity\n  of different hands or ranges of hands against other ranges of hands, as well as tools for browsing different board textures.\n\n- There [server/api](server/api) folder contains an express.js server for the web app to talk to.\n\n- The [src/client.js](src/client.js) module exposes a REST API client for talking to the API.\n\n- The [server/app](server/app) folder contains a React app that runs in the terminal, powered by ink.\n\n- The [test](test) folder contains some unit tests.\n\n- The [scripts](scripts) folder contains various scripts, (e.g console.js, play.js). Run any one of these scripts by typing `skypager $script` e.g. `skypager play`\n\n## Classes\n\n### [Range](server/Range.js)\n\nIt is common in most poker literature about texas holdem starting hands to represent them as a chart like\n\n![Range Chart Example](range-chart-example.jpg)\n\nThis represents all possible combinations of a 52 card deck, with ranks `2,3,4,5,6,7,8,9,T,J,K,Q,A` and suits `H,D,C,S` .\n\nThere are 169 possible generic combinations (e.g. `AKs,AKo,AA` ) and 1326 possible sorted combinations (e.g. `AKs` and `KAs` are the same.)\n\nEach combination is represented as an array of cards with attributes.\n\n```javascript\n[ { suit: 20, rank: 1, name: '3c' },\n  { suit: 20, rank: 0, name: '2c' },\n  toJSON: [Function: toJSON],\n  toString: [Function: toString],\n  has: [Function: has],\n  name: '3c2c',\n  csv: '3c,2c',\n  normalized: '32s',\n  showdown: 1873,\n  strengthVsOpponents: [ 35, 24, 18, 15, 13, 12, 11, 10 ],\n  vsOnePlayer: 35,\n  vsTwoPlayers: 24,\n  vsThreePlayers: 18,\n  averageEquity: [ 35, 24, 18, 15, 13, 12, 11, 10 ],\n  pair: false,\n  offsuit: false,\n  suited: true,\n  gap: 1,\n  rank: 1,\n  kicker: 0\n]\n```\n\nThese attributes can be used to match combinations against common hand range notations found in poker literature, e.g.\n\n- `22+` means any pocket pair 2 or better\n- `22-99` means any pocket pair 2-9\n- `KTs+` means any suited combination of a King and a card greater than ten (e.g. `J,Q,A`)\n- `AKo` means any unsuited combination of an Ace and a King\n- `56s+` means any suited connector with a high card greater than 8 (e.g. `56s`,`78s`,`98s`,`T9s`,`JTs`,`QJs`,`KQs`,`AKs`)\n- `56s-T9s` means any suited connector above, up to and including `T9s`\n\nOr combine some of of the above: `22-99,KTs,AKo,56s`\n\n```javascript\nimport { Range } from \"pokurr\";\nconst range = new Range(`22-99,KTs+,QTs+`);\n```\n\nWith this object, you can learn a lot about that range. What hands are in it, how many combinations it is made up of, etc.\n\nDavid Sklansky is a popular poker author and one of the pioneers of poker math, and he defined some common ranges:\n\n```javascript\nexport const SKLANKSY_RANGES = {\n  \"1\": \"AA,KK,QQ,JJ,AKs\",\n  \"2\": \"TT,AQs,AJs,KQs,AKo\",\n  \"3\": \"99,JTs,QJs,ATs,AQo\",\n  \"4\": \"T9s,KQo,88,QTs,98s,J9s,AJo,KTs\",\n  \"5\": \"77,87s,Q9s,T8s,KJo,QJo,JTo,76s,97s,A9s,A8s,A7s,A6s,A5s,A4s,A3s,A2s,65s\",\n  \"6\": \"66,ATo,55,86s,KTo,QTo,54s,K9s,J8s,75s\",\n  \"7\": \"44,J9o,64s,T9o,53s,33,98o,43s,22,K9s,K8s,K7s,K6s,K5s,K4s,K3s,K2s\",\n  \"8\": \"87,A9o,Q9o,76o,42s,32s,96s,85s,J8o,J7s,65o,54o,74s,K9o,T8o\"\n};\n```\n\nEach of the hands in these groups have a similar average equity vs other hands in other groups.\n\nSklansky defined the following categories (I think this is close, I'd have to double check)\n\n- ultra strong (hands in group 1)\n- strong (hands in group 1 or 2)\n- medium (hands in group 1 - 5)\n- loose (hands up to group 7)\n- any two cards (hands 8 and above)\n\nThe range class provides access to these groups for convenience:\n\n```javascript\nRange.sklansky.ultraStrong;\n```\n\nYou can compare two ranges to see their equity vs one another:\n\n```javascript\nconst { strong, medium } = Range.sklansky;\n\nstrong.compare(medium).then(results => {\n  console.log(results);\n});\n```\n\nEven when certain cards are on the board:\n\n```javascript\nstrong.compare(medium, { board: \"Ah9d3c\" });\n```\n\nOr cards are in your hand already (your cards block other possible combos from being in your opponents hand)\n\n```javascript\nstrong.compare(medium, { board: \"Ah9d3c\", deadCards: [\"8d\", \"9c\"] });\n```\n\n#### Enumeration of flops, turns, and rivers\n\nSimilar to how the Range keeps track of possible two card combos, it keeps track of 3,4,5 combos (these are huge in number though.)\n\nEach flop, turn, or river, is analyed to tell us not only what cards it contains, but various characteristics about its \"texture\"\n\ne.g. is there an ace? are there three of the same suit? is there a pair on the board? is there a possible straight? is it three low cards? three medium cards, three broadway (aka face cards), so on and so forth.\n\nthese flop features combine to make up what is known as flop texture. Certain flop textures are more likely to improve some ranges more than others. It is possible to use all of this information to estimate your equity\nin any given situation against a certain range. I was inspired by this paper [Estimating THe Strength Of Poker Hands by integer linear programming techniques](https://www.researchgate.net/publication/280085229)\n\n```javascript\nexport const FLOP_FILTERS = {\n  maxRank: \"cardRank\",\n  name: \"string\",\n  minRank: \"cardRank\",\n  uniqSuits: \"number\",\n  ranks: \"array\",\n  uniqRanks: \"number\",\n  flushPossible: \"boolean\",\n  flushDraw: \"boolean\",\n  rainbow: \"boolean\",\n  sameRank: \"boolean\",\n  paired: \"boolean\",\n  trips: \"boolean\",\n  hasAce: \"boolean\",\n  hasKing: \"boolean\",\n  hasQueen: \"boolean\",\n  hasJack: \"boolean\",\n  hasTen: \"boolean\",\n  numberOfBroadwayCards: \"number\",\n  threeMediumCards: \"boolean\",\n  threeSmallCards: \"boolean\",\n  gaps: \"array\",\n  openEnded: \"boolean\",\n  possibleStraights: \"boolean\"\n};\n```\n\nMany flops are the same texture: `2c3c4c`, `2s3c4c` even though the cards are different.\n\nEach unique combination of flop features, is represented with a hash value called `baseTexture`\n\nThere are many more flops which are uncoordinated (no connecting cards, no straights on board, etc) than there are flops that have three of the same suit.\n\nThese base texture hashes can be used to sample the possible flops, instead of enumerating over all of the same ones, when the result is going to be the same.\n\nFor example, `AhKh` wins the same amount vs `QcQd` as `AsKs` does against `QhQc` so enumerating both possibilities is a waste of time. The same is true for flops, turns, etc.\n\nThe specific suits don't matter, the number of possible combinations given the cards known is more important and luckily a much smaller space.\n\n### [Game](server/Game.js)\n\nThe Game class can instantiate a poker table with 2-10 players, and will keep track of the current order of play and the different actions taken, as well as the current status of each player,\n(how many chips do they have? what cards do they hold? which position are they in for this round of play?). It will also calculate equity, count possible outs, and rank hands after the flop is dealt.\n\nIt will also give some useful stats about the current hand:\n\n- how many big blinds does the player have in their stack?\n- how much is in the pot?\n- how much is the current player required to put in the pot to advance?\n- what are the pot odds being offered?\n- what is the effective stack size?\n- how much has the player currently invested?\n\nThe Game will go around and around to each player and have the player make a decision\n\n### [Actor](server/Actor.js)\n\nThe Actor class is used to control the logic a player in a `Game` will use to provide the game with its decision about how to proceed in the hand, e.g. (`check`, `bet`, `fold`, `call`)\n\nIt will also give you a view of the game from the perception of the actor, who by the rules of the game won't know all of the cards held by the other players.\n\nAt best, an actor can guess about what another actor's Range is (and can incorporate the history of their play together to deduce that range to some degree of accuracy)\n\nGeneric strategies can be defined as strategy profiles. An actor starts with one of these (by default, will be a random.)\n\nEach decision can be made asynchronously, and take as much time as necessary.\n\nOne of my goals would be to implement the algorithm described here [https://science.sciencemag.org/content/early/2019/07/10/science.aay2400](https://science.sciencemag.org/content/early/2019/07/10/science.aay2400) which is about one of the first AI to be able to beat a multiplayer game of 6 handed poker.\n\n### [HandEquity](server/HandEquity.js)\n\nA generic utility for calculating the equity of one hand vs another.\n\n## Applications\n\nThis project consists of a few different applications.\n\n### Game API\n\nThe Game API is an express.js based JSON API that provides access to the game engine, and an interface to the Range utility described above\n\n### Web Application\n\nThe Web Application gives a web based poker table which can be used to observe the bots playing against one another. It is very similar to watching poker on TV,\nwhere you can see everyone's cards.\n\n```shell\n$ yarn dev\n```\n\nIt includes a number of UI tools for analyzing hand ranges and combinations, calculating equity, exploring flop textures, etc.\n\n### Terminal CLI Application\n\n![CLI Game Screenshot](docs/cli-game-screenshot.png)\n\nThe same view of the game server, but using ANSI art in the terminal. Powered by ink and React\n\n```shell\n$ yarn play\n```\n\n### REPL\n\nThe REPL gives you access to all of the classes, game, in a JavaScript console you can use to explore the different ranges, combinations, and utilities\n\n![Console Screenshot](docs/console-screenshot.png)\n\n```shell\n$ yarn console\n```\n\n### Rust Project\n\nI'm new to rust, but attempting to write the flop, turn, river enumerator and equity calculator functionality as a rust module for speed.\n\n[rs-pokurr](rs-pokurr)\n\n## Additional Reading\n\n- [Upswing Poker Article #1](https://upswingpoker.com/gto-poker-game-theory-optimal-strategy/)\n- [holdem resources calculator](https://www.holdemresources.net/hrc/download)\n- [icmizer](https://www.icmpoker.com/signup/)\n- [piosolver](https://www.piosolver.com/)\n- [card runners ev calculations with decision trees](https://www.cardrunnersev.com/)\n- [PokerSnowie](https://www.pokersnowie.com/features.html)\n- [Regret Minimizers](https://blog.ml.cmu.edu/2019/08/02/regret-circuits-composability-of-regret-minimizers/)\n"
 },
 {
  "repo": "andrewprock/jpoker",
  "language": "Java",
  "readme_contents": "jpoker\n======\n\nold java poker evaluator\n"
 },
 {
  "repo": "danielmiladinov/Poker",
  "language": "PHP",
  "readme_contents": ""
 },
 {
  "repo": "DabeLong/Two-Card-Poker-CFR-AI",
  "language": "Python",
  "readme_contents": "# Two Card Poker AI\nPreviously, I worked on One Card Poker and used Counter Factual Regret Minimization (CFR) to computer the game theory optimal (GTO) solution to the game from scratch. I was happy to find that the solution developed through self-play by the CFR agent closely matched the GTO solution proposed by a CMU professor who computed it through linear constraint solving.\n\nNow with a stronger background in how the CFR algorithm worked, I wanted to try a game with more depth and breadth than just One Card Poker, which featured only 13 cards and one bet maximum. Consequently, I moved on to Two Card poker, which features a full 52 card deck and allows multiple bets in the betting round. So now an artificial intelligence agent must be able to decide upon 1326 different possible hands and what to do with each and every possible combination in the game. It must learn the relative strength of each hand from scratch and discover the optimal strategy for each hand. Additionally, it must develop an overall balanced strategy, and decide a range of hands it should bet and a range of hands it should check-call, check-raise, or check-fold.\n\nThis idea of range is integral to much more complicated games like No Limit Texas Hold'Em. The idea is no longer how a single, particular hand should be played, but what hands overall should be played and how. And to win in the long run, players adjust their ranges until it is perfect and game theory optimal.\n\nSo the biggest challenge is for the CFR agent to construct a GTO ranges for both players, and do so from scratch.\n\n# Rules of Two Card Poker:\nThe game is played using a standard 52 card deck. At the beginning of the round, both players pay a $1 ante. Each player is dealt two private cards, and then there is a round of betting. Players take turns in this round of betting. Initially, the player may check or bet (put more money in the middle). If both players check, then showdown is reached and both players reveal their cards, and the player with the strong hand wins the money in the middle.\nIf a player bets, the other player has the option to raise, call, or fold. If the player folds, the other player wins the money in the middle. If the player calls, then showdown is reached. If the player decides to raise, then action is on the other player, who has the option to raise, call, or fold.\nFor this game, I decided to put a limit to a maximum of 2 bets. So this means that only one raise is allowed.\nThe first bet is set to $2, so a player will be betting $2 into a pot of $2.\nThe raise is set to $8, so a player will be betting $8 into a pot of $4.\n\nShowdown/Card Strength:\nIn Two Card Poker, the strength of the category of hands (from strongest to weakest):\n* pairs (two cards with the same rank, like Ah As)\n* suited cards (two cards with the same suit, like As Ts)\n* unsuited cards (two cards with different suits, like Ks 5d)\n\nCard ranks, from strongest to weakest, goes from A, K, Q, J, T, 9, 8, ..., 3, 2\n\nWhen comparing two hands, if the hands are in different categories, then the hand in the better category wins. If hands are in the same category, then the hand with the higher rank wins. If both hands have the same high rank, then the second card determines which hand wins). If it is still a tie, then the pot is split.\n\n# Results\nAfter training the CFR agent to play itself for 40 million hands, the agent has developed a pretty balanced strategy for both players. It was capable of developing an optimal ranges and taught itself how to bluff and slowplay, and to not always do one or the other. The strategy it developed is balanced and difficult, if not almost impossible, for an opponent to exploit. I also created a visual using python matlibplot to summarize the hand ranges for differing strategies the bot developed autonomously.\n\nSo before we get into results, we first need to understand how the game can possible progress. In other words, look at the game decision tree:\n* P1 Bets\n   * P2 Folds\n   * P2 Calls\n   * P2 Raises\n      * P1 Calls\n      * P1 Folds\n* P1 Checks\n   * P2 Checks\n   * P2 Bets\n   * P1 Raises\n      * P2 Calls\n      * P2 Folds\n   * P1 Folds\n   * P1 Calls\n\nAdditionally, we need to understand what a range chart means:\n![Alt text](/strategy_charts/p1_check_raise.png?raw=true \"P1 Check-Raise Range\")\n\nThere are 1326 different possible hands (choose two cards from 52), but we can bucket all these hands into 169 different kinds of hands. 13 different pairs, 79 suited hands, and 79 off-suited hands. In this chart, the hands along the diagonal represent pairs, the upper-right corner represents suited hands, and the bottom left corner represents off-suited hands.\n\nThis particular chart is for player one and what kind of hands the CFR agent decides to check and then raise when facing a bet. Green represents 100% of the time or almost always, yellow represents around 50-75% of the time, orange represents 25-50% of the time, and red is never or almost never. There are two other colors, but they are not on this graph (yellow-green 75-90%, and orange-red 5-25%)\n\nSo this chart is saying that the player should always raise AA, KK, QQ, ... 88, AKs, AQs, A9o, and K9o. The player should sometimes raise AJs, A8o, and K3o.\nWhen we interpret this chart, we notice that there are a lot of strong hands, like the pairs and strong suited hands like AKs, AQs, and AJs. Additionally, the player does have some bluffs sometimes, like A9o, A8o, and K3o.\n\n# In depth look into Player Strategies\n![Alt text](/strategy_charts/p1_bet.png?raw=true \"P1 Betting Range\")\n![Alt text](/strategy_charts/p1_bet_call.png?raw=true \"P1 Bet-Call Range\")\n![Alt text](/strategy_charts/p1_check_raise.png?raw=true \"P1 Check-Raise Range\")\n![Alt text](/strategy_charts/p1_check_call.png?raw=true \"P1 Check-Call Range\")\n\n![Alt text](/strategy_charts/p2_raise_allin.png?raw=true \"P2 Raising Range\")\n![Alt text](/strategy_charts/p2_call.png?raw=true \"P2 Calling Range\")\n![Alt text](/strategy_charts/p2_bet.png?raw=true \"P2 Bet Range\")\n![Alt text](/strategy_charts/p2_bet_call.png?raw=true \"P2 Bet-Call Range\")\n\n# Summary of Strategies\n\n\n# Further Considerations\n* see how adjusting antes and bet sizing affect results\n* see how adjusting possible starting hands for both players affect results (In a river situation in poker, both players do not have the entire 1328 different possible hands in their range. Additionally ranges can be assymmetrical. This means that the optimal solution for both will be very different)\n* allow customizable/multiple bet sizing\n* begin looking into developing bot for full Texas Hold'Em game\n\n\n"
 },
 {
  "repo": "allenfrostline/Poker",
  "language": "Python",
  "readme_contents": "<img src=\"/resources/icon.png\" height=90 width=877>\n\n# Poker\n\nThis is a simple Texas Hold 'em game running on MacOS. All scripts are written in pure Python. The main GUI is written using the Python module `PySimpleGUI`, and hand evaluation is done by refering to a hand value table pre-calculated together with Monte Carlo simulation. See [here](https://allenfrostline.com/2019/04/09/texas-holdem-series-4/) for detailed explanation of hand evaluation. Together with the GUI version, I also include here a primitive commmandline version with `ColorPrint` support, which you may download and include from this [repo](https://github.com/allenfrostline/Python-Color-Print). The two versions are supposed to work identically.\n\n### Usage\n\nYou don't need any Python or module dependencies installed on your Mac in order to just play the game. The app itself is standalone with everything packed inside it already. There're just two steps:\n\n1. Download the app from [here](https://drive.google.com/file/d/1vpxAMru_WIOT3-9VLIs6PxqR5couAUEj/view?usp=sharing).\n2. Double click it.\n\n<p align=\"center\"><img src=\"/resources/screenshot.png\" width=80%></img></p>\n\nOr rather, if you'd like to pack it yourself:\n\n1. Download this [repo](https://github.com/allenfrostline/Poker).\n2. Pack it using `PyInstaller` in `--onefile` mode.\n3. Double click the app you just generated.\n\n### To-Do's\n\nThere're several things to work on in plan:\n\n- Fix bugs (please, don't again).\n- Write up AI agents of different strategies (in progress):\n    - Expected hand value optimization (Greedy);\n    - Game theory optimal (GTO);\n    - Evolutionary algorithm (EA);\n    - Deep Q-Learning (DQN).\n\n- Build a server-based version so multiple people can play on different divices.\n- Build an Android version (proposed by author of `PySimpleGUI`, [MikeTheWatchGuy](https://github.com/MikeTheWatchGuy)).\n- Fix GUI problems:\n    - Resolution of image is **extremely** low and it looks ugly on Retina screens.\n    - Button styles and other design-related issues.\n\n### Known Bugs\n\nHere are some bugs I'm trying to fix:\n\n- Side pot. It's tricky and I havn't found a way to implement it simple.\n- Side pot. It's tricky and I havn't found a way to implement it simple.\n- ~~Freeze at start. The app starts and then freezes for a sec. This is because Python is openning the hand value table. Perhaps I should try threading for this particular task (no need for the rest of the game). I'll also try to compress the table in a better way (like functionize it).~~ Working on the animated `Popup` element in `PySimpleGUI`.\n\n### Acknowledgement\n\nI appreciate suggestions and encourage from anyone throughout the development (which may still continue for a long time, considering the considerable time I spent just on writing this primitive game). Special thanks to my friends who ever tried to play the game and found bugs starting from the commmandline version. Also, credit for MikeTheWatchGuy who wrote the `PySimpleGUI` module and helped me fix several bugs. Also, credit to [Freepik](https://www.freepik.com) from [www.flaticon.com](www.flaticon.com), who made this fantastic icon. Finally, I wanna give credit to myself for the nights I stayed up after lectures. There is nothing more fulfilling than realizing an impulse right away.\n"
 },
 {
  "repo": "magnusmickelsson/pokeraidbot",
  "language": "Java",
  "readme_contents": "# pokeraidbot\nA Discord Pokemon go raiding bot, used to announce raids, sign up for them and get an overview.\nAlso contains commands for getting information about pokemons, pokestops and gyms.\n\n## What is this?\n\nTired of having a discord chat for pokemon raids like this? Having to scroll over pages of entries,\nand trying to determine who is coming where, and at what time?\n\n![Without](img/example_without_bot.png)\n\nWell, I got annoyed with it. While trying to get a Gym map working, I started thinking about how to\ncreate raid management features in Discord, and this is where we're at right now.\n\nThe bot still needs some more nifty features, but it's usable and used in atleast 8 Swedish\ndiscord servers (Uppsala, Norrk\u00f6ping, Ume\u00e5, V\u00e4nn\u00e4s, Lule\u00e5, Trollh\u00e4ttan, Lycksele, Vindeln), in Italy and the UK.\n\nBest to show some screenshots I guess. These are in Swedish, but there is also English locale.\n\nCommand to get map of a gym:\n\n![Map command](img/mapcmd.png)\n\n![Map response](img/mapcmdresponse.png)\n\nCommand to get raid boss info:\n\n![Raidboss info command](img/pokecmd.png)\n\n![Raidboss response](img/pokecmdresponse.png)\n\nRaid commands:\n\n![Other raid commands](img/raidcmd.png)\n\n![Signup with plus](img/signup_via_pluscmd.png)\n\n![Raid group signup](img/groupmuk.png)\n\nOther features worth mentioning:\n* Users can configure tracked pokemons, meaning if a raid is created, the user gets a direct message (DM) about it\n* Admins can configure a mods group, so mods can help administrating things\n* Admins can configure a raid overview message which is automatically updated with all registered raids every 60 seconds\n* User errors can get automatically removed, along with any feedback (after user gets a chance to read it)\n    * Server admins can choose a feedback and error message handling strategy via configuration\n* Automatic integration with [Gymhuntr bot](https://www.gymhuntr.com) and \n[PokeAlarm](https://github.com/PokeAlarm/PokeAlarm), for automatic raid registration (if so desired) -\nsee [Bot how-to](BOT_SETUP.md) for details.\n\nFuture development will most likely include:\n* OCR scanning of screenshots, possible to create raids from them\n* Webhooks API\n* What the users may be interested in.. wink, wink.\n\nCheck the [TODO-list](TODO.md) for current status of development.\n\n## Getting started as a user\n\n[English version](GETTING_STARTED_USER_en.md)\n[Swedish version](GETTING_STARTED_USER_sv.md)\n\n## Support development\n\nPlease do. :) It will help out a lot if it happens that I need to move from\nthe free Heroku version to a \"pay per month\" version with more room for data,\nbetter availability etc.\n\nClick below:\n\nhttps://www.paypal.com/pools/c/821lf4bmi6\n\n## Setting up the bot in your Discord server\n\n### How do I get the gym data for MY region in there?\nSince you probably want the gyms for YOUR region in YOUR bot, here are instructions on how to import them. \nIf you know what you're doing (i.e. you're a developer), scroll down to instructions on how to use the \ndata import tool. \n\nNon-developers need to contact Magnus (the developer of the bot) at magnus.mickelsson@gmail.com - send an email explaining\n* Who you are and where you want to add the bot\n* What region you want data for (Country, City, area in city)\n\nMagnus will then use the data import tool go create a data file for your region and deploy it with the bot.\nAllowing admins to run the data import on the fly and putting it in the database\nis on the todo-list, but will require a non-free Heroku version, most likely. :(\n\nOptional steps:\n* If you know something about computers and want to make Magnus' life easier, try creating the data file\nfor your region yourself, see instructions further down\n* A Discord invite link to your server so Magnus can login and help out with setting it up, if needed\n\nRight now, the bot has datasets for a few major cities in Sweden, such as Stockholm, Uppsala, Lule\u00e5, Ume\u00e5, \nNorrk\u00f6ping etc.\n\n### Inviting the bot to your server\nGo to [https://pokeraidbot2.herokuapp.com]() - use the link there and you'll use Discord's built in handling\nof inviting a bot to your server.\n\n### Setting up permissions\nAssign the bot the following permissions:\n\n* Manage emojis\n* Read text channels\n* Send messages\n* Manage messages (needs to edit raid group message)\n* Embed links (map function)\n* Attach files\n* Read message history\n* Use external emoji\n* Add reactions\n   \n### Configuring your server against the bot\nThis step requires your admin to have invited the bot into your server, and set up the role and \npermissions of the bot (as described above).\n \n* Verify bot has logged in and is present in your server, with correct role/permissions\n* Run the command: *!raid install*\n* Follow the instructions you'll get in DM. Read them and you should be able to sort it out. If you don't,\nthe bot should be able to tell you what's wrong.\n\n## Setting up your own server/For Developers\nHow do I setup my own server and/or help with development?\n\n### Prerequisities\n\n* You need to have Java 8 installed\n* You need to have Maven 3+ installed\n* You need to be administrator on your local machine\n* It's probably a good idea if you know a bit about Java development, and Spring Boot\n* You need to be administrator of a Discord server with permission to add a bot\n* USE **UTF-8** ENCODING. In your server configuration, in your IDE, errwhere.\n\n### Step by step\n* To get started, you need to create a Discord application via their \n[developer site](https://discordapp.com/developers/docs/intro), and register a Bot account for it. \nWhen doing this, you get an owner id (client id) and a token for your bot account.\n* Clone this Git repository to your local machine: https://github.com/magnusmickelsson/pokeraidbot.git\n* Build your application via [Maven](https://maven.apache.org) or a Java-IDE, for example \n[IntelliJ](https://www.jetbrains.com/idea/).\n* Check the file src/main/resources/application.properties. Decide what type of database you're going to run (file is currently\nprepared for Heroku deploy but has stuff commented out for running local in-memory DB via H2\nor a local Postgres)\n* Start the bot via the executable class **main.BotServerMain** (or java -jar pokeraidbot.jar)\n\nNOTE: You need to provide two application properties so it can start, ownerId and token. Example:\n\n    java -jar pokeraidbot.jar --locale={language tag, sv or en available} \n    --ownerId={your owner_id from registering a bot app/account above} \n    --token={bot secret token as above}\n    \nIn IntelliJ, add\n\n    --locale={language tag, sv or en available} \n    --ownerId={your owner_id from registering a bot app/account above} \n    --token={bot secret token as above}\n    \nto the \"Program Arguments\" field when creating a run configuration.\n\nIf you don't Spring will complain that the properties are not available, and the application won't start.\n\n* Try browse http://127.0.0.1:5000/ - if it works you'll get a response from the bot\n* Use the Discord link from the response above to invite the bot into a Discord server of your choice\n* Check the instructions way above on how to configure the bot for your server. Follow the instructions. Don't be *that* guy/girl.\n* In the chat, try running the command \"!raid usage\". Take it from there.\n\n### Gym data import\nFirst check the file gyms_uppsala.csv to see an example of the data such a file should have. \nIt's a good idea to keep the uppsala file around though so you don't have to change the JUnit test suite.\n\nThe recommended way to create a dataset for your region is to use the **GymDataImportTool** class. Run this mainclass:\n\n        dataimport.GymDataImportTool\n\n.. with these parameters: {number of kilometres which will be a side of a \"box\" we get gyms from} {search entry for region centre (will be centre of the \"box\")}\n\nExample:\n\n        dataimport.GymDataImportTool 20 falun\n        \n.. will create a dataset file called falun.csv under {project_dir}/target/ folder, which contains\nall gyms/raids within 10 km of the centre of the city Falun in Sweden (centre as defined by Google maps).\n\nCopy this file into src/main/resources/ - name it gyms_falun.csv and it will be available to be used by a Discord server,\nwhich is then to be configured to have the region falun.\n\n**NOTE: Bot needs to be restarted when new region files are added** (right now, will change in the future).\n\n### Hosting\nI'd recommend you deploy your adapted bot to a cloud service, or use a local server you know works and will be up.\n\nPersonally, I used Heroku's free service, available here:\n\nhttp://herokuapp.com\n\nTo get started, create an account there and then follow these instructions (after you've got it working locally, obviously):\n\nhttps://devcenter.heroku.com/articles/getting-started-with-java#introduction\n\nThings to note about Heroku:\n* Choose the correct region when you create your Heroku application; eu or us! Example for eu:\n\n        heroku create {app_name} --region=eu\n\n* Choose the correct timezone for your application, for example: \n    \n        heroku config:add TZ=\"Europe/Stockholm\"\n        \nThe bot is currently deployed on a Heroku node in EU backed by a Postgresql database, at Stockholm timezone,\nhere: https://pokeraidbot2.herokuapp.com\n\n## Changelog\n\nSee [Changelog](CHANGELOG.md).\n\n## Who?\n\nBot created by Magnus Mickelsson - done mostly during evenings after the kids went to bed, so cut me some slack :( \n\nValuable contributions also by Johan Millert.\n\nThanks for the support from the people of the Pokemon Go Uppsala Discord server, primarily s1lence and Pettri,\nand Zinnas and Dragonknight from Ume\u00e5 and V\u00e4nn\u00e4s, respectively.\n\nThanks to our donors for supporting this project <3 - biggest donors so far is Zinnas and Dragonknight. THANKS! :)\n\n## Notes\n\nIt's very likely you need to know a bit of Java and Spring Boot for this application to be useful to you,\nin its current, source-code state.\n\n## Data\n\nRaid boss counter data copied from:\n\nhttps://pokemongo.gamepress.gg/raid-boss-counters\n\nSome data from https://raw.githubusercontent.com/BrunnerLivio/PokemonDataGraber/master/output.json\n\nGym data retrieved with the assistance of Johan Millert.\n"
 },
 {
  "repo": "JohnnyJayJay/poker",
  "language": "Clojure",
  "readme_contents": "# poker\n\nA Clojure implementation of a poker game ([Texas Hold 'em](https://en.wikipedia.org/wiki/Texas_hold_%27em)) and a corresponding Discord bot to play poker in chat.\n\nThis is (roughly) how the logic part is used:\n\n```clojure\n(require '[poker.logic.game :as poker]\n         '[poker.logic.core :as cards])\n\n(def player-budgets {\"Alice\" 100 \"Bob\" 85})\n(def game (poker/start-game 10 (keys player-budgets) (shuffle cards/deck) player-budgets))\n\n; Available functions\n(poker/possible-moves game)\n(poker/call game)\n(poker/raise game 20)\n(poker/fold game)\n(poker/all-in game)\n```\n\n## Bot\n\n[![Discord Bots](https://top.gg/api/widget/461791942779338762.svg)](https://top.gg/bot/461791942779338762)\n\nHere are a few impressions of what it looks like:\n\n![](https://i.imgur.com/zGCQoHN.png)\n![](https://i.imgur.com/FeJTYD5.png)\n![](https://i.imgur.com/yAWQtXn.png)\n\nThe bot is public, you can invite it [here](https://discord.com/api/oauth2/authorize?client_id=461791942779338762&permissions=329792&scope=bot).\n\nIt is currently not guaranteed to be online 24/7 since some things may still change, but it should be online 99% of the time now.\n\n## Running\n\nYou are also free to host it yourself (either manually or using Docker):\n\n1. Get [Leiningen](https://leiningen.org/) (not needed for Docker)\n2. Clone this repo\n3. Put a `cofig.clj` file in the repo that looks like this:\n   \n   ```clj\n   {:token           \"TOKEN\"\n   :default-wait-time       25000   ; The default number of milliseconds to wait for players when starting a game\n   :default-buy-in  1000    ; The default buy-in if none is specified when running \"holdem!\"\n   :default-timeout         180000} ; The default number of milliseconds after which the current player, if they have not made a move, will fold automatically\n   ```\n4. Run `lein run` or `docker-compose up`\n\nNote that your bot needs to be on the [playing cards emoji server](https://discord.gg/sJB2xjK) for it to work out of the box. I am not the owner of that server, so I can't help with adding your bot there. Please be mindful of the server owner and don't annoy them.\\\nYou can also use your own custom emojis. For that, you'll have to modify the emoji ids in `poker.discord.display`.\n\n## License\n\nCopyright \u00a9 2020-2021 JohnnyJayJay\n\nThis program and the accompanying materials are made available under the\nterms of the Hippocratic License 2.1 which is available at\nhttps://firstdonoharm.dev/version/2/1/license.html\n"
 },
 {
  "repo": "reutsharabani/minipoker",
  "language": "Python",
  "readme_contents": "# pypoker\nSuper simple python poker implementation with a simplistic tkinter GUI\n\nTo install:\n\n    pip install minipoker\n\nTo run:\n\n    import minipoker\n\n# Samples:\n\n<img src=\"https://github.com/reutsharabani/minipoker/blob/master/minipoker/sample-pics/p1.png\"/>\n\n<img src=\"https://github.com/reutsharabani/minipoker/blob/master/minipoker/sample-pics/p2.png\"/>\n"
 },
 {
  "repo": "axross/aqua",
  "language": "Dart",
  "readme_contents": "# Aqua\n\n[![Codemagic build status](https://api.codemagic.io/apps/5f13196520f165f7137dc471/5f288e6c62e59203f98e84e8/status_badge.svg)](https://codemagic.io/apps/5f13196520f165f7137dc471/5f288e6c62e59203f98e84e8/latest_build)\n\n\u2660\ufe0f Beautiful Texas Hold'em poker odds calculator made of Flutter.\n\n- \ud83c\udf9b Effectively uses [ChangeNotifier](https://api.flutter.dev/flutter/foundation/ChangeNotifier-class.html)/[ValueNotifier](https://api.flutter.dev/flutter/foundation/ValueNotifier-class.html) with [AnimatedBuilder](https://api.flutter.dev/flutter/widgets/AnimatedBuilder-class.html)/[ValueListenableBuilder](https://api.flutter.dev/flutter/widgets/ValueListenableBuilder-class.html). No [provider](https://pub.dev/packages/provider) or BLoC pattern used\n- \ud83e\udde9 [Isolate](https://api.dart.dev/stable/2.9.0/dart-isolate/dart-isolate-library.html) and [Stream](https://api.dart.dev/stable/2.9.0/dart-async/Stream-class.html) are used for multithreading calculation and communication between main thread and isolates\n- \ud83d\udc85 Built of an original [theme](lib/src/constants/theme.dart) class and corresponding [widgets](lib/src/common_widgets). Dark mode is supported\n\n![Aqua](https://user-images.githubusercontent.com/4289883/89248433-9a76ba80-d5c4-11ea-9b23-b4d0a4dcc867.gif)\n\n## Download\n\n[<img src=\"https://user-images.githubusercontent.com/4289883/68385703-35fafd80-010f-11ea-8433-2c8e9994b023.png\" alt=\"Get it on Google Play\" height=\"40\" />](https://play.google.com/store/apps/details?id=app.axross.aqua&hl=en) [<img src=\"https://user-images.githubusercontent.com/4289883/68385704-35fafd80-010f-11ea-83ce-6bd8b7eff5d1.png\" alt=\"Download on the App Store\" height=\"40\" />](https://apps.apple.com/us/app/odds-calculator-for-poker/id1485519383)\n\nIf you want an access of the beta program, feel free to contact at [yo@kohei.dev](mailto:yo@kohei.dev)!\n\n## Bug Report / Feature Request / Contribution\n\nFeel free to open an issue or pull request! Everything you do would be grateful!\n"
 },
 {
  "repo": "udacity/CppND-Game-Server",
  "language": "C++",
  "readme_contents": "# C++ Game Server\n\nIn this project you'll build an autonomous, multi-processor, multi-threaded game server! Start by forking this repository and following the instructions below.\n\n## Step 1: Run bash scripts \nAt the terminal, type the following commands to create your project:\n\n```sh\ncd CppND-Game-Server\nbash bash/make_cmake.sh game_project\n```\nNext, run the following command to generate placeholder classes for the simulated physical objects (only doing Hand, Deck and Player here. Later you will create more).\n\n```sh\nbash bash/make_class.sh Card Hand Deck Player Dealer Table Chip Seat Bank Pot\n```\n\nFinally, you'll create your `main()` using the following command:\n\n```sh\nbash bash/make_main.sh game_server\n```\n\n## Step 3: Investigate the output\n\nFollow along with Robin as we investigate the output of these bash scripts!\n\n## Step 4: Build and test your project\nRun the following commands to build and test your project:\n\n```\nmkdir build\ncd build\ncmake\nmake\nctest\n```\n\n## Step 5: Investigate the output\n\nFollow along with Robin as we investigate the output of these commands!\n"
 },
 {
  "repo": "zanussbaum/pluribus",
  "language": "Python",
  "readme_contents": "# Pluribus - A Multiplayer agent to play Poker variants\n### This repo will hold an implementation of a pure Python implementation of Pluribus, Facebook's No-Limit 6-player Hold 'Em Poker Bot.\n\n\nThis will follow suit from some other reimplementations ([i.e.](https://github.com/karpathy/micrograd)) and aim to reimplemnt the main features of the Pluribus paper. This includes the equlibrium finding and depth limited solving. Currently, we will not implement the abstraction portion of the paper. We hope to extend this to Flop Hold'em. \n\n\n[Kuhn Poker](https://en.wikipedia.org/wiki/Kuhn_poker) \n===\nKuhn poker is a simplified game of poker where each player is given one card from a set of 3 cards. The third card is set aside. High card wins. We implement a variation of Kuhn poker where the three cards are chose from a set of 5 cards for three players. \n\n[Leduc Hold'em](http://poker.cs.ualberta.ca/publications/UAI05.pdf)\n===\nLeduc Hold'em is a poker variant where each player is dealt a card from a deck of 3 cards in 2 suits. The first round consists of a pre-flop betting round. The second round consists of a post-flop betting round after one board card is dealt. There is a two bet maximum per round, with raise sizes of 2 and 4 for each round. Each player antes 1 before the game starts.\n\nHere is the game tree for one round of the game\n![Leduc Tree](resources/images/leduc_tree.png \"Leduc Hold'em One Round Tree\")\n\n\nImplementation of Pluribus\n===================================\n- Monte Carlo Counterfactual Regret Minimization\n    * Samples action in game tree rather than traversing entire game tree\n    * One player is traverser on each iteration\n    * Linear CFR in early iterations\n    - [x] Two player Kuhn MCCFR\n    - [x] Three player Kuhn MCCFR\n    - [x] Three player Leduc MCCFR\n\n- Depth Limited Search\n    * Blueprint strategy calculated to get coarse grained strategy\n    * Search from all opponent actions to find best response\n    - [x] Real-time search Leduc Poker\n    - [ ] Real-time search Hold'em\n"
 },
 {
  "repo": "ashelly/PET",
  "language": "C",
  "readme_contents": "Poker Evaluator Testbed \n==================\n\n##PET: A Roundup and Speed Comparison of Seven Card Poker Hand Evaluators\n\n---------------------------------------------\n\n##What's This?\nA open test framework and speed comparison of seven card poker hand evaluators in C and C++.  Measuring the state-of-the art in open-source hand evaluators.  Inspired by James Devlin's [apparently defunct](http://www.codingthewheel.com/archives/poker-hand-evaluator-roundup)\n five card roundup at [CodingTheWheel](https://web.archive.org/web/20140717015339/http://codingthewheel.com/archives/poker-hand-evaluator-roundup/). \n\n\n##What do I do with it?\n\n1. [View existing results](https://github.com/ashelly/pet/wiki/results)\n\n      ![Sample Results](https://cloud.githubusercontent.com/assets/3831873/7707508/28546af2-fe1e-11e4-8f36-2b2eac8deb51.png \"Example\") \n\n2. [Contribute test results from your machine](howtoruntests.md)\n\n3. [Add more evaluators](howtoaddevaluators.md)\n\n4. Create more test scenarios. \n\n\n##How does it work?\n\nThe framework provides a C adaptor for each evaluator to give it a uniform interface.  Each Evaluator Under Test (EUT) is assigned a unique 3 letter abbreviation,  and implements the api defined in `PET_evaluator.h`. A set of macros in that header translates the API names to the evaluator's names so that we can use the same test harness for all of them.  See Interface.md for more details\n\n\nIt runs each evaluator through two tests, and times the performance for:\n\n- Enumerating every possible 7 card hand.\n - This test includes the cost of adding cards to the hand.\n- Enumerating lots (50,000,000 by default) of random hands.\n - This one creates the hands and calls `addcard` outside the timing loop.\n\nThere is a script to collect and plot the results. `python plot.py trials`\n\n\n## Evaluators Tested:\n\n- [CactusKev](cactuskev/README.md)\n- [TwoPlusTwo](twoplustwo/README.md)\n- [Paul Senzee's 7-Card](senzee/README.md)\n- [Steve Brecher's Holdem Showdown](showdown/README.md)\n- [PokerSource](pokersource/README.md)\n- [Ace Eval](ace_eval/README.md)\n- [Moritz Hammer](hammer/README.md)\n- [PerfectHash for CactusKev](perfecthash/README.md)\n\n## Coming In The Future\n- [SpecialK](specialk/README.md)\n- [PokerStove](pokerstove/README.md)\n\n\n### Licence\nThe PET code is open source, available under the terms of the MIT License (see LICENSE).  Individual evaluators are licenced under their original terms, see README files in each subidrectory.\n\n"
 },
 {
  "repo": "sbnb/poker-js",
  "language": "JavaScript",
  "readme_contents": "poker-js\n=============\n\nA convenience library for writing poker related programs, written in JavaScript.\n\nProvides the following objects in the POKER namespace.\n\n- Deck\n- Card\n- Hand\n\nand the function POKER.getWinners(hands)\n\n##Including in your code\n\n####As a node module:\n\n1. clone the repo or download poker.js\n2. include the POKER object into your code\n\n    var POKER = require('path/to/poker.js').POKER;\n\n####In a browser application:\n\n    <script src=\"path/to/poker.js\"></script>\n\nEither way the POKER namespace is created.\n\n##Usage\n\n####Create some specific hands\n\n    var tripAces = POKER.handFromString('As Ah Ad Ks 3c'),\n        flush = POKER.handFromString('7s 6s As Ks 3s'),\n        straight = POKER.handFromString('7s 6s 4c 3h 5s'),\n        lowStraight = POKER.handFromString('As 2s 4c 3h 5s');\n\n    var winner = POKER.getWinners([tripAces, flush, straight, lowStraight]);\n    // winner == [flush]\n\n    winner = POKER.getWinners([flush, straight]);\n    // winner == [flush]\n\n    winner = POKER.getWinners([lowStraight, straight]);\n    // winner == [straight]\n\n####Deal some hands from a deck\n\n    var deck = new POKER.Deck(),\n        hands = [];\n\n    for (var idx = 0; idx < 6; idx += 1) {\n        hands[idx] = new POKER.Hand(deck.deal(5));\n    };\n\n    // find the winner/s\n    var winner = POKER.getWinners(hands);\n\n\n####Further details\n\nSee [this article](http://www.webplay.in/articles/writing-a-poker-program-in-different-languages/)\n"
 },
 {
  "repo": "huangzy77/PokerRobot",
  "language": "Python",
  "readme_contents": "PokerRobot\u662f\u4e00\u6b3e\u53ef\u4ee5\u548c\u4eba\u7c7b\u73a9\u5fb7\u5dde\u6251\u514b\u7684\u8f6f\u4ef6\uff0c\u5229\u7528\u6982\u7387\u4f18\u52bf\uff0c\u51fb\u8d25\u4eba\u7c7b......\u54c8\u54c8\u54c8\u54c8\n\u8fd9\u6b3e\u8f6f\u4ef6\u53ef\u4ee5\u81ea\u52a8\u73a9\u817e\u8baf\u516c\u53f8\u7684\u624b\u6e38\u201c\u5fb7\u5dde\u6251\u514b\u201d\uff0c\u7528\u5230\u4e00\u4e9b\u673a\u5668\u5b66\u4e60\u7684\u5305\uff0c\u901a\u8fc7\u8c03\u6574MyAnswer\u5185\u53c2\u6570\uff0c\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u53ef\u4ee5\u51fb\u8d25\u4eba\u7c7b\u3002\u8fd9\u662f\u4e00\u4e2a\u6211\u7684\u81ea\u5a31\u81ea\u4e50\u9879\u76ee\uff0c\u53ea\u652f\u6301android\u624b\u673a\uff0c\u4ee3\u7801\u5199\u5f97\u5f88\u7c97\u7cd9\uff0c\u559c\u6b22\u53ef\u4ee5\u70b9\u4e2a\u8d5e....\u6709\u5174\u8da3\u7684\u5c0f\u4f19\u4f34\u62ff\u53bb\u7528\u7684\u65f6\u5019\uff0c\u8bf7\u6ce8\u660e\u51fa\u5904...\n\u4f7f\u7528\u524d\u63d0\uff1a\n1\u3001adb\u4e0b\u8f7d\u5e76\u8bbe\u7f6e\u597d\n2\u3001sklearn\u3001PIL\u3001pytesseract\u3001numpy...\u81ea\u89c9\u51c6\u5907\u597d...\n3\u3001\u5982\u679c\u89c9\u5f97\u6251\u514b\u724c\u8bc6\u522b\u7387\u4f4e\uff0c\u8bf7\u81ea\u89c9\u5728image_p\u6587\u4ef6\u5939\u4e0b\uff0c\u91c7\u96c6\u56fe\u50cf\uff0c\u91cd\u65b0\u8bad\u7ec3\n\n"
 },
 {
  "repo": "pokerplatform/Full-Online-Poker-Platform",
  "language": "Pascal",
  "readme_contents": ""
 },
 {
  "repo": "Lemoncode/planning-poker-example",
  "language": "TypeScript",
  "readme_contents": "<!-- PROJECT SHIELDS -->\n<!--\n*** I'm using markdown \"reference style\" links for readability.\n*** Reference links are enclosed in brackets [ ] instead of parentheses ( ).\n*** See the bottom of this document for the declaration of the reference variables\n*** for contributors-url, forks-url, etc. This is an optional, concise syntax you may use.\n*** https://www.markdownguide.org/basic-syntax/#reference-style-links\n-->\n\n[![Contributors][contributors-shield]][contributors-url]\n[![Forks][forks-shield]][forks-url]\n[![Stargazers][stars-shield]][stars-url]\n[![Issues][issues-shield]][issues-url]\n[![MIT License][license-shield]][license-url]\n\n<!-- PROJECT LOGO -->\n<br />\n<p align=\"center\">\n  <a href=\"https://github.com/Lemoncode/planning-poker-example\">\n    <img src=\"images/logo.png\" alt=\"Logo\" width=\"400\" height=\"400\">\n  </a>\n  <p align=\"center\">\n    T-shirt Planning Poker is a quick and simple tool for Scrum poker sessions. Create a new room, share it with your team and start estimating the size of your tasks using clothing sizes as reference.\n  </p>\n  <p align=\"center\">\n  Production site: <a href=\"https://www.tshirtplanning.com/\">TShirt Planning poker site</a>\n  </p>\n</p>\n<br />\n\n<!-- TABLE OF CONTENTS -->\n\n## Table of Contents\n\n- [About the Project](#about-the-project)\n  - [Built With](#built-with)\n- [Roadmap](#roadmap)\n- [License](#license)\n\n<!-- ABOUT THE PROJECT -->\n\n## About The Project\n\nUsing T-Shirt sizes in our Scrum poker session allows us to remove analysis paralysis and reach consensus estimate. With this tool, this process will be easier than ever. Share your stories on your voting room and the atendees will be able to assess them in a couple of clicks.\n\nThis project was developed by Lemoncode Frontend Master students:\n\n<!-- Include collaborators -->\n\n### Built With\n\n- [React](https://github.com/facebook/react/)\n- [Material-UI](https://material-ui.com/)\n- [Socket.io](https://socket.io/)\n- [Fonk](https://lemoncode.github.io/fonk-doc/)\n- [Docker](https://www.docker.com/)\n- [mongoDB](https://www.mongodb.com/)\n\n<!-- ROADMAP -->\n\n## Roadmap\n\nSee the [open issues](https://github.com/Lemoncode/planning-poker-example/issues) for a list of proposed features (and known issues).\n\n<!-- LICENSE -->\n\n## License\n\nDistributed under the MIT License. See `LICENSE` for more information.\n\n<!-- MARKDOWN LINKS & IMAGES -->\n<!-- https://www.markdownguide.org/basic-syntax/#reference-style-links -->\n\n[contributors-shield]: https://img.shields.io/github/contributors/Lemoncode/planning-poker-example.svg?style=flat-square\n[contributors-url]: https://github.com/Lemoncode/planning-poker-example/graphs/contributors\n[forks-shield]: https://img.shields.io/github/forks/Lemoncode/planning-poker-example.svg?style=flat-square\n[forks-url]: https://github.com/Lemoncode/planning-poker-example/network/members\n[stars-shield]: https://img.shields.io/github/stars/Lemoncode/planning-poker-example.svg?style=flat-square\n[stars-url]: https://github.com/Lemoncode/planning-poker-example/stargazers\n[issues-shield]: https://img.shields.io/github/issues/Lemoncode/planning-poker-example.svg?style=flat-square\n[issues-url]: https://github.com/Lemoncode/planning-poker-example/issues\n[license-shield]: https://img.shields.io/github/license/Lemoncode/planning-poker-example.svg?style=flat-square\n[license-url]: https://github.com/Lemoncode/planning-poker-example/blob/master/LICENSE.me\n"
 },
 {
  "repo": "peterjiawhite/Superhuman_AI_in_multiplayer_poker_-",
  "language": "Python",
  "readme_contents": "# Superhuman_AI_in_multiplayer_poker_-\n\u8be5\u8bba\u6587\u4e3b\u8981\u4ecb\u7ecd\u4e86\u7f8e\u56fd\u5361\u5185\u57fa\u6885\u9686\u5927\u5b66\u56e2\u961f\uff0c\u5728\u591a\u4eba\u5fb7\u5dde\u6251\u514b\u4e0a\u7684\u4eba\u5de5\u667a\u80fd\u65b0\u601d\u8def\uff0c\u5373\u4e0d\u518d\u7b80\u5355\u5bfb\u627e\u7eb3\u4ec0\u5747\u8861\uff0c\u800c\u5f15\u5165\u6094\u6068\u503c\u7684\u6982\u5ff5\uff0c\u81ea\u6211\u535a\u5f08\uff0c\u5e76\u91c7\u7528\u8499\u7279\u5361\u6d1bCFR\u65b9\u6cd5\uff0c\u6784\u5efa\u84dd\u56fe\uff0c\u8be5\u65b9\u6cd5\u901a\u7528\u6027\u5f3a\uff0c\u8be5\u56e2\u961f\u58f0\u79f0\u4ed6\u4eec\u7684\u5fb7\u5dde\u6251\u514b\u84dd\u56fe\u53ea\u5728\u4e24\u679aCPU\u8fd0\u7b978\u5929\u5373\u53ef\u5f97\u51fa\u84dd\u56fe\uff0c\u5373\u53ef\u4ee5\u5b9e\u73b0\u5b9e\u65f6\u535a\u5f08\u3002\u73b0\u5df2\u7ecf\u6709\u56fd\u5185\u56e2\u961f\u5c06\u5176\u7528\u5728\u4e86\u6597\u5730\u4e3b\u4e0a\u9762\uff0c\u6210\u6548\u663e\u8457\u3002\n"
 },
 {
  "repo": "worldveil/gopoker",
  "language": "Go",
  "readme_contents": "gopoker\n=====\n\nUses same algorithm and techniques as Deuces: \nhttps://github.com/worldveil/deuces\n\nHand evaluator command line utility for Go for 5, 6, and 7 card hands. Hands are given a rank in the range `[1, 7462]`, where 1 is a Royal Flush.\n\nExample usages:\n```\n$ go run evaluate.go As Ks Qs Js Ts 7h\n1\n$ go run evaluate.go 7h 5d 4c 3s 2h\n7462\n$ go run evaluate.go 7h 5d 4c 3s 2h\n7462\n$ go run evaluate.go Ts 9d 8c 7c 6h As\n1604\n```"
 },
 {
  "repo": "Harpspiel/NewPoker",
  "language": "PHP",
  "readme_contents": "This project is the completion of a basic Texas Hold-Em poker game kata, begun by Steve Shogren. I added the four of a kind, full house, two pair, straight and flush hands to the code as well as correcting and simplifying existing code.\n"
 },
 {
  "repo": "marhs/pokerai",
  "language": "Python",
  "readme_contents": "PokerAi\n=======\n\nArtificial Inteligence for Texas Hold'em\n\nIt's a submission for http://robopoker.org/ Texas Hold'em bot tournament. My bot receives POST petitions with the hand and table info, which is handled by a Flask server (webBot.py).\n\nFor comparisions and hand-rank, I use Peter Norvig's code (poker.py)\n\nI will implement some learning techniques later, because at this moment the bot only uses a Montecarlo approach to calculate the strenght of its hand. \n\n"
 },
 {
  "repo": "nbcx/poker",
  "language": "PHP",
  "readme_contents": "# \u6597\u5730\u4e3b\n\n\u6b64\u9879\u76ee\u4e3a\u6d4b\u8bd5NB\u5728Websocket\u65b9\u9762\u5e94\u7528\u7684\u7ec3\u624b\u9879\u76ee\uff0c\u6240\u4ee5\u6ca1\u6709\u505a\u4e25\u683c\u7684\u5b89\u5168\u5904\u7406\u548c\u529f\u80fd\u6d4b\u8bd5\uff0c\u4ec5\u4f9b\u53c2\u8003\u548c\u5b66\u4e60\u3002\n\u5982\u679c\u4f60\u60f3\u5e2e\u52a9\u5b8c\u5584\uff0c\u6b22\u8fcePR\uff01\n\n## \u73af\u5883\u8981\u6c42\n\n1. Linux/MAC, PHP 7.0 +, PHP-Sqlite, Redis\n2. [Swoole 2.1.3](https://github.com/swoole/swoole-src/releases) +\n3. [NB Framework](https://github.com/nbcx/framework)\n\n\n## \u5b89\u88c5\n\n1.\u4e0b\u8f7d\u9879\u76ee\n```shell\ngit clone https://github.com/nbcx/poker.git\ncd ./poker/server\ngit clone https://github.com/nbcx/framework.git nb\n```\nor\n```shell\ngit clone https://github.com/nbcx/poker.git\ncd ./poker/server\ncomposer install\n```\n\n2.\u8fd0\u884c\uff0c\u9700\u8981\u786e\u4fdd\u4f60\u7684redis\u5b89\u88c5\u5e76\u542f\u52a8\u3002\n```shell\ncd bin\n\n./server start\n```\n\u6839\u636e\u4f60\u7684php\u5b89\u88c5\u65b9\u5f0f\uff0c\u4e0a\u9762\u7684\u547d\u4ee4\u53ef\u80fd\u6267\u884c\u9519\u8bef\uff0c\u4f60\u53ef\u4ee5\u7528\u4f60\u81ea\u5df1\u5b8c\u6574\u7684php\u8def\u5f84\u65b9\u5f0f\u542f\u52a8\uff1a\n```shell\n/usr/bin/php server start\n```\n\n3.\u6d4f\u89c8\u5668\u8bbf\u95ee`http://127.0.0.1:9503`,\u5982\u679c\u663e\u793aAPI\u6587\u6863\uff0c\u5219\u8868\u793a\u6210\u529f\uff01\n\n\n## \u6d4b\u8bd5\n\u6e90\u7801\u76ee\u5f55\u4e0b\u7684client\u662f\u4e00\u4e2a\u7b80\u5355\u7684web\u529f\u80fd\u6d4b\u8bd5\u5ba2\u6237\u7aef\uff0c\u76f4\u63a5\u6253\u5f00index.html\u6ce8\u518c\u767b\u5f55\u5c31\u53ef\u4ee5\u4f7f\u7528\u3002\n\u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u7528nginx\u6765\u8bbf\u95ee\uff0c\u53ea\u9700\u8fd9\u6837\u914d\u7f6e\u4e00\u4e0b\uff1a\n```\nserver {\n    listen 80;\n    server_name xxxxx.cn;\n    index index.html;\n    root /home/www/poker/client/;\n\n    location ~ .*\\.(svg|woff2|map|html|woff|ttf|ico|css|js|gif|jpg|jpeg|png|bmp|swf)$ {\n        expires 90d;\n    }\n}\n```\n\n## \u529f\u80fd\n\n- [x] \u767b\u5f55\u6ce8\u518c\n- [x] \u623f\u95f4\u5217\u8868\n- [x] \u521b\u5efa\u623f\u95f4\u548c\u5bc6\u7801\u623f\u95f4\n- [x] \u8fdb\u5165\u623f\u95f4\u548c\u9000\u51fa\u623f\u95f4\n- [x] \u6e38\u620f\u51c6\u5907\u548c\u53d6\u6d88\u51c6\u5907\n- [x] \u62a2\u5730\u4e3b\n- [x] \u53d1\u724c\n- [x] \u51fa\u724c\u4ee5\u53ca\u51fa\u724c\u89c4\u5219\u9a8c\u8bc1\u548c\u5927\u5c0f\u6bd4\u8f83\n- [x] \u623f\u95f4\u804a\u5929\n- [x] \u4e0a\u7ebf\u4e0b\u7ebf\u901a\u77e5\n- [ ] \u51fa\u724c\u7b49\u5f85\u65f6\u95f4\u4e0d\u80fd\u8d85\u8fc7\u89c4\u5b9a\u65f6\u95f4\n- [ ] \u6258\u7ba1\n\n## \u6280\u672f\u4ea4\u6d41\n\nQQ\u7fa4: 1985508"
 },
 {
  "repo": "philipok-1/Poker",
  "language": "Python",
  "readme_contents": "Poker\n=====\n\nA Texas Hold'Em poker game in Python\n\nPoker.py is the game engine and deck/player generator.  Handles side pots (this took me about a month to work out) just about..\n\nimported modules:\n\nPokerhands.py is a hand evaluator and scoring tool, takes a value (1-13) of individual cards in a player's hand and returns a score, including facility for tie-breaks/split pots\n\nPokerstrat.py is a module that allocates player strategies; currently has one AI that plays at random, a Human (needs keyboard input), and one other (see below)\n\nWorking on implementing an algorithm for David Sklansky's tournament all-in/fold strategy\n\nAny suggestions on making my sprawling code sleeker welcome\n\ncheers\nphilip\n"
 },
 {
  "repo": "guipenedo/PokeRadar",
  "language": "Java",
  "readme_contents": "# PokeRadar\nAndroid scanner app for pokemon go.\n\n**No longer maintained.**\n\n<p>\n<img alt=\"Main interface\" src=\"https://raw.githubusercontent.com/guipenedo/PokeRadar/master/screenshots/screenshot1.png\" width=\"200\">\n<img alt=\"Begin scan\" src=\"https://raw.githubusercontent.com/guipenedo/PokeRadar/master/screenshots/screenshot2.png\" width=\"200\">\n<img alt=\"Pokemon countdown\" src=\"https://raw.githubusercontent.com/guipenedo/PokeRadar/master/screenshots/screenshot3.png\" width=\"200\">\n<img alt=\"Lured pokestop countdow\" src=\"https://raw.githubusercontent.com/guipenedo/PokeRadar/master/screenshots/screenshot4.png\" width=\"200\">\n<img alt=\"Settings\" src=\"https://raw.githubusercontent.com/guipenedo/PokeRadar/master/screenshots/screenshot5.png\" width=\"200\">\n<img alt=\"Filter pokemon\" src=\"https://raw.githubusercontent.com/guipenedo/PokeRadar/master/screenshots/screenshot6.png\" width=\"200\">\n<img alt=\"Gym details\" src=\"https://raw.githubusercontent.com/guipenedo/PokeRadar/master/screenshots/screenshotgym.png\" width=\"200\">\n</p>\n\n# How to install\n1. Download the latest app-debug.apk file from https://github.com/guipenedo/PokeRadar/releases\n2. Click to install it\n3. Enable \"Unknown sources\" in settings to allow the install\n4. Click install\n\n# How to use\nSimply login with a throwaway PTC account (create one at https://www.pokemon.com/us/pokemon-trainer-club/sign-up/) select your options in the settings menu and click scan!\n\n# Features:\n* Simple clean interface\n* Configurable scan range\n* Configurable delay between requests\n* Choose the scan center! Default = your location. To change simply long press anywhere in the map or drag the center marker!\n* Optionally show spawnpoints\n* Optionally show pokestops\n* Countdown for time left in lured pokestops\n* Optionally show gyms and view defending team and prestige points\n* Filter out pokemons! Hide those ugly zubats!\n* Show scan area\n* Spiral scan algorithm\n* Progressbars to display progress\n* Cancel button\n* Expected scan time\n* Display dym details\n* View list of pokemons defending gym\n* View pokemon defending gyms' stats: iv attack, defense and stamina\n* View the IV ratio of pokemons defending gyms!\n\nIf you have any issues/features create an issue here on github.\n"
 },
 {
  "repo": "feliciosan/PokerIT",
  "language": "JavaScript",
  "readme_contents": "# PokerIt\n\nA planning poker web application.\n\n## Getting Started\n\n### Prerequisites\n\n-   [Nodejs](https://nodejs.org/en/)\n-   [Firebase App and Firestore database](https://console.firebase.google.com/)\n\n### Running app\n\n### `Setup your Firebase APP KEY`\n\nFill the .env file with your Firebase App Key.<br />\n\n### `yarn install`\n\nInstalls the app dependences.<br />\n\n### `yarn start`\n\nRuns the app in the development mode.<br />\n\n### `yarn build`\n\nBuilds the app for production to the `build` folder.<br />\n\n## Built With\n\n-   [ReactJs](https://reactjs.org/)\n-   [Google Firestore](https://firebase.google.com/docs/firestore)\n\n## Authors\n\n-   [Fel\u00edcio Santos](https://github.com/feliciosan)\n"
 },
 {
  "repo": "miniharryc/poker",
  "language": "Go",
  "readme_contents": "poker\n=====\n\nGo implementation of CactusKev's pokerlib with \nPaul Senzee's perfect hash mod integrated.\n\n\nDownloading\n===========\n_TBD_\n\nExample\n=======\n_TBD_\n\n\n"
 },
 {
  "repo": "huntrar/PokerNet",
  "language": "Python",
  "readme_contents": "# PokerNet\n\n## Predicting poker hand's strength with artificial neural networks in Python\n\nBased off the similarly titled study [\"Predicting Poker Hand's Strength With Artificial Neural Networks\"](bit.ly/1RecknH) by G\u00f6kay Di\u015fken from Adana STU, PokerNet is a Python-based and undergraduate-led near identical study and final Artificial Intelligence project.\n\n## Abstract\n\nBased off the similarly titled study \u201cPredicting Poker Hand's Strength With Artificial Neural Networks\u201d by G\u00f6kay Di\u015fken from Adana STU, PokerNet is a Python-based variant which investigates the effectiveness of neural network poker hand classification using different supervised learning methods and their associated parameters. We also compare and contrast our results with those presented in the original MATLAB-implemented study. In both studies, artificial neural networks are used to classify five cards drawn from a standard deck of 52 by suits and ranks of each card. The network classifies these cards into their respective poker hands, e.g. pairs, straight, flush, according to the poker game. Python machine learning library [PyBrain](https://github.com/pybrain/pybrain) is used to create, train and evaluate the network, using data taken from the [UCI data archive page](https://archive.ics.uci.edu/ml/datasets/Poker+Hand). Gradient descent method and resilient back-propagation are selected as training methods, similar to the original study, although the original also included the second order scaled conjugate gradient method which was missing from the machine learning library we chose. Each method is used several times for different numbers of neurons, learning rates, maximum epoch numbers, and hidden transfer functions. Purelin and tansig functions are applied to the hidden layer while the softmax function is applied to the output layer in order to \u201csquash\u201d the weights. Our results were closely aligned with the results published in the original study. We saw that resilient back-propagation achieved the best performance, achieving a peak of 54.8% hit rate and 0.090 MSE. We found this far lower from the original studies numbers from executing a much smaller number of epochs on account of time and power constraints.\n\n## Basics of poker and preprocessing\n\nThe card features include a suit and a rank, which range from 1-4 and 1-12, and a single target number, which range from 0-9 and indicate one of ten possible poker hands. The ten hands in poker from weakest to strongest are as follows: \u201chigh card\u201d, \u201cone pair\u201d, \u201ctwo pairs\u201d, \u201cthree of a kind\u201d, \u201cstraight\u201d, \u201cflush\u201d, \u201cfull house\u201d, \u201cfour of a kind\u201d, \u201cstraight flush\u201d, and \u201croyal flush\u201d. One pair means, there is one pair of equal ranked cards. Two pairs mean we have two pairs of equal ranks. Three of a kind is three equal ranks. Straight means five cards are sequentially ranked without a gap. Flush is the name of a hand consisting five cards with the same suit. Full house is a pair with three of a kind (ranks of the pair and other three are different). Four of a kind is four equal ranks. Straight flush is combination of straight and flush. Royal flush is the always winning hand with Ace, King, Queen, Jack, Ten with flush.\n\nUsing Python we read in the training data as a 25010x11 matrix and convert the target class from 0-9 to a bit vector, where the index corresponding to this target class has value 1 and the rest 0. This is done in order to have the same dimensionality between the feature and target vectors. The testing data is also read in, as a 25000x11 matrix, and has this preprocessing applied as well as it will come in handy during the evaluation phase.\n\n## Training Methods\n\nThe training methods we chose are two of the three stated in the original study, the reason behind the lacking one being explained above. Gradient descent method with momentum is the first method we examine and it is a back-propagation type neural network. This means the network attempts to find a global minimum along the steepest vector of the error surface by using partial derivatives. The nature of this network also proved to be our downfall in attempting to use another network library, as we had difficulty extending our cost and activation functions due to the intricacy of their derivatives. For this particular method our findings were consistent with the original study in that the learning rate parameter had a large effect on the output of this network. Due to errors in implementation we found the weight values for a network using this method alongside a linear activation function had the problem of reaching infinity very quickly, and this was only remedied by cutting down the learning rate used in the original study, .2 and .02, to, .01 and .001 respectively. However, these smaller learning rates impaired the network as it would require a much larger amount of iterations to reach convergence. We use the momentum parameter to scale the change applied to the weights in each iteration, to increase convergence.\n\nThe second and more impressive method used was resilient back-propagation, which functions similarly to a normal back-propagation network with the caveat that it only takes into consideration the sign of the partial derivatives, rather than magnitude. In every iteration, if the weight is found to have changed signs (and thus express instability), that weight is multiplied by 0.5, while weights which remained stable are multiplied by 1.2.\n\n## Simulation Results and Discussion\n\nSimulation data can be viewed in the results/ directory.\n\nWe examined both methods in our simulations and used several varied parameters to investigate their effect on the methods. Maybe the most important distinction between this study and the original is the number of epochs used. Due to the lengthy runtime of the network and time constraints imposed upon us by our flip flopping implementations we were forced to settle on cutting down the number of epochs by a magnitude of 10. The effect of this did not wholly prevent us from making conclusions as the data proved to still be statistically significant enough in some cases, but it surely put a damper on results. The original study managed to reach classification rates above 90%, while our best method and parameters could not break 60%. The number of hidden neurons chosen in some simulations varied from 10, to 30, to 50, while the hidden layer activation functions varied between purelin (linear) and tansig (tanh). We fixed the momentum parameter of the gradient descent method to 0.7, as this was the value chosen in the original study. The original study, however, chose learning rates of .2 and .02, and as mentioned above we were forced into using .01 and .001 in order to properly run the gradient descent method. Because of this change, we examined the resilient back-propagation method with all four of these learning rates in order to compare and contrast within our study as well as theirs.\n\nTables 1-5 were simulated using the gradient descent with momentum method. These tables mostly coincide with the tables in the original study, sans the tables examining the scaled conjugate gradient method which we did not include. Table 1 shows the training results for different neuron sizes. Table 2 shows the same results with the same parameters yet a different learning rate. Table 3-5 shows the effect of different iteration limits for different neuron numbers.\n\nIn Table 6 we attempt to compare our two methods using the same parameters for each. The resilient back-propagation method was found to outperform the gradient descent method in the original study, while in ours it showed to be more consistent as gdm had widely variable hit rate, depending on the learning rate given. In Tables 7 and 8 we compare the different hidden layer activation (transfer) functions, purelin and tansig. We observed that tansig consistently outperformed purelin for our data, as tansig suppresses the output value by bounding weights between -1 and 1, while linear performs no operation.\n\n## Future Work\n\nWe had many constraints in this project, mostly time and processing power, and also difficulty of finding a proper neural network implementation in Python. We would have also enjoyed to examine the network with a larger set of training methods, which themselves would introduce more learning parameters as well. Our results were consistent with the original study, but with much less statistical accuracy due to our smaller amount of training epochs, so we would wish to reproduce this project with a higher amount of iterations. The problem itself is fairly simple and is useful for proof of neural network accuracy in classification problems, so further work may investigate other neural network training methods other than back-propagation.\n\n## References\n\nDi\u015fken, G\u00f6kay. \"Predicting Poker Hand\u2019s Strength Wih Artificial Neural Networks.\" Adana Bilim Ve Teknoloji \u00dcniversitesi (2014).\n\nUCI Machine Learning Repository: Poker Hand Data Set. (2016). Archive.ics.uci.edu. Retrieved 10 March 2016, from https://archive.ics.uci.edu/ml/datasets/Poker+Hand\n\n## Contributors\n\nHunter Hammond\n\nJacob Newberry\n\nChris Watanabe\n"
 },
 {
  "repo": "betboy/texas",
  "language": "Java",
  "readme_contents": "# texas\ntexas holdem poker and three card poker games. \n\nA poker client useing html,jquery,websocket,canvas. \n\nOnly contains login,regist,three basic play rooms,rank by chips. \n\nYou can see this project at the website below. \n\nhttp://120.26.217.116:8080/texas/texasIndex.html. \n\n\u5fb7\u5dde\u6251\u514b\u7684\u670d\u52a1\u7aef\u4ee3\u7801\uff0c \n\n\u5305\u542b\u4e86\u5fb7\u5dde\u6251\u514b\u548c\u6b22\u4e50\u62fc\u4e09\u5f202\u4e2a\u6e38\u620f\u7684\u5ba2\u6237\u7aef\u90e8\u5206\u3002 \n\n\u5305\u542b\u767b\u9646\u6ce8\u518c\u529f\u80fd\uff0c\u7b79\u7801\u6392\u884c\u699c\uff0c\u5fb7\u5dde\u6251\u514b\u4ec5\u67093\u79cd\u4e0b\u6ce8\u989d\u5ea6\u7684\u623f\u95f4\u3002 \n\n\u53c2\u8003\u6548\u679c\u5730\u5740http://120.26.217.116:8080/texas/texasIndex.html \n\n\u5ba2\u6237\u7aef\u4ee3\u7801\u5730\u5740https://github.com/lxr1907/pokers.git\n"
 },
 {
  "repo": "codeKonami/poker-hand",
  "language": "JavaScript",
  "readme_contents": "Poker Texas Holdem Cactus Kev's algorithm in JavaScript\n=====\n\nEvaluate the score (the lower the better) of a poker hand as described in this post blog : http://suffe.cool/poker/evaluator.html.\nYou can compare two poker hands to find out who wins or if it's a tie.\n\nI've ported some part Cactus Kev's C code : http://suffe.cool/poker/code/\n\nIt works on browser side too although the lib is a little heavy ~102 Kb because of the use of lookup tables. But it's robust and really fast. You can evaluate all the cards combinations in few seconds.\n\n### How to install\n\nNode.js >= 6\n\n```sh\nnpm install --save poker-hand-evaluator\n```\n\n### How to use\n\n```js\nconst PokerHand = require('poker-hand-evaluator');\n\nconst myPokerHand = new PokerHand('KS KH QC AH AD');\nconst hisPokerHand = new PokerHand('KD KC AS AH TD')\n\nconsole.log(myPokerHand.describe());\n// { hand: [ 'KS', 'KH', 'QC', 'AH', 'AD' ],\n//   score: 2468,\n//   rank: 'TWO_PAIRS' }\n\nconsole.log(hisPokerHand.describe());\n// { hand: [ 'KD', 'KC', 'AS', 'AH', 'TD' ],\n//   score: 2470,\n//   rank: 'TWO_PAIRS' }\n\nconsole.log(myPokerHand.getRank());\n// TWO_PAIRS\nconsole.log(hisPokerHand.getRank());\n// TWO_PAIRS\n\nconsole.log(myPokerHand.getScore());\n// 2468\nconsole.log(hisPokerHand.getScore());\n// 2470\n\nconsole.log(myPokerHand.toString());\n// KS KH QC AH AD\nconsole.log(hisPokerHand.toString());\n// KD KC AS AH TD\n\n\n/**\n * return 1 if it's a Win\n * return 2 if it's a Loss\n * return 3 if it's a Tie\n */\nconsole.log(myPokerHand.compareWith(hisPokerHand));\n// 1\n```\n\n### How to develop\n\nNode.js >= 8.5.0 is necessary to run the tests\n\n```sh\ngit clone https://github.com/codeKonami/poker-hand.git\ncd poker-hand\n# Install dev dependencies (Webpack, babel, Jest ...)\nnpm install\n# Launch an example\nnpm run dev\n```\n\n### How to test\n\n```sh\nnpm run test\n```\n\n![npm run test](poker-test.gif)\n\nThis command will run the unit tests (through [Jest](https://facebook.github.io/jest/)) and will also evaluate the time it takes to evaluate all the combinations. Finally it will display 10 random comparisons.\n\n### How to build\n\n```sh\nnpm run build\n```\n\nThis command generates a pokerhand.min.js file in the `dist/` folder to be used on browser. You can try an example of implementation on browser by launching a web server in the root folder.\n\n```sh\npython -m SimpleHTTPServer\n# Now go to http://localhost:8000\n```\n\n### TO DO\n\n- [ ] Load the C code of Kev Cactus directly in Node.js to compare the result between my code and his results.\n- [ ] Add the Paul Senzee's optimisation mentioned in the blog post [here](http://www.paulsenzee.com/2006/06/some-perfect-hash.html)\n"
 },
 {
  "repo": "tythorsen/planning-poker",
  "language": "JavaScript",
  "readme_contents": "# Planning Poker\n\nA free, online agile estimation tool for distributed or co-located project teams.\n\nhttp://www.thorsent.com/planning-poker\n\n## Logging Issues\n\nPlease feel free to use the project's [issues page][issues] to log bugs, ask questions, or request new features.\n\nWe are also happy to announce that we've been granted an open source license for JIRA. If you are planning on contributing, please register an Atlassian Cloud account on our [JIRA][jira] instance as we will be using it for all project tracking functions.\n\n![Atlassian Logo][atlassian]\n\n## Installing Locally\n\n#### Installing all project code and dependencies\n\n1. Fork/Clone this repository on your local machine\n1. Make sure you have [node js][node] installed\n1. Install the Grunt Command Line Interface globally\n  * `$ npm install -g grunt-cli`\n1. In your planning-poker root directory, install project dependencies\n  * `$ npm install`\n\n#### Building and Deploying the application\n\n1. Run the Grunt dev build task. The task will continue to run, watching for js or css changes. This is the default grunt task\n  *  `$ grunt [default]` \n  * There is also a Grunt prod build. This task minifies js and css files, and terminates once complete (no watch)\n    * `$ grunt prod`\n1. Start a local server. Uses port 4000 by default. Can be configured in `Gruntfile.js`\n  * `$ grunt serve`\n1. Application should now be available at [localhost:4000][local]\n\n\n[issues]: https://github.com/thorsenty/planning-poker/issues\n[jira]: https://thorsent.atlassian.net/browse/PLAN\n[node]: http://nodejs.org/\n[local]: http://localhost:4000/\n\n[atlassian]: assets/images/atlassian-rgb-navy-small.png\n"
 },
 {
  "repo": "rundef/poker-odds-calculator",
  "language": "Java",
  "readme_contents": "# Poker Equity Calculator\n\nA pre-flop and post-flop odds calculator for Texas Holdem.\n\nTo compile the library, run the following command\n```bash\ngradle build\n```\n\n## Usage\n\n* Pre-flop odds\n\n*example: we want to know the odds of 3 pre-flop all-in players holding the following hands: J\u2665J\u2664 vs T\u2662T\u2664 vs A\u2667K\u2667*\n```bash\njava -jar build/libs/poker-odds-calculator.jar JhJs TdTs AcKc\n```\n\n* Post-flop odds\n\n*example: we want to know the odds of a player holding the J\u2662 and the Q\u2662 against a player with the J\u2665 and the J\u2664 on a 7\u26629\u2662T\u2664 board, with 2 cards to come*\n```bash\njava -jar build/libs/poker-odds-calculator.jar -b 7d9dTs JhJs JdQd\njava -jar build/libs/poker-odds-calculator.jar -b 7d9dTs7s JhJs JdQd\n```\n> -b denotes the board\n"
 },
 {
  "repo": "xcanchal/scrum-poker",
  "language": "JavaScript",
  "readme_contents": "![Scrum poker](./readme-assets/logo-bg.png)\n\nRealtime Scrum poker application to be used in remote sprint plannings. Built with [NextJS](https://nextjs.org/) and [Socket.IO](https://socket.io/).\n\n## Live site\n\nhttps://www.online-scrum-poker.com\n\n## How to use it\n\nCreate a room, selecting the cards mode (either Fibonacci or T-shirt sizing).\n\n![create a room](./readme-assets/create-room.png)\n\nIn the host view, you can copy the link to share it with your teammates so they can join the room. Start the session and you'll start seeing their votes (green cards).\n\n![host view](./readme-assets/host-view.png)\n\nThis is the guest view, where each of the room members will vote the current task. The host is the last one to see this view, the last to vote (must wait until all others did it).\n\n![guest view](./readme-assets/guest-view.png)\n\nResults! After agreeing on the final punctuation, clear the votes and another round will start.\n\n![results](./readme-assets/results.png)\n"
 },
 {
  "repo": "Cysha/casino-holdem",
  "language": "PHP",
  "readme_contents": "# Texas Holdem Library\r\n[![Build Status](https://travis-ci.org/Cysha/casino-holdem.svg?branch=master)](https://travis-ci.org/Cysha/casino-holdem)\r\n[![Code Coverage](https://scrutinizer-ci.com/g/Cysha/casino-holdem/badges/coverage.png?b=master)](https://scrutinizer-ci.com/g/Cysha/casino-holdem/?branch=master)\r\n[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/Cysha/casino-holdem/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/Cysha/casino-holdem/?branch=master)\r\n[![Code Climate](https://codeclimate.com/github/Cysha/casino-holdem/badges/gpa.svg)](https://codeclimate.com/github/Cysha/casino-holdem)\r\n\r\n[![Total Downloads](https://poser.pugx.org/cysha/casino-holdem/downloads)](https://packagist.org/packages/cysha/casino-holdem)\r\n[![License](https://poser.pugx.org/cysha/casino-holdem/license)](https://packagist.org/packages/cysha/casino-holdem)\r\n\r\nPHP 7+ library to extend Cysha/Casino with Texas Holdem!\r\n\r\n\r\n## Install\r\n\r\nVia Composer\r\n\r\n``` bash\r\n$ composer require cysha/casino-holdem\r\n```\r\n\r\n## Testing\r\n\r\nWe try to follow BDD and TDD, as such we use both [phpspec](http://www.phpspec.net) and [phpunit](https://phpunit.de) to test this library.\r\n\r\n``` bash\r\n$ ./bin/phpunit\r\n```\r\n\r\n## License\r\n\r\nThe MIT License (MIT). Please see [License File](LICENSE) for more information.\r\n"
 },
 {
  "repo": "zygmuntz/kaggle-poker-hands",
  "language": "Python",
  "readme_contents": "kaggle-poker-hands\n==================\n\nCode for the [Poker Rule Induction competition](http://www.kaggle.com/c/poker-rule-induction) at Kaggle. Scores 0.93. Start with `run.sh`. \n\nIf you change --oaa to --ect and tune regularization a little bit you will get > 0.98.\n"
 },
 {
  "repo": "brandinho/Poker-Probability-Approximation",
  "language": "Python",
  "readme_contents": "# Poker Probability Approximation with Deep Learning\n\nThis project uses a neural network to quickly compute the probability of a hand ending in a win or tie. While lookup tables can be used, they are memory-intensive and cannot be stored in memory-constrained environments, such as mobile applications. Storing the weights in either numpy or tensorflow drastically reduces the memory required. \n\nThe learned model can be used in any betting round of Texas Hold'Em Poker.\n\nThe paper can be found at the link below:\n\nhttps://arxiv.org/abs/1808.07220\n\n## Getting Started\n\nTo get started, clone this repo and open the file `pokerDeepLearningModel.py`\n\nYou will see three variables near the top of the file which you can toggle before running \n\n```\nnum_data_points = 1000           # The number of instances we want in our sample dataset\nuse_existing_model = True        # Do you want to use a pre-computed model or train a new one?\ninference_sample_size = 100      # Size of sample to test the model on\n```\n\nThe file outputs the Mean Absolute Error (MAE) for the sample in which you are testing on \n\n## Deployment\n\nThe learned model can easily be loaded and used as an input to a heuristic-based agent or a machine learning-based agent. \n\n```\nprobability_saver = tf.train.import_meta_graph(\"Probability Model/ProbabilityApproximator.meta\")\nprobability_saver.restore(sess, tf.train.latest_checkpoint(\"Probability Model\"))\n\ngraph = tf.get_default_graph()\nprobabilityFunction = probabilityApproximator(sess, probabilityInputList.shape[1], 0.0005, use_existing_model, graph)\n```\n\nA popular heuristic implementation is to use the probabilities obtained from the neural network in conjuction with your pot odds to make profitable decisions. Conversely, with a machine learning agent, we can use a function approximation for the policy and feed these probabilities as some of the inputs.\n\n## Work in Progress\n\nThe combinatorics for straight flush need to be updated in the `pokerCombinatorics.py` file\n"
 },
 {
  "repo": "kvesteri/python-poker",
  "language": "Python",
  "readme_contents": ""
 },
 {
  "repo": "aprey10/open-poker",
  "language": "Java",
  "readme_contents": "[![GitHub license](https://img.shields.io/github/license/aprey10/open-poker)](https://github.com/aprey10/open-poker/blob/main/LICENSE)\n\n<p align=\"center\">\n    <img src=\"https://user-images.githubusercontent.com/4034723/104251770-71453a80-543e-11eb-8a7b-9bb0bebbb0f9.png\"><br/>\n    Jira plugin which adds simple and handy Planning (Scrum) Poker to the Issue View page.\n</p>\n\n[![Demo](https://img.youtube.com/vi/61iEyZg8JZw/maxresdefault.jpg)](https://youtu.be/x3JumyxaRho)\n\n### Donation\nOpen Poker is Free Software and it's available free of charge.\nYour donation, which is purely optional, supports the devlopement.\n\n[![paypal](https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif)](https://www.paypal.com/donate?business=5WSH9UURWWAN4&no_recurring=1&item_name=Open+Poker+plugin+support&currency_code=USD)\n\n\n### Actions description\n\n**Start Estimation** - starts a new estimation session for the current jira issue. The jira issue can have only one estimation session in progress.\n\n**Vote** - submit an estimate. The user can estimate only once during the session.\n\n**Stop Estimation** - stops active estimation. Only the user that started estimation can stop it.\n\n**Re-estimate** - starts a new estimation session.\n\n**Apply** - applies final estimate and populates 'Story Points' field (if it's present and final estimate is numeric)\n\n**Terminate estimation** - terminates estimation session.\n\n### Supported estimation scales\n\n**Planning Cards** - Classic planning poker sequence: 0, 1, 2, 3, 5, 8, 13, 20, 40, 100, ?, Coffee, Infinite.\n\n**Fibonacci** - Fibonacci sequence: 1, 2, 3, 5, 8, 13, 21, ?, Coffee, Infinite.\n\n**Linear** - Increments in a fixed value (1): 1, 2, 3,... 12\n\n**T-shirt size** - XS, S, M, L, XL, XXL, XXXL\n\n**Fist To Five** - Fist, 1, 2, 3, 4, 5\n\n\n### Data security and privacy statement\n\nThis plugin doesn't store or use any customer data.\n"
 },
 {
  "repo": "cgnicholls/rlpoker",
  "language": "Python",
  "readme_contents": "# rlpoker\nReinforcement learning algorithms to play Poker.\n\n## Create a game of Leduc Hold em with 3 cards:\n```\nleduc = Leduc.create_game(3)\n```\n\nRun NFSP on this:\n```\npython rlpoker/nfsp.py\n```\n\n## Solve Leduc Hold Em using cfr\n```\nstrategy = cfr(leduc, num_iters=100000, use_chance_sampling=True)\n```\n\nYou can also use external sampling cfr instead:\n```\npython -m examples.cfr --game Leduc\n```\n\nYou can also use external sampling cfr instead:\n```\npython -m examples.cfr --cfr_algorithm external --game Leduc\n```\n\n## Solve Leduc Hold Em using deep cfr\n```\npython -m examples.deep_cfr --game Leduc\n```\n# Installation\nUse the rlpoker conda environment.\n"
 },
 {
  "repo": "ynd/poker",
  "language": "C++",
  "readme_contents": ""
 },
 {
  "repo": "Karsens/pluribus-poker-bot-js",
  "language": "TypeScript",
  "readme_contents": "# Pluribus poker bot\n\nI'm trying to implement the pluribus poker bot from this [paper](https://science.sciencemag.org/content/365/6456/885) and the [supplementary materials](https://science.sciencemag.org/content/suppl/2019/07/10/science.aay2400.DC1). The latter provides pseudo code, which I have tried to replicate in a node js environment.\n\nCurrently, the hands aren't played correctly; sometimes the round increases when it shouldn't be the case. Some other times, the bot gets in a loop.\n\nThere are grand challenges to implement this correctly. The biggest one I'm afraid, is that you can't use NodeJS with multiple cores with a shared memory. At least, I don't think that's possible. And it's necessary for the bot to train right. The paper says the bot needs 64 cores and 512 GB of RAM. AWS has these kind of instances on pay per minute, so that's great. But the script needs to be able to use all 64 cores while having a shared memory.\n"
 },
 {
  "repo": "fogleman/Poker",
  "language": "Python",
  "readme_contents": "Python Implementation of Cactus Kev's Poker Hand Evaluator\n\nhttp://www.suffecool.net/poker/evaluator.html\n"
 },
 {
  "repo": "boolean-uk/js-poker-challenge",
  "language": "JavaScript",
  "readme_contents": "# Poker Challenge\n\nWelcome to the Poker challenge!\n\n## Learning Objectives\n- Build a simple program using functions, loops, and flow control\n- Use `git` & GitHub to commit work and open a Pull Request\n\n## Instructions\n\n1. Fork this repository and then:\n```sh\ngit clone [your repo] && cd js-poker-challenge\nnpm ci # installs dependencies listed in package.json\n```\n2. Run the tests from your project root directory. There should be a lot of failures to begin with. You can run your test suite in a few ways:\n```sh\n$ npm test # run the full test suite\n$ npm run test-main # run only the tests for the main exercise\n$ npm run test-extension1 # run only the tests for extension 1\n$ npm run test-extension2 # run only the tests for extension 2\n```\n3. In GitHub, [open a Pull Request](https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/creating-a-pull-request) from your forked repository to the challenge repository.\n4. Implement the criteria below locally and [push your code](https://docs.github.com/en/github/managing-files-in-a-repository/adding-a-file-to-a-repository-using-the-command-line) to your repository! Every push to a branch that has an open Pull Request will update it automatically with your changes.\n5. Check the status of the automated tests on the Pull Request - update your implementation if needed.\n\n# Main Task\n\nGiven two pairs of cards, calculate the winning pair.\n\n## Acceptance Criteria\n\n```js\nwinningPair(['Q', '6'], ['J', 'K']) // => []\n\nwinningPair(['9', '9'], ['7', '7']) // => ['9', '9']\n\nwinningPair(['K', '3'], ['K', 'K']) // => ['K', 'K']\n```\n\n## Extended Acceptance Criteria\n\nFor the extended criteria, you may need to look up functions and techniques you have not used before. Pay special attention to the available Array functions as detailed in the [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array).\n\n### Array of Pairs\n\nThe `winningPairFromArray` function should accept an array of arrays, each of which contain a pair of cards, and calculate the winning pair from that. For example, the function should be able to take in `[['A', 'A'], ['3', '7'], ['K', 'K']]` and return `['A', 'A']`.\n\nThis is known as a two dimensional array. There is no limit to the amount of arrays contained within the array.\n\n**Example**\n```js\nwinningPairFromArray([['K', '5'], ['3', '7']]) // => []\n\nwinningPairFromArray([['K', 'K'], ['A', 'A']]) // => ['A', 'A']\n\nwinningPairFromArray([['4', '3'], ['6', '6'], ['7', '7'], ['3', '3']]) // => ['7', '7']\n```\n\n### Three of a Kind\n\nSimilar to the above, the `winning3CardHand` function should calculate the winning hand from an array that can contain both pairs *and* three of a kind. Each hand may contain either two or three cards.\n\n**Example**\n```js\nwinning3CardHand([['K', '5'], ['3', '7'], ['K', 'J', '4']]) // => []\n\nwinning3CardHand([['5', '5', '3'], ['7', '7', '7']]) // => ['7', '7', '7']\n\nwinning3CardHand([['J', 'J'], ['9', '9'], ['6', '6', '4']]) // => ['J', 'J']\n```\n\n### Concise Code\nSplit up your functions in to multiple smaller functions that do one thing only. Read this [article on Clean Functions](https://github.com/ryanmcdermott/clean-code-javascript#functions) and apply the principles you think are relevant.\n"
 },
 {
  "repo": "mouhyi/Poker321",
  "language": "Java",
  "readme_contents": "****************************************************************************************************************************************\n\n*************************** Welcome to 321 Poker!  **************************\n\n\n\n\t\n\t\n*****************************************************************************\n\t\n\t\n****************************************************************************************************************************************\t\n"
 },
 {
  "repo": "StarFlight/Poker-Galore",
  "language": "ActionScript",
  "readme_contents": "Poker Galore is based on Cubeia AGPL3 poker. The original source code has been modified to support \nInvision Power Board along with missing features to make the game more attractive.\nWatch here: http://www.youtube.com/watch?v=ccAqpYYuG5Y&feature=mfu_in_order&list=UL\n\nGreat help from Fredrik and Peter at Cubeia to make this project a successful one!\nSpecial thanks to J.C. Roncancio for all graphics design for the game!\n\nSF"
 },
 {
  "repo": "kennethshackleton/SKPokerEval",
  "language": "C++",
  "readme_contents": "# SKPokerEval\n\nA fast and lightweight 32-bit Texas Hold'em 7-card hand evaluator written in C++.\n\n## Travis status\n\n[![Build Status](https://travis-ci.org/kennethshackleton/SKPokerEval.svg)](https://travis-ci.org/kennethshackleton/SKPokerEval)\n\n## How do I use it?\n\n```cpp\n#include <iostream>\n#include \"SevenEval.h\"\n\nint main() {\n  // Get the rank of the seven-card spade flush, ace high.\n \u00a0std::cout << SevenEval::GetRank(0, 4, 8, 12, 16, 20, 24) << std::endl;\n  return 0;\n}\n```\n\nThe implementation being immutable is already thread-safe. There is no initialisation time.\n\n## How does it work?\n\nWe exploit a key-scheme that gives us just enough uniqueness to correctly identify the integral rank of any 7-card hand, where the greater this rank is the better the hand we hold and two hands of the same rank always draw. We require a memory footprint of just less than 135kB and typically six additions to rank a hand.\n\nTo start with we computed by brute force the first thirteen non-negative integers such that the formal sum of exactly seven with each taken at most four times is unique among all such sums: 0, 1, 5, 22, 98, 453, 2031, 8698, 22854, 83661, 262349, 636345 and 1479181. A valid sum might be 0+0+1+1+1+1+5 = 9 or 0+98+98+453+98+98+1 = 846, but invalid sum expressions include 0+262349+0+0+0+1 (too few summands), 1+1+5+22+98+453+2031+8698 (too many summands), 0+1+5+22+98+453+2031+8698 (again too many summands, although 1+5+22+98+453+2031+8698 is a legitimate expression) and 1+1+1+1+1+98+98 (too many 1's). We assign these integers as the card face values and add these together to generate a key for any non-flush 7-card hand. The largest non-flush key we see is 7825759, corresponding to any of the four quad-of-aces-full-of-kings.\n\nSimilarly, we assign the integer values 0, 1, 8 and 57 for spade, heart, diamond and club respectively. Any sum of exactly seven values taken from {0, 1, 8, 57} is unique among all such sums. We add up the suits of a 7-card hand to produce a \"flush check\" key and use this to look up the flush suit value if any. The largest flush key we see is 7999, corresponding to any of the four 7-card straight flushes with ace high, and the largest suit key is 399.\n\nThe extraordinarily lucky aspect of this is that the maximum non-flush key we have, 7825759, is a 23-bit integer (note 1<<23 = 8388608) and the largest suit key we find, 57*7 = 399, is a 9-bit integer (note 1<<9 = 512). If we bit-shift each card's flush check and add to this its non-flush face value to make a card key in advance, when we aggregate the resulting card keys over a given 7-card hand we generate a 23+9 = 32-bit integer key for the whole hand. This integer key can only just be accommodated by a standard 32-bit `int` type and yet still carries enough information to decide if we're looking at a flush and if not to then look up the rank of the hand.\n\n## How has the project evolved?\n\nTaking v1.1 as the base line, the sampled relative throughput of random [SevenEval](https://github.com/kennethshackleton/SKPokerEval/blob/develop/src/SevenEval.h) access has been seen to have changed as follows (a higher multiple is better).\n\n| Version                                                                       | Relative throughput | Reason \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0        |\n| ----------------------------------------------------------------------------- | ------------------: | :---------------------------------------- |\n| [1.1](https://github.com/kennethshackleton/SKPokerEval/releases/tag/v1.1) \u00a0   | \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  1.00 | \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0         |\n| [1.4.2](https://github.com/kennethshackleton/SKPokerEval/releases/tag/v1.4.2) | \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  1.18 | Hashing. \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0         \u00a0|\n| [1.6](https://github.com/kennethshackleton/SKPokerEval/releases/tag/v1.6) \u00a0 \u00a0 | \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  1.50 | Remove branching from flush case.         |\n| [1.7](https://github.com/kennethshackleton/SKPokerEval/releases/tag/v1.7) \u00a0 \u00a0 | \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  1.53 | Reduce the hash table. \u00a0 \u00a0 \u00a0 \u00a0 \u00a0         \u00a0|\n| [1.7.1](https://github.com/kennethshackleton/SKPokerEval/releases/tag/v1.7.1) | \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  1.57 | Reduce the rank hash table. \u00a0  \u00a0         \u00a0|\n| [1.8](https://github.com/kennethshackleton/SKPokerEval/releases/tag/v1.8)     | \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  1.93 | Index cards by bytes.       \u00a0  \u00a0 \u00a0        |\n| [1.8.1](https://github.com/kennethshackleton/SKPokerEval/releases/tag/v1.8.1) | \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  2.04 | Simplify flush key. Smaller offset table. |\n| [1.9](https://github.com/kennethshackleton/SKPokerEval/releases/tag/v1.9)     | \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  2.04 | Reduce the hash table.                    |\n\nAt some point the cost of the sample for-loop iteration becomes relatively significant.\n\n## I want to contribute, how might I profile my change?\n\nThe project contains a [profiler](src/Profiler.cpp) which might be used to help benchmark your changes.\n\n```bash\ng++ -c -std=c++11 -O3 Profiler.cpp\ng++ -o profile Profiler.o\n./profile\n```\n\nFor optimisations this starts to be compelling with consistent gains of, say, 30% or more.\n"
 },
 {
  "repo": "aniliyidogan/screm.co",
  "language": "Ruby",
  "readme_contents": "# What is Scrum Poker\nConsensus-based, gamified technique for estimating, mostly used to estimate effort or relative size of development goals in software development.\n\nmore information: https://en.wikipedia.org/wiki/Planning_poker\n# How to use Screm.co\n![screm.co](https://media.giphy.com/media/1zJEUQQ4OW9VbtNl3i/giphy.gif)\n  * **step one**: Scrum Master sign in with Google\n  * **step two**: Share PIN code with scrum members\n  * **step three**: Scrum Members log in with PIN code\n  * **step four**: Now start point to the story\n"
 },
 {
  "repo": "sintefmath/QuantumPoker",
  "language": "Jupyter Notebook",
  "readme_contents": "# Quantum Poker\nThis repository contains all the necessary components to learn and play quantum poker. The game works in the same way as Texas hold 'em poker with the main difference being that the community cards are replaced by qubits and the player cards are replaced by quantum logic gates. Don't fear if you don't understand the jargon, you can play the game anyway.\nThis implementation is a proof-of-concept, but it is fully possible to create apps for mobile phones or tablets.\nWe hope that you will enjoy the game and get curious to look \"under the hood\" and learn quantum computing!\n\n![Quantum Poker](quantumpoker.jpg)\n\n## Basic Rules to get started\nIn order to play the basic version of this game, one does not have to learn any quantum physics, or have a rigorous understanding of poker rules.  Even if this game involves only rudimentary essentials of quantum computing, people that are new to the field will find that it takes some time to get used to the rule set. Just as with any other game, one has to learn the rules of the game, which are described in the following.\n\nAt the start of every round of quantum poker, each player is given a randomized set of personal cards drawn from a deck of available cards. These personal cards can be viewed by pressing the button marked with \"View Hand\", and are shown in the leftmost coloumn. The rightmost coloumn shows the original deck of cards. These cards are not to be used until later in the game, and their use will be explained shortly.\n\nBefore any more information is revealed to the players, a round of betting takes place. Each player has a set amount of money at the start of the game, which switches hands as the game progresses. In each round of betting one needs to at least match the current highest bet to continue playing, but you could also raise the bet by putting more money on the table. This is done by either hitting the \"Check\"/\"Call\" button to match the bet, or entering an amount to raise the bet in the \"Bet:\" box and hitting enter. You can also fold and forfeit all the money you have betted so far in this round by hitting the \"Fold\" button. Note that two of the players automatically start with some money on the table, called blinds.\n\nThree community cards are then revealed on the table. These cards have labels |0>, |1>, |->, or |+> as well as some probabilities. The P(1)-probability determines the chance that the card gets the value 1 at the end of the round. The goal for each player is to get as many 1's as possible at the end of the round. _Later_ in the game, the players will be able to apply their personal cards to these cards to change them. The community cards on the table can change their labels in a given way. For example the personal card X changes |0> to |1>, and H changes |-> to |1>. For a full list of transformations, see the table at the end of this file. If two community cards are marked with \"Pair A\", they influence each other. This can be undone by playing the CX card.\n\nAfter the first three cards have been revealed, a second round of betting takes place, before another card is revealed. Then a third round of betting takes place, before the fifth and final card is revealed. Finally, a last round of betting takes place. After all players have finished betting, the players take turns applying their personal cards to the community cards, by first clicking on the personal card and the on the desired card. To apply the CX card the player needs to click on two qubits. Note that each player has their own cards, but that their initial values are shared by all players. After a player has used all their personal cards she wants to, she presses the \"End\" button to end her turn. Once all players are finished, each player's cards are giving either the value 0 or the value 1 based on the P(1)-probability shown on the card. The player(s) whose cards give the most 1's then wins the round, and takes all the money on the table. \n\nIf a player has no money left on the table, he is out of the game, and the winner is the last person to have any money left.\n\n## How to get started\nThe game requires the Qiskit package for Python to be able to run. For help installing Qiskit please see [qiskit.org](https://qiskit.org/documentation/install.html). In the Jupyter Notebok file [runPokerJN.ipynb](Python/runPokerJN.ipynb) an example game along with instructions on how to play the game is included. To play the game, either open the file [runInteractivePokerJN.ipynb](Python/runInteractivePokerJN.ipynb) through Jupyter Notebook (in a Qiskit environment) or run the file [runPoker.py](Python/runPoker.py) locally. Running the game in Jupyter Notebook is notably slower than running the proper Python file.\n\nYou can also find more info here [https://arxiv.org/abs/1908.00044](https://arxiv.org/abs/1908.00044).\n\n## Detailed description the game\nNote that this section assumes rudementary knowledge of how to play the game. We advise trying a couple of rounds before reading this section.\n\nThe basic entity of a quantum computer is called a quantum bit or qubit. While a classical bit can be either 0 or 1, a qubit can also exist in a combination of both 0 and 1. This is called a \"superposition\". The \"value\" of a qubit is called a qubit state, and qubit states are often written in bra-ket notation, i.e. a qubit which has the value 1 would be written as being in the state |1>. An example of states that are in a superposition is the states denoted by |+> = |0> + |1> and |-> = |0> - |1>.\n\nIn order to obtain information on the state of qubits, they have to be measured. A measurement will collapse the state to a classical bit and return either 0 or 1.\n\nWhen measuring a qubit in state |0> one will get the classical state 0 with 100% probability, and for |1> one will get 1 with 100% probability. When one measures a qubit in state |+> or |-> however, one will either get the classical value 0 or the value 1 with equal probability for each, i.e. 50% each.\n\nAt the start of the game, a set of 5 qubits is created, where each qubit is in a randomized state. Each player is then given a copy of this set, so that all players have an identical set of 5 qubits. The goal of the game is then to change the state of your own qubits, so that as many as possible of the qubits collapse to 1 upon being measured. Remember that a qubit in state |1> has a 100% chance to collapse to 1, while a qubit in state |0> has a 0% to collapse to 1. Note that the states of the qubits in the set are gradually revealed to the players between each round of betting.\n\nThis brings us to next important topic, how to change the state of the qubits. This can be achieved by applying a \"gate\" to one or more qubits. In this game there a total of 4 gates. \n\nThe first gate is the X gate which changes |1> to |0> and |0> to |1>, but does nothing to |+> and |-> (The interested reader can check this against the definition of |+> and |->. Note that the phase is of no interested, i.e. -|->=|->). We write this as X|0>=|1> and X|1>=|0>.\n\nWe also have the Z gate which does nothing to the states |0> and |1>, but interchanges |+> and |->, i.e. Z|+>=|-> and Z|->=|+>, and the H gate which interchanges |0> and |+>, and |1> and |->. For a full breakdown see the table below.\n\nEach player is dealt three random gates at the start of the game, which need not be the same as for any other player. When betting ends, each player uses his/her gates to change their qubits, to maximize the chance of measuring 1 for each qubit. The winner of the round is then the player with the most measured 1 between the 5 qubits. \n\nAnother important effect in quantum computing is called entanglement. By this is meant that the measured value of two or more qubits is dependent on one another. For example both qubits might have a 50% chance to be measured to either 1 or to 0, but they will always be measured to the _same_ value. However, there is no way to know which value they will collapse to until one actually performs a measurment on at least one of the qubits. \n\nTwo-qubit states are written as |q<sub>1</sub>q<sub>2</sub>>, where |q<sub>1</sub>> is the state of the first qubit, and |q<sub>2</sub>> is the state of the second. For example the state |00> means both the first and second qubit is in the state |0>. The entangled state described in the previous paragraph could be written as |00> + |11> or |00> - |11>. Both states look identical if you try to measure them directly, but will behave differently when you start applying gates. One could also have the entangled states |01> + |10> or |01> - |10>, in this case the two qubits will always be measured to different values, but again there is an equal probability for the two possibilities.\n\nThe last gate implemented in this game is the controlled NOT (CX) gate. This applies an X gate to the second qubit if the first qubit is in the state |1>, and does nothing when the first qubit is in the state |0>. For example the state |00> is unchanged upon apllying a CX gate as the first qubit is int the state |0>, but the state |10> changes to the state |11>. See the table below for a full overview of different possibilities when applying a CX gate.\n\nThe last thing is to note that all gates used here are their own inverse, i.e. applying a gate twice to a state will give the initial state again. However this is not the case for all possible gates.\n\n## Table for effects of the different gates\n\n#### Not gate X <br />\nX|0> = |1> <br />\nX|1> = |0> <br />\nX|+> = |+> <br />\nX|-> = |-> <br />\n\n#### Hadamard gate H <br />\nH|0> = |+> <br />\nH|1> = |-> <br />\nH|+> = |0> <br />\nH|-> = |1> <br />\n\n#### Phase flip gate Z <br />\nZ|0> = |0> <br />\nZ|1> = |1> <br />\nZ|+> = |-> <br />\nZ|-> = |+> <br />\n\n#### Controlled Not gate CX<br />\nCX|00> = |00> <br />\nCX|01> = |01> <br />\nCX|10> = |11> <br />\nCX|11> = |10> <br />\n\nCX|+0> = |00> + |11> <br />\nCX|+1> = |01> + |10> <br />\nCX|-0> = |00> - |11> <br />\nCX|-1> = |01> - |10> <br />\n\nCX|++> = |++> <br />\nCX|+-> = |--> <br />\nCX|-+> = |-+> <br />\nCX|--> = |+-> <br />\n\nCX|0+> = |0+> <br />\nCX|0-> = |0-> <br />\nCX|1+> = |1+> <br />\nCX|1-> = |1-> <br />\n\nA related game (by name) has been proposed here https://github.com/danielbultrini/Quantum-Hold-em-.\n"
 },
 {
  "repo": "zachwaugh/Helveticards",
  "language": "CSS",
  "readme_contents": "# Helveticards\nA deck of cards created in 100% CSS3. There are no images, so cards can scale to any size. Currently, just has the HTML/CSS for each card. Next step is to add the JS to shuffle and deal the cards. \n\n\n## TODO\n- Figure out something for facecards\n- Add the back of the cards, thinking red and white criss-cross stripes\n- Add animations to shuffle, flip, rotate, and deal the cards\n- Cards will animate from the deck to the middle of the table, flipping and turning as they move\n- Rename the project, just recently found out about a physical deck of cards called \"Helveticards\"\n\n\n### Licensed under the MIT license"
 },
 {
  "repo": "pokemium/pokered-docs-ja",
  "language": "Assembly",
  "readme_contents": "# \u8a73\u89e3\u30dd\u30b1\u30e2\u30f3\u8d64\n\n![cover](./docs/image/cover.png)\n\n**\u3053\u306e\u30ec\u30dd\u30b8\u30c8\u30ea\u306f\u672a\u5b8c\u6210\u3067\u3059\uff01**\n\n\u3053\u308c\u306f[\u30dd\u30b1\u30e2\u30f3\u8d64\u3092\u9006\u30a2\u30bb\u30f3\u30d6\u30eb\u3057\u305f\u30ec\u30dd\u30b8\u30c8\u30ea](https://github.com/pret/pokered)\u306b\u5bfe\u3057\u3066\u3001\u65e5\u672c\u8a9e\u3067\u8a73\u7d30\u306a\u89e3\u8aac\u3092\u52a0\u3048\u305f\u30ec\u30dd\u30b8\u30c8\u30ea\u3067\u3059\u3002\n\n\u65e5\u672c\u8a9e\u3067\u89e3\u8aac\u3092\u52a0\u3048\u3066\u306f\u3044\u307e\u3059\u304c\u3001\u5bfe\u8c61\u306eROM\u306f\u82f1\u8a9e\u7248\u306e\u30dd\u30b1\u30e2\u30f3\u8d64\u3067\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n## \u6982\u8981\n\n\u4e0a\u3067\u3082\u8ff0\u3079\u305f\u3088\u3046\u306b\u3001\u3053\u306e\u30ec\u30dd\u30b8\u30c8\u30ea\u306f[\u30dd\u30b1\u30e2\u30f3\u8d64\u3092\u9006\u30a2\u30bb\u30f3\u30d6\u30eb\u3057\u305f\u30ec\u30dd\u30b8\u30c8\u30ea](https://github.com/pret/pokered)\u306b\u5bfe\u3057\u3066\u3001\u65e5\u672c\u8a9e\u3067\u8a73\u7d30\u306a\u89e3\u8aac\u3092\u52a0\u3048\u305f\u30ec\u30dd\u30b8\u30c8\u30ea\u3067\u3059\u3002\n\n- \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306b\u5bfe\u3057\u3066\u65e5\u672c\u8a9e\u3067\u30b3\u30e1\u30f3\u30c8\u3092\u8ffd\u52a0\n- [VSCode\u306e\u62e1\u5f35\u6a5f\u80fd](https://marketplace.visualstudio.com/items?itemName=donaldhays.rgbds-z80)\u3092\u4f7f\u3063\u3066\u3044\u308b\u3068\u304d\u306b\u30b3\u30fc\u30c9\u30ea\u30fc\u30c7\u30a3\u30f3\u30b0\u304c\u6700\u5927\u9650\u3084\u308a\u3084\u3059\u3044\u3088\u3046\u306b\u30b3\u30e1\u30f3\u30c8\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u4fee\u6b63\n- \u30c7\u30fc\u30bf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3084\u30dd\u30b1\u30e2\u30f3\u8d64\u72ec\u81ea\u306e\u6982\u5ff5\u306b\u5bfe\u3059\u308b\u89e3\u8aac\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\n\n\u3053\u308c\u3089\u3092[\u5143\u306e\u30ec\u30dd\u30b8\u30c8\u30ea](https://github.com/pret/pokered)\u306b\u8a73\u7d30\u306b\u66f8\u304d\u52a0\u3048\u305f\u3082\u306e\u3067\u3059\u3002\n\n## \u524d\u63d0\u77e5\u8b58\n\n- \u30a2\u30bb\u30f3\u30d6\u30ea\u3084\u30ea\u30f3\u30ab\u306a\u3069\u306e\u4e00\u822c\u7684\u306a\u4f4e\u30ec\u30a4\u30e4\u306e\u77e5\u8b58\n- gbz80\u306eISA\u3084\u5272\u308a\u8fbc\u307f\u3084MBC\u3001\u30d0\u30f3\u30af\u306a\u3069\u306eGameBoy\u306e\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u4ed5\u69d8\n- [rgbds(Rednex Game Boy Development System)](https://github.com/rednex/rgbds)\u306b\u95a2\u3059\u308b\u591a\u5c11\u306e\u7406\u89e3\n\n\u307e\u305f\u30a8\u30c7\u30a3\u30bf\u3092\u4f7f\u3063\u3066\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u5834\u5408\u306fVSCode\u3068[rgbds\u7528\u306e\u62e1\u5f35\u6a5f\u80fd](https://marketplace.visualstudio.com/items?itemName=donaldhays.rgbds-z80)\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002\n\n## \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u4e00\u89a7\n\n- [2bpp](./docs/2bpp.md)\n- [\u30d0\u30c3\u30b8](./docs/badge.md)\n- [\u30d0\u30f3\u30af](./docs/bank.md)\n- [BCD](./docs/bcd.md)\n- [Boulder](./docs/boulder.md)\n- [\u30ab\u30fc\u30c8\u30ea\u30c3\u30b8](./docs/cartridge.md)\n- [Diploma](./docs/diploma.md)\n- [\u30a4\u30d9\u30f3\u30c8](./docs/event.md)\n- [\u9023\u884c\u30a4\u30d9\u30f3\u30c8](./docs/follow.md)\n- [hidden object](./docs/hidden_object/README.md)\n- [intro](./docs/intro.md)\n- [\u30ad\u30fc\u5165\u529b](./docs/joypad.md)\n- [list](./docs/list.md)\n- [list menu](./docs/list_menu.md)\n- [\u30de\u30af\u30ed](./docs/macro.md)\n- [Map](./docs/map/README.md)\n- [\u30e1\u30cb\u30e5\u30fc](./docs/menu.md)\n- [missable object](./docs/missable_object.md)\n- [PC](./docs/pc/README.md)\n- [pic](./docs/pic/README.md)\n- [\u30dd\u30b1\u30e2\u30f3\u56f3\u9451](./docs/pokedex.md)\n- [Pokemon](./docs/pokemon/README.md)\n- [predef](./docs/predef.md)\n- [rgbgfx](./docs/rgbgfx.md)\n- [\u30bb\u30fc\u30d6](./docs/save.md)\n- [simulated joypad](./docs/simulated_joypad.md)\n- [\u30b9\u30d7\u30e9\u30a4\u30c8](./docs/sprite/README.md)\n- [\u7528\u8a9e](./docs/term.md)\n- [\u30c6\u30ad\u30b9\u30c8](./docs/text/README.md)\n- [\u30bf\u30a4\u30c8\u30eb\u753b\u9762](./docs/titlescreen.md)\n- [\u30bf\u30a4\u30eb](./docs/map/tile.md)\n- [\u30c8\u30ec\u30fc\u30ca\u30fc](./docs/trainer/README.md)\n- [\u30ef\u30fc\u30d7](./docs/warp/README.md)\n- [\u91ce\u751f\u306e\u30dd\u30b1\u30e2\u30f3](./docs/wild_pokemon.md)\n\n## \u30d5\u30a1\u30a4\u30eb\u4e00\u89a7\n\n \u30d5\u30a1\u30a4\u30eb\u540d  |  \u5185\u5bb9\n---- | ----\n audio/  |  TODO\n constants/  |  [constants](./constants/README.md)\u53c2\u7167\n data/  |  [data](./data/README.md)\u53c2\u7167\n engine/  |  [engine](./engine/README.md)\u53c2\u7167\n gfx/  |  [gfx](./gfx/README.md)\u53c2\u7167\n home/  |  [home](./home/README.md)\u53c2\u7167\n macros/  |  [macros](./macros/README.md)\u53c2\u7167\n maps/  |  [maps](./maps/README.md)\u53c2\u7167\n pic/  |  [pic](./pic/README.md)\u53c2\u7167\n scripts/  |  TODO\n text/  |  [text](./text/README.md)\u53c2\u7167\n tools/  |  [tools](./tools/README.md)\u53c2\u7167\n audio.asm  |  TODO\n charmap.asm  |  \u6587\u5b57\u30b3\u30fc\u30c9\u306e\u30de\u30af\u30ed\u5b9a\u7fa9\n constants.asm  |  \u5b9a\u6570\u30b7\u30f3\u30dc\u30eb\u306e\u30de\u30af\u30ed\u5b9a\u7fa9\n home.asm  |  TODO\n hram.asm  |  HRAM\u9818\u57df\u306b\u3069\u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u304c\u914d\u7f6e\u3055\u308c\u308b\u304b\u306e\u5b9a\u7fa9\u3092\u884c\u3063\u3066\u3044\u308b\n macros.asm  |  macros/\u4ee5\u4e0b\u306e\u5404\u30de\u30af\u30ed\u30d5\u30a1\u30a4\u30eb\u3092\u307e\u3068\u3081\u3066\u3044\u308b\n main.asm  |  TODO\n pokered.link  |  \u30ea\u30f3\u30ab\u30b9\u30af\u30ea\u30d7\u30c8 <br/>\u5404\u30bb\u30af\u30b7\u30e7\u30f3\u304c\u3069\u306e\u30d0\u30f3\u30af\u306e\u3069\u306e\u30a2\u30c9\u30ec\u30b9\u306b\u914d\u7f6e\u3055\u308c\u308b\u304b\u3092\u6307\u793a\u3057\u3066\u3044\u308b\n sram.asm  |  TODO\n text.asm  |  \u5404\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u3092\u307e\u3068\u3081\u3066\u3044\u308b <br/>pokered.link\u3067ROM\u30d0\u30f3\u30af$20\u4ee5\u964d\u306b\u914d\u7f6e\u3055\u308c\u3066\u3044\u308b \n vram.asm  |  TODO\n wram.asm  |  WRAM\u9818\u57df\u306b\u3069\u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u304c\u914d\u7f6e\u3055\u308c\u308b\u304b\u306e\u5b9a\u7fa9\u3092\u884c\u3063\u3066\u3044\u308b\n"
 },
 {
  "repo": "Dsummers91/Ethereum-Poker-Dapp",
  "language": "Rust",
  "readme_contents": "#  Decentralized Poker Dapp\nTrustless Decentralized Poker Application\n\nThis systems is comprised of four parts:\n1. Game - Contains poker logic\n2. Main Chain - Contains Contract to Verify Plasma Child Chain\n3. Child Chain - Contains Plasma Contracts, State Channel Multisig, and Contracts to verify state channels\n4. State Channels - State channel contracts\n\n#### Current Implementation Being Worked in (Subject to Change)\n - Each Casino is its own plasma chain that users are free to join \n - Each Plasma Chain hosts a network of state channels (tables). When a new user joins a new channel must be started and users must move funds over to new channel (possibly?)\n \n#### Tournament Play\n[ ] Each tournament must have a determistic psuedo-random way to verify and determine player positions throughout tournament.\n\n\n#### NFT Tournament Tickets\n  [ ] Easily Trade/Sell Tournament Tokens\n\n#### Staking\nOffer a trustless way to stake players\n\n[ ] Cash Game Staking\n  -  Stake a player and receives your share instantaneously\n\n[ ] Tournament Staking\n\n"
 },
 {
  "repo": "mikemelch/Card-Games",
  "language": "Java",
  "readme_contents": "Card-Games\n==========\n\nProgram which is capable of playing High-Low, Texas Holdem, 5 Card Draw Poker, and BlackJack.\n\nChange Log\n----------\n\n### YDD - 6/5/13\n+ Reworked the Card class to use Enums. Cleaned it up a bit\n+ Changed the Hand class to have a limit on the amount of cards\n+ Poker - Added the ability to toggle exchanging cards. \n\nBug List\n--------\n\n### YDD - 6/5/13\n+ Poker - Cards reorder when you exchange them\n+ Poker - Dealers cards don't show up in the proper spot\n\n"
 },
 {
  "repo": "rdepena/planningpoker",
  "language": "JavaScript",
  "readme_contents": "node/angular/socket.io planning poker\n=============\n\nPlanning poker app built using AngularJS/Node.js/Socket.io\n\nQ: What is planning poker ?  \n\nA: from wikipedia: \"Planning poker, also called Scrum poker, is a consensus-based technique for estimating, mostly used to estimate effort or relative size of user stories in software development. It is a variation of the Wideband Delphi method. It is most commonly used in agile software development, in particular the Extreme Programming methodology.\"\nread full entry: https://en.wikipedia.org/wiki/Planning_poker\n\nContributing ? \n\nMake sure you use grunt to lint concat and run all unit tests as you are making changes, npm install should leave your environment ready to go. \n\n\nThe MIT License (MIT)\n\nCopyright (c) 2013 Ricardo de Pe\u00f1a\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
 },
 {
  "repo": "nbouscal/poker.hs",
  "language": "Haskell",
  "readme_contents": ""
 },
 {
  "repo": "Sanqui/pokered-randomizer",
  "language": "Assembly",
  "readme_contents": "# Pok\u00e9mon Red and Blue\n\nThis is a disassembly of Pok\u00e9mon Red and Blue.\n\nIt builds the following roms:\n\n* Pokemon Red (UE) [S][!].gb  `md5: 3d45c1ee9abd5738df46d2bdda8b57dc`\n* Pokemon Blue (UE) [S][!].gb `md5: 50927e843568814f7ed45ec4f944bd8b`\n\nTo set up the repository, see [**INSTALL.md**](INSTALL.md).\n\n\n## See also\n\n* Disassembly of [**Pok\u00e9mon Crystal**][pokecrystal]\n* irc: **nucleus.kafuka.org** [**#skeetendo**][irc]\n\n[pokecrystal]: https://github.com/kanzure/pokecrystal\n[irc]: https://kiwiirc.com/client/irc.nolimitzone.com/?#skeetendo\n\n"
 },
 {
  "repo": "nidhik/cubeia-agpl",
  "language": "Java",
  "readme_contents": "INTRO\n=====\n\nCubeia Poker is an Open Source poker system which can scale from a simple\nsingle server setup up to a services oriented distributed cluster system\n\nIt is based on Cubeia Firebase and Cubeia Network, which are both open source\nand in production since years. The main implementation language is java.\n\n\nBUILD\n=====\n\nmvn clean install\n\nThe folder \"system\" contains details on how to setup a poker system.\n\n\nDEVELOPMENT\n===========\n\nInformation subjecting development is contained within the module folders. Some\ngeneral info can be found in the folder doc.\n\nThe project-structure is kept as much as possible \"natural\" and logical. There\nare however some limitations of maven, which can result in an unusual structure.\n\n\nCOMMERCIAL SUPPORT\n==================\n\nSupport for Production Setup and Integration is provided by Cubeia, usually in\ncontext of commercial customer services.\n\n\nREFERENCE SYSTEM\n================\n\nYou can find a running instance at:\n\nhttp://cubeiasocial.com\nhttp://cubeiapoker.com\n\nThis Poker Network uses the open source Cubeia Poker, and a few non-open-source\nmodules.\n\n\nLINKS\n=====\n\nRepo   :  https://bitbucket.org/cubeia/cubeia-poker\nSite   :  http://www.cubeia.org\nForum  :  http://forum.cubeia.org\nService:  http://www.cubeia.com/?page_id=251\n\n"
 },
 {
  "repo": "HerdADVance/maker-holdem",
  "language": "JavaScript",
  "readme_contents": "<h1>Maker Hold'em</h1>\n\n<h2>An online Texas Hold'em Poker Game</h2>\n\n<p>This project, still in developement, uses WebSockets and Node.js to create an interactive multiplayer poker game following the rules of Limit Texas Hold'em.</p>\n\n<h3>Current Features</h3>\n<ul>\n\t<li>Initializes game with eight players</li>\n\t<li>Creates 52 card deck and randomly deals cards out to players on each hand</li>\n\t<li>Allows rounds of betting based on the rules of Limit Texas Hold'em</li>\n\t<li>Deals out random community cards after each round of betting</li>\n\t<li>Subtracts chips from each player and adds them to pot after each bet</li>\n\t<li>Ships pot to last player remanining after other players fold</li>\n\t<li>If more than one player remains, calculates which player(s) and ships the pot accordingly</li>\n\t<li>Starts new hand with passed button and blinds</li>\n</ul>\n\n<h3>Features in Development</h3>\n<ul>\n\t<li>Remove player from game when out of chips</li>\n\t<li>Account for sidepots when shorter stacks are all-in</li>\n\t<li>Emit to particular sockets, allowing cards and action buttons to only be seen by appropriate player</li>\n\t<li>Allow users to enter their own names on signup</li>\n\t<li>Allow more than one game to be played simultaneously</li>\n\t<li>Allow options for other games such as No-Limit Hold'em, Omaha, Stud, etc...</li>\n</ul>"
 },
 {
  "repo": "aditisrinivas97/Pokerman",
  "language": "Jupyter Notebook",
  "readme_contents": "# Pokerman\n\nTL;DR, predicting poker hands.\n\n## The Problem\n\nGiven the sequence of 5 'community' cards, drawn from a standard deck of cards, what hand is most likely present with at least one of the players in the game.\n\n## Why?\n```\nDiligence is the mother of good luck. \n                            - Benjamin Franklin\n```\n\n## Poker Hands\n\nTexas Hold Em is played by dealing each player 2 cards (face down), called the `hole` cards, and dealing 5 `community` cards (face up), on the table.\n\nThe player makes a poker `hand` using any combination of the 3 cards dealt to them, and the 5 cards on the table. \n\nThe player with the strongest hands wins. Most commonly accepted ranking of hands, strongest to weekest :\n\n| Rank | Hand | Description |\n| :--: | :--: | :---------: |\n| 0 | Royal Flush | `A K Q J 10` all of the same suit |\n| 1 | Straight Flush | Any 5 cards of the same suit, in sequence |\n| 2 | Four of a Kind | 4 cards of the same rank, like, `4 4 4 4` |\n| 3 | Full House | A 3 of a kind, and a pair, of different ranks |\n| 4 | Flush | Any 5 cards of the same suit |\n| 5 | Straight | Any 5 cards in sequence |\n| 6 | Three of a Kind | Any 3 cards of the same rank |\n| 7 | Two Pair | Any 2 pairs of cards |\n| 8 | One Pair | Any 2 cards of the same rank |\n| 9 | High Card | Highest Ranked card in hand |\n\n\n#### Ranking of Cards\n\nA K Q J 10 9 8 7 6 5 4 3 2 1\n\n## Data\n\nThis data was acquired from UCI's Machine Learning repository. The data comes already split into training and testing data.\n\nFind it [here](https://archive.ics.uci.edu/ml/datasets/Poker+Hand).\n\n#### Distribution of Test Data\n\n![data image](https://github.com/aditisrinivas97/pokerman/blob/master/extras/Data%20Distribution.png)\n\nEach bar represents the frequency of the corresponding hand as specified in the dataset description. \n\n##### NOTE: The hands' class labels are in the reverse order of their strength, i.e, 0 is the weakest hand.\n\n#### Citation\n\n\n> Dua, D. and Karra Taniskidou, E. (2017). UCI Machine Learning Repository [http://archive.ics.uci.edu/ml]. Irvine, CA: University of California, School of Information and Computer Science.\n\n## Machine Learning \ud83d\udda5 \ud83e\uddd0\n\n| Model | Accuracy | Plot |\n| :---: | :------: | :--: |\n| Linear Regression | 42% | ![Regression image](https://github.com/aditisrinivas97/pokerman/blob/master/extras/Regression.png) |\n| SVM | 58% | ![SVM image](https://github.com/aditisrinivas97/pokerman/blob/master/extras/svm.png) |\n| Adaboost | 49% | ![Adaboost image](https://github.com/aditisrinivas97/pokerman/blob/master/extras/Adaboost.png) |\n| Output Code Classifier | 61% | ![Output Code Classifier image](https://github.com/aditisrinivas97/pokerman/blob/master/extras/Output%20Code%20Classifier.png) |\n| Random Forest | 56% | ![Random Forest image](https://github.com/aditisrinivas97/pokerman/blob/master/extras/Random%20Forest.png) |\n| Artificial Neural Network | 45% | ![ANN image](https://github.com/aditisrinivas97/pokerman/blob/master/extras/ANN.png) |\n| Deep Neural Network | 87% | ![DNN image](https://github.com/aditisrinivas97/pokerman/blob/master/extras/DNN.png) |\n| Multi Layer Perceptron | 97% \ud83e\udd2f | ![MLP image](https://github.com/aditisrinivas97/pokerman/blob/master/extras/Multi%20Layer%20Perceptron.png) |\n\n## Conclusion\n\nThe Multi-layer Perceptron is clearly the best model for the dataset in hand. Here's the confusion matrix to provide us with some more insight into *how accurate* this model really was with its predictions.\n\n![Multi Layer Perceptron Confusion Matrix](https://github.com/aditisrinivas97/pokerman/blob/master/extras/confMat.png)\n\n## Primary Contributors\n\n| | |\n|:-:|:-:|\n|<img src=\"https://github.com/aditisrinivas97.png\" width=\"48\">  | [Aditi Srinivas](https://github.com/aditisrinivas97) |\n|<img src=\"https://github.com/avinashshenoy97.png\" width=\"48\">  | [Avinash Shenoy](https://github.com/avinashshenoy97) |"
 },
 {
  "repo": "CWSites/Poker",
  "language": "HTML",
  "readme_contents": "Poker\n=====\n"
 },
 {
  "repo": "kdub0/hand-isomorphism",
  "language": "C",
  "readme_contents": "Poker Hand Isomorphisms\n=======================\n\nauthor: Kevin Waugh (waugh@cs.cmu.edu)\ndate: April 7, 2013\n\nThis repository contains a C library for efficiently mapping poker hands to and\nfrom a tight set of indices.  Poker hands are isomorphic with respect to\npermutations of the suits and ordering within a betting round.  That is,\nAsKs, KdAd and KhAh all map to the same index preflop.\n\nPlease see:\n\nK. Waugh, 2013. A Fast and Optimal Hand Isomorphism Algorithm.  In the Second\nComputer Poker and Imperfect Information Symposium at AAAI \n\nfor more details, and src/hand_index.h for the API's description.\n"
 },
 {
  "repo": "zkayser/pokerex_client",
  "language": "Elm",
  "readme_contents": "# PokerExClient\n\nTo start your Phoenix server:\n\n  * Install dependencies with `mix deps.get`\n  * Install Node.js dependencies with `cd assets && npm install`\n  * Start Phoenix endpoint with `mix phx.server`\n\nNow you can visit [`localhost:4000`](http://localhost:4000) from your browser.\n\nReady to run in production? Please [check our deployment guides](http://www.phoenixframework.org/docs/deployment).\n\n## Learn more\n\n  * Official website: http://www.phoenixframework.org/\n  * Guides: http://phoenixframework.org/docs/overview\n  * Docs: https://hexdocs.pm/phoenix\n  * Mailing list: http://groups.google.com/group/phoenix-talk\n  * Source: https://github.com/phoenixframework/phoenix\n"
 },
 {
  "repo": "deltacluse/Tkinter_Poker",
  "language": "Python",
  "readme_contents": ""
 },
 {
  "repo": "dickreuter/PokerEquityCalculator",
  "language": "C++",
  "readme_contents": "Poker hand evaluator with montecarlo simulation to calculate equity\n===================================================================\n\n\nThe code implements a c++ version of a montecarlo simulation to\nevaluate a poker hand by estimating the amount of wins assuming\nall players stay in the game up to the river.\n\nA similar implementation is also available in python (both in pure python\nand in numpy). The pure python implementation is significantly slower. The numpy\nversion is almost 1000 faster, but lacks some flexibility. It's the aim\nof this version over overcome them and also implement\nranges and give maximum flexibility at maximum speed."
 },
 {
  "repo": "tshadowknight/Pokemon-Roaming-Red",
  "language": "Assembly",
  "readme_contents": "# Pok\u00e9mon Red Free Mode\nAn experiment in dynamic levelling in Pok\u00e9mon\n\nFor discussion of this project and updates please join us at the [Pokemon Red Free Mode Discord channel][Discord]\n\nBased on pret/pokered\n\n[Discord]: https://discord.gg/r7NNgyu\n\n"
 },
 {
  "repo": "lean-poker/poker-player-ruby",
  "language": "Ruby",
  "readme_contents": "poker-player-ruby\n=================\n\nRuby client skeleton for Lean Poker\n\nFor more information visit: http://leanpoker.org\n"
 },
 {
  "repo": "vpj/poker",
  "language": "Jupyter Notebook",
  "readme_contents": "# poker \ud83c\udccf\u2660\ufe0f\u2665\ufe0f\u2666\ufe0f\u2663\ufe0f\n\n## Roadmap\n\n* Vectorized [poker hand evaluator](https://github.com/lab-ml/poker/tree/master/poker/game) \u2705\n* Neural netowrk to predict [which player won](https://github.com/lab-ml/poker/tree/master/who_won) \u2705\n* Neural netowrk to predict [winning probabilities](https://github.com/lab-ml/poker/tree/master/probabilities) \u2705\n* [CFR for Kuhn Poker](https://github.com/lab-ml/poker/tree/master/kuhn_cfr)  \u2705\n* [CFR for Leduc Holdem Poker](https://github.com/lab-ml/poker/blob/master/cfr/leduc.py)  \u2705\n* Public Chance Sampling for Leduc Holdem Poker\n"
 },
 {
  "repo": "pokereosteam/PokerEOS",
  "language": "JavaScript",
  "readme_contents": "\n\n# example   \n\nvar seed = '482715:6AdSyYq5WohEkTmzvOTj:1545637913';   \nvar signature = 'SIG_K1_KjpKRJdH7wfyqhs1qMY5iu5zbySYRz6hqr7KDAsgEZvdsgArBTU8RinyN4EqSHPHKJ6mUSCXk4YW8deVz9iqcMz3Hy8ubV';  \nvar pubkey = 'EOS6yfs3y6fLiEX7kYHJvTx2jycCNc21v7ygLuLvGPuVARZwbEvdi';  \n\n\nKeys are matching:  true   \ncard1 \u26658 \u2663A \u26639 \u2663K \u26634   \ncard2 \u26603 \u2666K \u26657 \u26662 \u26668   \n"
 },
 {
  "repo": "valterbarros/scrum-poker",
  "language": "Ruby",
  "readme_contents": "[![Build Status](https://travis-ci.org/valterbarros/scrum-poker.svg?branch=master)](https://travis-ci.org/valterbarros/scrum-poker)\n\n### Modeling Scrum Poker\n\n![](https://raw.githubusercontent.com/valterbarros/scrum-poker/master/modeling_project/logic-model.png)\n\n## Dependencies\n\n* Ruby version 2.5.0\n* Rails version 5.1\n* Postgres >= 9.5\n\nYou must have redis installed and running on the default port:6379 (or configure it in config/redis/cable.yml).\n##### Add this .env to your clone or fork\n\n```\nDATABASE_HOST='localhost'\nDATABASE_USERNAME='REPLACE WITH YOUR DATA'\nDATABASE_PASSWORD='REPLACE WITH YOUR DATA'\nDATABASE_NAME='planning_of_thrones_development'\nDATABASE_TEST_NAME='planning_of_thrones_test'\nDATABASE_PORT=5432\n```\n\n### Installing Redis\n##### On Linux\n* `wget http://download.redis.io/redis-stable.tar.gz`\n* `tar xvzf redis-stable.tar.gz`\n* `cd redis-stable`\n* `make`\n* `make install`\n\n##### On Mac\n* `brew install redis`\n\n###### Note: You must have Ruby 2.2.2 installed in order to use redis\n\n## Starting the servers\n\n1. bundle install\n2. rake db:create && rake db:migrate\n3. npm install yarn -g\n4. yarn\n5. redis-server\n6. rails s\n7. Visit `http://localhost:3000`\n\n## Contributing\n##### Branch name\n\n  The name is composed by initials from your name (Valter Barros = VB), count of branch 01 is the my first branch, and a random number 58 followed by description from task.\n\n  `eg: feature/VB0158-pass-modelling-to-models`\n"
 },
 {
  "repo": "itb-ie/poker_homework",
  "language": "Python",
  "readme_contents": "# Session 17&18 Poker Simulator\nYou are requested to fork this repo. After that, run the program and try to understad it.\nAdd different methods to the Hand class to check for different poker hand combinations like: 2 pairs, flush, straight and so on.  \nCheck this link if you are not familiar with poker hand rankings:  \n[Poker Hands](https://www.cardplayer.com/rules-of-poker/hand-rankings)  \n\nOnce that is done, run a simulation of 10.000 hands and count the number of times each combinations shows up.  \nFor example you could have: 2000 one pair, 500 two pairs, etc.  \nDo some simple statistics with that information.  \n\nAny question please send me an email\n\n:sparkles: :sparkles: Good luck :sparkles: :sparkles:\n"
 },
 {
  "repo": "ryan112358/poker-bot",
  "language": "Java",
  "readme_contents": "# poker-bot\nAn AI that can play poker and interface with common poker software.\n\n* Completely automatic - no need to monitor it or anything\n* Program takes control of mouse and make all your decisions for you\n* Let it run overnight, or while you are away for the day\n* Code tested and validated with Bovada poker software on Windows\n* Easy to make work with other poker sofware by adding configuration files\n* Must have poker software installed\n* Works only with play money blackjack right now - guaranteed to make optimal decision under simple assumptions\n* Texas Hold'em is a work in progress\n"
 },
 {
  "repo": "zxqx/poker",
  "language": "JavaScript",
  "readme_contents": "# poker\n\nA modern web app for playing hold 'em with your friends and enemies.\n\n[![Circle CI](https://circleci.com/gh/zakangelle/poker/tree/master.svg?style=shield)](https://circleci.com/gh/zakangelle/poker/tree/master) [![Coverage Status](https://img.shields.io/coveralls/zakangelle/poker.svg)](https://coveralls.io/github/zakangelle/poker?branch=master)\n\n## Requirements\n\n+ NodeJS\n\n## Tech Stack\n\n* [react (v15)](https://facebook.github.io/react/) - View layer\n* [react-router (v4)](https://reacttraining.com/react-router/web/guides/quick-start) - Router\n* [redux](https://github.com/reactjs/redux) - State management\n* [redux-thunk](https://github.com/gaearon/redux-thunk) - Async actions\n* [sass](http://sass-lang.com/) - CSS preprocessor\n* [react-css-modules](https://github.com/gajus/react-css-modules) - Scoped CSS modules\n* [babel](https://babeljs.io/) - ES6/JSX compiler\n* [webpack (v2)](https://webpack.github.io/) - Module bundler\n* [jest](https://facebook.github.io/jest/) - Test suite\n\n## Setup\n\nInstall dependencies:\n\n```sh\n$ npm install\n```\n\nBoot up the app:\n\n```sh\n$ npm start\n```\n\nTo run the server in release mode, set the environment variable `NODE_ENV=production`\n\n## Test\n\nRun tests:\n\n```sh\n$ npm test\n```\n\n## Release\n\nGenerate a release build in `dist`:\n\n```sh\n$ npm run build\n```\n"
 },
 {
  "repo": "mingzijian/pokers",
  "language": "JavaScript",
  "readme_contents": "# pokers for robot or AI research\n\nYou can edit this client for game robot AI research,\nthe websoket api in texasJS/message.js.\n\nTexas Holdem Poker and three card poker games client. \n\nA poker client useing html,jquery,websocket,canvas. \n\nOnly contains login,regist,three basic play rooms,user's chips rank. \n\nYou can see this project at this website below. \n\nhttp://120.26.217.116:8080/texas/texasIndex.html. \n\n\u5fb7\u5dde\u6251\u514b\u7684\u5ba2\u6237\u7aef\u4ee3\u7801\uff0c \n\n\u53ef\u4ee5\u6839\u636etexasJS/message.js\u6587\u4ef6\u4e2d\u7684websocket\u65b9\u5f0f\u8bbf\u95ee\uff0c\u7f16\u5199\u81ea\u5df1\u7684\u673a\u5668\u4eba\u7528\u4e8e\u4eba\u5de5\u667a\u80fd\u7814\u7a76\n\n\u5305\u542b\u4e86\u5fb7\u5dde\u6251\u514b\u548c\u6b22\u4e50\u62fc\u4e09\u5f202\u4e2a\u6e38\u620f\u7684\u5ba2\u6237\u7aef\u90e8\u5206\u3002 \n\n\u5305\u542b\u767b\u9646\u6ce8\u518c\u529f\u80fd\uff0c\u7b79\u7801\u6392\u884c\u699c\uff0c\u5fb7\u5dde\u6251\u514b\u4ec5\u67093\u79cd\u4e0b\u6ce8\u989d\u5ea6\u7684\u623f\u95f4\u3002 \n\n\u53c2\u8003\u6548\u679c\u5730\u5740http://120.26.217.116:8080/texas/texasIndex.html \n\n\n"
 },
 {
  "repo": "brucetie/pokerface",
  "language": "Python",
  "readme_contents": "# pockerface\n\n\u672c\u9879\u76ee\u672c\u610f\u662f\u901a\u8fc7\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u6784\u5efa\u4e00\u4e2a\u6a21\u578b\uff0c\u901a\u8fc7\u4eba\u8138\u8bad\u7ec3\u6765\u81ea\u52a8\u8bc6\u522b\u7f8e\u4e11\uff0c\u4f46\u662f\u5199\u5b8c\u4e4b\u540e\u53d1\u73b0\u8bad\u7ec3\u7684\u7ed3\u679c\u5b8c\u5168\u6ca1\u6709\u4efb\u4f55\u6548\u679c\uff0c\u4e5f\u5c31\u653e\u5f03\u672c\u6765\u7684\u6253\u7b97\uff0c\u505a\u4e86\u4e00\u4e2a\u5e73\u5747\u8138\u751f\u6210\u7a0b\u5e8f\u3002\n\n## \u6570\u636e\u51c6\u5907\n\n\u6240\u6709\u7684\u56fe\u7247\u90fd\u6765\u81ea\u4e0a\u6d77\u6bd5\u4e1a\u751f\u56fe\u50cf\u91c7\u96c6\u7f51\uff0c13\u5e74\u7684\u65f6\u5019\u7f51\u7ad9\u6709\u6f0f\u6d1e\uff0c\u8ddf\u98ce\u4e0b\u8f7d\u8fc7\u4e00\u4e9b\uff0c\u56fe\u7247\u5927\u5c0f\u4e3a640*480\uff0c\u80cc\u666f\u5355\u8c03\u4e14\u5747\u4e3a\u6b63\u8138\u7167\uff0c\u56fe\u7247\u5982\u4e0b\uff1a\n\n![example](doc/example.jpg)\n\n\n\u56e0\u4e3a\u672c\u6765\u662f\u505a\u4eba\u8138\u8bad\u7ec3\u7528\u7684\uff0c\u6240\u4ee5\u4e13\u95e8\u8fd8\u5199\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u684c\u9762\u7a0b\u5e8fjudge.py\u65b9\u4fbf\u7ed9\u6bcf\u4e2a\u4eba\u6253\u4e0a\u6f02\u4eae\u8fd8\u662f\u4e0d\u6f02\u4eae\u7684\u6807\u7b7e\uff0c\u540c\u65f6\u8c03\u7528face++\u7684API\u63a5\u53e3\u628a\u4eba\u8138\u7684\u5173\u952e\u70b9\u627e\u51fa\u6765\u5b58\u653e\u5728face.sqlite\u4e2d\u3002\n\n## \u5e73\u5747\u8138\u751f\u6210\n\n\u539f\u7406\u89c1[http://www.learnopencv.com/average-face-opencv-c-python-tutorial/](http://www.learnopencv.com/average-face-opencv-c-python-tutorial/)\uff0c \u4ee3\u7801\u4e5f\u662f\u8bb2\u91cc\u9762\u7684\u793a\u4f8b\u7a0d\u5fae\u4fee\u6539\uff0c\u5173\u952e\u70b9\u91c7\u7528face++\u68c0\u6d4b\u7ed3\u679c\uff0c\u6700\u540e\u628a\u81ea\u5df1\u89c9\u5f97\u6f02\u4eae\u768449\u5f20\u7167\u7247\u7684\u5e73\u5747\u8138\u751f\u6210\u7ed3\u679c\u5982\u4e0b\uff1a\n\n![result](doc/pretty.jpg)\n"
 },
 {
  "repo": "tangentforks/TwoPlusTwoHandEvaluator",
  "language": "Objective-C",
  "readme_contents": "* TwoPlusTwo Hand Evaluator\n\nThis is the famous Two Plus Two hand evaluator for 5-to-7-card poker hands, created by Ray Wotton with help from many others in a [[http://archives1.twoplustwo.com/showflat.php?Cat=0&Number=8513906][giant thread the Two plus Two poker forums]] and popularized by an old [[https://web.archive.org/web/20111103160502/http://www.codingthewheel.com/archives/poker-hand-evaluator-roundup#2p2][coding the wheel blog post]].\n\nIt's basically an elaborate caching system for an [[http://www.suffecool.net/poker/evaluator.html][ealier evaluator by Cactus Kev and Paul Senzee]].\n\n* About this fork\n\nThis fork ([[https://github.com/tangentstorm/TwoPlusTwoHandEvaluator]]) was extracted from the [[https://github.com/tangentstorm/XPokerEval][XPokerEval]] distribution (which contains a bunch of hand evaluators compiled by the coding the wheel guy).\n\nI added a =Makefile= and made some minor changes to to improve readability and allow compilation on non-windows platforms (it works on freebsd, anyway).\n\nMy own main contribution is =rankhand.pas=, a small example program made with [[http://freepascal.org/][free pascal]] that shows how to use the =HandRanks.dat= file that =generate_table.cpp= creates.\n\nWith all the people who had touched the c and c++ code, I found it difficult to decipher exactly how the cards and hands were represented (Wotton's code uses a completely different coding system than the one in =poker.h=).\n\n\n* License\n\nThe pascal program is my own, and available for use under the extremely liberal *zlib license*. I wrote the pascal program from scratch and it has no dependencies on or relation to any of the C/C++ code. The only requirement is the generated database file.\n\nWotton's code contains the self-contradictory statement \"My code is GPL, use it as you like\". The Cactus Kev / Paul Senzee code has a copyright but no license.\n"
 },
 {
  "repo": "steve-ng/pokerface-nft",
  "language": "JavaScript",
  "readme_contents": "## Introduction\n\nGithub repository for the tutorial at\n\nhttps://steveng.medium.com/step-by-step-guide-to-creating-your-own-nft-cryptopunks-or-pudgy-penguins-67733ebce39e\n"
 },
 {
  "repo": "tangentforks/TwoPlusTwoHandEvaluator",
  "language": "Objective-C",
  "readme_contents": "* TwoPlusTwo Hand Evaluator\n\nThis is the famous Two Plus Two hand evaluator for 5-to-7-card poker hands, created by Ray Wotton with help from many others in a [[http://archives1.twoplustwo.com/showflat.php?Cat=0&Number=8513906][giant thread the Two plus Two poker forums]] and popularized by an old [[https://web.archive.org/web/20111103160502/http://www.codingthewheel.com/archives/poker-hand-evaluator-roundup#2p2][coding the wheel blog post]].\n\nIt's basically an elaborate caching system for an [[http://www.suffecool.net/poker/evaluator.html][ealier evaluator by Cactus Kev and Paul Senzee]].\n\n* About this fork\n\nThis fork ([[https://github.com/tangentstorm/TwoPlusTwoHandEvaluator]]) was extracted from the [[https://github.com/tangentstorm/XPokerEval][XPokerEval]] distribution (which contains a bunch of hand evaluators compiled by the coding the wheel guy).\n\nI added a =Makefile= and made some minor changes to to improve readability and allow compilation on non-windows platforms (it works on freebsd, anyway).\n\nMy own main contribution is =rankhand.pas=, a small example program made with [[http://freepascal.org/][free pascal]] that shows how to use the =HandRanks.dat= file that =generate_table.cpp= creates.\n\nWith all the people who had touched the c and c++ code, I found it difficult to decipher exactly how the cards and hands were represented (Wotton's code uses a completely different coding system than the one in =poker.h=).\n\n\n* License\n\nThe pascal program is my own, and available for use under the extremely liberal *zlib license*. I wrote the pascal program from scratch and it has no dependencies on or relation to any of the C/C++ code. The only requirement is the generated database file.\n\nWotton's code contains the self-contradictory statement \"My code is GPL, use it as you like\". The Cactus Kev / Paul Senzee code has a copyright but no license.\n"
 },
 {
  "repo": "thinkbox/poker-1",
  "language": "PHP",
  "readme_contents": "Poker\n=====\n\nJavascript and php poker version. Best viewed and developed on Chrome."
 },
 {
  "repo": "h3rc4r/lab-poker-odds",
  "language": "Jupyter Notebook",
  "readme_contents": "![Ironhack logo](https://i.imgur.com/1QgrNNw.png)\n\n# Lab | Calculating Game of Chances\n\n## Introduction\n\nIn the lesson we have shown you how to use Python to calculate the probabilities and odds of the royal flush and straight flush in poker. In this lab you will calculate the probabilities of all other hands such as four of a kind, full house, flush, straight, and so on. We'll also provide you a mini lesson on how to apply statistical skills in real poker playing by calculating the pot odds and outs.\n\n## Getting Started\n\nOpen `main.ipynb` in Jupyter Notebook and work on the challenges.\n\n## Deliverables\n\n- `main.ipynb` with your responses.\n\n## Submission\n\nUpon completion, add your version of `main.ipynb` to git. Then commit git and push your branch to the remote.\n\n## Resources\n\n[Learn How to Play Poker - Texas Hold 'Em (aka Texas Holdem)](https://www.instructables.com/id/Learn-To-Play-Poker---Texas-Hold-Em-aka-Texas-Ho/)\n\n[How to play Texas Hold'em](https://www.youtube.com/watch?v=KKMac6tQKiI)\n\n[Poker Odds for Dummies](https://www.cardschat.com/odds-for-dummies.php)\n\n[Texas Hold'em Poker Odds Calculator](https://www.cardplayer.com/poker-tools/odds-calculator/texas-holdem)\n"
 },
 {
  "repo": "Mullen-High-School/Draw-Poker",
  "language": "Java",
  "readme_contents": ""
 },
 {
  "repo": "Rangi42/polished-map",
  "language": "C++",
  "readme_contents": "# Polished Map [![Build Status](https://github.com/Rangi42/polished-map/actions/workflows/main.yml/badge.svg)](https://github.com/Rangi42/polished-map/actions)\n\nA map and tileset editor for [pokecrystal](https://github.com/pret/pokecrystal), [pokegold](https://github.com/pret/pokegold), [pokeyellow](https://github.com/pret/pokeyellow), [pokered](https://github.com/pret/pokered), and hacks including [Polished Crystal v2](https://github.com/Rangi42/polishedcrystal/tree/v2.2.0), [Red++ v3](https://github.com/TheFakeMateo/rpp-backup), [Orange](https://github.com/PiaCarrot/pokeorange), [Prism](http://www.pokemonprism.com/), and many more.\n\n(For projects that use [256\u2013512 tiles](https://github.com/pret/pokecrystal/wiki/Expand-tilesets-from-192-to-255-tiles) and [per-block attributes](https://github.com/pret/pokecrystal/wiki/Allow-tiles-to-have-different-attributes-in-different-blocks-\\(including-X-and-Y-flip\\)), including [Polished Crystal v3](https://github.com/Rangi42/polishedcrystal), [Red++ v4](https://github.com/TheFakeMateo/RedPlusPlus), [Coral](https://github.com/pkmncoraldev/polishedcoral), [Black and White 3: Genesis](https://github.com/AzureKeys/BW3G), and [Ancient Ruby](https://github.com/BloodlessNS/ancientruby), use [Polished Map++](https://github.com/Rangi42/polished-map/tree/plusplus)!)\n\nInspired by [crowdmap](https://github.com/yenatch/crowdmap) (now defunct), but implemented with C++ and [FLTK](http://www.fltk.org/), and with more functions for graphics editing.\n\nLatest release: [**4.7.1**](https://github.com/Rangi42/polished-map/releases/tag/v4.7.1)\n\nFollow the steps in [INSTALL.md](INSTALL.md) to install the release copy of Polished Map, or the longer instructions to build it yourself from source.\n\nThe [example/](example/) directory contains a minimal pokecrystal project with two test maps. **Kanto.180x135.kanto.blk** is a stitch of every Kanto overworld map (they all use the `kanto` tileset). **Johto.235x135.johto.blk** is a stitch of every Johto overworld map; Goldenrod and Azalea use the `johto_modern` tileset, so try switching tilesets with **Edit\u2192Change Tileset\u2026** or by pressing Ctrl+H.\n\nBrowse the menu items, toolbar buttons, and Help dialog to learn how to use Polished Map. And don't miss the mouse controls:\n\n|                          | Blocks Mode   | Events Mode      | Edit Block          | Edit Tileset |\n|--------------------------|---------------|------------------|---------------------|--------------|\n| **Click/drag**           | Place block   | Move event       | Place tile          | Place pixel  |\n| **Middle drag**          | Scroll        | Scroll           |                     |              |\n| **Right-click**          | Select block  | Edit event       | Select tile         | Select hue   |\n| **Double-click**         |               | Open .asm file   |                     |              |\n| **Ctrl+click**           | Replace block |                  | Place 2x2 tiles     | Replace hue  |\n| **Shift+click**          | Flood fill    | Folow warp event | Place 2/2 tiles     | Flood fill   |\n| **Ctrl+Shift+click**     |               |                  | Place 4x4 tiles     |              |\n| **Alt+click**            | Swap blocks   |                  | Place 2+2 tiles     | Swap hues    |\n| **Alt+Shift+click**      |               |                  | Place 4+4+4+4 tiles |              |\n| **Ctrl+Alt+click**       |               |                  | Place 2-2 tiles     |              |\n| **Ctrl+Alt+Shift+click** |               |                  | Place 4-4-4-4 tiles |              |\n\n(All those \"Edit Block\" mouse controls are explained further in [doc/edit-block.md](doc/edit-block.md).)\n\nMore information is at the [Skeetendo Forums](https://hax.iimarckus.org/topic/7222/) or [Pok\u00e9Community](https://www.pokecommunity.com/showthread.php?t=425994). If you have questions or comments, please go there.\n\n![Screenshot](screenshot.png)\n"
 },
 {
  "repo": "twa-camp-2016/poker-21",
  "language": null,
  "readme_contents": "the poker game, 21 points\n"
 },
 {
  "repo": "scrubmx/poker",
  "language": "Java",
  "readme_contents": "poker\n=====\n\nA poker hand equity calculator, written in Java 1.6\n\nThe cards must be entered in the format: As,10d with every card separated by a comma.\n\nRun 'javac ProyectoPoker.java' and then 'java ProyectoPoker' for a simple usage example."
 },
 {
  "repo": "edavis03/poker-hands",
  "language": "Java",
  "readme_contents": ""
 },
 {
  "repo": "Froren/OpenToolchainPoker",
  "language": "JavaScript",
  "readme_contents": "# Building an AI Poker Tournament: Quick Collaboration Using Bluemix DevOps Open Toolchain - Randall Ho\n---\n\n## Introduction\n\nWelcome! In this lightning session we'll be using the [Open Toolchain](https://developer.ibm.com/devops-services/2016/06/16/open-toolchain-with-ibm-bluemix-devops-services/) feature of Bluemix to run an automated poker tournament among robot players. We will create a Github integration in our toolchain to copy the code in this repository and flow it to a Delivery Pipeline integration to run the tournament.\n\nBolder participants with knowledge of Javascript and poker mechanics will also be able to create their own AI players and contribute them back to this repository, competing against the other attendees of this session.\n\nA complementary leaderboard application will keep track of the current standings of the bots in this repository. You can view the results of past tournaments at this link: [otc-poker-leaderboard.mybluemix.net](https://otc-poker-leaderboard.mybluemix.net)\n\nAny additions to this repository (through pull requests) will automatically trigger a run of a set of tournaments, which will update the leaderboard automatically. The last 5 sets of tournaments, with the timestamp, players, and chip totals of each AI will be displayed.\n\nThe [code for this leaderboard](https://github.com/randallho/OpenToolchainPokerLeaderboard) is also deployed to Bluemix using a toolchain. If you want to learn more about the infrastructure surrounding this lab, let me know and I can give you a quick demo.\n\nLet's begin running your own tournament. As with any other lab, please don't hesitate to ask questions if you get stuck. Enjoy!\n\n*The code for this lab was built on the [JsPoker](https://github.com/mdp/JsPoker) project by Mark Percival. Check it out if this lab interests you.*\n\n----\n### What is a toolchain?\n\nA toolchain is connected set of tools that can be adapted to suit the needs of a software development team. Different teams may have entirely different toolchains, as they are unique to the different development practices or culture of the team. The idea is championed by the [Bluemix Garage Method](https://www.ibm.com/devops/method) as a DevOps practice for delivering code in a more effective way.\n\nThis toolchain concept has been implemented as a Bluemix feature to allow users to collect and integrate a set of tools from a common tool catalogue with minimal configuration. This allows development teams to try out new tools easily and to adapt their tools to each individual project, discovering and switching tools as they see fit.\n\nTemplates can also be easily created to share toolchain configurations and settings with others, allowing teams to setup a full development environment in just a few seconds.\n\nIn our lab, we will utilize a handful of integrations to run our code quickly. Feel free to diverge from the lab and experiment with adding different tools as we go along. For instance, adding a _Slack_ integration will allow the _Delivery Pipeline_ to post a message to a Slack channel whenever a build is run.\n\n[More information on Open Toolchain](https://www.ibm.com/devops/method/category/tools)\n\n----\n\n### Prerequisite Accounts\n\nYou will need to sign up for a [Bluemix](https://www.bluemix.net) account for this lab, if you don't already own one.\n\nFor those creating a new Bluemix account, you will also need to create an _organization_ and a _space_ in your account after logging in.\n\n\nYou will also need a free [Github](https://github.com/) account. Github is a service for collaboration in software development. We will use Github in this lab to host our source code in a repository.\n\n--------\n\n### Creating a Toolchain and running the tournament\n\n1) Once you've logged into Bluemix, click on the top left menu icon beside IBM Bluemix.\n\n2) Click on the **DevOps** option from the left menu.\n\n3) You should now be on the Toolchains page. Click on `Enable Toolchains` and accept the terms and conditions prompt.\n\n4) Click on the `Enable` button to finish.\n\n5) Click on `Create toolchain from template` to start creating a toolchain.\n\n6) Select `Build your own toolchain` from the _Advanced_ section on the bottom.\n\n7) Choose a name and click `Create` to finish the creation process.\n\n8) After the toolchain is created, click `View Toolchain` or wait to be redirected.\n\n9) From here, we'll want to add some integrations to the toolchain. Click the `+` symbol on the right to add a tool.\n\n10) Select `Github`. You may need to **Authorize** Github if this is your first time using it in a Toolchain. This integration will link a Github repository to the toolchain, which will allow users to flow the source code to other integrations.\n\n11) After authorizing, choose `Fork` as the Repository Type and enter the URL of this repository as the Source URL (https://github.com/randallho/OpenToolchainPoker). A fork will create a new repository in your github account with the identical source code and history of this parent directory. Click `Create Integration`.\n\n12) A Github repository should now be on your toolchain. The source code for this lab is now linked to your toolchain. Click on the `+` symbol again to add another integration to use the source code.\n\n13) Select the `Delivery Pipeline`. Enter a name for your pipeline and click `Create Integration`.\n\n14) The _Delivery Pipeline_ service is used to run and deploy code to Bluemix with a great deal of configurability. We will be using this service to run the source code from the Github repository to simulate poker tournaments. Click into the new Pipeline tile on your toolchain page.\n\n15) From this screen we will start constructing pipeline stages, used for moving code from one location to another. Click on `Add Stage` to create a new Pipeline stage. You can give the stage a suitable tournament-sounding name.\n\n16) Verify that the **Input Type** is set to `SCM Repository` and that the **Stage Trigger** is set to `Run jobs whenever a change is pushed to Git`. Afterwards, click the `Jobs` tab on the top bar.\n\n17)  Click `Add Job` and create a new `Build` job.\n\n18) Set **Builder Type** of the build job to be `npm`, as our source code is written in Node.js.\n\n19) In the `Build Shell Command` text box, after `npm install`, make a new line and type in `node play`. This will allow the pipeline to run our simulation script when we run the stage.\n\n20) Click the `Save` button at the bottom of the page to save the stage.\n\n21) In the newly created stage, click into the `Build` job in the middle of the tile.\n\n22) Click `Run` at the top and an automated poker simulation will run in the console. You can use the down arrow at the bottom right of the screen to quickly navigate to the end of the tournament.\n\nThe tournament will list out the action that each bot took, at each stage of the game. The simulation is set to run for a limit of 200 hands, but will finish early if there is a winner. You can study the actions of each bot and the success of it's strategy as the game progresses, but the specific algorithms that denote the strategy of each bot will be explored in the latter part of the lab. \n\nFeel free to re-run the stage a few times to see the results of different tournaments. You may notice a high variability of winners because the current bots in the tournament use very basic strategies. More effective strategies may result in more consistent winners.\n\nThe latter parts of the lab are encouraged but optional. They deal with creating your own bot, which will require some knowledge of Javascript and poker. Feel free to also explore the toolchain features of Bluemix or the many different tool integrations available today.\n\nWe hope you enjoyed experimenting with Open Toolchains and running poker simulations with Bluemix!\nPlease let me know if you have any questions, concerns, or feedback for our product. Any feedback for the lab specifically would also be greatly appreciated. \n\n_If you want to learn more about the poker simulation framework, check out the [JsPoker](https://github.com/mdp/JsPoker) repository._\n\n-----\n## Creating your own bot \n----\n### Create a test stage\n\nIn production environments of software development teams, test stages are often used in the _Delivery Pipeline_ to flow new changes through automated tests before they are deployed to different environments.\n\nWe will first create a test stage in your toolchain to run a tournament with minimal output, as a method to test your bot quickly. This is the test harness to ensure that your bot is behaving as expected, before running larger simulations with it.\n\nRepeat steps 15-20 in the first part of the lab, but instead of entering `node play` in the `Build Shell Command` text box, use `node test/challenger_test.js` for the run command instead. Save the stage and run it to quickly see the success of the `challengerBot`. \n\n### Modify ChallengerBot\n\nTo experiment with a new player, you will need to edit the `players/challengerBot.js` file of the repository.\n\nCreate a `WebIDE` integration in the toolchain. The WebIDE creates an instance of the Orion Web Editor, which will allow us to make changes to the source code from inside the browser. Click into the integration to navigate to the root of the repository.\n\nExpand the `players` folder and open the `challengerBot.js` file. You should see an *update* function. The logic of your bot will reside in this function, although you can create helper methods and classes outside of the function. However, all the code must stay in this file and there can be no references to external modules.\n\nThe *update* function will direct the behaviour of your bot. It will be called multiple times within a single round of the tournament and the **game** parameter of the function holds all the information about the game that will be visible to your bot at that time. You can find examples of some game states in the `players/gameStates` folder.\n\nTo put it simply, the *update* function just needs to return an integer. If the value is equal to the current call amount (`game.betting.call`), it is considered a *call*. Any amount lower is a *fold*, any amount higher or equal to `game.betting.raise` is a *raise*.\n\nThe other players of the tournament can be found in the players folder, their logic is pretty simple so you can learn from their source code easily. More complex algorithms can be found in the `players/veterans` folder, for advanced techniques.\n\nMore information about making bots can also be found in the [JsPoker](https://github.com/mdp/JsPoker) readme.\n\nFeel free to also wave me down to discuss potential algorithms with me.\n\n### Committing changes\n\nAfter making your changes to `challengerBot.js`, click the `Git` icon on the left bar of the WebIDE.\n\nOnce it finishes loading, the left side of the screen should display all the files that have been changed. Enter a commit message for your change and click the `Commit` button on the top right.\n\nA commit should show up in the `Outgoing` dropdown on the left side of the screen. Click the `Push` button to commit your changes to the repository. \n\nThe _Delivery Pipeline_ was configured to run the test stage and run a tournament whenever new changes are pushed to the repository. Navigate back to it on the toolchain to view the results of the latest simulation (with your changes).\n\n### Contribute your bot to the repository\n\nWhen you are comfortable with the behaviour of your bot, you can contribute it back to the repository for other attendees of the lab to run simulations against.\n\n- Take the logic you've put in _challengerBot_ and create a new file in the `players` folder.\n- Give the bot a suitable filename and fill in the name for the bot in the `info` object. Feel free to also leave your email and btcWallet. \n- Revert any changes you made to `challengerBot.js`. You can do this by copying and pasting from the challengerTemplate file.\n- Add your new bot to `test/tournament.js` by adding a reference to the module at the top of the file and also adding it into the `table` object. \n- Commit your changes to your repository.\n- Navigate back to the parent repository (https://github.com/randallho/OpenToolchainPoker).\n- Go into the `Pull Request` tab and click `New Pull Request`.\n- Click `compare across forks` and navigate to your own repository.\n- Click `Create Pull Request` and enter a description and optionally a comment.\n- Click `Create Pull Request` and flag me down to review and merge the code.\n\nAfter I merge the pull request, you should see the live-updated results on [otc-poker-leaderboard.mybluemix.net](https://otc-poker-leaderboard.mybluemix.net).\n\nCongratulations on contributing! I wish your bot the best of luck. \n\n"
 },
 {
  "repo": "Sebazzz/PokerTime",
  "language": "C#",
  "readme_contents": "# ![Icon](doc/logo.png) PokerTime\n\nRemote planning poker tool built in ASP.NET Core and Blazor\n\nLicensed: GNU GPL v3.0\n\n|                    | master                                                                                                                                                                                                                  | develop                                                                                                                                                                                                                   |\n| ------------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **AppVeyor CI**    | [![Build status](https://ci.appveyor.com/api/projects/status/mlwomeg23hqb0r3j/branch/master?svg=true)](https://ci.appveyor.com/project/Sebazzz/PokerTime/branch/master)                                                 | [![Build status](https://ci.appveyor.com/api/projects/status/mlwomeg23hqb0r3j/branch/develop?svg=true)](https://ci.appveyor.com/project/Sebazzz/PokerTime/branch/develop)                                                 |\n| **CircleCI**       | [![CircleCI](https://circleci.com/gh/Sebazzz/PokerTime/tree/master.svg?style=shield)](https://circleci.com/gh/Sebazzz/PokerTime/tree/master)                                                                            | [![CircleCI](https://circleci.com/gh/Sebazzz/PokerTime/tree/develop.svg?style=shield)](https://circleci.com/gh/Sebazzz/PokerTime/tree/develop)                                                                            |\n| **Github actions** | [![Github CI](https://github.com/sebazzz/PokerTime/workflows/Continuous%20integration/badge.svg?branch=master)](https://github.com/Sebazzz/PokerTime/actions?workflow=Continuous+integration&branch=master)             | [![Github CI](https://github.com/sebazzz/PokerTime/workflows/Continuous%20integration/badge.svg?branch=develop)](https://github.com/Sebazzz/PokerTime/actions?workflow=Continuous+integration&branch=develop)             |\n| **Codeconv**       | [![codecov](https://codecov.io/gh/Sebazzz/PokerTime/branch/master/graph/badge.svg)](https://codecov.io/gh/Sebazzz/PokerTime)                                                                                            | [![codecov](https://codecov.io/gh/Sebazzz/PokerTime/branch/develop/graph/badge.svg)](https://codecov.io/gh/Sebazzz/PokerTime)                                                                                             |\n| **Daily build**    | [![Github CI](https://github.com/sebazzz/PokerTime/workflows/Build%20installation%20packages/badge.svg?branch=master)](https://github.com/Sebazzz/PokerTime/actions?workflow=Build+installation+packages&branch=master) | [![Github CI](https://github.com/sebazzz/PokerTime/workflows/Build%20installation%20packages/badge.svg?branch=develop)](https://github.com/Sebazzz/PokerTime/actions?workflow=Build+installation+packages&branch=develop) |\n\n## Features\n\n-   Realtime planning poker app, ideal for remote teams\n-   Create password protected planning poker sessions\n-   As facilitator, lead the planning poker session through the discussion, estimation and consolidation stages\n-   Easy to use\n\n### Browser Support\n\nDeveloped and tested on:\n\n-   Internet Explorer 11\n-   Microsoft Edge\n-   Google Chrome\n-   Mozilla Firefox\n\n## Download\n\n### Docker\n\nPokerTime is available as a docker image. Simply pull it from the Docker hub, and run it:\n\n    docker pull sebazzz/pokertime:latest\n    docker run -p 80:80 sebazzz/pokertime\n\nFor further configuration you may want to mount a directory with [the configuration](doc/Installation.md#Configuration):\n\n    docker run -p 80:80 -v /path/to/my/configuration/directory:/etc/pokertime sebazzz/pokertime\n\n### Manual installation\n\nDownload the release for your OS from the [releases tab](https://github.com/Sebazzz/PokerTime/releases) or download the cutting edge builds from [AppVeyor](https://ci.appveyor.com/project/Sebazzz/PokerTime).\n\n[Follow the installation instructions](doc/Installation.md) in the documentation to install it.\n\n## Building PokerTime from sources\n\nIf you prefer to build the application yourself, please follow the [compilation instructions](doc/Building-from-sources.md) in the documentation.\n\n## Screenshots\n\n**Create a planning poker session**\n\n![Create a planning poker session](doc/create-session.png)\n\n**Join a planning poker session**\n\n![Join a planning poker session](doc/join-poker-session.png)\n\n**Discussion stage**\n\n![Discussion stage](doc/discussion.png)\n\n**Estimation**\n![Estimation](doc/estimation.png)\n\n**Coming to a consensus**\n![Estimation discussion](doc/estimation-discussion.png)\n\n**Session conclusion**\n![Conclusion](doc/finished.png)\n\n## Contributions\n\nContributions are allowed and encouraged. In general the rules are: same code style (simply use the included `.editorconfig`), and write automated tests for the changes.\n\nPlease submit an issue to communicate in advance to prevent disappointments.\n\n## Attribution\n\nApplication icon:\n\n-   Icon made by [Eucalyp](https://www.flaticon.com/authors/eucalyp) from [www.flaticon.com](http://www.flaticon.com/)\n\nBuilt on:\n\n-   [Bulma](https://bulma.io) _CSS framework_;\n-   [Fontawesome](http://fontawesome.io/) as _icon framework_;\n-   [ASP.NET Core 3.1](https://dot.net) (Blazor Server) with [Entity Framework Core](https://docs.microsoft.com/en-us/ef/core/) for _server side logic and data persistence_;\n"
 },
 {
  "repo": "vkolagotla/DevOpsPoker",
  "language": "Python",
  "readme_contents": "# DevOpsPoker\nDevOps Poker bot template\n\n### How to use\n\nTo use the DevOps Poker bot template create a fork of the git repository and clone it to your workstation.\n\nTo run the bot in a game, you need to change the configuration at the top of `dplayer.py`.\n\n    # -----------------------------------------------------------\n    # Configuration\n    # You need to change the setting according to your environment\n    gregister_url='http://localhost:5001'\n    glocalip_adr='127.0.0.1'\n    # -----------------------------------------------------------\n\n`gregister_url` is the game server URL to register the bot for a game.\n`glocalip_adr` is the ip of your workstation to be called by the game server. Make sure your firewall does not block traffic on the port you've selected for your bot.\n\n#### Prerequisites to run `dplayer.py` on your workstation\n\nThe following prerequisites are required to run `dplayer.py`:\n\n- Python 3.5 or better\n- packages required\n\t- flask\n\t- flask_restful\n\t- requests\n- PIP to install packages - PIP is available on Windows in `Scripts` folder after installation.\n\n#### Install packages\n\n    pip install flask\n    pip install flask_restful\n    pip install requests\n    \n\n#### run the bot\n\nThe bot requires some command line parameters:\n\n    DevOps Poker Bot - usage instruction\n    ------------------------------------\n    python dplayer.py <team name> <port> <password>\n    example:\n    python3 dplayer bazinga 40001 x407\n    \nTeam name and password is provided by the organizers.\n\n#### improve your game\n\nThe bot template is configured to fold as soon as possible. This means you cannot win. To improve your game you need to deploy new versions with a modified `__get_bid` function.\nThe function returns an integer value with your bid in a bet round. Hand cards and community cards are provided. The data passed to `__get_bid` in the `data` parameter is described in the source code comments. \n\n    ## return bid to caller\n    #\n    #  Depending on the cards passed to this function in the data parameter,\n    #  this function has to return the next bid.\n    #  The following rules are applied:\n    #   -- fold --\n    #   bid < min_bid\n    #   bid > max_bid -> ** error **\n    #   (bid > min_bid) and (bid < (min_bid+big_blind)) -> ** error **\n    #\n    #   -- check --\n    #   (bid == 0) and (min_bid == 0) -> check\n    #\n    #   -- call --\n    #   (bid == min_bid) and (min_bid > 0)\n    #\n    #   -- raise --\n    #   min_bid + big_blind + x\n    #   x is any value to increase on top of the Big blind\n    #\n    #   -- all in --\n    #   bid == max_bid -> all in\n    #\n    #  @param data : a dictionary containing the following values\n    #                min_bid   : minimum bid to return to stay in the game\n    #                max_bid   : maximum possible bid\n    #                big_blind : the current value of the big blind\n    #                board     : a list of board cards on the table as string '<rank><suit>'\n    #                hand      : a list of individual hand cards as string '<rank><suit>'\n    #\n    #                            <rank> : 23456789TJQKA\n    #                            <suit> : 's' : spades\n    #                                     'h' : hearts\n    #                                     'd' : diamonds\n    #                                     'c' : clubs\n    #\n    # @return a dictionary containing the following values\n    #         bid  : a number between 0 and max_bid\n\n#### Hints\n\n1. The bot registers itself automatically when it's started. It automatically removes the registration if it crashes or terminates.\n2. If a bot is started with the same team name on another host/port, the registration is updated and the new bot is used in the next game.\n3. Errors in return values or not reachable, registered bots are interpreted as fold by the server.\n\n\n"
 },
 {
  "repo": "Deltanium/PokeRadar",
  "language": null,
  "readme_contents": "**Forge Required: https://files.minecraftforge.net/**  \n**Minecraft: 1.10.2**  \n**Pixelmon: 5.0.3 / 5.0.4**  \n\n# PokeRadar Version 3.6.1\n- PokeRadar is once again UNDETECTABLE. Party hard friends!\n- New Boss colors with nameplates and waypoints\n- Search multiple pokemon by separating with commas eg: pikachu, magikarp, mew\n- NPC detection\n- PokeLoot detection\n- PokeShrine detection\n- Mega boss detection\n- Filter by Nature\n- Filter by Effort Value (EV). Search by specifically HP, Attack, Defense, Sp.Attk, Sp.Def, or Speed. A pokemon will show up if it has only that EV.\n- PokeRadar automatically checks for updates\n- Right click a Pokemon to view basic stats on it\n- Clicking the \"Stats\" option on a pokemon will show you an expanded stats print out\n- You can choose between colored dots or textures on the map! Check under Map Settings > Pokeradar to change.\n- More optimization\n  \n\n## DOWNLOAD ([Change Log](https://github.com/kcaf/PokeRadar/wiki/Change-Log))\n\n### Minecraft 1.10.2  \n&nbsp;&nbsp; *Pixelmon 5.0.3 / 5.0.4*  \n&nbsp;&nbsp;&nbsp;&nbsp; - [PokeRadar 3.6.1](https://mega.nz/#!t64BhDxJ!zPdfVgTSHs_RKk51-epxnYskPGEcoi9XPOHhVeTXtMU)\n\n### Minecraft 1.7.2  \n&nbsp;&nbsp; *Pixelmon 3.1.4*  \n&nbsp;&nbsp;&nbsp;&nbsp; - [PokeRadar 2.5.0](https://mega.nz/#!JjpGRB6R!N9NpuQssoPmai9kqCkRMhmjsBbOYquoOlgy22zuPQOI)\n  \n\n## Screenshots\n[Click here to view the entire Imgur Album](https://imgur.com/a/H2aqG)  \n![1](https://i.imgur.com/0vMqhBo.png)  \n![2](https://i.imgur.com/Bgibxgf.png)  \n\n\n## Information\n\nThis is the original PokeRadar for Pixelmon. Detect any pokemon in your area, level, location, and if they are shiny. Search for specific pokemon or multiple pokemon at once with commas. Automatic waypoints and for bosses and legendaries in your area. Find PokeLoot and Shrines with ease. Filter by Effort Value (EV) and for faster training! You can enter a partial spelling (minimum 3 letters) for a pokemon and PokeRadar will find it. Use the in-game menu to configure Map settings.\n  \n\n## Hotkeys\n\n**BACKSLASH \"\\\\\"** - PokeRadar menu  \n**PAGE DOWN** - Minimap zoom in  \n**PAGE UP** - Minimap zoom out  \n**INSERT** - New Waypoint  \n**M** - Open the map  \n**N** - Change minimap mode  \n\nPressing N will cycle through the following Map Modes:  \n- Small MiniMap\n- Large MiniMap\n- (new) Hide all traces of PokeRadar from screen. This allows you to safely take screenshots.\n  \n\n## Problems / Suggestions\nPlease [submit a new 'Issue'](https://github.com/kcaf/PokeRadar/issues/new) describing in detail the problem you're having with the mod and include and error logs you may have. If you've got a suggestion, post there as well and I'll see what I can do!\n  \n\n## Why are we on GitHub now and not MinecraftForum.net\n[Because.](https://i.imgur.com/775rSxd.png)\n\n\n"
 },
 {
  "repo": "mettoboshi/poker-game",
  "language": "C++",
  "readme_contents": "## \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306b\u3064\u3044\u3066\n\n\u672c\u66f8\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u3001MIT\u30e9\u30a4\u30bb\u30f3\u30b9\u306e\u3082\u3068\u3067\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\u8a73\u7d30\u306fLICENSE.txt\u306b\u8a18\u8f09\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\n## \u7d20\u6750\u306b\u3064\u3044\u3066\n\n### \u753b\u50cf\u7d20\u6750\u306b\u3064\u3044\u3066\n\n\u672c\u66f8\u306e\u30b5\u30f3\u30d7\u30eb\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u753b\u50cf\u7d20\u6750\u306b\u3064\u3044\u3066\u306f\u3001\u672c\u66f8\u306e\u8cfc\u5165\u8005\u304c\u81ea\u4f5c\u306e\u30a2\u30d7\u30ea\u5185\u306b\u4f7f\u7528\u3059\u308b\u5834\u5408\u306b\u9650\u3063\u3066\u3001\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\u52a0\u5de5\u306a\u3069\u3082\u81ea\u7531\u306b\u884c\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u304c\u3001\u914d\u5e03\u306e\u969b\u306b\u306f\u6ce8\u610f\u4e8b\u9805\u3092\u53b3\u5b88\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n* \u30b2\u30fc\u30e0\u753b\u50cf \u00a9 2012 tolemo. (Naoto Otuka / Kansuke Nishida / Junichi Yoshino)\n* \u30ab\u30fc\u30c9\u753b\u50cf \u00a9 2015 tonosamart. (Ogappa / Kansuke Nishida)\n\n### \u52b9\u679c\u97f3\u7d20\u6750\u306b\u3064\u3044\u3066\n\n\u672c\u66f8\u306e\u30b5\u30f3\u30d7\u30eb\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u52b9\u679c\u97f3\u7d20\u6750\u306b\u3064\u3044\u3066\u306f\u3001\u672c\u66f8\u306e\u8cfc\u5165\u8005\u304c\u3001\u81ea\u4f5c\u306e\u30a2\u30d7\u30ea\u5185\u306b\u4f7f\u7528\u3059\u308b\u5834\u5408\u306b\u9650\u3063\u3066\u3001\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\u52a0\u5de5\u306a\u3069\u3082\u81ea\u7531\u306b\u884c\u3063\u3066\u69cb\u3044\u307e\u305b\u3093\u3001\u914d\u5e03\u306e\u969b\u306b\u306f\u6ce8\u610f\u4e8b\u9805\u3092\u53b3\u5b88\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n|\u30d5\u30a1\u30a4\u30eb\u540d|\u89e3\u8aac|\n|:-----------|:------------|\n|se_coin.wav|\u30b9\u30bf\u30fc\u30c8\u3001BET\u30dc\u30bf\u30f3\u3001DEAL\u30dc\u30bf\u30f3\u3092\u304a\u3057\u305f\u6642\u306e\u97f3|\n|se_draw.wav|\u30ab\u30fc\u30c9\u3092\u914d\u308b\u3068\u304d\u306e\u97f3|\n|se_get.wav|\u914d\u5f53\u30b2\u30c3\u30c8\u306e\u97f3|\n|se_hold.wav|HOLD\u30dc\u30bf\u30f3\u3092\u304a\u3057\u305f\u6642\u3001\u914d\u5f53\u304c\u306a\u304b\u3063\u305f\u6642\u306e\u97f3|\n|se_reverce.wav|\u30ab\u30fc\u30c9\u3092\u8868\u306b\u3081\u304f\u308b\u3068\u304d\u306e\u97f3|\n\n \u00a9 2015 tonosamart. (Kansuke Nishida)\n\n### \u97f3\u697d\u7d20\u6750\u306b\u3064\u3044\u3066\n\n\u672c\u66f8\u306e\u30b5\u30f3\u30d7\u30eb\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u97f3\u697d\u7d20\u6750\u306b\u3064\u3044\u3066\u306f\u3001\u672c\u66f8\u306e\u8cfc\u5165\u8005\u304c\u3001\u81ea\u4f5c\u306e\u30a2\u30d7\u30ea\u5185\u306b\u4f7f\u7528\u3059\u308b\u5834\u5408\u306b\u9650\u3063\u3066\u3001\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u5909\u63db\u4ee5\u5916\u306e\u52a0\u5de5\u3092\u7981\u6b62\u3057\u307e\u3059\u3002\u3053\u3061\u3089\u306e\u7d20\u6750\u306f\u518d\u914d\u5e03\u3067\u304d\u307e\u305b\u3093\u306e\u3067\u3054\u6ce8\u610f\u304f\u3060\u3055\u3044\u3002\n\n|\u30d5\u30a1\u30a4\u30eb\u540d|\u66f2\u306e\u30bf\u30a4\u30c8\u30eb|\u30b3\u30e1\u30f3\u30c8|\n|:-----------|:------------|:------------|\n|game.wav|\u3053\u3048\u308d\u305b\u3093\u3058\u3093\u3060\u306b|\u83ef\u9e97\u306a\u308b\u7a7a\u4e2d\u30a2\u30af\u30b7\u30e7\u30f3\uff01|\n|over.wav|\u30b2\u30fc\u30e0\u30aa\u30fc\u30d0\u30fc\uff13|\u3077\u308e\u3093|\n|title.wav|\u3084\u307f\u3092\u3068\u3079|\u7720\u3089\u306a\u3044\u753a\u3092\u8d70\u308c\uff01|\n\n \u00a9 PANICPUMPKIN\n\n### \u6ce8\u610f\u4e8b\u9805\n\n\u672c\u66f8\u306e\u30b5\u30f3\u30d7\u30eb\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3001\u753b\u50cf\u7d20\u6750\u3001\u52b9\u679c\u97f3\u7d20\u6750\u3001\u97f3\u697d\u7d20\u6750\u306b\u3064\u3044\u3066\u3001\u914d\u5e03\u3092\u7981\u6b62\u3057\u307e\u3059\u3002\n\n\u672c\u66f8\u306e\u8cfc\u5165\u8005\u304c\u81ea\u4f5c\u306e\u30a2\u30d7\u30ea\u5185\u306b\u540c\u68b1\u3059\u308b\u5834\u5408\u306b\u9650\u3063\u3066\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3001\u753b\u50cf\u7d20\u6750\u3001\u52b9\u679c\u97f3\u7d20\u6750\u3092\u914d\u5e03\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\uff08\u7121\u6599\u3001\u6709\u6599\u3092\u3068\u3044\u307e\u305b\u3093\u3002\u5546\u7528\u5229\u7528\u53ef\u80fd\u3067\u3059\u3002\uff09\n\u203bgit\u306a\u3069\u3067\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u516c\u958b\u3059\u308b\u5834\u5408\u3001\u7d20\u6750\u306e\u914d\u5e03\u306f\u3067\u304d\u307e\u305b\u3093\u306e\u3067\u3054\u6ce8\u610f\u304f\u3060\u3055\u3044\u3002\n\n\u305f\u3060\u3057\u3001\u30b9\u30c8\u30a2\u53ca\u3073\u30db\u30fc\u30e0\u30da\u30fc\u30b8\u306a\u3069\u3067\u4e00\u822c\u7684\u306b\u914d\u5e03\u3059\u308b\u5834\u5408\u306f\u3001\u306a\u3093\u3089\u304b\u306e\u30aa\u30ea\u30b8\u30ca\u30eb\u8981\u7d20\u3092\u4ed8\u3051\u52a0\u3048\u308b\u3053\u3068\u3092\u6761\u4ef6\u3068\u3057\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u305d\u306e\u307e\u307e\u306e\u5185\u5bb9\u3067\u306e\u30b9\u30c8\u30a2\u516c\u958b\u306f\u7981\u6b62\u3067\u3059\u3002\u30a2\u30d7\u30ea\u306e\u8aac\u660e\u6587\u306b\u3001\u8ffd\u52a0\u30fb\u5909\u66f4\u3057\u305f\u30aa\u30ea\u30b8\u30ca\u30eb\u8981\u7d20\u3092\u8a18\u8f09\u306e\u4e0a\u3001\u4ee5\u4e0b\u306e\u8457\u4f5c\u6a29\u8868\u8a18\u3092\u5fc5\u305a\u8a18\u8f09\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u307e\u305f\u3001\u5834\u5408\u306b\u3088\u3063\u3066\u306f\u672c\u66f8\u306e\u8cfc\u5165\u3092\u8a3c\u660e\u9802\u304f\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u306e\u3067\u3001\u516c\u958b\u4e2d\u306f\u5fc5\u305a\u672c\u66f8\u3092\u624b\u5143\u306b\u304a\u3044\u3066\u304a\u3044\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u8457\u4f5c\u6a29\u8868\u8a18\u4f8b\n```\n\u3053\u306e\u30a2\u30d7\u30ea\u306f\u3001\u3010\u672c\u66f8\u306e\u540d\u524d\u3011\u3067\u5b66\u7fd2\u3057\u305f\u5185\u5bb9\u3092\u5143\u306b\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n* \u3010\u8ffd\u52a0\u30fb\u5909\u66f4\u3057\u305f\u30aa\u30ea\u30b8\u30ca\u30eb\u8981\u7d20\u3011\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002\n* \u3010\u8ffd\u52a0\u30fb\u5909\u66f4\u3057\u305f\u30aa\u30ea\u30b8\u30ca\u30eb\u8981\u7d20\u3011\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002\n\n\u753b\u50cf\u7d20\u6750\u3001\u52b9\u679c\u97f3\u7d20\u6750\u3001\u97f3\u697d\u7d20\u6750\u306e\u4e00\u90e8\u307e\u305f\u306f\u5168\u90e8\u306e\u8457\u4f5c\u6a29\u8868\u8a18\n\u00a9 2015 Kansuke Nishida(tonosama labo) / Yasuo Fujita (mettoboshi).\n\u00a9 2012 tolemo. (Naoto Otuka / Kansuke Nishida / Junichi Yoshino)\n\u00a9 2015 tonosamart. (Ogappa / Kansuke Nishida)\n\u00a9 PANICPUMPKIN\n```\n\n\u97f3\u697d\u7d20\u6750\u306b\u3064\u3044\u3066\u306f\u3001PANICPUMPKIN\u306e\u30db\u30fc\u30e0\u30da\u30fc\u30b8\u306e\u5229\u7528\u898f\u7d04\u3092\u78ba\u8a8d\u306e\u4e0a\u3054\u5229\u7528\u304f\u3060\u3055\u3044\u3002\n\n\u30d5\u30a1\u30df\u30b3\u30f3\u98a8\u30aa\u30ea\u30b8\u30ca\u30eb\u97f3\u697d\u7d20\u6750 PANICPUMPKIN\nhttp://pansound.com/panicpumpkin/\n"
 },
 {
  "repo": "WDI-SEA/poker_tournament",
  "language": "JavaScript",
  "readme_contents": "# WDI Poker Tournament\n\nLet's have a class poker tournament. You instructors will decide the stakes! \n\n## Starter Code\n\nStarter code with a home page is given. There is also a models folder that contains read/write functions for a JSON data file. \n\n## Goals\n\nWe'll add full RESTful routes so that we can add/view/show/edit/delete all of our teams. If time, we'll test it out!\n"
 },
 {
  "repo": "tamlhp/deepbot-poker",
  "language": "Python",
  "readme_contents": "# deepbot-poker\n\nThis repository implements a bot playing No Limit Texas Hold'em poker. It has been trained to play 6-handed sit-and-go as well as heads-up ring-games. The model is built on a neural network, trained with a genetic algorithm. It tracks the game as a whole as well as each opponent separately. LSTMs are used for memory, taking advantage of the sequential nature of poker. The [detailed report](https://github.com/tamlhp/deepbot-poker/tree/master/docs/Deepbot_report.pdf) and corresponding [presentation](https://github.com/tamlhp/deepbot-poker/tree/master/docs/Deepbot_presentation.ppt) can be found in the docs alongside other important files.\n\nBelow is an overview of the neural network used at the core of the decision making of the last iteration of DeepBot.\n<p align=\"center\">\n<img src=\"./docs/presentation_images/6max-network.png\" width=\"80%\"></p>\n<p align=\"center\"><u>Six handed neural network overview</u></p>\n\n\n## Getting started\n### Setting up\nFirst clone the repository with the recursive argument. This is to include two necessary submodules (PyPokerEngine and OMPEval). Both are forks that have been altered for the purpose of this project.\n```\ngit clone https://github.com/tamlhp/deepbot.poker.git --recursive\n```\n\nThis code was developed and tested with python 3.5.6. All the required python libraries are in the requirements file and can be installed with\n```\npip install -r requirements.txt\n```\nIn order to perform trainings, it is also required to have [redis](https://redis.io/) installed.\n\n### Run default game\nIn order to verify that everything is set up correctly, it is appropriate to let a trained agent play and watch the trace of the game. To do so with the default options, simply move to  the code folder and run the agent_play script.\n```\npython3 agent_play.py\n```\n\n## Training a new agent\n### Redis server and workers\nAs a lot of games have to be played, redis is used to enable multi-threading and cloud computing. Go to [./code/redis](https://github.com/tamlhp/deepbot-poker/tree/master/code/redis), then run the redis server:\n```\nredis-server redis.conf\n```\nredis.conf binds the server to an address.\n\nThen, start the workers:\n```\nsh run_workers.sh 70 127.0.0.1\n```\nThe first argument (70) is the number of workers to start. This should be equal to the number of threads available on the machine, or the genetic algorithm population size if it is smaller. The second argument (127.0.0.1) is the ip address of the redis server, here it is local. If multiple machines are used for computation, the address should be changed both here and in redis.conf.\n\n### Starting the training\nTo train an agent from scratch, use the script train_agent.py. It is best to have a look at the many available arguments first:\n```\npython3 train_agent.py -h\n```\nAt the very least it is adviserd to define a simulation id (--simul_id), to avoid overwritting past training traces.\n```\npython3 train_agent.py --simul_id 1\n```\n\n### Training trace\nThe training process generates data for reproducibility, and the agents. It saves the decks used, the earnings obtained by the agents, and most importantly the agents in a lightweight format:\na single list containing all the parameters of its neural network.\n\nThe default location of training data is [./data/trained_agents_and_data](https://github.com/tamlhp/deepbot-poker/tree/master/data/trained_agents_and_data). As it takes a lot of storage, it is not included in the git repository.\n\nA few agents are however available in [./data_trained_agents_git](https://github.com/tamlhp/deepbot-poker/tree/master/data/trained_agents_git). There are (partial) traces of three trainings:\n- 6max_full: Plays 6 Handed Sit and Go against various opponent tables\n- 6max_single: Plays 6 Handed Sit and Go against one opponent, the Ruler (see report)\n- hu_second: Plays Heads Up Ring Game against various weak opponents\n\nThe best agent of each training instance is the first agent (best peformance) of the last generation (most trained).\n\n### Training performance example\nHere is an example of the return on investments (ROI) obtained by agents over the training. It is for the '6max_full' network and environment. The maximum attainable ROI is 300%. Each curve is for a table with different type of opponents.\n<p align=\"center\">\n<img src=\"./docs/presentation_images/full_6max_training_roi.png\" width=\"70%\"></p>\n<p align=\"center\"><u>Average ROI over generations</u></p>\n\n## Post training scripts\n### Make a trained agent play\nTo make a trained agent play a single game, one can use the agent_play script. Again, it is advised to look at the available arguments. For example to let the pre-trained 6max_full (git) agent play against a tight passive table, run:\n```\npython3 agent_play.py --network 6max_full --table_ind 2 --agent_file ../data/trained_agents_git/6max_full/gen_300/bots/1/bot_1_flat.pkl\n```\nThis will print information about the actions taken and rewards given at each hand.\n### Validations\nThe scripts to perform the validation, be it quantitative or qualitative, are in [./code/validations](https://github.com/tamlhp/deepbot-poker/tree/master/code/validations).\n\n### GUI\nAs the various bots developed in this repository, including DeepBot, are compatible with PyPokerEngine, it is possible to play against them through a GUI. To do so use [PyPokerGUI](https://github.com/ishikota/PyPokerGUI).\n\n## Contributor\n- Cyril van Schreven\n"
 },
 {
  "repo": "chrisjeng/Poker",
  "language": "Java",
  "readme_contents": ""
 },
 {
  "repo": "GavinJoyce/PokerCards",
  "language": null,
  "readme_contents": "PokerCards\n==========\n\nSimple poker cars images in .png and .svg format\n\n![Ace of Diamonds](https:////github.com/GavinJoyce/PokerCards/blob/master/images/%5B235x330%5D/Ad.png?raw=true) \n![Kinf of Hearts](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B235x330%5D/Kh.png?raw=true)\n\nThese cards are based on http://code.google.com/p/vectorized-playing-cards/\n\n\n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/2c.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/3c.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/4c.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/5c.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/6c.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/7c.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/8c.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/9c.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/Tc.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/Jc.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/Qc.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/Kc.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/Ac.png?raw=true) \n\n\n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/2s.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/3s.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/4s.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/5s.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/6s.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/7s.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/8s.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/9s.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/Ts.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/Js.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/Qs.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/Ks.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/As.png?raw=true) \n\n\n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/2d.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/3d.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/4d.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/5d.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/6d.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/7d.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/8d.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/9d.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/Td.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/Jd.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/Qd.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/Kd.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/Ad.png?raw=true) \n\n\n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/2h.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/3h.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/4h.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/5h.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/6h.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/7h.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/8h.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/9h.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/Th.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/Jh.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/Qh.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/Kh.png?raw=true) \n![](https://github.com/GavinJoyce/PokerCards/blob/master/images/%5B104x146%5D/Ah.png?raw=true) \n"
 },
 {
  "repo": "VasylYaremkiv/poker",
  "language": "Ruby",
  "readme_contents": ""
 },
 {
  "repo": "codejens/PokerGame",
  "language": "Lua",
  "readme_contents": ""
 },
 {
  "repo": "JosephYao/Kata-PokerHands",
  "language": "Java",
  "readme_contents": "Kata-PokerHands\n===============\n\nKata PokerHands\n"
 },
 {
  "repo": "ucsb-cs56-projects/cs56-games-poker",
  "language": "Java",
  "readme_contents": "cs56-games-poker\n================\nGUI application that simulates a Texas Holdem style Poker Game using 2 decks.\n\nproject history\n===============\n```\n (pconrad) Poker Game | W14 | W16 | M16\n```\n\nPlaying the Game\n================\nTo start the game, type the command\n```\nant run\n```\nGame Options :\n\n* Play Single Player : Play versus the computer\n\n* Create Poker Server : Host a socket server on the local machine for a poker game and tells you the IP Address needed for other players to join the server. In order to personally join the server you just created, open a new terminal window, type the command 'ant run' again, and then click \"Connect to Poker Server.\" Further instructions below. (This has temporarily been removed in favor of creating a better PokerGame)\n\n* Connect to Poker Server : Connect to an open poker server. Enter \"localhost\" or \"127.0.0.1\" into the prompt textbox to join your own server. Otherwise, enter the IP address of the host you want to connect to (IP address given to the host after creating the server). (This has temporarily been removed in favor of creating a better Poker Game)\n\n* Create Poker Chat Server : Host a socket server for the chat program. \n\n* Connect to Poker Chat Server : Connect to an open poker chat server. Connecting to the chat server works the exact same way as the above 'Poker Server'.\n\nScreenshots\n===========\n\n![Main Menu](https://raw.githubusercontent.com/dvanmali/cs56-games-poker/master/pictures/menu.png)\n\n![Rules](https://raw.githubusercontent.com/dvanmali/cs56-games-poker/master/src/edu/ucsb/cs56/projects/games/poker/rules.png)\n\n![Single Player](https://raw.githubusercontent.com/dvanmali/cs56-games-poker/master/pictures/singleplayer.png)\n\n![Creating Chat Server](https://raw.githubusercontent.com/dvanmali/cs56-games-poker/master/pictures/createchatserver.png)\n\n![Enter Username for Chat](https://raw.githubusercontent.com/dvanmali/cs56-games-poker/master/pictures/chatusername.png)\n\n![Chat](https://raw.githubusercontent.com/dvanmali/cs56-games-poker/master/pictures/chat.png)\n\nRules\n=====\n* If you forget any of these rules, don't worry just click the rules button in the Poker Game!\n\nBetting\n=======\n* If you choose to bet, enter the amount in the betting field and press bet or enter\n* As of now, raising is not implemented as a response to a bet.\n\nFolding\n=======\n* If you choose to fold, press the fold button; be aware you will lose any chips you placed in the pot\n* Also, if you choose not to call the dealer's bet, you will fold\n\nWinning\n=======\n* In order to win, either recieve a better poker hand than the dealer or try to make him fold.\n\nEnd Of Game\n===========\n* At the end of every hand the winner will appear in an alert\n* If you wish to continue playing, press Yes\n* If you wish to quit playing press No\n\nJavaDoc\n=======\nTo see JavaDoc and overall structure of the game, type the command:\n```\nant javadoc\n```\n\nCode Assessment\n===============\nThe code is seperated into a multitude of classes.\n* The PokerMain class sets up the menu that you first see when the game starts up. It creates three buttons and does the event handling for them as well.\n* One of the buttons creates a PokerServer, which is defined in the PokerChatServer class. This class tries to create a server socket at port 14040. Then, after finding out your IP address using a website (line 45), it prints out your IP address to the stream. The socket continues running indefinitely. Should anything fail, the location of the failure in the code will be printed. \n* Another button creates the PokerChatClient. BEFORE the PokerChatClient is created, PokerMain asks for the IP address of the server youre try to connect to. THEN is creates PokerChatClient. This class then sets up a GUI that asks for a username. Then, it tries to create a socket at port 14040. once it is Setup, the ChatBox GUI is set up. The methods inside deal with receiving and sending message as well. Unlike PokerChatServer, PokerChatClient can be exited.\n* The last button starts up a new PokerSinglePlayer.\n* PokerSinglePlayer is a subclass of PokerGame. The GUI for PokerSinglePlayer is kept in the PokerGameGUI class. this class is also a subclass of PokerGame. \n* When the \"Play Single Player\" button is pushed in PokerMain, first, PokerSinglePlayer sets the chips for the player and the computer opponent. Next, inside the go method, PokerGame's setup method is called. This method makes the player and opponent bet 5 chips to set up the Ante of 5 chips. this \"bet\" method is located inside of the Player class. Now that the setup method has been called, layoutSubviews and controlButtons is called. both of these methods are located inside of PokerGameGUI.\n* The card class creates all 52 cards, assigning them each a suit and a number. Aces have the value \"14\" as opposed to \"1\". The deck class puts all 52 cards into an array, and handles shuffling and drawing cards from the deck.\n\nM16 final remarks\n=================\nPoker Single Player begins to follow a \"Factory Design\" pattern for PokerGame. Deck is in charge of the deck, Hand is in charge of the player's hand, Player has a hand, TableCard holds the table cards, Poker Game holds Players, a Deck, and TableCards. When we rewrote the Poker Game just for a single player, we completely got rid of our multiplayer version in favor of an understandable design. This is where you come in, we left a good basic heirarchy of the single player game and we want you to extend our PokerGame class to create the multiplayer aspect of the game through the server. See the many issues we created last year and see which ones you can tackle. Feel free to restart the idea of the Chat Button, we kept it there because it had no influence with the Single Player game when we rewrote the code. A good idea is that you should develop a better server with a hierarchal structure to make the PokerServer (aka MultiPlayer Server). Future improvements and ideas that you can do are improving the GUI layout and creating a new class to take on GUI responsibilities of the PokerGame. You can add better animations to the cards (and maybe even poker chips)! The rules sheet opens in a new window, rather, you can add it directly within the PokerGame. You can also integrate chat with the multiplayer game and disable it from the singleplayer mode. This game actually has tons of room for improvement and we can't wait to see what you come up with!\n\nF16 final remarks\n==================\nTo learn about the code, please refer to the code assessment section above. Overall, we have tried to move the code towards setting up a good base for future features. We separated the PokerSinglePlayer into two classes: one that contains the logic, and one that contains the GUI. The PokerSinglePlayer extends GUI, and GUI extends PokerGame. We also made some minor improvements to the gameplay, such as randomizing who gets to bet first and adding the rules image inside of the game itself. Originally, we wanted to add a multiplayer. However, as it stands, PokerServer and PokerClient need a major revamp before that can be done. Please refer to those issues for more information. The first thing we recommend you tackle is improving the CompareHands class. After we created a test class, we discovered that it contains some bugs. We got rid of some major bugs but there\u2019s still a lot of room for improvement.  Please read the issue we left for more information on that. From then on, it is up to you whether you want to continue improving single player, or to begin adding more features. Should you choose to improve single player, consider taking the AI out of Poker Single Player and making it its own class. Our dream for this game was to create a multiplayer that allowed you to chat with the players while you played with them. There\u2019s so many different directions you can take with this game, but remember that it is more pertinent to fix present bugs and design issues than it is to add features.\n\nF17 Final Remarks\n=================\nFor an assessment of the basic program structure, please refer to the code assessment section above. In addition to fixing some relatively minor issues, such as Javadoc generation and comments, we tried to improve CompareHands and make it easier for the (currently single player only) game to be extended to include multiplayer functionality.\n\n**Minor Issues Fixed:**\n* **Added Javadoc comments** - added comments to much of the code base\n* **Added Javadoc publishing to Github Pages** - javadoc can now be published online using Github Pages\n* **Added message displaying winning hand** - Added a method to CompareHands to help display the winning hand at the end of a round. Because this method affects the GUI, a possible area of improvement could be to move this behavior into PokerGameGUI or some other GUI class. \n\n**Major Issues Fixed:**\n* **CompareHands tie handling** - improved how CompareHands handles ties, decreasing bugs\n* **Seperated OpponentAI from PokerSinglePlayer** - We made it easier to add multiplayer functionality by creating and two new concrete classes, User and OpponentAI, each inheriting from a common abstract class, Player. User and OpponentAI contain exactly the same methods, with the only difference being in how takeTurn() is implemented. In user, it simply instructs the GUI to wait for user input. In OpponentAI, it executes the current poker AI algorithm. The AI algorithm is currently extremely easy to beat, and is definitely another area that can be improved. \n\nSince Users and AIs can both be thought of as Players, extending the code to multiplayer should be easier since all players can be referred to using Player references, regardless of whether or not the player is a user or AI.\n\n**Recommendations:**\n\nBecause of the current state of the code base, we recommend refactoring the code for multiplayer before adding new features. Currently, the assumption that the game has only 2 players is reflected in much of the logic and much of the existing code requires significant refactoring to support multiplayer. Some of the issues, such as incorporating the chat server into the game GUI window, are only truly relevant if multiplayer has already been implemented. Additionally, the implementation for new features will likely differ depending on whether or not the game supports multiplayer. Adding too many features without adding multiplayer might make the code too dependent on the assumption that there are only two players for it to be feasible to be extended to multiplayer. One piece of general advice about refactoring the code to allow multiplayer is don't be surprised if you find yourself changing much (or most) of the code. As has been previously stated, the most of the existing code assumes only two players. Adding multiplayer requires significant change to existing code, showing how programming to implementations instead of interfaces can result in a program both difficult to maintain and extend.\n\nW18 Final Remarks\n=================\nFor an assessment of the basic program structure, please refer to the code assement section above. The original state of the code was hardcoded throughout the program to assume there were only two players, a user and an opponent, and we refactored that code to create a program that can handle an arbitrary amount of players as long as the GUI is refactored. As of now, we assume there are only four players, one user and three computers, but in the future that can be changed to support a larger amount of players.\n\n**Minor Issues Fixed**\n* **Fixed Text Gathering** We edited the text to make sure it didn't stick to the edge of the screen to make it look more appealing.\n* **Fixed Fold Output** The message displayed when you fold now addresses that you folded instead of comparing hands.\n\n**Major Issues Fixed**\n* **Major code refactoring** We refactored the PokerGame.java, PokerSinglePlayer.java, and PokerGameGUI.java files in order to support multiplayer. \n* **Cohesive Design** We moved the code towards a more abstract design instead of a hardcoded two-player assumption, such as putting the players in an ArrayList. We also cleaned up the code and got rid of unnecessary commented out chunks of code.\n\n**Recommendations**\n\nAfter we refactored the project to multiplayer, there are some errors in CompareHands.java in which some match-ups don't calculate properly. Use the CompareHandsTest.java to be sure, but some examples we're sure of is when two people have the same hand (ie: a pair of 4's vs a pair of 5's) it counts it as a tie instead of the higher hand winning. Also, currently winner gets set to 0 when a tie occurs at the moment to avoid an out-of-index error, but consider figuring a way around that to set a unique number for ties. Try to figure out a way to get compareHands() to call the tie functions in order to figure out which tying hand is higher.  Also, compareHands shouldn't take folded players into account when calculating the winning hand, but it currently does. Right now, the rules panel only pop-ups a single image instead of the entire rules, so consider implementing a scroll panel or something similar. A piece of advice is to utilize system outputs in order to check your functions; it helps figure out where things are going wrong or which clauses are getting executed.  Something in multiplayer, with many opponents, if you bet a certain amount, only the first opponent will call and the others won't lose their chips (they don't know how to react to other opponent/CPU players). \n"
 },
 {
  "repo": "haffizaliraza/poker-ruby",
  "language": "Ruby",
  "readme_contents": "# Poker::Ruby\n\nWelcome to your new gem! In this directory, you'll find the files you need to be able to package up your Ruby library into a gem. Put your Ruby code in the file `lib/poker/ruby`. To experiment with that code, run `bin/console` for an interactive prompt.\n\nTODO: Delete this and the text above, and describe your gem\n\n## Installation\n\nAdd this line to your application's Gemfile:\n\n```ruby\ngem 'poker-ruby'\n```\n\nAnd then execute:\n\n    $ bundle install\n\nOr install it yourself as:\n\n    $ gem install poker-ruby\n\n## Usage\n\nTODO: Write usage instructions here\n\n## Development\n\nAfter checking out the repo, run `bin/setup` to install dependencies. Then, run `rake spec` to run the tests. You can also run `bin/console` for an interactive prompt that will allow you to experiment.\n\nTo install this gem onto your local machine, run `bundle exec rake install`. To release a new version, update the version number in `version.rb`, and then run `bundle exec rake release`, which will create a git tag for the version, push git commits and the created tag, and push the `.gem` file to [rubygems.org](https://rubygems.org).\n\n## Contributing\n\nBug reports and pull requests are welcome on GitHub at https://github.com/[USERNAME]/poker-ruby. This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the [code of conduct](https://github.com/[USERNAME]/poker-ruby/blob/master/CODE_OF_CONDUCT.md).\n\n## License\n\nThe gem is available as open source under the terms of the [MIT License](https://opensource.org/licenses/MIT).\n\n## Code of Conduct\n\nEveryone interacting in the Poker::Ruby project's codebases, issue trackers, chat rooms and mailing lists is expected to follow the [code of conduct](https://github.com/[USERNAME]/poker-ruby/blob/master/CODE_OF_CONDUCT.md).\n"
 },
 {
  "repo": "vilotchild/AwesomePokerGame",
  "language": null,
  "readme_contents": ""
 },
 {
  "repo": "timhaley94/holdem",
  "language": "JavaScript",
  "readme_contents": "<h1 align=\"center\">Hold'em Hounds</h1>\n\n<p align=\"center\">\n  <a href=\"https://codeclimate.com/github/timhaley94/holdem/maintainability\">\n    <img src=\"https://api.codeclimate.com/v1/badges/b4b31a8f8cf13a23ca93/maintainability\" />\n  </a>\n  <a href=\"https://codeclimate.com/github/timhaley94/holdem/test_coverage\">\n    <img src=\"https://api.codeclimate.com/v1/badges/b4b31a8f8cf13a23ca93/test_coverage\" />\n  </a>\n  <a href=\"https://circleci.com/gh/timhaley94/holdem\">\n    <img src=\"https://circleci.com/gh/timhaley94/holdem.svg?style=shield\" />\n  </a>\n  <a href=\"https://app.netlify.com/sites/wizardly-fermat-cab2a8/deploys\">\n    <img src=\"https://api.netlify.com/api/v1/badges/1636d5c8-85c2-40cb-91b0-ede8fcd1e2fd/deploy-status\">\n  </a>\n</p>\n\nBorn of the pandemic, Hold'em Hounds is an (\ud83d\udea7 in development \ud83d\udea7) poker app that's aiming to\nbring a fresh perspective to a crowded field of garish, clunky apps, desparate to suck you\ninto microtransactions.\n\n## Product priorities\n\nHold'em Hounds should be...\n\n- Multiplayer\n- Free to play\n- Real time\n- Account optional\n- Download optional\n- Not too serious\n- Beautiful\n\n## Directory structure\n\n```\nholdem/\n  .circleci/        --> CI/CD configuration\n  client/           --> Client (React) code\n    src/\n      components/   --> UI Elements\n      data/         --> Constants\n      hooks/        --> Generic React hooks\n      state/        --> Application state (i.e. the \"data layer\")\n      utils/        --> Generic reusable code\n  infrastructure/   --> Infrastructure (Terraform) code\n  server/           --> Server (Node.js) code\n    src/\n      api/          --> View/Controller logic\n      domain/       --> Business logic (i.e. the \"service layer\")\n      loaders/      --> Side effects (i.e. mongo and redis connections)\n      modules/      --> Specific reusable code\n      utils/        --> Generic reusable code\n```\n\n## Development\n\nWhile you you could set up each individual piece of the system locally (i.e. server, client, mongo, redis)\nthe easiest way to run the project is through `docker-compose`. First make sure you have `docker` and\n`docker-compose` installed. Then you can use the `scripts.sh` file which takes a variety of subcommands:\n\nWe have a `scripts.sh` file which takes a includes a number of subcommands. Some options are:\n- `up` stand up the system in the foreground (with logs)\n- `rebuild` force a fresh build of the docker images/containers\n\nFor example, to get the app up and running, run `./scripts.sh up` and then, viola,\n[http:localhost:3000](http:localhost:3000).\n\nThe `docker-compose` configuration supports hot reloading, so once you have it running, your\nchanges to `./client` and `./server` will be respected. However, if you ever need to force a\nrebuild: `./scripts build`.\n\n### Testing and linting\n\nIn order to lint the source code or run the test suite, you'll need to run `npm install` in the\ndirectory in question (i.e. `client` or `server`) and then run either `npm run test` or `npm run lint`.\n\n### High level docs\n\nWe have a couple of diagrams to get a high level feel for the implementation:\n- [Our technical stack](docs/diagrams/the_stack.png)\n- [Our infrastructure](docs/diagrams/infrastructure.png)\n\n## Contributing\n\n1. Read [our contributing guide](docs/CONTRIBUTING.md)\n2. Find a Github issues\n3. Fork this repository (if you aren't a collaborator)\n4. Open a pull request\n"
 },
 {
  "repo": "mangoknight/dexas-poker",
  "language": "JavaScript",
  "readme_contents": "# dexas-poker By Mango\n## \u5ba2\u6237\u7aef\u4f7f\u7528 [Cocos Creator](http://www.cocos.com/creator)\nclient side designed by [Cocos Creator](http://www.cocos.com/creator)\n## \u670d\u52a1\u7aef\u4f7f\u7528 [Node.js](https://github.com/nodejscn/node-api-cn)\nserver side designed by [Node.js](https://github.com/nodejscn/node-api-cn)\n\n\u4f7f\u7528 socket.io \u8fdb\u884c\u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u7aef\u4e4b\u95f4\u7684\u901a\u8baf\n\nuse socket.io to communicate between client side and server side.\n\n\u4f7f\u7528 redis \u8fdb\u884c\u6570\u636e\u7f13\u5b58\uff08\u91d1\u94b1,\u724c\u578b,\u4e0b\u6ce8\uff09\n\nuse redis to cache data. (money,poker,bet)\n"
 },
 {
  "repo": "pandaant/poker-mcts",
  "language": "C++",
  "readme_contents": "# NLTH Poker Agent using Monte Carlo Simulation\n\nMonte Carlo Tree Search or short MCTS is a simulation based search algorithm that can be\nused to solve extensive-form games with imperfect information. Complex games like NLTH\nhave a large number of states due to the element of chance and the number of opponents.\nInstead of searching the complete state space (which is intractable) MCTS only samples one\npossible outcome per iteration. As the number of iterations increases, the true value of a state\ncan be approximated.\nMCTS is a anytime algorithm which means that the computation can be interrupted at any time\nto retrieve a valid result (or a approximation of it if not enough iterations have been performed.)\nThe search is performed on a tree containing the following types of nodes:\n\n**Root node** is the start of the tree. The node represents the state we want to evaluate.\n\n**Action nodes** are nodes in which the same player has to make a decision as in the root node.\n\n**Opponent nodes** represent the opposing players decisions.\n\n**Terminal nodes** represent either nodes in which the game ended by folding by all but one player or by going to a showdown.\n\n**Chance nodes** are used in places where chance makes a move (draw a card).\n\nEach iteration begins at the root node and recursively selects children according to a selection\nstrategy that chooses which action to take. If the state for the selected action does not exist,\nthe last state is expanded and it\u2019s children are added to the tree before continuing the selection\nuntil a terminal history is reached. This history is then evaluated according to a simulation\nstrategy that calculates the expected value. In the final step of the iteration the calculated value\nis propagated back up the tree by an backpropagation strategy. After a certain amount of time or number of predefined\niterations a final move strategy selects the actual actions to play from the root node.\n\n## Requirements\n\n* Clang (For C++11 support)\n* UnitTest++ for tests (expects headers and lib to be in /usr/{lib,include})\n\n## Installation\n* Clone repository:\n```bash\n$ git clone --recursive https://github.com/pandaant/poker-mcts\n```\n* Download [HandRanks.dat](https://github.com/christophschmalhofer/poker/blob/master/XPokerEval/XPokerEval.TwoPlusTwo/HandRanks.dat) and save it as poker-mcts/handranks.dat\n* Build agent library:\n```shell\n$ cd poker-mcts\n$ make all\n```\n* build the documentation:\n```shell\n$ make doc\n```\nA compiled version of the doxygen documentation can be found [here](http://mark-zumbruch.de/documentation/poker-mcts/)\n* run the tests:\n```shell\n$ cd test\n$ make all run\n```\n\n\n## Usage\n"
 },
 {
  "repo": "Pobermeier/vintage-poker",
  "language": "JavaScript",
  "readme_contents": "# Vintage Poker\n\nVintage Poker is a full-stack poker platform built with the MERN-stack, where a user can create an account and play poker on a predetermined set of tables (differ in amount of blinds & buy-ins). The player starts with a specific amount of virtual currency he can play with.\n\nThe server part of the application is a Node- / Express-Backend. The Frontend is a React application. Non Real-Time communication between front- & backend is handled via a REST-API. In-game logic-related communications & chat is handled via web sockets / Socket.io.\n\nYou can find the live version of this project [here](https://www.vintagepoker.net/).\n\n## Technologies Used\n\n### Frontend:\n\n- **React Ecosystem:**\n  - Project was bootstrapped with **create-react-app**\n  - UI-Layer was created with **React**\n  - **React router** was used to implement client-side routing\n  - State Management is handled with the **Context-API** (built into React core-library)\n  - **Styled Components** were used to create all of the custom CSS\n- Communication with the Backend is handled with **Axios** (REST-API) & **Socket.io** (Game logic)\n- All localized strings and static page content (e.g. privacy policy) is stored in **Contentful** (cloud-based Headless-CMS) and retrieved via their Content Delivery API\n\n### Backend:\n\n- **Node.js** & **Express.js**\n- **mongoDb** is used as the database & **mongoose** as ORM\n- Authentication is implemented with **JSON Web Tokens**\n  - Passwords are encrypted with **bcrypt**\n- The client-server communication for the game-logic is implemented with **Socket.io**\n- Uses **nodemailer** to send out transactional mails via Mailjet SMTP\n- Security-packages included to make the application more robust are: **helmet**, **hpp**, **express-rate-limit** & **express-mongo-sanitize**\n\n## Features\n\n- User can register & login into the frontend application\n  - Password is stored encrypted in DB (!)\n  - Authentication is handled via JWT-webtokens to secure API-transactions & private routes\n- Basic form of Virtual Gaming Currency\n  - User gets a specific amount of VGC after registration, they can use this amount to play on any open table. Should their balance drop to zero they get the same starting amount again for free.\n- App screens: Landing Page, Lobby (choose table etc.), Login Screen / Modal, Registration Screen / Modal, User Dashboard, Game UI\n- User can join a table and play poker \u21d2 full game-loop + In-game chat implemented, Functional animations to support visual gameplay experience\n- Localization for two languages implemented (DE, EN)\n\n## Design Mock-ups\n\nYou can find the Figma-files with the design mock-ups for this app [here](https://www.figma.com/file/Vh4zssZy2ZhMxLGkcNJA7a/Vintage-Poker-Design-Copy?node-id=0%3A1).\n\n## In-depth Project Documentation\n\nThe more detailed project documentation can be found [here](https://www.notion.so/Vintage-Poker-Working-Title-2fa245a71d374bf787a13cf39e3e08dd).\n\n## Quick Start\n\n### Set-up MongoDB\n\nSet-up either a local mongoDB instance or create a [cloud-hosted instance](https://www.mongodb.com/). Save your db username + passsword and the mongoDb connection-string as you will need it for the next step.\n\n### Add a \"local.env\" file in the \"/server/config\" folder with the following entries\n\n```\n  MONGO_URI=<YOUR_MONGODB_URI>\n  JWT_SECRET=<YOUR_JWT_SECRET>\n  PORT=<YOUR_SERVER_PORT>\n  NODE_ENV=development\n  SMTP_HOST=<YOUR_SMTP_HOST>\n  SMTP_PORT=<YOUR_SMTP_PORT>\n  SMTP_USER=<YOUR_SMTP_USER>\n  SMTP_PW=<YOUR_SMTP_PASSWORD>\n```\n\n### Set-up Contentful\n\nCreate a free community [Contentful-Account](https://www.contentful.com/get-started/) and create a new Space. Add two locales (en, de) with \"en\" being the fallback for the german-locale. Create a Content Delivery API Key and copy your space token and Contentful Delivery API access-token to the clipboard, as you will need it for the next step.\n\nYou can use the [Contentful CLI](https://www.npmjs.com/package/contentful-cli) to import the space backup from the \"contentful\"-folder into your own Contentful space. This backup includes all localized key-value pairs and the content of the static pages.\n\n### Add a \".env.local\" file in the \"/client\" folder with the following entries\n\n```\n  REACT_APP_CONTENTFUL_SPACE_ID=<YOUR_CONTENTFUL_SPACE_ID>\n  REACT_APP_CONTENTFUL_ACCESS_TOKEN=<YOUR_CONTENTFUL_ACCESS_TOKEN>\n  REACT_APP_GOOGLE_ANALYTICS_TRACKING_ID=<YOUR_GOOGLE_ANALYTICS_TRACKING_ID>\n  REACT_APP_SERVER_URI=<YOUR_BACKEND_URI_HOST_PORT>\n```\n\n### Install server dependencies\n\n```bash\nnpm install\n```\n\n### Install client dependencies\n\n```bash\ncd client\nnpm install\n```\n\n### Run both Express & React from root project-directory\n\n```bash\nnpm run dev\n```\n\n### Build for production\n\n```bash\ncd client\nnpm run build\n```\n\n### Test production before deploy\n\n```bash\nNODE_ENV=production node server.js\n```\n"
 },
 {
  "repo": "icescrum/iceScrum-plugin-planning-poker",
  "language": "Groovy",
  "readme_contents": ""
 },
 {
  "repo": "mr-feek/global-poker-hand-history-converter",
  "language": "JavaScript",
  "readme_contents": "# global-poker-hand-history-converter\nConvert Global Poker hand histories to PokerStars format.  To download your hand histories from global poker, use [this chrome extension](https://github.com/mr-feek/global-poker-hand-history-converter-chrome-extension)\n\n*This package is a work in progress. It currently only supports converting cash games (NLH/PLO).*\n\n The goal of this repo is to be able to convert Global Poker hand histories into the format used by PokerStars. This enables the importing of Global Poker hand histories into the likes of PokerTracker 4 to analyze **your own results**. This package is **not meant** to be used to power a HUD or to gain real time stats on other players.\n\n\n\n ## Install\n `npm install @mr-feek/global-poker-hand-history-converter`\n \n ## Usage\n ```javascript\n import { convertHand } from './src/Converter';\n import GlobalPokerHand from './src/GlobalPokerHand';\n\n // fetch your JSON blob of hand history from global poker API (outside the scope of this package)\n const handHistoryBlob = {};\n const globalPokerHand = new GlobalPokerHand(handHistoryBlob);\n const pokerStarsFormat = convertHand(globalPokerHand);\n ```\n ## Development\n ### Setup\n - `yarn install`\n## Running Tests\n`npm run test`\n\n## Support on Beerpay\nHey dude! Help me out for a couple of :beers:!\n\n[![Beerpay](https://beerpay.io/mr-feek/global-poker-hand-history-converter/badge.svg?style=beer-square)](https://beerpay.io/mr-feek/global-poker-hand-history-converter)  [![Beerpay](https://beerpay.io/mr-feek/global-poker-hand-history-converter/make-wish.svg?style=flat-square)](https://beerpay.io/mr-feek/global-poker-hand-history-converter?focus=wish)\n"
 },
 {
  "repo": "chips-blockchain/bet",
  "language": "C",
  "readme_contents": "[![bet CD](https://github.com/chips-blockchain/bet/actions/workflows/bet-cd.yml/badge.svg?branch=master)](https://github.com/chips-blockchain/bet/actions/workflows/bet-cd.yml)\n# Pangea-Bet\n\n## Abstract\nBet is a decentralized adopatable gaming platform that meet the needs of any card game and predictable betting scenarios. The initial draft is written by jl777 is [here](./docs/BET_Initial_Draft.md). The underlying cryptocurrency that bet uses is [CHIPS](https://github.com/chips-blockchain/chips) and for real time betting and bet uses [CHIPS over LN](https://github.com/chips-blockchain/lightning). \n\nThe detailed technical whitepaper is [here.](https://cdn.discordapp.com/attachments/455737840668770315/456036359870611457/Unsolicited_PANGEA_WP.pdf)\n\n## Configuration\nBet can be played with or without LN. please go through the [existing tradeoffs](./docs/protocol/architecture_doc.md) we have at the moment to understand the ecosystem in a better way also please go through the [bet without ln](./docs/protocol/bet_without_ln.md) on how to play poker without using ln and it contains some nice info about various methods and info about [various tx's](./docs/protocol/tx_flow.md) involved during the gameplay.\n\n## To Play\n\nIt's simple, just follow these steps to play poker on bet plarform using CHIPS.\n* **Setup:** Setup the nodes by following any of the approaches mentioned in the [setup documentation](./README.md#setup).\n* **Load the funds:** Load the chips wallet with whatever the amount of the CHIPS that you willing to play. Lets say if you are joining the talbe of stake_size 10 CHIPS, its always advisable to load the CHIPS wallet with >10 CHIPS why because the actions occur during the game are recorded in the CHIPS blockchain and every action of user costs 0.0005 CHIPS tx_fee to the user. \n```\nTo get the chips address on the setup node run\n$chips-cli getnewaddress\nYou will get an address and to this address deposit CHIPS to play.\n\n```\n*  **Withdraw funds:** Needless to say, once the game is done, its always advisable to move funds back to your secure wallet. Before withdrawing the funds, if there is any issues like player disconnection, loss of funds like that happens then raise the dispute with the cashier node as mentioned below and then withdraw the funds. \n```\ncd\ncd bet/privatebet\n./bet game solve\n\nWithdraw using the following command\n./bet withdraw <amount> <to_your_chips_address>\n```\n## Setup\nThere are many different ways in which you can setup the nodes to play the poker using bet. Here are some of the ways in which you can setup the nodes:\n* The easy approach - Using the docker \n* The hardway way -  By compiling the chips and bet repos all the way. \n* Using the precompiled binaries\n* Using the compilation script\n\nIrrespective of whichever approach you follow, the prerequisites and configuration of nodes remain same\n## Prerequisites\n##### For Player and Dealer nodes\n* Ports used by the respective entities must be open. Below are the list of the ports used and should be remained open incase if you have any firewall configurations.\n```\n* 7797 - This port is used to have pub-sub communication between Dealer and player nodes.\n* 7798 - This port is used to have pull-push communication between Dealer and player nodes.\n* 7901 - This port is used to have pub-sub communication between Cashier and any other{player,dealer} nodes.\n* 7902 - This port is used to have push-pull communication between Cashier and any other{player,dealer} nodes.\n* 9000 - This port is used to have websocket communication between GUI and {player,dealer} nodes.\n* 1234 - This is the port on which the webserver runs on, this port should be opened if the player is hosting its own GUI.\n```\n#### For Dealer and Cashier nodes\n* The dealer and cashier nodes should need the static public IP for the nodes on which they setup.\n\n## Configuring the nodes\nThe behaviour of the node is based on how you configure it. We can enable/disable few functionalities of the players and dealers by making corresponding settings in the configuration files. All the configuration files are located in the path`./bet/privatebet/config`.\n\nLets take a look into the details of what these configuration settings mean:\n1. For Player configuration follow this [link](./docs/protocol/player_configuration.md)\n2. For Dealer configuration follow this [link](./docs/protocol/dealer_configuration.md)\n3. For Cashier configuration follow this [link](./docs/protocol/cashier_configuration.md)\n\n## Setting up the nodes\nNow lets take a look into one by one approach and you can follow either of these approaches to setup the chips and bet nodes.\n### Approach1 :- Playing using Docker - It all takes few commands with the setup time <5 mins \nThe docker image is built on top of the ubuntu 20.04 base image for bet. The simplest way to play poker is using the docker images. All the docker images for the bet are maintained here\n```\nhttps://hub.docker.com/r/sg777/bet/tags\n```\nPull the latest tag (at the time of writing this **v1.5** is the latest tag) and do the following to setup the nodes and play\n#### step1 :- Pulling the docker image \n```\ndocker pull sg777/bet:v1.5\n```\n#### step2 :- Running the docker image \n**Note:** At the moment the docker setup only works if the host network is shared with the docker image. Since you sharing the host network with the docker please be make sure to stop chipsd and bet if any running in the host machine.\n\nThe docker image can be run with various options, here we see few such ways which are important to know. \n##### To share host n/w\n```\ndocker run -it --net=host sg777/bet:v1.5\n\n--OR with chosen name to a container\n\ndocker run -it --name poker --net=host sg777/bet:v1.5\n```\n##### To share host n/w and to run bet using gdb\n```\ndocker run -it --net=host --cap-add=SYS_PTRACE --security-opt seccomp=unconfined --name poker sg777/bet:v1.5\n```\n##### To share host n/w, to run bet using gdb and to use locally available preloaded chips blocks\n\nLets say your machine already has chips installed in you can mount the path of **.chips** directory path on to the docker image, else follow these steps to download the chips bootstrap node.\n```\ncd && mkdir chips_bootstrap\ncd chips_bootstrap\nwget https://eu.bootstrap.dexstats.info/CHIPS-bootstrap.tar.gz\ntar --overwrite -xvf \"$bootstrap_node\"\nwget https://raw.githubusercontent.com/chips-blockchain/bet/master/privatebet/config/chips.conf\n```\nThen run the docker as follows:\n```\ndocker run -it --net=host --cap-add=SYS_PTRACE --security-opt seccomp=unconfined -v /root/chips_bootstrap:/root/.chips:rw --name poker sg777/bet:v1.5\n\n--OR without debug option\n\ndocker run -it --net=host -v /root/chips_bootstrap:/root/.chips:rw --name poker sg777/bet:v1.5\n\ncd && ./chips/src/chipsd &\n```\n**Note:** Here _**/root/chips_bootstrap**_ is the path on my local machine where(Here you have to provide the path on your machine) in which i downloaded chips bootstrap as mentioned above and i'm mounting this to the path _**/root/.chips**_ on the docker image. If you start the docker image with this approach you can simply skip **step3**.\n\n#### step3 :- Running chips node\nOnce you have access to the docker shell, you can load the chips from the [chips bootstrap node](./docs/protocol/release.md#downloading-chips-bootstrap-node). Running the below script pulls the bootstrap node and configures the chips node.\n```\ncd && ./load_bootstrap_node.sh\n```\nThen run the chips daemon\n```\n./chips/src/chipsd &\n```\n#### step4 :- If you are a player run the player as follows\n```\ncd\n./bet/privatebet/bet player\n```\n#### step4 :-  If you are the dealer run the dealer as follows\n```\ncd\n./bet/privatebet/bet dcv <host_ip>\n\n```\n#### step5 :-  Hosting the GUI\n##### Using the GUI hosted by the cashier and dealer nodes\nGUI can be hosted by anyone, by default the GUI is hosted by all the cashier nodes and dealer nodes can also host the GUI as a service they provide to its players. After starting the player node with `./bet player` in the above step, in the logs you see the list of the servers where the GUI hosted something like below:\n```\n[client.c:bet_player_handle_stack_info_resp:1345] Player can use any of the GUI's hosted by cashiers to connect to backend\n[config.c:bet_display_cashier_hosted_gui:236] http://141.94.227.65:1234/\n[config.c:bet_display_cashier_hosted_gui:236] http://141.94.227.66:1234/\n[config.c:bet_display_cashier_hosted_gui:236] http://141.94.227.67:1234/\n[config.c:bet_display_cashier_hosted_gui:236] http://141.94.227.68:1234/\n[config.c:bet_display_cashier_hosted_gui:236] http://159.69.23.30:1234/\n```\nYou can access any of these links in your browser and from which you can connect to the players backend which you setup in the step 4.\n\n##### Hosting own GUI\n\nIn case if you like to host the GUI, please note that the GUI server is running on the port `1234`, so for this you need to start the docker image as mentioned below: \n```\ndocker run -it -p 1234:1234 sg777/bet:v1.5\n\nNote: v1.5 is latest tag at the time of this writing, always pull the docker image with the latest tag to avoid the manual process of updating and compiling the git repos manually.\n\ncd\ncd pangea-poker\nnpm start &\n```\n\nOnce you hosted your own GUI, from your local browser you can access the GUI using `http://localhost:1234/`.\n\n#### step6 :-  Playing\nNow we have everything ready to play. All you need to just connect to player backend from GUI and play. [Lets play](./docs/protocol/player_gui.md)\n\n***NOTE: Irrespective of whichever approach you follow in setting up the nodes, the steps3-6 remains same.***\n\n### Approach2 :- Compiling the repos from scratch\n\n#### Compilation Guidelines\n1. [Compiling only bet repo](./docs/protocol/ubuntu_compile.md#building-bet)\n2. [Compiling all the repos needed on Ubuntu](./docs/protocol/ubuntu_compile.md)\n3. [Detailed compilation of all the repos needed on various platforms](./docs/protocol/compile.md)\n\n### Approach3 :- Using the precompiled binaries\nWe making automated [ binary releases](https://github.com/chips-blockchain/bet/releases) for various platforms. The latest binaries from here can be taken to setup the nodes.\n#### Downloading precomipled binaries & CHIPS bootstrap node\n1. [Precompiled binaries](./docs/protocol/release.md#downloading-precombiled-binaries-for-linux)\n2. [CHIPS bootstrap node](./docs/protocol/release.md#downloading-chips-bootstrap-node)\n\n### Approach4 :- Using the installation script\n\nIf you wish to install everything required for setting up Pangea Poker, you can use the following command to auto-install Pangea Poker:\n\n```bash\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/chips-blockchain/bet/master/tools/install-pangea.sh)\"\n```\n\n\n## Coomunication b/w Bet Nodes\nThe communication b/w the nodes at very high level is described [here](./docs/protocol/node_communication.md). \n\n## CHIPS & LN Upgrade\n[Here](./docs/protocol/upgrade.md) contains the list of API's that bet uses from chips and ln. So whenever any upstream changes made to either chips and ln repos one must be careful to check if there is any change in these API functionalities, inputs and outputs.\n\n## Glossary\nMany of the times we use short hand abbreviations, so glossary for it is [here](./docs/protocol/glossary.md). \n"
 },
 {
  "repo": "Fossana/discounted-cfr-poker-solver",
  "language": "Java",
  "readme_contents": "# discounted-cfr-poker-solver\n\nThis repository contains Java code for finding approximate nash equilibrium strategies for poker turn and river subgames using discouted counterfactual regret minimization (DCFR). The code will run several hundred iterations of DCFR and print the best response EVs and exploitability every 100 iterations. No function is written yet to print the average strategies.\n\nThe hand evaluator requires a 124MB lookup table that can be found here: https://github.com/christophschmalhofer/poker/blob/master/XPokerEval/XPokerEval.TwoPlusTwo/HandRanks.dat\n\nTo change the game tree, modify the code in the functions testTurn() and testRiver() in Main.java.\n\nOn my machine (i7 4790k), 500 cfr iterations for testTurn() take 76s and 1000 cfr iterations for testRiver() takes <1s.\n\nAt one point I had CFR+ and PCS (Public Chance Sampling) implemented, which is why the strategy and factory design patterns are used.\n\nThe code could easily be modified for flop subgames.\n\nSpecial thanks to amax, whose river solver was the basis for most of my implementation. amax's RiverSolver can be found here: http://www.poker-ai.org/archive/www.pokerai.org/pf3/viewtopicba91.html?f=64&t=2922&st=0&sk=t&sd=a&start=40\n"
 },
 {
  "repo": "kyrcha/poker",
  "language": "Java",
  "readme_contents": "poker\n=====\n\nPoker calculator in Java (hand strength, hand potential, Chen's formula)\n\nUsage\n-----\n\nCheck out the main function in Hand.java\n\n"
 },
 {
  "repo": "danielpaz6/Poker-Hand-Evaluator",
  "language": "JavaScript",
  "readme_contents": "<a href=\"https://jspoker.net/\"><img align=\"right\" src=\"https://image.flaticon.com/icons/svg/2187/2187542.svg\" width=\"260\" /></a>\n\n# Texas holdem Rank Card Evaluator\n\n[![Live Demo](https://img.shields.io/badge/demo-online-green.svg)](http://evaluator.jspoker.net/) \n[![GitHub issues](https://img.shields.io/github/issues/danielpaz6/Poker-Hand-Evaluator)](https://github.com/danielpaz6/Poker-Hand-Evaluator/issues)\n[![Implemented Demo](https://img.shields.io/badge/implemented%20project%20with%20this%20algorithm-live%20demo-brightgreen)](https://jspoker.net)\n\nTexas Holdem Rank Evaluator Algorithm made in C#. And also a Side Pots Calculator and its algorithm with in-depth explanation, examples and the math behind.\n\n  - A system that gives a rank to a 7 cards hand.\n  - Side pots calculator including money spreading\n  - In-depth explenation with examples and pictures.\n\n# Demonstration\n\n<p align=\"center\">\n\t<a href=\"http://evaluator.jspoker.net/\"><img src=\"/images/webdemo.png\" width=\"750\" /></a>\n</p>\n\n**A full example:**\n\n```csharp\nstatic void Main(string[] args)\n{\n\t// Suits: club (\u2663), diamond (\u2666), heart (\u2665) and spade (\u2660).\n\tRoom room = new Room\n\t{\n\t\tRoomName = \"Test Room\",\n\t\tCardsOnTable = new List<string[]>\n\t\t{\n\t\t\tnew string[]{\"14\", \"Club\"},\n\t\t\tnew string[]{\"13\", \"Club\"}, \n\t\t\tnew string[]{\"11\", \"Club\"},\n\t\t\tnew string[]{\"5\", \"Club\"},\n\t\t\tnew string[]{\"10\", \"Heart\" }\n\t\t}\n\t};\n\n\tApplicationUser user1 = new ApplicationUser\n\t{\n\t\tName = \"A\",\n\t\tPlayerCards = new List<string[]>\n\t\t{\n\t\t\tnew string[]{\"8\", \"Club\"},\n\t\t\tnew string[]{\"7\", \"Heart\"},\n\t\t},\n\t\tChips = 0\n\t};\n\n\tApplicationUser user2 = new ApplicationUser\n\t{\n\t\tName = \"B\",\n\t\tPlayerCards = new List<string[]>\n\t\t{\n\t\t\tnew string[]{\"9\", \"Heart\"},\n\t\t\tnew string[]{\"5\", \"Heart\"},\n\t\t},\n\t\tChips = 0\n\t};\n\n\tApplicationUser user3 = new ApplicationUser\n\t{\n\t\tName = \"C\",\n\t\tPlayerCards = new List<string[]>\n\t\t{\n\t\t\tnew string[]{\"14\", \"Diamond\"},\n\t\t\tnew string[]{\"4\", \"Spade\"},\n\t\t},\n\t\tChips = 0\n\t};\n\n\tApplicationUser user4 = new ApplicationUser\n\t{\n\t\tName = \"D\",\n\t\tPlayerCards = new List<string[]>\n\t\t{\n\t\t\tnew string[]{\"14\", \"Spade\"},\n\t\t\tnew string[]{\"3\", \"Heart\"},\n\t\t},\n\t\tChips = 0\n\t};\n\n\troom.Chair0 = user1;\n\troom.Chair2 = user2;\n\troom.Chair3 = user3;\n\troom.Chair4 = user4;\n\n\troom.PotOfChair0 = 25;\n\troom.PotOfChair2 = 50;\n\troom.PotOfChair3 = 100;\n\troom.PotOfChair4 = 100;\n\n\n\tvar result = room.SpreadMoneyToWinners();\n\n\tConsole.WriteLine(result);\n\tConsole.ReadKey();\n\n}\n```\n\n[The output can be found here](#full-example--spreadmoneytowinners-method-explanation)\n\n# In-depth explanation\n\n<img align=\"center\" src=\"/images/pokerdemo.gif\" />\n\nWhat we see in the example above is the unification of the cards that are on the table with the cards each player has.\n\nThen, we run a pre-evaluator that will give us initial information about the same cards as the highest card, how many cards are in the sequence, how many have the same color, etc.\n\nAnd then, in the last step, we will look into which Rank Group belongs to and then the cards in that group will be evaluated.\n\n## `EvaluateRankByHighestCards()` method\n\nIf we put aside different end cases for a moment, the main problem with solving the card evaluation problem is as follows:\nWe want a player with higher card to win players with less good cards,\nand in the case of tie we will move on to look at the next card and so on.\n\nHowever, we don't want to make comparisons every time, so we want to work with a method of assessment and scoring for each player's hand instead.\n\n### Simplifying the problem\n\nGiven a `K` **sorted** arrays with integers between 2 and 14, score it so values with high indexes will always be preferred on lower ones.\nFor example:\n\n`[2,2,2,2,14]` will be preferred on `[12,12,12,12,13]` or `[13,13,13,13,13]` and in case of tie, we'll check the next number,\n\nso for example: `[3,4,6,8,10]` wins `[4,4,5,8,10]` - if we take a look on the first and second numbers: 10 and 8, they both the same but when we take a look on the next number so 6 > 5 and that's why the 1st one will have better score.\n\n### Reduction to base-13 number\n\nEssentially we are describing a base-13 number. Each \"digit\" (array position) represents one of 13 distinct, ordered values.\n\nWe can calculate a ranking by converting the array to a 5 digit, base 13 value:\n\n- Subtract 2 from each array element's value to normalize the element value to the range 0..12.\n- Give each array element a score:\n\n<img align=\"center\" src=\"/images/base13.png\" width=\"150\" />\n\n- We would actually want to power 13 by `Array.Length - Index` instead of `Index` because the most significant numbers placed on the higher indices.\n\n**Method's Parameters:**\n\n* `cards : List<string[]>` - the list of the cards, already sorted by their value.\n* `excludeCardValue : int`, `excludeCardValue2 : int` - in some cases, we'll see that we don't need to check every single card, and in that way we can ignore some of them.\n* `limitCheck : int` - in some cases, we would like to check only certain amount of cards.\n* `normalize : double` - we would like the `score` of each hand to be `GroupScore` + `SubGroupScore` while SubGroupScore should be between [0,100], to make sure it will happen we need some sort of normalization variable.\n\n## `GroupScore` and `SubGroupScore` evaluation\n\nSome highlights that need to be made when evaluating the playing cards:\n\n1. We need to give a rating to the group to which the cards belong, such as Straight or Two Pairs.\n2. When the primary group is selected, it is necessary to evaluate how good the cards are within that group, in case some players will have the same primary group and we will need to evaluate within the same group of cards.\n3. We will begin by examining the stronger groups first, and then only the weak ones because some of the weak ones are included in the weaks, such as Full House consists of Pair and Three of a Kind.\n\n### Royal Flush `900`\n\nThe easier situation to be checked because the cards are constant, we need to check that the values are: 10, J, K, Q, A\nand the suits of every one of those cards equal identical.\n\n### Straight Flush `Group Range: [800, 900)`\n\nWe'll go through every suit and check if its count bigger than 4, if it does, we'll make another check if the numbers are in ascending order.\n\n**Edge case:**\n\nAce can be straight of 2,3,4,5 or 10,J,Q,K for example:\n\n| <img src=\"images/2-heart.png\" width=\"60\" /> | <img src=\"images/3-heart.png\" width=\"60\" /> | <img src=\"images/4-heart.png\" width=\"60\" /> | <img src=\"images/5-heart.png\" width=\"60\" /> | <img src=\"images/14-heart.png\" width=\"60\" /> |\n| ------ | ------ | ------ | ------ | ------ |\n\n### Four of a kind `Group Range: [700, 800)`\n\nFor the other cases ( including `Four of a kind` ) we'll sort descending the duplicates cards according to their amount.\n\n**Edge case:**\n\nThe four of a kind is placed in the table's cards, in that case we need to check in each player for the 5th card, \nbut we can't simply check for the highest card, since if the `Four of a kind` is the highest card, then we'll announce for a tie for no reason ( wrong calculation! )\nTherefore, we'll use our method: `EvaluateRankByHighestCards()` to ignore the `Four of a kind`'s value and check for the highest card excluding it.\n\n### Full House `Group Range: [600, 700)`\n\nMain check: if duplicates.Count(), it can occur for example if we have 22 and 55,, and the 2nd condition is if the count of duplicates is 3 and then 2, so it will happen in case of 22255 for example.\n\n**Edge cases:**\n\n1. It is possible to have 2 pairs of 3, for example: ( remember that we have 7 cards to check )\n\n| <img src=\"images/2-heart.png\" width=\"60\" /> | <img src=\"images/2-diamond.png\" width=\"60\" /> | <img src=\"images/2-spade.png\" width=\"60\" /> | <img src=\"images/3-club.png\" width=\"60\" /> | <img src=\"images/3-diamond.png\" width=\"60\" /> | <img src=\"images/3-heart.png\" width=\"60\" /> |\n| ------ | ------ | ------ | ------ | ------ | ------ |\n\nIn that case evaluate what is better: 333 22 or 222 33 and will take the max score among them.\n\n2. One pair of 3 and two pairs of 2, for example:\n\n| <img src=\"images/5-heart.png\" width=\"60\" /> | <img src=\"images/5-diamond.png\" width=\"60\" /> | <img src=\"images/5-spade.png\" width=\"60\" /> | <img src=\"images/2-club.png\" width=\"60\" /> | <img src=\"images/2-diamond.png\" width=\"60\" /> | <img src=\"images/4-heart.png\" width=\"60\" /> | <img src=\"images/4-diamond.png\" width=\"60\" /> |\n| ------ | ------ | ------ | ------ | ------ | ------ | ------ |\n\nIn that case we'll evaluate what is better: the Pair of the 3 ( 555 ) with the first pair ( 22 ) or the second: 555 44 and take the max score among them.\n\n### Flush `Group Range: [500, 600)`\n\nWe walk through every `SevenCards.Where(x => x[1].Equals(suit));` which means every group of cards collected by their suit, and if the count is bigger or equals to 5, we'll save it as `suitCards` and we will evaluate the card by: 500 + `EvaluateRankByHighestCards()` method on this list.\n\n\n**Edge case:**\n\nWe can have a list of grather than 5 in that case since the cards already sorted by their value, we'll take only the last 5 cards by doing: `var suitCardsResult = suitCards.Skip(suitCardsLen - 5).ToList();`\n\n### Straight `Group Range: [400, 500)`\n\nWe already have a variable from the pre-evaluation that saved for us the sequence max count, and if it's bigger or equals to 5 we'll check of the highest card in the sequence to evaluate the rank's hand:\n\n `rank = 400 + (double)seqMaxValue / 14 * 99;`\n \n **Edge Case:**\n \n Same as Straight Flush, there might be this situation:\n \n \n| <img src=\"images/2-heart.png\" width=\"60\" /> | <img src=\"images/3-spade.png\" width=\"60\" /> | <img src=\"images/4-club.png\" width=\"60\" /> | <img src=\"images/5-diamond.png\" width=\"60\" /> | <img src=\"images/14-heart.png\" width=\"60\" /> |\n| ------ | ------ | ------ | ------ | ------ |\n\nIn that case we'll refer this cards as Straight with seqMaxValue = 5.\n\n### Three of a kind `Group Range: [300, 400)`\n\nWe will check if duplicates.Count >= 1 and that the duplicates amount is 3.\n\nNow the calculation is:\n\n`300 + DuplicatedCardValue / 14 * 50 + EvaluateRankByHighestCards(SevenCards, Ignore: DuplicatedCardValue)`\n\nThe math behind: We need to make a formula so no matter how small is the Three of a kind, it will win others with smaller three of a kind, for example:\n\nIf someone has: 555 2 3 and I have 333 A K, even though my A and K are really big, I'll lose. and we can achieve that by doing `DuplicatedCardValue / 14 * 50` that even the smallest number: `(duplicatedCardValue: 2 / 14 * 50)` will be bigger than these A and K.\n\n### Two Pairs `Group Range: [200, 300)`\n\nWe'll check for two duplicates. and evaluate the score accordingly. \n\n**Edge Case:**\n\nThere are 3 pairs of two, for example:\n\n| <img src=\"images/12-club.png\" width=\"60\" /> | <img src=\"images/12-spade.png\" width=\"60\" /> | <img src=\"images/8-diamond.png\" width=\"60\" /> | <img src=\"images/8-club.png\" width=\"60\" /> | <img src=\"images/3-diamond.png\" width=\"60\" /> | <img src=\"images/3-heart.png\" width=\"60\" /> |\n| ------ | ------ | ------ | ------ | ------ | ------ |\n\nIn that case we'll choose the two highest pairs.\n\n### Pair `Group Range: [100, 200)`\n\nThere's only one pair, otherwise we would have entered the \"Two Pair\" case, so we'll just evaluate the rank with this pair card value and the rest of the cards with `EvaluateRankByHighestCards()` method.\n\n### High Card `Group Range: [0, 100)`\n\nOtherwise, if we couldn't find anything else, we'll just `EvaluateRankByHighestCards()` the rest of the cards.\n\n# Main and Side Pots algorithm and money spreading\n\n## `CalculateMainAndSidePots()` Method\n\nImagine the following situation:\nWe have three players: A, B and C.\n\nThe three players make an all-in when:\n- A makes an all-in when he has $ 25\n- B makes an all-in when he has $ 50\n- C makes an all-in when he has $ 100\n\nThis means that right now there is $ 175 on the table and we have to think how to split it between the players.\n\nSo first thing to do, it calculate the Main and Side Pots as follows:\n\n1. Consider a new variable `X` as:\n\n<p align=\"center\">\n  <img src=\"/images/potchips.png\" width=\"300\" />\n</p>\n\nThe minimum among the pots of the players.\nIn our example `X = $ 25`.\n\n2. Let's start a new variable `sum` initialized to 0. And take from each player `X` money and put it into `sum`.\nWhich means at this point `sum = $ 75` and the current player status is:\n* A - $ 0\n* B - $ 25\n* C - $ 75\n\nAlso, we took money from all three players, so the money was contested by A, B and C.\n\n(Since we took `X` from each player)\n\n3. We will repeat this process recursively until we remain in a state where:\n  Only one player has a sum greater than zero or they all have a sum equal to zero.\n  \nSo in the next iteration `x = $ 25` once again, and we'll take money from each available player:\n`sum = $ 50` and it was contested by B and C.\nand player status:\n\n* A - $ 0\n* B - $ 0\n* C - $ 50\n\nnow we are in a stop condition: only one player has money, player C and we going to give him back the rest of the money.\n\nSo in the end of method we managed to gain this information:\n\n```\n{\n  Name: Main Pot,\n  Money: 75$,\n  Contested By: [Player A, Player B, Player C]\n},\n{\n  Name: Side Pot 1,\n  Money: 50$,\n  Contested By: [Player B, Player C]\n}\n```\n\nThere are several situations:\n\n1. **Player A wins:** in that case he will take the Main pot and we'll check who has better hand player B or player C for the Side Pot 1.\n2. **Player B Wins:** He'll take both Main and Side pots.\n3. **Player C wins:** He'll take both Main and Side pots.\n\n## Full Example & `SpreadMoneyToWinners()` method explanation\n\nThis method uses two previous methods that we explained: in both `CalculateMainAndSidePots` and `GetPlayerHandRank`, and both of them extract the racial data on who wins each side pot.\n\nLet's take a look on full example:\n\nWe have 4 players and this is their Hands and the Table Cards:\n\n***Table Cards***:\n\n| <img src=\"images/14-club.png\" width=\"60\" /> | <img src=\"images/13-club.png\" width=\"60\" /> | <img src=\"images/11-club.png\" width=\"60\" /> | <img src=\"images/5-club.png\" width=\"60\" /> | <img src=\"images/10-heart.png\" width=\"60\" /> |\n| ------ | ------ | ------ | ------ | ------ |\n\n***Players Cards***:\n\n| Player 1 | Player 2 | Player 3 | Player 4 |\n| ------ | ------ | ------ | ------ |\n| <img src=\"images/man1.svg\" width=\"60\" /> | <img src=\"images/man2.svg\" width=\"60\" /> | <img src=\"images/man3.svg\" width=\"60\" /> | <img src=\"images/man4.svg\" width=\"60\" /> |\n| <img src=\"images/8-club.png\" width=\"60\" /> <img src=\"images/7-heart.png\" width=\"60\" /> | <img src=\"images/9-heart.png\" width=\"60\" /> <img src=\"images/5-heart.png\" width=\"60\" /> | <img src=\"images/14-diamond.png\" width=\"60\" /> <img src=\"images/4-spade.png\" width=\"60\" /> | <img src=\"images/14-spade.png\" width=\"60\" /> <img src=\"images/3-heart.png\" width=\"60\" /> |\n| All-in: 25 $ | All-in: 50 $ | All-in: 100 $ | All-in: 100 $ |\n\nThe results will be:\n\n| `GetPlayerHandRank()` grouped by results | `CalculateMainAndSidePots()` results |\n| ------ | ------ |\n| 500.850 - `[Player 1]` - Flush<br />280.813 - `[Player 3, Player 4]` - Pair<br />261.593 - `[Player 2]` - Pair | Main Pot - 100 $ - `Contested by: [Player 1, Player2, Player3, Player4]`<br />Side Pot 1 - 75$ - `Contested by: [Player 2, Player 3, Player 4]`<br />Side Pot 2 - 100$ - `Contested by: [Player 3, Player 4]` |\n\nConsider the left column results ( player hand rank groupped by sored by the hand rank ) as `PlayersHand`<br />\nConsider the right column results ( Main and Side Pots ) as `SidePots`\n\nWhat we should do in order to get the final results is to iterate each PlayersRank item intersect with each non-occuppied SidePot:\n\n<p align=\"center\">\n  <img src=\"/images/finalresult.png\" width=\"500\" />\n</p>\n\nFor example, in the first iterate we have 500.850 and it contains Player1, and we are going to intersect it with every non-occupied SidePot, which is the \"Main Pot\" only.\n\nThen, in the next iterate 280.813 that contains Player3 and Player4 with:\n- Main pot is already occupied, so we won't check it out.\n- Side Pot 1 - There's a match: Both Player3 and Player4 will be in this side pot.\n- Side Pot 2 - There's a match: Both Player3 and Player4 will be in this side pot.\n\nEach player will have: `SidePotAmount / Winners.Count()`\n\nNo more non-occupied side pots, hence, we can stop here.\n\nFinal result:\n\n```\n{\n  Main Pot,\n  100 $,\n  Winners: [Player 1]\n  Each player will get: 100$\n}\n{\n  Side Pot 1,\n  75 $,\n  Winners: [Player 3, Player 4]\n  Each player will get: 37.5$\n}\n{\n  Side Pot 2,\n  100 $,\n  Winners: [Player 3, Player 4]\n  Each player will get: 50$\n}\n```\n\n\n## Built and Designed With\n\n* [flaticon](https://www.flaticon.com/) - Icon made by Freepik from www.flaticon.com\n\n\n## Authors\n\n* **Daniel Paz** - *Whole Project* - [Profile](https://github.com/DanielPaz6)\n"
 },
 {
  "repo": "tfbninja/Poker",
  "language": "Java",
  "readme_contents": "# Poker\nInstructions are within the game\n"
 },
 {
  "repo": "GeekLaunch/poker",
  "language": "TypeScript",
  "readme_contents": "# Video Poker\n\nTypeScript implementation of a poker video game.\n\n[Part 1](https://youtu.be/TYOu5LWPj7E)\n[Part 2](https://youtu.be/1a4a_Ig3VFM)\n[Part 3](https://youtu.be/MCNXBFIyz2o)\n[Part 4](https://youtu.be/lSsLysl8Bp0)\n[Part 5](https://youtu.be/E3hcrqFmJuA)\n"
 },
 {
  "repo": "axross/poker",
  "language": "Dart",
  "readme_contents": "# Poker\n \nA Dart implementation of Texas Hold'em matchup simulator based on [Henry Lee's Poker Hand Evaluator](https://github.com/HenryRLee/PokerHandEvaluator).\n\n- [pub.dev](https://pub.dev/packages/poker)\n- [API reference](https://pub.dev/documentation/poker/latest/)\n\n## License\n\n[Apache License 2.0](/LICENSE)\n"
 },
 {
  "repo": "phipex/PokerTest",
  "language": "Java",
  "readme_contents": "# Ejercicio Texas Holdem\n\n## Descripci\u00f3n del problema\n\nTu trabajo es comparar pares de manos de p\u00f3quer e indicar cu\u00e1l es el ganador, y con que tipo de mano gano\n\nDebe tener en cuenta que solo debe implementar 5 de los 10 tipos de manos pero en el orden normal, por ejemplo: Escalera real, Escalera de color, Poker, Full House y Color\n\n## Descripci\u00f3n de las reglas de poker\n\nUna baraja de p\u00f3quer contiene 52 cartas; cada carta tiene un palo que es uno de los tr\u00e9boles, diamantes, corazones o espadas (indicados con C , D, H y S respectivamente). Cada tarjeta tambi\u00e9n tiene un valor que es uno de 2, 3, 4, 5, 6, 7, 8, 9, 10, jota, reina, rey, as (denotado 2, 3, 4, 5, 6, 7, 8 , 9, 10, J, Q, K, A). Para fines de puntuaci\u00f3n, los trajes no est\u00e1n ordenados, mientras que los valores se ordenan como se indic\u00f3 anteriormente, siendo 2 el valor m\u00e1s bajo y el m\u00e1s alto el as.\n\nUna mano de poker consiste en 5 cartas repartidas desde el mazo. Las manos de p\u00f3quer se clasifican seg\u00fan el siguiente orden parcial de menor a mayor.\n\n- Carta alta: Las manos que no encajan en ninguna categor\u00eda superior se clasifican seg\u00fan el valor de su carta m\u00e1s alta. Si las cartas m\u00e1s altas tienen el mismo valor, las manos se clasifican por la siguiente m\u00e1s alta, y as\u00ed sucesivamente.\n\n- Par: 2 de las 5 cartas en la mano tienen el mismo valor. Las manos que contienen un par se clasifican seg\u00fan el valor de las cartas que forman el par. Si estos valores son los mismos, las manos se clasifican seg\u00fan los valores de las cartas que no forman el par, en orden decreciente.\n\n- Dos pares: La mano contiene 2 pares diferentes. Las manos que contienen 2 pares se clasifican por el valor de su par m\u00e1s alto. Las manos con el mismo par m\u00e1s alto se clasifican seg\u00fan el valor de su otro par. Si estos valores son los mismos, las manos se clasifican seg\u00fan el valor de la carta restante.\n\n- Tres de una clase: Tres de las cartas en la mano tienen el mismo valor. Las manos que contienen tres de una clase se clasifican seg\u00fan el valor de las 3 cartas.\n\n- Escalera: La mano contiene 5 cartas con valores consecutivos. Las manos que contienen una recta se clasifican por su carta m\u00e1s alta.\n\n- Color: Mano contiene 5 cartas del mismo palo. Las manos que son ambos enrojecimientos se clasifican seg\u00fan las reglas de Carta alta.\n\n- Full House: 3 cartas del mismo valor, con las 2 cartas restantes formando un par. Clasificado por el valor de las 3 cartas.\n\n- Poker: 4 cartas con el mismo valor. Clasificado por el valor de las 4 cartas.\n\n- Escalera de color: 5 cartas del mismo palo con valores consecutivos. Clasificado por la carta m\u00e1s alta de la mano.\n\n- Escalera real: Cinco cartas del mismo palo del 10 al as.\n\n## Instrucciones\n\nDebe crear una cuenta en github y un repositorio p\u00fablico con el contenido de este proyecto, una vez creado debe enviarnos la direcci\u00f3n\n\nLos test ya fueron creados, debe crear las clases que representan las entidades del dominio (ejemplo: Carta, Mano, etc) y los m\u00e9todos para evaluar el problema seg\u00fan se indic\u00f3 anteriormente.\n\nDebe implementar **solo** 5 de las 10 validaciones, debe indicar cu\u00e1les de las 5 selecciono.\n\nTambien debe implementar los test con los casos mensionados en la descripcion segun las validaciones que escoja.\n\nSe evaluar\u00e1:\n- Estilo de codificaci\u00f3n.\n- Dise\u00f1o de los m\u00f3dulos y las clases.\n- L\u00f3gica de la implementaci\u00f3n.\n- Que el proyecto funcione correctamente (es decir que al bajar el proyecto de git solo se use maven para la configuraci\u00f3n y pueda correr el proyecto).\n- Que pasen los test asociados a los casos que seleccion\u00f3.\n- Se da un plus si crea nuevos test\n- Se da un plus si implementa m\u00e1s de las 5 validaciones, pero solo si funcionan todas las que implemente.\n\n\n"
 },
 {
  "repo": "cs3243-project-group-18/poker-ai",
  "language": "Python",
  "readme_contents": "[![Build Status](https://travis-ci.com/cs3243-project-group-18/poker-ai.svg?branch=master)](https://travis-ci.com/cs3243-project-group-18/poker-ai)\n[![Maintainability](https://api.codeclimate.com/v1/badges/2899885f1128dc2d5b42/maintainability)](https://codeclimate.com/github/cs3243-project-group-18/poker-ai/maintainability)\n\n# CS3243 Poker AI Project\n\n### Create your own player\n\n#### Example player\n\n```\n\nclass Group18Player(BasePokerPlayer):\n\n  def declare_action(self, valid_actions, hole_card, round_state):\n    #Implement your code\n    return action\n\n  def receive_game_start_message(self, game_info):\n    pass\n\n  def receive_round_start_message(self, round_count, hole_card, seats):\n    pass\n\n  def receive_street_start_message(self, street, round_state):\n    pass\n\n  def receive_game_update_message(self, action, round_state):\n    pass\n\n  def receive_round_result_message(self, winners, hand_info, round_state):\n    pass\n```\n\n### Example Game\n\nThe example game is in the example.py\n\n### Information for the game\n```valid_actions```: vaild action list\n\n\n```\n[\n    { \"action\" : \"fold\"  },\n    { \"action\" : \"call\" },\n    { \"action\" : \"raise\" }\n]\nOR \n[\n    {\"action\": \"fold\"},\n    {\"action\": \"call\"}\n]\n```\n\nIn the limited version, user only allowed to raise for four time in one round game.    \nIn addition, in each street (preflop,flop,turn,river),each player only allowed to raise for four times.\n\nOther information is similar to the PyPokerEngine,please check the detail about the parameter [link](https://github.com/ishikota/PyPokerEngine/blob/master/AI_CALLBACK_FORMAT.md)\n"
 },
 {
  "repo": "3pillarlabs/scrumpoker",
  "language": "CSS",
  "readme_contents": "Welcome to Scrum Poker\n==========\n\nFor now, please see [the Wiki](../../wiki) for more info.\n"
 },
 {
  "repo": "mihhailnovik/jSim",
  "language": "Java",
  "readme_contents": "Equity calculation library. Works in the same way like PokerStove. Uses klaatu poker eval library.\n\nYou can see sample in Main.java and tests/mi/poker/tests/calculation/EquityCalculationTest.java\nBig thank to http://www.codingthewheel.com/archives/multiway-ranged-isometric-equity-calculation-in-poker-1 and pokerai.org forum. =) \n"
 },
 {
  "repo": "xcyuzhen/Poker_client_pomelo",
  "language": "JavaScript",
  "readme_contents": "# hello-world\nHello world new project template.\n"
 },
 {
  "repo": "jeffusan/yokohama-holdem",
  "language": "Scala",
  "readme_contents": "* Yokohama Holdem\n\n[[https://gitter.im/jeffusan/yokohama_holdem?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge][https://badges.gitter.im/Join Chat.svg]]\n[[http://waffle.io/jeffusan/yokohama-holdem][https://badge.waffle.io/jeffusan/yokohama-holdem.svg?label=ready&title=Ready]]\n[[https://travis-ci.org/jeffusan/yokohama-holdem][https://travis-ci.org/jeffusan/yokohama-holdem.svg]]\n\n\nTexas holdem bot frenzy.\n\nYokohama holdem is an Akka system that plays Texas-holdem, no-limit poker.\n\n** Overview\n\nExhaustive documentation can be found online for rules about Texas Holdem.\n\nFrom the system's perspective, a game consists of as many rounds as their are players.\nOnce every player has folded and/or dealt one round, the game is finished.\nEach round consists of up to four turns.\n\nThe turns are:\n\n- Hole (each player is dealt two private cards and bets)\n- Flop (three community cards are dealth and bet)\n- Turn (one community card is added and bet)\n- River (one community card is added and bet)\n\nIf at any point only one player has not folded, the round is over.\nIf two or more players have not folded at the completion of betting after the river turn, \na showdown occurs and the game is finished.\n\n** Initial High Level Design\n\nFor the first release of Yokohama Holdem, two Akka systems will communicate- a GameEngine\nand a PlayerRepository.\n\n*** Player Repository\n\nThe PlayerRepository acts as a configurable pool of players.\nPlayers can be registered via the player repository application. Players start with a configurable\namount of money. Many players can be registered at once. \n\nPlayers in the repository hold state- they can be playing a game, out of money, or available.\n\nIf a player is available, they are a candidate for joining a new game.\n\n*** GameEngine\n\nThe game engine periodically checks the player repository for available players. If more than\ntwo players are available, a new game is started by the GameEngine.\n\nThe maximum number of players per game is configurable. The default is 9.\n\nWhen more than 9 players are available, more than one game should be started. The GameEngine\nis responsible for partitioning the available players into new games.\n\n*** Game\n\nA game consists of two or more players playing one round per player.\n\nAt the completion of a game, the game should be responsible for publishing winnings.\n\nAt the beginning of each round, one player is designated the dealer, the next player the SmallBlind,\nand the following the BigBlind. The game is reponsible for shifting the players with these\ndesignations prior to commencing a new round.\n\n*** Rounds\n\nA round is a sequence of turns as identified above. The Round is responsible for sending out\nthe card messages and turn information to each player, and collecting the responses.\n\nResponses to turns from players may be a Raise(Int) or a Fold.\n\nThe round needs to handle various conditions resulting from the reponses.\n\nIf a player Folds, they are no longer eligible to participate in turns.\n\nIf a Player raises, then the round needs to calculate the amount of the raise compared to the \nother players. If one player raises more than the others, the round needs to send a message\nto the remaining active players asking them to call (raise to the same amount).\n\nAllIn- since this is a no-limit game, players can go AllIn. Doing so many result in SideBets.\n\nThe Round must keep track of the pot resulting from bets during each turn.\n\n*** Player\n\nPlayers respond to Turn messages. They keep track of their money.\nThey are created in the Player Repository, and they play Games.\n\nValid Player responses are:\n\n- Raise(Int) - raise their bet to a certain amount\n- Fold - do not continue playing the round\n- AllIn(Int) - bet all the money a player has - this is a special Raise indicating the player wishes\nto remain in the game but cannot add more money.\n\n\n** Getting Started\n\nTo run the system, use the shortcuts in build sbt:\n\nFor the game engine:\n#+begin_src shell\n$> sbt\n[info] Set current project to Yokohama Holdem\n> ge\n\n#+end_src\n\nFor the player repository\n#+begin_src shell\n$> sbt\n[info] Set current project to Yokohama Holdem\n> pr\n\n#+end_src\n\n** Notes from 7/9/2015 Meetup\n\nDuring each Turn, a message containing game context will be sent to each Player, and a response message returned.\n\nThe context will contain the following:\n\n- The player's cards\n- Community cards\n- Pot on the table, and any side bets\n- The current minimum bet\n- The turn of the round\n- The players and their state (playing, or folded)\n\nWe also discussed the idea of providing the game history, eg all actions performed and player responses to those actions.\n\n"
 },
 {
  "repo": "hlcfan/pokr",
  "language": "Ruby",
  "readme_contents": "# Pokrex https://agilemana.com\n\n[Archived] This repo is **archived**.\n\nYet another planning poker, aiming at efficiency & user experience.\n\n[![Build Status](https://travis-ci.org/hlcfan/pokr.svg?branch=master)](https://travis-ci.org/hlcfan/pokr)\n[![Code Climate](https://codeclimate.com/github/hlcfan/pokr/badges/gpa.svg)](https://codeclimate.com/github/hlcfan/pokr)\n[![codecov](https://codecov.io/gh/hlcfan/pokr/branch/master/graph/badge.svg)](https://codecov.io/gh/hlcfan/pokr)\n\n## \u2753 Why Pokrex?\n\n+ The network environment in China sucks, the online poker doesn't work smoothly.\n+ The online poker is easy much to use.\n+ I got spare time :wink:\n\n## \ud83d\ude80 Building with\n\n+ Rails 5\n+ PostgreSQL\n+ ActionCable\n+ React\n+ Bootstrap\n+ FontAwesome\n+ Puma\n\n## Screenshot\n![Pokrex](./app/assets/images/home/room.png)\n\n## \ud83d\udd27 Contribution\n\nYour contribution is very welcomed!\nPlease create pull request or issue.\n"
 },
 {
  "repo": "iamsap/poker",
  "language": "JavaScript",
  "readme_contents": "# Poker\nThis is the repository from my course on how to build a fully functional Texas Hold 'Em game in Node.js.  To run a simulated \ngame, just run the following command:\n\n```\nnode game.js\n```\n\nThe game creates 4 players (John, Paul, George, and Ringo) and then deals them as you would expect in a round of Texas Hold 'Em.\nFeel free to fork this repository and extend in any way you see fit.  If you make any improvements I want to hear about them, so \ncontact me via twitter [@robbymillsap](http://twitter.com/robbymillsap).\n\n```\n# output\nAfter the deal, John is winning with a high card\nAfter the flop, George is winning with a pair\nAfter the turn, Paul is winning with a pair\nAfter the river, Ringo is winning with a two pair\n```\n\nThe step-by-step tutorial on how to build this poker game can be found on my website\n[blog.iamsap.com](https://blog.iamsap.com/category/courses/node-js/texas-hold-em/)\n"
 },
 {
  "repo": "WDI-SEA/express-poker-teams",
  "language": "HTML",
  "readme_contents": "# Express Poker Teams\r\n\r\nLet's have a class poker tournament!\r\n\r\n## Prerequisites\r\n\r\nStudents will need to have had the following lessons before attempting this assignment:\r\n\r\n* Intro to Sequelize\r\n* One to many relationships\r\n* RESTful routing in Express\r\n\r\n## Getting started\r\n\r\n* Fork and clone this repository\r\n* Run `npm install` to install the dependencies in `package.json`\r\n* Stop and take a moment to read through the existing code. You should have a simple express app with a home route and a wildcard route (a catch-all that renders an error page) and basic setup of express-ejs-layouts.\r\n* Run `nodemon` and ensure you can access that error page at `localhost:3000`.\r\n\r\n## Directions\r\n\r\n### 0. Take a look at the code already provided to you as starter code.\r\n\r\n### 1. Make your controllers and stub your routes\r\n\r\n**Part A**\r\n\r\nMake a `controllers` folder. Then put a `teams.js` and a `players.js` file inside the `controllers` folder.\r\n\r\n**Part B**\r\n\r\nMake `teams.js` and `players.js` into Express Routers. Make sure to remember the `module.exports` statement~\r\n\r\n**Part C**\r\n\r\nImplement stubs (simple `res.send('xxx')` calls as placeholders) for each route below in their respective routers. Routes starting with `/teams` should go into the `teams.js` router, and routes starting with `/players` should go into the `players.js` router.\r\n\r\n| HTTP Method | Path | Purpose |\r\n| ----------- | ------------------------ | ---------------------------------------- |\r\n| GET | `/` | Home page - has a large, poker-themed image |\r\n| GET | `/teams` | Show a list of all teams |\r\n| GET | `/teams/new` | Show a form for entering a new team |\r\n| POST | `/teams` | Create a new team |\r\n| GET | `/teams/:id` | Show a detail page for a specific team |\r\n| GET | `/players` | Show a list of all players |\r\n| GET | `/players/new` | Show a form for entering new players |\r\n| POST | `/players` | Create a new player |\r\n| GET | `/players/:id` | Show a detail page for a specific player |\r\n\r\n**Part D**\r\n\r\nMake sure to include both controllers in your `index.js` file via the `app.use()` call.\r\n\r\n### 2. Set up your database\r\n\r\n* Create a new database called 'poker'\r\n* Set up Sequelize:\r\n  * `sequelize init`\r\n  * Update your `config.json` according to directions from your Sequelize lessons\r\n  \r\n### 3. Create a team model\r\n\r\nUsing the `sequelize-cli` tool on the command line, use the `sequelize model:create` command to create a team model that contains the following fields:\r\n\r\n| Column | Type | \r\n| ----------- | ------------------------ | \r\n| name | string | \r\n| description | string |\r\n| pic | string |\r\n\r\n### 4. Create a player model\r\n\r\n**Part A**\r\n\r\nUse the `sequelize model:create` command again to create a player model that contains the following fields:\r\n\r\n| Column | Type | \r\n| ----------- | ------------------------ | \r\n| name | string | \r\n| wins | integer |\r\n| losses | integer |\r\n| pic | string |\r\n| bio | text |\r\n| teamId | integer |\r\n\r\n**Part B**\r\n\r\nCreate the `belongsTo` and `hasMany` associations between teams and players.\r\n\r\n* One team has many players.\r\n* A player belongs to a team.\r\n\r\n### 5. Run Sequelize Migrations\r\n\r\nYou can use the command `sequelize db:migrate`\r\n\r\n### 6. Implement adding and viewing your teams\r\n\r\n**Part A**\r\n\r\nIn your `new.ejs` file inside `views/teams` folder, implement a form to add a new team. Make sure your inputs have a name field that corresponds to the name in your SQL table (i.e., name, pic, and description in this case). Render this page when the url `/teams/new` is reached.\r\n\r\n**Part B**\r\n\r\nAfter this, implement your GET and POST routes for `/teams`. The POST route will use sequelize's `create` method (or if you don't want duplicate team names you can use `findOrCreate`). The GET route will just do a call to sequelize's `findAll` function to return all teams. Render the `views/teams/index.ejs` page to show all the team names.\r\n\r\n### 7. Implement adding and viewing players\r\n\r\n**Part A**\r\n\r\nYou will need to assign each player to a team when they are created. In order to accomplish this in the most graceful way possible, let's query the `team` model and make sure to get a list of all available teams passed into the render. You can make a dropdown list or radio buttons to select the player's team. Make sure that your dropdown list or radio button's value indicates the team ID while the display to the user is the name of the team.\r\n\r\n**Part B**\r\n\r\nImplement GET and POST routes for `/players`\r\n\r\n#### 8. Make your show routes \r\n\r\nMake a `show.ejs` for both a specific team and a specific player. These ejs pages will be rendered by `/teams/:id` and `/players/:id` respectively. On the player page, make sure to display all the information about that player's team. On the team page, show a list of all the player's names on that team. This means using our associations and using the `include` keyword when we query for the data.\r\n\r\n## Bonus\r\n\r\nImplement these additional routes:\r\n\r\n| HTTP Method | Path | Purpose |\r\n| ----------- | ------------------------ | ---------------------------------------- |\r\n| PUT | `/teams/:id` | Edit a specific team |\r\n| DELETE | `/teams/:id` | Delete a specific team |\r\n| PUT | `/players/:id` | Edit a specific player |\r\n| DELETE | `/players/:id` | Delete a specific player |\r\n"
 },
 {
  "repo": "xumingthepoet/texas_poker",
  "language": "Erlang",
  "readme_contents": ""
 },
 {
  "repo": "pokerth/pokerth-live",
  "language": "JavaScript",
  "readme_contents": "# PokerTH live\n\nPokerTH live - Spectator tool\n\nApril 2020 note (for live.pokerth.net):  \n*Login as Guest (username/password disabled)  \n*Login only works for Main FR Server\n\n## Installation\n\nYou need [git](https://git-scm.com/) and [Node.js](https://nodejs.org/) in order to clone and build the project.\n\nUse git clone from Master branch.\n\n```bash\ngit clone https://github.com/pokerth/pokerth-live.git\n```\n\nNow install neccesary dependencies.\n\n```bash\nnpm install\n```\n\nTime to compile pokerTH live.\n```bash\nnpm run prod\n```\n\n## Configuration\n\nChange the websocket ip:port in the following file \"/inc/net/neteventhandler.js\"  \n\n*If you run your own server, check in your server side \"~/.pokerth/config.xml\" for the corresponding values to edit there.\n\n*If you just want connect to pokerth.net, inspect html code at http://live.pokerth.net/ to know the websocket ip:port used.\n\n## License\nGNU Affero General Public License\n"
 },
 {
  "repo": "Z8264/poker-calculator",
  "language": "JavaScript",
  "readme_contents": "\n# Poker Calculator\n\nPoker Calculator\n\n## Install\n\n```\nnpm i poker-calculator\n```\n\n## Getting Started\n\n```\nconst PokerCalculator = require('poker-calculator');\n\nPokerCalculator.hand([1, 2, 3, 4, 5, 6, 7]);\n\n// {\n//    type: 9,\n//    cards: [7, 6, 5, 4, 3],\n//    value: 9286415,\n//    name: 'Straight Flush',\n// }\n```\n\n## Poker Data Types\n\n### Rank\n\n| Rank |   A   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   |  10   |   J   |   Q   |   K   |\n| :--- | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n\n### Suit\n\n| Name    | Symbol | Abbreviation |\n| :------ | :----: | :----------: |\n| HEART   |   \u2665    |      H       |\n| CLUB    |   \u2663    |      C       |\n| DIAMOND |   \u2666    |      D       |\n| SPADE   |   \u2660    |      S       |\n\n### Card\n\nUse **Numbers** to represent playing cards\n\n| Suit/Rank |   A   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   |  10   |   J   |   Q   |   K   |\n| :-------- | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| HEART     |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   |  10   |  11   |  12   |  13   |\n| CLUB      |  14   |  15   |  16   |  17   |  18   |  19   |  20   |  21   |  22   |  23   |  24   |  25   |  26   |\n| DIAMOND   |  27   |  28   |  29   |  30   |  31   |  32   |  33   |  34   |  35   |  36   |  37   |  38   |  39   |\n| SPADE     |  40   |  41   |  42   |  43   |  44   |  45   |  46   |  47   |  48   |  49   |  50   |  51   |  52   |\n\n### Hand Type\n\n| Hand Type       | Number |    Chinese |\n| :-------------- | :----: | ---------: |\n| Royal Flush     |   10   | \u7687\u5bb6\u540c\u82b1\u987a |\n| Straight Flush  |   9    |     \u540c\u82b1\u987a |\n| Four Of A Kind  |   8    |       \u56db\u6761 |\n| Full House      |   7    |       \u846b\u82a6 |\n| Flush           |   6    |       \u540c\u82b1 |\n| Straight        |   5    |       \u987a\u5b50 |\n| Three Of A Kind |   4    |       \u4e09\u6761 |\n| Two Pair        |   3    |       \u4e24\u5bf9 |\n| One Pair        |   2    |       \u4e00\u5bf9 |\n| High Card       |   1    |       \u9ad8\u724c |\n\n## APIs\n\n### Common Methods\n\n| Methods       | Description |\n| :------------ | :---------- |\n| convert       |             |\n| getRank       |             |\n| getSuit       |             |\n| getSuitSymbol |             |\n\n#### `convert(rank, suit)`\n\n``` js\nPokerCalculator.convert('A', 'HEART');\n// 1\n\nPokerCalculator.convert('5', 'C'); \n// 18\n\nPokerCalculator.convert('K', '\u2666'); \n// 39\n```\n\n#### `getRank(Number)`\n\n``` js\nPokerCalculator.getRank(13);\n// \"K\"\n```\n\n#### `getSuit(Number)`\n\n``` js\nPokerCalculator.getSuit(13);\n// \"HEART\"\n```\n\n#### `getSuitSymbol(Number)`\n\n``` js\nPokerCalculator.getSuitSymbol(13) \n// \"\u2665\"\n```\n\n### Texas Hold\u2019em Methods\n\n| Methods | Description |\n| :------ | :---------- |\n| hand    |             |\n\n#### `hand([Number, Number, ...])`\n\n| @return | Description |\n| :------ | :---------- |\n| type    |             |\n| cards   |             |\n| value   |             |\n| name    |             |\n\n``` js\nPokerCalculator.hand([1, 2, 3, 4, 5, 6, 7]);\n// {\n//    type: 9,\n//    cards: [7, 6, 5, 4, 3],\n//    value: 9286415,\n//    name: 'Straight Flush',\n// }\n\nPokerCalculator.hand([17, 30, 43, 20, 26, 34, 39]);\n// {\n//    type: 7,\n//    cards: [17, 30, 43, 26, 39],\n//    value: 7165619,\n//    name: 'Full House',\n// }\n```\n\n## License\n\n[MIT](http://opensource.org/licenses/MIT)\n"
 },
 {
  "repo": "szantopeter/poker-player-java",
  "language": "Shell",
  "readme_contents": "poker-player-java\n=================\n\nJava client skeleton for Lean Poker \nFor more information visit: http://leanpoker.org\n\nThis is a gradle project that can be imported into any IDE. To run the player execute :\n\n`boot.sh`\n\nor\n\n`./gradlew tomcatRun`\n"
 },
 {
  "repo": "pj4533/PokerNowGrabber",
  "language": "Swift",
  "readme_contents": "# PokerNowGrabber [![Donate](https://img.shields.io/badge/donate-bitcoin-blue.svg)](https://blockchair.com/bitcoin/address/1CDF8xDX33tdkEyUcHL22DBTDEmq4ukMPp) [![Donate](https://img.shields.io/badge/donate-ethereum-blue.svg)](https://blockchair.com/ethereum/address/0xde6458b369ebadba2b515ca0dd4a4d978ad2f93a)  <a href=\"https://www.buymeacoffee.com/pj4533\" target=\"_blank\"><img src=\"https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png\" alt=\"Buy Me A Coffee\" style=\"height: 41px !important;width: 174px !important;box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;\" ></a>\n\nSave hand histories while you play PokerNow.club\n\n![Screenshot](pokernowgrabber.png)\n\n### What\n\nPokerNowGrabber will connect to a PokerNow.club table and watch the action via the websocket.  When a hand is over, it downloads the log, converts it to PokerStars format and saves it to a directory.  \n\nAlso, PokerNowGrabber looks for your browser window (Chrome only for now), and overlays a transparent window.  This transparent window allows utilities such as [PokerTracker](https://www.pokertracker.com) or [Holdem Manager](https://www.holdemmanager.com/hm3/) to show a heads up display.  These HUDs can be customized with whatever statistics the user wishes by PokerTracker or Holdem Manager.  All PokerNowGrabber does is save the data and provide a 'fake' window.\n\n### How To Run\n\n1. Download the [latest release](https://github.com/pj4533/PokerNowGrabber/releases).\n2. Run (might need to give permission)\n3. Enter your name used\n4. Enter the URL of the game\n5. Enter both cookies (see below)\n6. Enter the hand history folder\n7. Click start\n\n### How to get cookies\n\nThe connection to the websocket requires knowing the cookies you are currently using in your browser.  These identify you, so dont share with anyone else, but you can view your own cookies and enter them in the app.  PokerNowGrabber is open source so you can see I am not storing or transmitting the cookies.   \n\nI use a Chrome cookie manager called [EditThisCookie](https://editthiscookie.com), which can be downloaded from the Chrome web store.  Once you added that, just open it from your PokerNow.club game and copy the `npt` cookie (and `dpt` cookie for Discord games).  \n\n### Limitations\n\n* Mac only for now\n* Single table only for now\n\n"
 },
 {
  "repo": "koffeinfrei/planning-poker",
  "language": "JavaScript",
  "readme_contents": "# Planning Poker\n\nPlanning poker written in [Volt](http://voltframework.com/).\n\nCrafted by [Panter AG](https://www.panter.ch) at the [Kalamata Klassenlager](https://www.google.ch/maps/place/Ano+Amfia+240+09,+Greece/@37.1026398,22.0661795,253m/data=!3m1!1e3!4m2!3m1!1s0x1361b1ece4c17bc1:0xc1d4193d780c3112!6m1!1e1).\n\nLicensed under the [GPL v3](https://gnu.org/licenses/gpl.html).\n\n![Main screen](https://cloud.githubusercontent.com/assets/176582/7995566/ce6a1b18-0b1f-11e5-8b31-f2e496d1fac5.jpg)\n"
 },
 {
  "repo": "SoboLAN/pokerenlighter-simulator",
  "language": "Java",
  "readme_contents": "Poker Enlighter Simulator\n======\n\nDescription\n-----------------\n\nPoker Enlighter is an open-source poker equity calculator. It has multiple options for performing a variety of simulations. The program will calculate the percentage of winnings, losses and ties between hands or specific ranges.\n\nThe main advantages of Poker Enlighter are:\n- It is written in Java, which means it can run on Windows, Mac and Linux machines without any problem.\n- It makes use of multi-core CPUs to increase the speed of the simulations.\n- It has support for more than just Texas Hold'em. Omaha and Omaha Hi/Lo are also supported.\n- It's open-source, which means you can see how it works and improve it yourself.\n\nWebsite\n-----------------\n\nYou can find everything about this project on its website: http://pokerenlighter.radumurzea.net/ .\n\nLicense\n-----------------\n\nPoker Enlighter Simulator is published under the LGPL v2.1 license, a copy of which is present in the project root.\n\nUsage\n-----------------\n\nIn order to use the simulator, you have to import the JAR file into your project. You can download it from the Poker Enlighter website.\n\nAfter this, follow the example found in the `use-example/Example.java` file.\n\nContributions\n-----------------\n\nI do accept both bug reports and pull requests of interesting features and fixes.\n"
 },
 {
  "repo": "ChengTsang/Potential-Aware-Abstraction-In-Texas-Hold-em-Poker",
  "language": "Python",
  "readme_contents": "\ufeff# Potential-Aware-Abstraction-In-Texas-Hold-em-Poker\n![](https://img.shields.io/badge/language-python-blue.svg) \n![](https://img.shields.io/badge/license-MIT-000000.svg)\n![](https://codebeat.co/webhooks/github/pull_requests/94a77fb4-b070-4c07-a6a8-8294f90a5b36)\n\n\t\nThis code is based on the implementation of http://www.cs.cmu.edu/afs/cs/Web/People/sandholm/potential-aware_imperfect-recall.aaai14.pdf\nyou can read it to understand its details.\n\nThe project is based on the two algorithms below.\n<div align=center>\n<img src=\"https://img-blog.csdnimg.cn/20181119124849580.jpg\" width=35% height=35% div align=\"center\" /> \n<div align=left>\n\nIt is not friendly in computing the EMD distance between two distribution. so in this paper, it proposed the approxiamating EMD distance for  high dimensional and sparse case. It should be noted that it is not necessary to compute EMD distance in all condition.\n\n<div align=center><img src=\"https://img-blog.csdnimg.cn/20181119124856106.jpg\" width=35% height=35% div align=\"center\" /> \n<div align=left>\n\n### Usage:\nWhen you want to use abstraction in Texas Hold\u2019em, you should use :\n```\n\tpython generate_data_5public.py\n```\nto generate the data you need in the 5th hand card\nYou can modified the placeholder to store the generated data.\nAfter that, you could use:\n```\n\tpython clustering_5public.py \n```\nto cluster the data generate by the program generate_data_5_public. You may modify catalog to the placeholder you define before.\nProgram cluster_5public.py will generate the centroids of clusters to use in the generate_data_4public.py.\nDo the same thing for twice, you will get the final results. You should pay attention to that the project is for 12 cards. You may change the cards number when you use in 52 cards.\n\n\n\n### NOTE\uff1a\njudging.py is a script which could help you judge which side will win in the last round. You can use it more than there.\n\nIf you read the paper upper carefully, you will understand that heuristic algorithm for calculating EMD distance is only need in the high dimensional and sparse case. So I write my code in that way. \n\nAs illustrated in the paper, it needs massive computing power to get results in 52 cards.\n\n### Reference\n[Potential-Aware Imperfect_Recall Absreaction with Earch Mover's Distance in Imperfect-Information Games](http://www.cs.cmu.edu/afs/cs/Web/People/sandholm/potential-aware_imperfect-recall.aaai14.pdf)\n"
 },
 {
  "repo": "EricMWalton/Fast-Poker-Odds",
  "language": "C",
  "readme_contents": "Fast-Poker-Odds\n===============\n\nTexas Hold'Em odds calculator.  It evaluates roughly 23 million hands per second on my 2.67 Ghz laptop.  This is right in the ballpark of the fastest versions I've heard about.  \n\nExecutables\n-----------\n\nEach of these executables tests (and demonstrates) a different aspect of the program.\n\n**HandStrength/main.cpp**: Tests the fcns that evaluate the hand strength of a seven-card hand (straight, pair, etc.)  \n\n**Enumerate/main.cpp**: Enumerates all possible boards, given the cards that are in play.  \n\n**Evalute/main.cpp**: Given two starting hands, computes win probability by enumerating all possible boards.\n\n**HandClass/main.cpp**: Given two starting hand classes (i.e. Ace-King suited), evalutes win probabilities by tallying results from all suit combinations and all boards.\n\nFurther Development\n-------------------\n\nVery easily, this program could be extended for more than two players, for starting from any stage of the hand, and for any possible \"dead\" cards.  \n\nThere is a huge area for improvement in speed.  As of now, each set of 7 card ranks is checked 16,384 times for pairs --- one for each suit permutation.  By iterating through the boards by rank and then by suit, rather than the reverse, it is possible to avoid that redundancy.\n\n\nAcknowledgements\n----------------\n\nI owe a debt to Keith Rule's version at CodeProject: http://www.codeproject.com/Articles/12279/Fast-Texas-Holdem-Hand-Evaluation-and-Analysis.  The algorithm is my own, but a few of his ideas (counting bits, the hand representation as a 52-bit number) helped me get off the ground.\n\nI used Chris Pergrossi's implementation of a yield macro.  Borrowed with thanks from http://www.flipcode.com/archives/Yield_in_C.shtml.\n\nI used Hallvard Furuseth's macro-expanded lookup table for counting bits.  Via http://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetTable.\n\nFrom the same website, I used Juha J\u00e4rvi's method for finding the index of the least bit.  Used in the function that computes (and outputs) the lookup table for selectLeastBit.\n\n\n\n\n"
 },
 {
  "repo": "byronsha/poker_playhouse",
  "language": "JavaScript",
  "readme_contents": "# poker_playhouse\nRealtime multiplayer poker  \nNode.js, React, Redux, Socket.IO, Express, Sequelize, PostgreSQL"
 },
 {
  "repo": "jjulian/pitboss",
  "language": "Ruby",
  "readme_contents": "# PITBOSS\n\nThe bmoreonrails poker game runner. Dreamed over lunch on day 4 of RailsConf, conceived at the [June open source hack night](http://www.meetup.com/bmore-on-rails/calendar/13566036/).\n\n## Thoughts\n\n* Each contestant will build their own bot, and submit it to the game\n* The game is Texas Hold 'em ([Rules](http://poker.about.com/od/poker101/ht/holdem101.htm))\n* Contestants host their own bot on their own server and write it in their language of choice (rails, sinatra, node.js, mod_perl, cold fusion, etc)\n* We will run the server once a week at a certain time for a certain number of games, and see who wins the most tournaments/\"money\".\n* Results will be published. Poor implementations will be ridiculed.\n* Tweak your bot. Resubmit. Good luck!\n\n## Contribute! What's next:\n\n* Our first goal is to get the game loop running in ruby\n* We need ranking of hands. Some movement was done integrating [ruby_poker](http://rubyforge.org/projects/rubypoker/)\n* We need to keep track of the pot. Also side pots\n* Define the communication between the server and the bots. Stateless - the entire state of the current hand should be passed. The bot can respond with *fold* or *bet* (a bet can be a call or a raise)\n* Then we build bots (players). Starting with some reference bots to get folks started.\n* The communication between game and bots could be over HTTP (there were some some rumblings of XMPP)\n\n## Thanks\n\nThanks to @subelsky for the name. Thanks to @flipsasser and @nerdEd for their intense excitement about the idea. Thanks to @flipsasser for the prodigious amount of code/specs produced at the June OSHN. *Contribute - we'll thank you next.*"
 },
 {
  "repo": "sixteenstudio/poker-env",
  "language": "PHP",
  "readme_contents": "# Poker Environment\nA PHP based poker server and browser game built using Laravel\n"
 },
 {
  "repo": "matt404/Pointing.Poker",
  "language": "JavaScript",
  "readme_contents": "# Pointing.Poker\n\nThis is the official repo for http://pointing.poker.  Pointing.Poker is an\napplication that allows teams to estimate agile stories.  The goal is to give\neach team member the opportunity to vote before the votes are displayed to the\ngroup, thereby facilitating important discussion.\n\n#### Develop and Debug\n\n*Working with NodeJS and Redis natively*\n\nFirst install the dependencies:\n\n* PointingPoker requires Redis, some options include:\n  1. You can install redis server on your local host, or\n  2. Run redis from a container.\n\n**Ubuntu Instructions**\n\n```\nsudo apt-get -y install redis-server npm\nsudo npm cache clean -f\nnpm install -g n\nn stable\n```\n\nTo start the application:\n`npm start`\n\n\n#### Docker Usage\n\nTo build the docker container:\n\n`docker build -t matt404/pointingpoker .`\n\nBuild for Arm processors:\n\n`docker buildx build --platform linux/arm64,linux/arm/v7 -t matt404/pointingpoker .`\n\nTo run the application in a local docker container:\n\n```\ndocker run -d -p 3000:3000 matt404/pointingpoker\n```\n\nCheck the container status\n\n`docker ps`\n\nTo stop the container: (use the command above to get the container id)\n\n`docker stop <container id>`\n\nAttach to a container with new terminal session:\n\n`docker exec -i -t 243c463e6d6f /bin/bash`\n\nYou can remove dangling Docker images by running:\n\n`docker rmi -f $(docker images -qf dangling=true)`\n\nTo download and start the application from a fresh Docker host:\n```\ndocker pull redis\ndocker pull pull matt404/pointingpoker\n\ndocker network create ppoker_default\n\ndocker run -d --name ppoker_redis -v redis:/var/lib/redis/data --net ppoker_default -p 6379:6379 redis\n\ndocker run -d --name ppoker_app -p 3000:3000 --net ppoker_default --link ppoker_redis:redis -e \"REDIS_ADDR=ppoker_redis\" -i -t matt404/pointingpoker\n```\n\nTo publish the docker image to docker hub:\n\n`docker push matt404/pointingpoker`\n"
 },
 {
  "repo": "rux-pizza/poker-ai",
  "language": "Python",
  "readme_contents": "poker ai\n========"
 },
 {
  "repo": "Dosugamea/PokerBot",
  "language": "Python",
  "readme_contents": "# PokerBot\n\u9ad8\u5c02\u796d \u30dd\u30fc\u30ab\u30fc\u304c\u3067\u304d\u308bLINE Bot\n\n## \u753b\u9762\u30a4\u30e1\u30fc\u30b8\n![\u30b5\u30f3\u30d7\u30eb](https://raw.githubusercontent.com/Dosugamea/PokerBot/master/screenshot.jpg \"\u30b5\u30f3\u30d7\u30eb\")\n\n## \u8a66\u3057\u305f\u3044\u5834\u5408\n<a href=\"https://line.me/R/ti/p/%40bfg4052h\"><img height=\"36\" border=\"0\" alt=\"Add friend\" src=\"https://scdn.line-apps.com/n/line_add_friends/btn/en.png\"></a>\n"
 },
 {
  "repo": "jamesmacaulay/poker-hands",
  "language": "Clojure",
  "readme_contents": "# poker-hands\n\nA little library to score [poker hands](http://en.wikipedia.org/wiki/List_of_poker_hands) in Clojure, inspired by the good times at [Toronto Coding Dojo](http://www.meetup.com/Toronto-Coding-Dojo/).\n\n## Usage\n\nClone the repo and `lein repl`.\n\n```clojure\n(use '[poker-hands.core :only [hand beats? hand-category score]])\n\n(def hands [(hand \"2d 10s 12c 12d 9h\")\n            (hand \"2h 10h 12h 11h 9h\")\n            (hand \"3s 5c 6d 8s 10h\")])\n;=> #'user/hands\n\n(-> (hands 0) (beats? (hands 2)))\n;=> true\n\n(-> (hands 0) (beats? (hands 1)))\n;=> false\n\n(map hand-category hands)\n;=> (:one-pair :flush :high-card)\n\n(score (hands 0))\n;=> [1 12 10 9 2 0]\n\n(->> hands\n     (sort-by score)\n     (map hand-category))\n;=> (:high-card :one-pair :flush)\n```\n\n# Known Limitations\n\n* Doesn't know anything about high/low aces, ranks are just numbers\n\n## License\n\nCopyright \u00a9 2013 James MacAulay\n\nDistributed under the Eclipse Public License, the same as Clojure.\n"
 },
 {
  "repo": "karinqe/poker",
  "language": null,
  "readme_contents": "== Texas Hold'em Poker Bot ==\n\nBot for the [RoboPoker](http://robopoker.org/) competition. Currently also\ncontains a modified version of RoboPoker's SDK with some bugs fixed (e.g. the\nplatform.py file in the SDK clashes with a Python standard module). Later I\nwill fork it and remove this directory.\n"
 },
 {
  "repo": "GoldPoker/GoldPoker-coin",
  "language": "C++",
  "readme_contents": "Gold Poker Core 1.3.3\n=================================================\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/GoldPoker/GoldPoker-coin/master/doc/bitcoin_logo_doxygen.png\" width=\"256\" />\n</p>\n\n\n## Links:\n\n- Website: https://gold-poker.com\n- Explorer: https://explorer.gold-poker.com/\n- Github: https://github.com/GoldPoker/GoldPoker-coin/\n\n\nLicense\n-------\n\nGold Poker Core is released under the terms of the MIT license. See [COPYING](COPYING) for more\ninformation or see https://opensource.org/licenses/MIT.\n"
 },
 {
  "repo": "Dabomstew/pokered-speedchoice",
  "language": "Assembly",
  "readme_contents": "# Pok\u00e9mon Red Speedchoice\n\nThis is a disassembly of a randomizer speedrun-oriented ROM hack of Pokemon Red.\n\nTo see what the hack adds or changes, see [**FEATURES.md**](FEATURES.md).\n\nTo set up the repository, see [**INSTALL.md**](INSTALL.md).\n\n\n## See also\n\n* Disassembly of [**Pok\u00e9mon Red**][pokered]\n* Disassembly of [**Pok\u00e9mon Yellow**][pokeyellow]\n* Disassembly of [**Pok\u00e9mon Gold**][pokegold]\n* Disassembly of [**Pok\u00e9mon Crystal**][pokecrystal]\n* Disassembly of [**Pok\u00e9mon Pinball**][pokepinball]\n* Disassembly of [**Pok\u00e9mon TCG**][poketcg]\n* Disassembly of [**Pok\u00e9mon Ruby**][pokeruby]\n* Disassembly of [**Pok\u00e9mon Fire Red**][pokefirered]\n* Disassembly of [**Pok\u00e9mon Emerald**][pokeemerald]\n* Discord: [**pret Discord**][Discord]\n* irc: **irc.freenode.net** [**#pret**][irc]\n\n[pokered]: https://github.com/pret/pokered\n[pokeyellow]: https://github.com/pret/pokeyellow\n[pokegold]: https://github.com/pret/pokegold\n[pokecrystal]: https://github.com/pret/pokecrystal\n[pokepinball]: https://github.com/pret/pokepinball\n[poketcg]: https://github.com/pret/poketcg\n[pokeruby]: https://github.com/pret/pokeruby\n[pokefirered]: https://github.com/pret/pokefirered\n[pokeemerald]: https://github.com/pret/pokeemerald\n[Discord]: https://discord.gg/6EuWgX9\n[irc]: https://kiwiirc.com/client/irc.freenode.net/?#pret\n"
 },
 {
  "repo": "boldpoker/poker-shuffle",
  "language": "Elixir",
  "readme_contents": "# BoldPoker Shuffle Analysis\n\n[BoldPoker](http://boldpoker.net) uses the [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher\u2013Yates_shuffle) to guarantee unbiased shuffling of the deck.\nNa\u00efve shuffling implementations introduce predictable biases which gives exploitable information to players who are aware of this.\n\nThe `Shuffles` module in `shuffles.ex` contains implementations of Fisher-Yates as well as a subtly-wrong shuffle implementation.\nThe .csv files in `distributions` compare the distribution produced by both shuffle algorithms for various sample sizes (it takes a while for the biases to become visible).\n\nVisualisations of the distributions can be found here:\nhttps://boldpoker.net/design#bold_poker_shuffle\n\nThe raw data \u2013 a list of 1mm decks shuffled with each respective algorithm \u2013 can be downloaded here:\n[BoldPoker decks](https://www.dropbox.com/s/njwpg3svmh447fk/boldpoker_shuffle_1000000_hands.gz?dl=0)\n[BotchedPoker decks](https://www.dropbox.com/s/am6kjehfjj15e28/botchedpoker_shuffle_1000000_hands.gz?dl=0)\n\n"
 },
 {
  "repo": "Josh-TX/Poker",
  "language": "C#",
  "readme_contents": "# PokerPrototype\n\nConnection String: server=sql9.freemysqlhosting.net;database=sql9140372;user=sql9140372;password=WSx2C8iRZx;\n\nTO DO:\nadministrators resolve tickets\nstipend of currency for logging in 3 days in a row -- NEXT RELEASE\nstipend of currency for completing 10 games -- NEXT RELEASE\ncreate leaderboard (sorted by currency EARNED/date created) -- NEXT RELEASE\ninvite other players (send message) -- can message users, not sure how private rooms work\nmake rooms private -- don't know if private rooms currently work"
 },
 {
  "repo": "eduardo/planning-poker-timer",
  "language": "JavaScript",
  "readme_contents": "Originally from http://blog.aslakhellesoy.com/2007/10/17/planning-poker-timer\n\nA few months ago one of my colleagues, Christer L\u00f8vaas, brought a couple of old-fashioned hour glasses (minute glasses, really) to a release planning meeting. -A red one with one minute and a blue one with two minutes.\n\nWe used these to timebox the time spent on estimating each story. We had set a goal of spending maximum three minutes per story, including discussion and planning poker. We were estimating a huge backlog, so this was absolutely necessary in order to get through as much of it as possible in one day. (What a day).\n\nA couple of weeks ago I was facilitating two all-day release planning/planning poker workshops, and I brought the hour glasses with me. This time we were facing exactly the same problem as the first time: It was so easy to forget turn the hour glasses or realise when the sand had run out! So we repeatedly spent more time on each story than we had decided.\n\nSo I sat down in the lunch and wrote Aslak Helles\u00f8y\u2019s Planning Poker Timer. Props to Kristoffer Dyrkorn for fixing some IE bugs.\n\nIt\u2019s a big digital countdown clock that switches from green to red and plays a bell when time is up. Try it out and let me know how it goes.\n"
 },
 {
  "repo": "zanezgame/Poker",
  "language": "PHP",
  "readme_contents": "# Poker \u6597\u725b - \u7eb8\u724c\u6e38\u620f\n\n### \u83b7\u80dc\u5224\u5b9a\n\nJudge | Example\n--- | ---\n\u70b8\u5f39 | [ K K K K ] + ( A )\n\u4e94\u82b1\u725b | [ 10 J Q K K ]\n\u4e94\u5c0f\u725b | [ A A 2 2 4 ]\n\u725b\u725b | [ 2 3 5 ] + ( 4 6 )\n\u725b\u4e5d | [ K Q J ] + ( 4 5 )\n\u725b\u516b | [ 10 A 9 ] + ( 2 6 )\n\u725b\u4e03 | [ A 4 5 ] + ( 3 4 )\n\u725b\u516d | [ 3 8 9 ] + ( 3 3 )\n\u725b\u4e94 | [ 10 J Q ] + ( 9 6 )\n\u725b\u56db | [ 4 3 3 ] + ( 2 A )\n\u725b\u4e09 | [ 9 9 2 ] + ( 5 8 )\n\u725b\u4e8c | [ 7 4 9 ] + ( A A )\n\u725b\u4e01 | [ 8 8 4 ] + ( A Q )\n\u6ca1\u725b | ( 3 5 7 A 9 )\n\n\n## \u53c2\u6570\u8981\u6c42 \uff08\u901a\u7528\uff1a\u9002\u7528\u4e8e\u4e0b\u8ff0\u6240\u6709\u8bed\u8a00\u7248\u672c\uff09\n\n\u8f93\u5165\u4ec5\u8bc6\u522b\u6570\u5b57\u548c *a* / *j* / *q* / *k* / *A* / *J* / *Q* / *K*\uff0c\u5176\u4f59\u5b57\u7b26\u4e0d\u4f5c\u5904\u7406\n\n*1* \u770b\u505a *A*, *0* \u770b\u505a *10*\n\n\u8d85\u8fc75\u4e2a\u53c2\u6570\u4ee5\u524d5\u4e2a\u505a\u8ba1\u7b97\n\n\u53c2\u6570\u4e0d\u8db3\u9700\u91cd\u65b0\u8f93\u51655\u4e2a\u53c2\u6570\n\n## C_POP \u7248\u672c\n\n#### \u8fd0\u884c\u6837\u4f8b\uff1a\n\n\u7a0b\u5e8f\u5f00\u59cb\uff1a\n```\nWelcome to the game:\nwhat pokers ?\n(\"0\" for 10, joker not allowed)\n```\n\u8f93\u51655\u5f20\u724c\uff0c\u8f93\u51fa\u7ed3\u679c\uff1a\n```\n2 3 4 5 6\n========= BULL =========\n10 : [ 2 3 5 ] + ( 4 6 )\n...\n12345\n========= BULL =========\n5 : [ A 4 5 ] + ( 2 3 )\n...\nJqa13\n--------- LOSE ---------\n```\n\n#### DEMO\n\n*C_POP/Poker_C.exe* (gcc 4.9.2, Windows 10 x64)\n\n## PHP_POP \u7248\u672c\n\n#### \u7528\u6cd5\n\nGET *http(s)://your.domain.site/Poker.php?{\u53c2\u6570}*\n\n\u8fd4\u56de JSON\n\n#### JSON \u8fd4\u56de\u503c\n\nerrCode | errText | judgeText\n--- | --- | ---\n400 | \"unknown error\" | NULL\n401 | \"empty pokers\" | NULL\n402 | \"not enough pokers\" | NULL\n0 | NULL | *judgeText_JSON*\n\n#### judgeText JSON \u8fd4\u56de\u503c\n\ntype | value | toSum | toLeft\n--- | --- | --- | ---\n\"BOMB\" | which four-of-a-kind | NULL | NULL\n\"FIVE BULLS\" | NULL | NULL | NULL | NULL\n\"FIVE SMALL BULLS\" | NULL | NULL | NULL | NULL\n\"BULLS\" | value of bull | 3 of pokers to sum | 2 of pokers then left\n\n#### DEMO\n\n*PHP_POP/Poker.htm*  (CentOS 7.2 x64, Nginx 1.10.0, PHP 5.5.36)\n\n## JavaScript_POP \u7248\u672c\n\n#### \u7528\u6cd5\n\nHTML head \u9700\u5f15\u7528 *Poker.js* \uff1a\n```\n<script type=\"text/javascript\" src=\"Poker.js\"></script>\n```\nHTML body \u9700\u8bbe\u7f6e\u4ee5\u4e0b\u4e24\u4e2a\u6807\u7b7e\u548c\u53c2\u6570\uff1a\n```\n<input type=\"text\" id=\"in\">\n<button onclick=\"run()\">OK</button>\n<p id=\"result\"></p>\n```\n\u7ed3\u679c\u5c06\u4f1a\u5c55\u793a\u5728\uff1a\n```\n<p id=\"result\"></p>\n```\n\n#### DEMO\n\n*JavaScript_POP/Poker.htm* (Chrome 57.0.2987.98 (64-bit), Windows 10 x64)\n\n## Java_OOP \u7248\u672c\n\n#### \u7528\u6cd5\n\n```\nPoker pokers = new Poker();\npokers.gameStart();\n```\n\n#### DEMO\n\n*Java_OOP/Demo.java* (JDK 1.8.0_121)\n\n## Python_POP \u7248\u672c\n\n#### \u7528\u6cd5\n\n\u7ec8\u7aef\u8fd0\u884c\uff1a\n```\npython3 Poker.py\n```\n\n#### DEMO\n*Python_POP/Poker.py* (Python 3.6, Windows 10 x64)\n\n## PHP_OOP \u7248\u672c\n\n#### \u7528\u6cd5\n\nphp \u4e2dinclude *Poker.php* \uff1a\n```\ninclude 'Poker.php';\n```\n\u521b\u5efa\u5bf9\u8c61\uff1a\n```\n$joker = new Poker();\n```\n\u4f20\u5165\u53c2\u6570\u5e76\u8ba1\u7b97\uff1a\n```\n$joker->gameStart($_SERVER['QUERY_STRING']);\n$joker -> gameStart('12345');\n```\n\u8fd4\u56de JSON\n```\necho $joker->toJSON();\n```\n\n#### DEMO\n*PHP_OOP/Demo.php* (CentOS 7.2 x64, Nginx 1.10.0, PHP 5.5.36)"
 },
 {
  "repo": "ekzhu/planning-poker",
  "language": "JavaScript",
  "readme_contents": "Planning Poker\n==============\n\nThe demo site: [planning-poker.meteor.com](http://planning-poker.meteor.com). It's using free host provided by Meteor.\n\nGet Started\n-----------\n\nTo get started, you need to download and install [Meteor](http://meteor.com). Type the following in terminal. \n\n    $ curl https://install.meteor.com | /bin/sh\n\nIf you are using Windows, try [Meteor for Windows](http://win.meteor.com).\n\nOnce you have meteor, go into the repository directory, and run:\n\n    $ meteor run\n    \nA local version of the app should be running at localhost:3000.\n\nFor Developers\n--------------\n\nHelpful resource:\n\n1. [Example projects](http://meteor.com/examples/leaderboard)\n2. [Meteor docs](http://docs.meteor.com/)\n3. [Twitter Bootstrap](http://twitter.github.com/bootstrap/) - we use this for UI\n\n----\nThis is an Orbis Access Free Friday project.\n"
 },
 {
  "repo": "Gorazdo/Planning-Poker",
  "language": "JavaScript",
  "readme_contents": "![img](https://repository-images.githubusercontent.com/221273648/47699c80-12ac-11ea-8ffb-072183c1cc47)\n# Planning Poker Widget for Miro\n\n## What's inside?\n\nA plugin for Miro Board. It's an SPA with caching via service workers and it uses Preact. \n\nThere are 14 faces and 6 backs.\n\n11 cards represent numbers: 0, \u00bd, 1, 2, 3, 5, 8, 13, 20, 40, 100\n\nAnd 3 extra crads: Infinity, Coffee-break and Question cards\n\n## Wait! What Planning poker is?\n\n**Planning poker**, also called **Scrum poker**, is a consensus-based, gamified technique for estimating, mostly used to estimate effort or relative size of development goals in software development. In planning poker, members of the group make estimates by playing numbered cards face-down to the table, instead of speaking them aloud. \n\nThe cards are revealed, and the estimates are then discussed. By hiding the figures in this way, the group can avoid the cognitive bias of anchoring, where the first number spoken aloud sets a precedent for subsequent estimates. _from [Wiki](https://en.wikipedia.org/wiki/Planning_poker)_\n\n\n## Authors\n\nBy Pavel and Anna from [Gorazdo.studio](https://gorazdo.studio/)\n"
 },
 {
  "repo": "melickm/OpenToolchainPoker",
  "language": "JavaScript",
  "readme_contents": "# Building an AI Poker Tournament: Quick Collaboration Using Bluemix DevOps Open Toolchain\n---\n\n## Introduction\n\nWelcome! In this quick lab we'll be using the [Bluemix Continuous Delivery](https://www.ibm.com/blogs/bluemix/2016/11/bluemix-continuous-delivery-is-now-live/) feature of Bluemix to run an automated poker tournament among robot players. We will create a GitHub integration in our toolchain to copy the code in this repository and flow it to a Delivery Pipeline integration to run the tournament.\n\nBolder participants with knowledge of JavaScript and poker mechanics will also be able to create their own AI players and contribute them back to this repository, competing against the other attendees of this session.\n\nA complementary leaderboard application will keep track of the current standings of the bots in this repository. You can view the results of past tournaments at this link: [ic17-otc-poker-leaderboard.mybluemix.net](https://ic17-otc-poker-leaderboard.mybluemix.net)\n\nAny additions to this repository (through pull requests) will automatically trigger a run of a set of tournaments, which will update the leaderboard automatically. The last 5 sets of tournaments, with the timestamp, players, and chip totals of each AI will be displayed.\n\nThe [code for this leaderboard](https://github.com/melickm/OpenToolchainPokerLeaderboard) is also deployed to Bluemix using a toolchain. If you want to learn more about the infrastructure surrounding this lab, let me know and I can give you a quick demo.\n\nLet's begin running your own tournament. As with any other lab, please don't hesitate to ask questions if you get stuck. Enjoy!\n\n*The code for this lab was built on the [JsPoker](https://github.com/mdp/JsPoker) project by Mark Percival. Check it out if this lab interests you.*\n\n----\n### What is a toolchain?\n\nA toolchain is connected set of tools that can be adapted to suit the needs of a software development team. Different teams may have entirely different toolchains, as they are unique to the different development practices or culture of the team. The idea is championed by the [Bluemix Garage Method](https://www.ibm.com/devops/method) as a DevOps practice for delivering code in a more effective way.\n\nThis toolchain concept has been implemented as a Bluemix feature to allow users to collect and integrate a set of tools from a common tool catalogue with minimal configuration. This allows development teams to try out new tools easily and to adapt their tools to each individual project, discovering and switching tools as they see fit.\n\nTemplates can also be easily created to share toolchain configurations and settings with others, allowing teams to setup a full development environment in just a few seconds.\n\nIn our lab, we will utilize a handful of integrations to run our code quickly. Feel free to diverge from the lab and experiment with adding different tools as we go along. For instance, adding a _Slack_ integration will allow the _Delivery Pipeline_ to post a message to a Slack channel whenever a build is run.\n\n[More information on Open Toolchain](https://www.ibm.com/devops/method/category/tools)\n\n----\n\n### Prerequisite Accounts\n\nYou will need to sign up for a [Bluemix](https://interconnectlabs.mybluemix.net/) account for this lab, if you don't already own one.\n\nFor those creating a new Bluemix account, you will also need to create an _organization_ and a _space_ in your account after logging in.\n\n\nYou will also need a free [GitHub](https://github.com/) account. Review the [terms of service](https://help.github.com/articles/github-terms-of-service/), and, if you agree with the terms, create an account. GitHub is a service for collaboration in software development. We will use GitHub in this lab to host our source code in a repository.\n\n--------\n\n### Creating a Toolchain and running the tournament\n\n1. Go to [Bluemix](https://interconnectlabs.mybluemix.net/) to begin the lab. Here you can either open a new Bluemix account (it's free!) or choose to use an existing account.\n\n1. Next, navigate to the IBM DevOps Services page in Bluemix at [https://bluemix.net/devops](https://bluemix.net/devops).\n\n1. You should now be on the Toolchains page. Click on `Create a toolchain`.\n\n1. Select the `Build your own toolchain` template.\n\n1. Choose a name and click `Create` to finish the creation process.\n\n1. The toolchain overview page will open. From here, we'll want to add some integrations to the toolchain. Click the `Add a Tool` button.\n\n1. Select `GitHub`. You may need to **Authorize** GitHub if this is your first time using it in a Toolchain. This integration will link a GitHub repository to the toolchain, which will allow users to flow the source code to other integrations.\n\n1. After authorizing, choose `Fork` as the Repository Type and enter the URL of this repository as the Source Repository URL https://github.com/melickm/OpenToolchainPoker. A fork will create a new repository in your GitHub account with the identical source code and history of this parent directory. Click `Create Integration`.\n\n1. A GitHub repository should now be displayed in your toolchain. The source code for this lab is now linked to your toolchain. Click on the `Add a Tool` button again to add another integration to use the source code.\n\n1. Select the `Delivery Pipeline`. Enter a name for your pipeline and click `Create Integration`.\n\n1. The _Delivery Pipeline_ service is used to run and deploy code to Bluemix with a great deal of configurability. We will be using this service to run the source code from the GitHub repository to simulate poker tournaments. Click into the new Pipeline tile on your toolchain page.\n\n1. From this screen, we will start constructing pipeline stages used for defining what to do when new code is delivered. Click on `Add Stage` to create a new Pipeline stage. You can give the stage a suitable tournament-sounding name.\n\n1. In the `Input` tab, verify that the **Input Type** is set to `SCM Repository` and that the **Stage Trigger** is set to `Run jobs whenever a change is pushed to Git`. Afterwards, click the `Jobs` tab on the top bar.\n\n1.  Click `Add Job` and create a new `Build` job.\n\n1. Set **Builder Type** of the build job to be `npm`, as our source code is written in Node.js.\n\n1. In the `Build Shell Command` text box, after `npm install`, make a new line and type in `node play`. This will allow the pipeline to run our simulation script when we run this stage.\n\n1. Click the `Save` button at the bottom of the page to save the stage.\n\n1. In the newly created stage, click on the `Build` job in the middle of the tile.\n\n1. Click `Run` at the top and an automated poker simulation will run in the console. You can use the down arrow at the bottom right of the screen to quickly navigate to the end of the tournament.\n\nThe tournament will list out the action that each bot took, at each stage of the game. The simulation is set to run for a limit of 200 hands, but will finish early if there is a winner. You can study the actions of each bot and the success of it's strategy as the game progresses, but the specific algorithms that denote the strategy of each bot will be explored in the latter part of the lab.\n\nFeel free to re-run the stage a few times to see the results of different tournaments. You may notice a high variability of winners because the current bots in the tournament use very basic strategies. More effective strategies may result in more consistent winners.\n\nThe latter parts of the lab are encouraged, but optional. They deal with creating your own bot, which will require some knowledge of JavaScript and poker. Feel free to also explore the toolchain features of Bluemix or the many different tool integrations available today.\n\nWe hope you enjoyed experimenting with Open Toolchains and running poker simulations with Bluemix!\n\n## Before you go!\n1. Don't forget to log out of both [GitHub](https://github.com) and [Bluemix](https://bluemix.net).\n\n1. [Scan this QR code](https://chart.googleapis.com/chart?chs=500x500&cht=qr&chl=QR235) and **go claim a T-Shirt** from the info desk!\n\nPlease let us know if you have any questions, concerns, or feedback for our product. Any feedback for the lab specifically would also be greatly appreciated.\n\n_If you want to learn more about the poker simulation framework, check out the [JsPoker](https://github.com/mdp/JsPoker) repository._\n\n-----\n## Creating your own bot\n----\n### Create a test stage\n\nIn production environments of software development teams, test stages are often used in the _Delivery Pipeline_ to flow new changes through automated tests before they are deployed to different environments.\n\nWe will first create a test stage in your toolchain to run a tournament with minimal output, as a method to test your bot quickly. This is the test harness to ensure that your bot is behaving as expected, before running larger simulations with it.\n\nRepeat the steps for adding a stage until saving the newly created stage from the first part of the lab (steps 12-17), but instead of entering `node play` in the `Build Shell Command` text box, use `node test/challenger_test.js` for the run command instead. Save the stage and run it to quickly see the success of the `challengerBot`. Note that the `Input` tab should have `Run jobs when the previous stage is completed` selected.\n\n### Modify ChallengerBot\n\nTo experiment with a new player, you will need to edit the `players/challengerBot.js` file of the repository.\n\nCreate an `Eclipse Orion Web IDE` integration in the toolchain. The Web IDE creates an instance of the Orion Web Editor, which will allow us to make changes to the source code from inside the browser. Click into the integration to navigate to the root of the repository.\n\nExpand the `players` folder and open the `challengerBot.js` file. You should see an *update* function. The logic of your bot will reside in this function, although you can create helper methods and classes outside of the function. All the code must stay in this file and there can be no references to external modules.\n\nThe *update* function will direct the behaviour of your bot. It will be called multiple times within a single round of the tournament and the **game** parameter of the function holds all the information about the game that will be visible to your bot at that time. You can find examples of some game states in the `players/gameStates` folder.\n\nTo put it simply, the *update* function just needs to return an integer. If the value is equal to the current call amount (`game.betting.call`), it is considered a *call*. Any amount lower is a *fold*, any amount higher or equal to `game.betting.raise` is a *raise*.\n\nThe other players of the tournament can be found in the players folder, their logic is pretty simple so you can learn from their source code easily. More complex algorithms can be found in the `players/veterans` folder, for advanced techniques.\n\nMore information about making bots can also be found in the [JsPoker](https://github.com/mdp/JsPoker) readme.\n\nFeel free to also wave down one of the lab moderators to discuss potential algorithms.\n\n### Committing changes\n\nAfter making your changes to `challengerBot.js`, click the `Git` icon on the left bar of the Web IDE.\n\nOnce it finishes loading, the left side of the screen should display all the files that have been changed. Enter a commit message for your change and click the `Commit` button on the top right.\n\nA commit should show up in the `Outgoing` dropdown on the left side of the screen. Click the `Push` button to commit your changes to the repository.\n\nThe _Delivery Pipeline_ was configured to run the test stage and run a tournament whenever new changes are pushed to the repository. Navigate back to it on the toolchain to view the results of the latest simulation (with your changes).\n\n### Contribute your bot to the repository\n\nWhen you are comfortable with the behaviour of your bot, you can contribute it back to the repository for other attendees of the lab to run simulations against.\n\n- Take the logic you've put in _challengerBot_ and create a new file in the `players` folder.\n- Give the bot a suitable filename and fill in the name for the bot in the `info` object. Feel free to also leave your email and btcWallet.\n- Revert any changes you made to `challengerBot.js`. You can do this by copying and pasting from the challengerTemplate file.\n- Add your new bot to `test/tournament.js` by adding a reference to the module at the top of the file and also adding it into the `table` object.\n- Commit your changes to your repository.\n- Navigate back to the parent repository https://github.com/melickm/OpenToolchainPoker.\n- Go into the `Pull Request` tab and click `New Pull Request`.\n- Click `compare across forks` and navigate to your own repository.\n- Click `Create Pull Request` and enter a description and optionally a comment.\n- Click `Create Pull Request` and flag down a lab moderator to review and merge the code.\n\nAfter a lab moderator merges the pull request, you should see the live-updated results on [ic17-otc-poker-leaderboard.mybluemix.net](https://ic17-otc-poker-leaderboard.mybluemix.net).\n\nCongratulations on contributing! I wish your bot, the best of luck.\n"
 },
 {
  "repo": "bovle/fixed_limit_poker",
  "language": "Python",
  "readme_contents": "Getting started\n===============\n1. Fork this repository on Github and continue from there.\n\nSetup\n=====\n\nTo setup your environment do the following:\n1. Download python3 for your os\n2. Create a virtual environment: `python -m venv venv`\n3. Use that environment: `venv\\Scripts\\activate`\n4. Install the project dependencies: `pip install -r requirements.txt`\n\nDeveloping your bot\n===================\n1. In the `bots` folder, create a file with the name of your bot i.e. `FBL_Bot.py`\n2. Copy the contents from `TemplateBot.py` into it\n3. Add you bot to `main.py`\n4. Test your bot using the `debug()` and `benchmark()` functions in `main.py`\n5. Commit your changes to the forked repository you created in 'Getting started'\n\n\nTodo liste\n==========\n- [X] Tilf\u00f8j oberserver pattern - Troels\n  - [X] Tilf\u00f8j console observer - Troels\n  - [X] Tilf\u00f8j Websocket observer - Troels\n- [X] Tilf\u00f8j tests - Bovle\n- [x] Lav UI - Harder\n  - [x]  slider for h\u00e6nder i kamp\n  - [x]  vis action som skrift p\u00e5 avatar\n  - [x]  vis score for kamp\n  - [x]  vis h\u00e5nd typer ved showdown\n  - [x]  vis chips vundet ved showdown\n  - [x]  fix state 0\n  - [x]  slider \u00e6ndringer korrekt\n- [X] Lav UI Data\n  - [X] JSON kamp data \n- [X] Hj\u00e6lp til bot udvikling\n  - [X] preflop h\u00e5nd rang \n  - [X] postflop h\u00e5nd rang\n  - [X] Bedre bot eksempler\n- [X] H\u00e5ndter multiple kampe samtidig\n  - [X] Spil N bots mod hinanden alle mod alle\n  - [X] Gem resultat som matchup tabel\n- [X] Fejlh\u00e5ndtering\n  - [X] Hvis de crasher\n  - [X] Hvis de tager for lang tid (1 sekund?)\n- [X] Reimplment scoreboard using Google docs\n  - [X] Gather results (in observer?) \n  - [X] Upload raw data to Google sheets\n  - [X] Make Google Sheet that displays data in a pretty way\n- [X] Forklar handValue utils.\n- [X] Template bot som de kan starte med (tom implementation)\n- [X] Downgrade bots\n- [X] Make a raise loop cause a check/call rather than fold\n\nNice to have:\n\n- [X] l\u00f8bende turneringer\n  - [X] GitHub gist\n  - [X] GitHub repo\n\n\n\n\n\nChallenge:\n - Much faster (10x) with pypy3 (https://www.pypy.org/download.html)\n\n\nSort dependencies:\n - `isort -l 120 bots environment utils main.py read_results.py challenge.py`\n \n"
 },
 {
  "repo": "connor21/DevOpsPoker",
  "language": "Python",
  "readme_contents": "# DevOpsPoker\nDevOps Poker bot template\n\n### How to use\n\nTo use the DevOps Poker bot template create a fork of the git repository and clone it to your workstation.\n\nTo run the bot in a game, you need to change the configuration at the top of `dplayer.py`.\n\n    # -----------------------------------------------------------\n    # Configuration\n    # You need to change the setting according to your environment\n    gregister_url='http://localhost:5001'\n    glocalip_adr='127.0.0.1'\n    # -----------------------------------------------------------\n\n`gregister_url` is the game server URL to register the bot for a game.\n`glocalip_adr` is the ip of your workstation to be called by the game server. Make sure your firewall does not block traffic on the port you've selected for your bot.\n\n#### Prerequisites to run `dplayer.py` on your workstation\n\nThe following prerequisites are required to run `dplayer.py`:\n\n- Python 3.5 or better\n- packages required\n\t- flask\n\t- flask_restful\n\t- requests\n- PIP to install packages - PIP is available on Windows in `Scripts` folder after installation.\n\n#### Install packages\n\n    pip install flask\n    pip install flask_restful\n    pip install requests\n    \n\n#### run the bot\n\nThe bot requires some command line parameters:\n\n    DevOps Poker Bot - usage instruction\n    ------------------------------------\n    python dplayer.py <team name> <port> <password>\n    example:\n    python3 dplayer bazinga 40001 x407\n    \nTeam name and password is provided by the organizers.\n\n#### improve your game\n\nThe bot template is configured to fold as soon as possible. This means you cannot win. To improve your game you need to deploy new versions with a modified `__get_bid` function.\nThe function returns an integer value with your bid in a bet round. Hand cards and community cards are provided. The data passed to `__get_bid` in the `data` parameter is described in the source code comments. \n\n    ## return bid to caller\n    #\n    #  Depending on the cards passed to this function in the data parameter,\n    #  this function has to return the next bid.\n    #  The following rules are applied:\n    #   -- fold --\n    #   bid < min_bid\n    #   bid > max_bid -> ** error **\n    #   (bid > min_bid) and (bid < (min_bid+big_blind)) -> ** error **\n    #\n    #   -- check --\n    #   (bid == 0) and (min_bid == 0) -> check\n    #\n    #   -- call --\n    #   (bid == min_bid) and (min_bid > 0)\n    #\n    #   -- raise --\n    #   min_bid + big_blind + x\n    #   x is any value to increase on top of the Big blind\n    #\n    #   -- all in --\n    #   bid == max_bid -> all in\n    #\n    #  @param data : a dictionary containing the following values\n    #                min_bid   : minimum bid to return to stay in the game\n    #                max_bid   : maximum possible bid\n    #                big_blind : the current value of the big blind\n    #                board     : a list of board cards on the table as string '<rank><suit>'\n    #                hand      : a list of individual hand cards as string '<rank><suit>'\n    #\n    #                            <rank> : 23456789TJQKA\n    #                            <suit> : 's' : spades\n    #                                     'h' : hearts\n    #                                     'd' : diamonds\n    #                                     'c' : clubs\n    #\n    # @return a dictionary containing the following values\n    #         bid  : a number between 0 and max_bid\n\n#### Hints\n\n1. The bot registers itself automatically when it's started. It automatically removes the registration if it crashes or terminates.\n2. If a bot is started with the same team name on another host/port, the registration is updated and the new bot is used in the next game.\n3. Errors in return values or not reachable, registered bots are interpreted as fold by the server.\n\n\n"
 },
 {
  "repo": "mcwp98/pokernet",
  "language": "JavaScript",
  "readme_contents": "#Pokernet\nThe pokernet game requires python and node.js function. The server end uses the django framework for the general application and a node.js instance running to handle games and logic.\nSeveral dependencies are also required on the server, including django for python and several libraries for node.js\n\n##Install\n\n### Python\nPython can be downloaded and installed to your system from https://www.python.org/\n\n#### Django\nDjango may be installed on the server by using\n>git clone git://github.com/django/django.git django-trunk\n\nand then\n\n>sudo pip install -e django-trunk/\n\n#### Django Application Dependencies\nWe require the Pillow module, to install:\n> pip install Pillow\n\n\n### Node.js\nNode.js can be downloaded and installed to your system from  http://nodejs.org/\n\n#### Node.js Applications\nPokernet uses several node.js applications including express, handranker, and socket.io. to instal them, use npm:\n>npm -g install express handranker socket.io\n\nthen cd to the /sockets/ directory and run \n\n>npm link express handranker socket.io\n\n### liteSQL Database\npokernet currently utilizes the liteSQL database, to create, navigate to the application directory and run:\n>python manage.py syncdb\n\n## Development\nTo run both server and client locally during development, a script is provided that will run both the node.js and django dev server. To use, simply cd into the project directory and run:\n> ./start.sh\n\n## Deployment\nVarious deployment strategies exist, however, note that the current version should not be used on a production server as many security features have not been implemented.\n\n### Port and Address Configuration\nThere are several steps required to ensure that the server/client will communicate.\n\nOn line 4 of /sockets/server.js, edit:\n> , server = app.listen(8081)\n\nOn line 23 of /static/js/game.js\n> var socket = io.connect('127.0.0.1:8081');\n\nand on line 157 of /tables/templates/game.html:\n><script src=\"http://127.0.0.1:8081/socket.io/socket.io.js\"></script>\n\nLocalhost should be replaced with the server address. Any open port can be utilized\n\n### Django with WSGI\nInformation on deploying the Django application on your server with WSGI can be found at https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/\n\nYou may need to setup your apache Virtual Host file similarly:\n>DocumentRoot /var/www/hyobyun.com\n\n>ServerName Poker\n\n>WSGIScriptAlias / /var/djangoProjects/pokernet/pokernet/wsgi.py\n\n>Alias /static /var/djangoProjects/pokernet/static/\n\n><Directory \"/var/www/hyobyun.com\">\n\n>allow from all\n\n>Options +Indexes\n\n><Files wsgi.py>\n\n>Order deny,allow\n\n>Allow from all\n\n></Files>\n\n></Directory>\n\n### Node.js\nNot much has to be done to deploy the node.js server. You may simply run:\n>forever node sockets/server.js\n\n"
 },
 {
  "repo": "aparrett/poker-ui-deprecated",
  "language": "Vue",
  "readme_contents": "# poker-app-ui\n\nPlay Texas Hold'em poker! Click [here](https://poker-friends.herokuapp.com/) to play. (The servers are running on free Heroku instances and will take several seconds to boot up.)\n\n## Project setup\n\n```\nnpm install\n```\n\n### Compiles and hot-reloads for development\n\n```\nnpm run dev\n```\n\n### Compiles and minifies for production\n\n```\nnpm run build\n```\n\n### Run your lint and tests\n\n```\nnpm run test\n```\n\n### Lints and fixes files\n\n```\nnpm run lint\n```\n\n## Tech Stack\n\n-   Vue.js\n-   Jest\n-   [Vuetify](https://vuetifyjs.com/)\n\n## How to Contribute\n\n1. Install Git on your machine.\n   https://git-scm.com/book/en/v2/Getting-Started-Installing-Git\n\n2. Fork the repository to your own account.\n\n3. Clone the repository into your projects folder on your computer.\n\n```\ngit clone https://github.com/<your-user-name>/poker-app-ui.git\n```\n\n3. Make your changes to the code. Feel free to create new branches if you would like but it is not necessary at this point.\n4. Commit your code with a thoughtful message.\n\n```\ngit commit -am 'Added the ability to shuffle cards'\n```\n\n5. Push to your repository.\n\n```\ngit push\n```\n\n6. Create a pull request.\n\n-   Go to the [original repository](https://github.com/aparrett/poker-app-ui) and click the \"New Pull Request\" button.\n-   Follow the steps.\n\n7. Once the code is reviewed, it will be merged into master on the original repository.\n\n## Known Issues\n\n* There are abandoned games in the list because the server does not delete abandoned games automatically.\n* Restarting the server makes a user's hand disappear until they refresh their browser.\n* The styles are not responsive.\n* Because the app is on Heroku and I'm not paying for the live server, the UI and API take several seconds to boot up.\n\n## To-Do\n\nSend me an email at `anthonyparrett7@gmail.com` for an invite to the [Trello board](https://trello.com/b/pBbdpTSe/appstories) where I am tracking the to-do list.\n"
 },
 {
  "repo": "pj4533/PokerNowKit",
  "language": "Swift",
  "readme_contents": "# PokerNowKit\nShared framework of PokerNow.club log parsing code\n"
 },
 {
  "repo": "luofanrain/poker",
  "language": "PHP",
  "readme_contents": "# poker\r\n\u57fa\u4e8ephp\u7684\u6597\u5730\u4e3b\u5361\u724c\u6e38\u620f\r\n### \u6e38\u620f\u724c\u578b\u53ca\u53ef\u80fd\u503c\r\n1. **\u5355\u724c**\uff0c\r\n    - \u53ef\u80fd\u503c\uff1a3\uff0c4\uff0c5\uff0c6\uff0c7\uff0c8\uff0c9\uff0c10\uff0cJ,Q,K,A,2,x(\u5c0f\u738b),X(\u5927\u738b)\r\n    - \u957f\u5ea6:1\r\n    - \u89c4\u5f8b\uff1alen=1\r\n    - type:\r\n2. **\u4e00\u5bf9**\r\n    - \u53ef\u80fd\u503c\uff1a3-2\u7684\u5bf9\u5b50\uff0c\u53cc\u738b\uff0c\r\n    - \u957f\u5ea6\uff1a2,\r\n    - \u89c4\u5f8b\uff1a2\u7684\u500d\u6570,\u5207\u5361\u724c\u76f8\u540c\r\n3. **\u4e09\u5e26**\uff0c\r\n    - \u53ef\u80fd\u503c\uff1a3-2\u7684\u4e09\u5e26\uff0c\u53ef\u4ee5\u5e26\u4e0d\u5e26\u6216\u5e26\u4e00\u4e2a\uff1b\r\n    - \u957f\u5ea6:3\r\n    - \u89c4\u5f8b\uff1a\u81f3\u5c11\u4e00\u7ec4(3\u5f20\u540c\u6837\u7684\u724c)\u5361\u724c,\u4e14\u7ec4\u7684\u6570\u91cf\u548c\u5355\u724c\u7684\u6570\u91cf\u5fc5\u987b\u76f8\u7b49(\u5355\u724c\u53ef\u4e0d\u8981)\r\n4. **\u987a\u5b50**\uff0c\r\n    - \u53ef\u80fd\u503c\uff1a\u81f3\u5c11\u4e94\u5f20\u724c\u4e3a\u4e00\u5217\uff0c3-A(2-xX\u4e0d\u53c2\u4e0e\u51fa\u724c);\r\n    - \u53ef\u80fd\u503c\uff1a5-12,\r\n    - \u89c4\u5f8b\uff1a\u4e94\u5f20\u53ca\u4ee5\u4e0a\u6709\u5e8f\u65e0\u65ad\u7684\u724c\r\n4. **\u8fde\u5bf9**\uff0c\r\n    - \u53ef\u80fd\u503c\uff1a3-A\u81f3\u5c11\u4e09\u7ec4,\r\n    - \u957f\u5ea6\uff1a3-12\r\n    - \u89c4\u5f8b\uff1a3\u7ec4\u5bf9\u5b50\u53ca\u5176\u4ee5\u4e0a,\u4e14\u6709\u5e8f\u800c\u4e0d\u65ad\r\n5. **\u4e09\u5e26\u98de\u673a** \r\n    - \u53ef\u80fd\u503c\uff1a3\u4e2a3-2\uff0c\u5e26\u6216\u8005\u4e0d\u5e26\r\n    - \u957f\u5ea6\uff1a3\u5f20\u6216\u56db\u5f20\r\n    - \u89c4\u5f8b\uff1a\u4e24\u4e2a\u53ca\u4ee5\u4e0a\u6709\u5e8f\u76843\u5e26\u7ec4\u5408,\u4e14\u7ec4\u548c\u7684\u6570\u91cf\u548c\u5355\u724c\u7684\u6570\u91cf\u5fc5\u987b\u76f8\u7b49(\u5355\u724c\u53ef\u4e0d\u8981)\r\n6. **\u56db\u4e2a**\r\n    - \u53ef\u80fd\u503c\uff1a4\u4e2a3-A\r\n    - \u957f\u5ea6\uff1a4,\r\n    - \u89c4\u5f8b: \u56db\u5f20\u4e00\u6837\u7684\u724c\r\n7. **\u53cc\u738b**\r\n    - \u53ef\u80fd\u503c\uff1axX\r\n    - \u957f\u5ea6\uff1a2\r\n    - \u89c4\u5f8b\uff1a\u5927\u5c0f\u53cc\u738b\r\n\r\n---\r\n### \u724c\u7684\u5c5e\u6027\r\n<pre>\r\n{\r\n    type:{\r\n        \u9ed1\u6843\uff1aspade\r\n        \u7ea2\u6843\uff1aheart\r\n        \u65b9\u5757\uff1ablock\r\n        \u6885\u82b1\uff1aclub\r\n        \u738b\uff1aking\r\n    },\r\n    value:3-2,xX\r\n}\r\n</pre>\r\n---\r\n### \u4f20\u503c\u683c\u5f0f\r\n- group:\u5f53\u524d\u623f\u95f4\r\n- current:\u5f53\u524d\u51fa\u724cid,\r\n- status:\u662f\u5426\u8fc7\u4e86\uff0c0\u4e3a\u8fc7\uff0c1\u4e3a\u7ba1\u4e0a\r\n- win:\u662f\u5426\u80dc\u5229\r\n- type:\u724c\u578b\r\n- number:\u5269\u4f59\u724c\u6570\r\n- person:landlord(\u5730\u4e3b),farmer(\u519c\u6c11)\r\n- data:\u51fa\u7684\u724c\r\n<pre>\r\n{\r\n    group:1,\r\n    current:2,\r\n    status\uff1a1,\r\n    win:false,\r\n    type: two,\r\n    number:12,\r\n    person\uff1afarmer\r\n    data: [\r\n            {\r\n                type:heart,\r\n                value:3\r\n            },\r\n            {\r\n                type:heart,\r\n                value:3\r\n            }\r\n        ];\r\n        \r\n}\r\n</pre>\r\n---\r\n### \u724c\u578b\u5927\u5c0f\r\n\r\n**level**:1\r\n- \u724c\u578b\uff1a\u5355\u724c\uff0c\u4e00\u5806\uff0c\u4e09\u4e2a\uff0c\u56db\u5e26\uff0c\u987a\u5b50\uff0c\u8fde\u5bf9\uff0c\u98de\u673a\r\n\r\n**level**:2\r\n- \u724c\u578b\uff1a\u56db\u4e2a\uff0c\u70b8\u5f39\r\n\r\n**level**:3\r\n- \u724c\u578b\uff1a\u738b\u70b8\r\n### \u89c4\u5219\r\n- \u4e0a\u5bb6\u51fa\u724c\uff0c\u4e0b\u5bb6\u51fa\uff0c\r\n- \u724c\u578b\u5fc5\u987b\u4e00\u81f4\r\n- \u624b\u4e2d\u7684\u724c\u51fa\u5b8c\u5219\u7ed3\u675f\r\n"
 },
 {
  "repo": "rrylee/phppoker",
  "language": "PHP",
  "readme_contents": "# php poker (\u5fb7\u5dde\u6251\u514b)\n\n[![Build Status](https://travis-ci.org/RryLee/phppoker.svg?branch=master)](https://travis-ci.org/RryLee/phppoker)\n\n### Install\n\nYou can use `composer global require rrylee/phppoker` to install the game.\n\nIf you use **linux** or **osx**.\n\nYou should add ~/.config/composer/vendor/bin to your path\n\nIf windows,\n\nJust add the bin to you path manually.\n\n### Feature\n\n- random game\n\nJust check `phppoker random -h` to know the rule.\n\n`phppoker random`\n\n    Please wait...\n    +----------+----------------+\n    | Username | Hand           |\n    +----------+----------------+\n    | Libby    | A\u2665 2\u2666 J\u2660 4\u2666 Q\u2660 |\n    | Velva    | 9\u2666 K\u2666 5\u2663 K\u2665 K\u2665 |\n    +----------+----------------+\n    The results were as follows:\n    Winner: Velva\n    Three of a kind, oh year!\n\n- start game (appoint you and your friends to start)\n\n`phppoker start 2 Foo Bar`\n\n    Although names not enough, i still execute the program, thanks me.\n    Please wait...\n    +----------+-----------------+\n    | Username | Hand            |\n    +----------+-----------------+\n    | Foo      | 5\u2663 3\u2660 K\u2660 7\u2666 8\u2665  |\n    | Bar      | 9\u2660 J\u2663 5\u2665 7\u2660 10\u2663 |\n    +----------+-----------------+\n    The results were as follows:\n    Winner: Bar\n    High card, i am so luck\n\n### TEST\n\n`phpunit` to test poker core code.\n\n### Other\n\nIf you have some suggestion or find a bug, welcome to tell me.\n\n### License\n\nMIT\n"
 },
 {
  "repo": "travisby/altcoinpokerjs",
  "language": "JavaScript",
  "readme_contents": "altcoinpokerpy\n==============\n\nA poker game which utilizes cryptocurrency for real bets\n\nTech stack\n----------\n* NodeJS is unparalleled for parallel communication.  NodeJS allows seamless server <-> client communication, which a realtime poker game will require.\n* Sequelize is the Database Connectivity tool for use with NodeJS which allows us to track game stats, along with users, and their wallets.\n* poker-evaluator prevented us from writing our own five, six, and seven card comparison tool.  This step was definitely not trivial.  We saved hours by using this library.\n* SocketIO is the meat of our server <--> client communication.  Underneath, it uses around five different methods each falling back to another more _sure_ method to make sure communication never dies.  The most useful is websockets, a new HTML5 technology which is great communicating back and forth with clients.  We are able to broadcast, whisper, and transfer data between sectioned off clients in a room, or all clients as a whole.\n\n"
 },
 {
  "repo": "wizardwerdna/pokerstats",
  "language": "Ruby",
  "readme_contents": "= pokerstats\n\nA library for extracting, computing and reporting statistics of poker hands parsed from hand history files.\n\n== Note on Patches/Pull Requests\n \n* Fork the project.\n* Make your feature addition or bug fix.\n* Add tests for it. This is important so I don't break it in a\n  future version unintentionally.\n* Commit, do not mess with rakefile, version, or history.\n  (if you want to have your own version, that is fine but\n   bump version in a commit by itself I can ignore when I pull)\n* Send me a pull request. Bonus points for topic branches.\n\n== Copyright\n\nCopyright (c) 2009 Andrew C. Greenberg. See LICENSE for details.\n"
 },
 {
  "repo": "shige0501/android-sdk-pokeri",
  "language": "Java",
  "readme_contents": "# \u300cAndroid SDK\u30dd\u30b1\u30c3\u30c8\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u300d\n#\u3000\u30b5\u30f3\u30d7\u30eb\u30bd\u30fc\u30b9\n==================\n\n# \u672c\u30da\u30fc\u30b8\u306b\u3064\u3044\u3066\n\u672c\u30da\u30fc\u30b8\u306f\u30012014\u5e743\u67081\u65e5\u306b\u6280\u8853\u8a55\u8ad6\u793e\u69d8\u3088\u308a\u520a\u884c\u3055\u308c\u305f\u300cAndroid SDK\u30dd\u30b1\u30c3\u30c8\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u300d\u306e\u30b5\u30dd\u30fc\u30c8\u30da\u30fc\u30b8\u3067\u3059\u3002\n\u66f8\u7c4d\u306b\u542b\u3081\u306a\u304b\u3063\u305f\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3068\u3001\u66f8\u7c4d\u306e\u6b63\u8aa4\u8868\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u307e\u305f\u3001\u66f8\u7c4d\u767a\u58f2\u5f8c\u3001\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u5074\u306e\u6539\u5909\u3067\u53e4\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u60c5\u5831\u306b\u3064\u3044\u3066\u3082\u3001\u51fa\u6765\u308b\u9650\u308a\u6700\u65b0\u306e\u60c5\u5831\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n## \u6700\u65b0\u60c5\u5831\u306e\u63d0\u4f9b\n\n* \u767a\u58f2\u5f8c\u306e\u30b5\u30dd\u30fc\u30c8\u306b\u95a2\u3057\u3066\u306f\u3001\u4ee5\u4e0b\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002\n  * [SUPPORT.md](./SUPPORT.md)\n* \u6b63\u8aa4\u60c5\u5831\u306f\u4ee5\u4e0b\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\n  * [ERRATA.md](./ERRATA.md)\n\n\n## \u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\n\n* v1.0.0 : \u66f8\u7c4d\u51fa\u7248\u6642\u306e\u30ea\u30ea\u30fc\u30b9\u30d0\u30fc\u30b8\u30e7\u30f3\n * https://github.com/shige0501/android-sdk-pokeri/releases/tag/v1.0.0\n\n## \u6ce8\u610f\u4e8b\u9805\n\u4e00\u90e8\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\uff08Chapter07/storage_SQLite\uff09\u306b\u306f\u3001Apache License \u304c\u9069\u7528\u3055\u308c\u305f\u30b3\u30fc\u30c9\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\n\u3053\u3061\u3089\u306e\u30b3\u30fc\u30c9\u3092\u5229\u7528\u3059\u308b\u969b\u306b\u306f\u305d\u308c\u3089\u306e\u30e9\u30a4\u30bb\u30f3\u30b9\u306b\u5f93\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\n"
 },
 {
  "repo": "adityanaag3/planning-poker-salesforce",
  "language": "Apex",
  "readme_contents": "<p align=\"center\">\n  <img src=\"https://github.com/adityanaag3/planning-poker-heroku/raw/master/src/client/resources/logo.png\" alt=\"Planning Poker Icon\" width=\"150\"/>\n</p>\n\n# Planning Poker App built on Salesforce\n\n[![Github Workflow](https://github.com/adityanaag3/planning-poker-salesforce/workflows/Scratch%20Org/badge.svg?branch=master)](https://github.com/adityanaag3/planning-poker-salesforce/actions?query=workflow%3A%22Scratch+Org%22+branch%3Amaster) [![Github Workflow](https://github.com/adityanaag3/planning-poker-salesforce/workflows/Packaging/badge.svg)](https://github.com/adityanaag3/planning-poker-salesforce/actions?query=workflow%3A%22Packaging%22) [![codecov](https://codecov.io/gh/adityanaag3/planning-poker-salesforce/branch/master/graph/badge.svg)](https://codecov.io/gh/adityanaag3/planning-poker-salesforce)\n\n1. [About](#about)\n1. [Features](#features)\n1. [Technology Stack](#technology-stack)\n1. [Installation](#installation)\n    1. [Host and Player app for Salesforce Users](#host-and-player-app-for-salesforce-users)\n        1. [Using a package](#using-a-package)\n        1. [Using SFDX Commands](#using-sfdx-commands)\n    1. [Player app for Guests](#player-app-for-guests)\n1. [Game Setup](#game-setup)\n    1. [Creating a game](#creating-a-game)\n    1. [Hosting a game](#hosting-a-game)\n    1. [Playing a game on Salesforce](#playing-a-game-on-salesforce)\n    1. [Playing a game on Heroku](#playing-a-game-on-heroku)\n1. [Roadmap](#roadmap)\n1. [Building and contributing](#building-and-contributing)\n\n## About\n\nPlanning poker is a consensus-based, gamified technique for estimating user stories in Scrum. This app allows you to utilize this technique for your planning and is completely built on Salesforce.\n\nThis Planning Poker app offers 2 custom apps on Salesforce: The Host App and the Player App. Both of these apps can only be accessed by licensed users on Salesforce.\n\nYou can optionally also install the guest version of the player app on Heroku to allow players without Salesforce Licenses to paricipate. You'll need a free [Heroku account](https://signup.heroku.com) to set it up. A free account lets you run the game with a small group of players. If you run the game with a larger group, consider upgrading to a [Hobby Dyno](https://www.heroku.com/dynos).\n\n## Features\n\n<ol>\n    <li><b>Choose your own User Story Source</b> Before starting a game, you can select any Salesforce object to be the source of the list of user stories, and save the consensus (Story points) directly to the user story records.&nbsp;</li>\n    <li><b>Use pre-defined card sets or create your own</b> This app comes with pre-defined card sets like Fibonacci and multiples of two. You can also create your own custom card sets.</li>\n    <li><b>Hidden Cards</b> All player's responses are hidden until the timer runs out or until the host chooses to reveal them.</li>\n    <li><b>Host Controls</b> The host has options to show a timer, hide or reveal cards, reset votes and more. The host can also play the game if they choose to.</li>\n</ol>\n\n## Technology Stack\n\n-   The Host App and Player App on Salesforce are built using Lightning Web Components.\n-   The app relies on Application Events, Platform Events and Push Topics to publish game state changes.\n    -   The Lightning web components use the empApi and Lightning Message service to send and receive these events.\n-   A combination of Salesforce data and HTML 5 Local Storage is used to maintain game state across page refreshes.\n-   The Guest Player App is built using Lightning Web Components Open Source and uses Node.js as its backend.\n-   It communicates with Salesforce using Custom Apex REST APIs.\n-   It uses the OAuth JWT Bearer flow to connect with Salesforce.\n-   The Node.js server uses Server Sent Events to deliver notifications to the HTML client.\n\n## Installation\n\n### Host and Player app for Salesforce Users\n\n#### Using a package\n\n<ol>\n    <li>\n        Click the button below to install on Developer Edition, Trailhead Playgroud or Production orgs<br/>\n            <p>\n                <a href=\"https://login.salesforce.com/packaging/installPackage.apexp?p0=04t0o000003jPKdAAM\">\n                    <img src=\"/assets/install-production.png\" alt=\"Install in Production\">\n                </a>\n            </p>\n    </li>\n    <li>\n        Click the button below to install on Sandboxes or Scratch Orgs<br/>\n            <p>\n                <a href=\"https://test.salesforce.com/packaging/installPackage.apexp?p0=04t0o000003jPKdAAM\">\n                    <img src=\"/assets/install-sandbox.png\" alt=\"Install in Sandbox\">\n                </a>\n            </p>\n    </li>\n    <li>Once the installation is successful, Open the Developer Console and go to Debug -> Execute Anonymous Window. </li>\n    <li>Paste the following code, and click <b>Execute</b>\n<pre>\nplanningpokersf.PlanningPokerPostInstallScript.insertPushTopics();</pre>\n    </li>\n    <li>To make a Salesforce user the host of a game, assign the <code>Planning Poker Host</code> permission set to them.</li>\n    <li>Assign the <code>Planning Poker Player</code> permission set to any users who want to participate as players.</li>\n</ol>\n\n#### Using SFDX Commands\n\n<ol>\n    <li>Set up your Salesforce DX environment (see this <a href=\"https://trailhead.salesforce.com/en/content/learn/modules/sfdx_app_dev/sfdx_app_dev_setup_dx\">Trailhead project</a> for guided steps):\n        <ul>\n            <li><a href=\"https://developer.salesforce.com/tools/sfdxcli\">Install Salesforce CLI</a></li>\n            <li>Enable <a href=\"https://developer.salesforce.com/docs/atlas.en-us.sfdx_setup.meta/sfdx_setup/sfdx_setup_enable_devhub.htm\">Dev Hub</a> on a Salesforce org. You can do that on a <a href=\"https://developer.salesforce.com/signup\">free Developer Edition</a>.</li>\n            <li>Authenticate with your Dev Hub org and provide it with an alias (<b>myhuborg</b> in the command below): \n            <pre>sfdx force:auth:web:login -d -a myhuborg</pre>\n            </li>\n        </ul>\n    </li>\n    <li>Open a Terminal and clone the git repository: \n        <pre>git clone https://github.com/adityanaag3/planning-poker-salesforce.git\ncd planning-poker-salesforce</pre>\nTip: you can also download the files from the website if you don't want to install git.\n    </li>\n    <li>Run the installation script. The script deploys the Planning Poker App on a scratch org with a <code>planningpoker</code> alias.\n        <p>MacOS or Linux</p>\n<pre>sh scripts/setup/orgInit.sh</pre>\n        <p>Windows</p>\n<pre>scripts/setup/orgInit.bat</pre>\nOnce the script completes, it will open your new scratch org in a browser tab. If you close the tab or get disconnected, run this command to reopen the org \n<pre>sfdx force:org:open -u planningpoker</pre>\n    </li>\n    <li>To make a Salesforce user the host of a game, assign the <code>Planning Poker Host</code> permission set to them. The above installations script automatically assigns this permission set to the user who runs the script.</li>\n    <li>Assign the <code>Planning Poker Player</code> permission set to any users who want to participate as players.</li>\n</ol>\n\n### Player app for Guests\n\nGuests are players without Salesforce Licenses. Here are a few additional steps you need to follow\n\n<ol>\n    <li>Create a self signed certificate using the command\n    <pre>openssl req  -nodes -new -x509  -keyout private.pem -out server.cert</pre>\n    </li>\n    <li>Create a Connected App in Salesforce with the below configuration\n        <ol>\n            <li>Select <b>Enable OAuth Settings</b></li>\n            <li>Use <code>http://localhost:3001</code> as the Callback URL</li>\n            <li>Select <b>Use digital signatures</b></li>\n            <li>Upload the Certificate generated in the previous step</li>\n            <li>Select <code>api</code> and <code>refresh_token, offline_access</code> in OAuth Scopes</li>\n        </ol>\n    </li>\n    <li>Click on <b>Manage</b> and then click <b>Edit Policies</b></li>\n    <li>Select <b>Admin approved users are pre authorized</b> in <b>Permitted Users</b> and <b>Save</b></li>\n    <li>Select <b>Planning Poker Player</b> in the list of permission sets for the policy</li>\n    <li>Deploy to Heroku using the button below<br/>\n        <p>\n            <a href=\"https://heroku.com/deploy?template=https://github.com/adityanaag3/planning-poker-heroku/master\">\n                <img src=\"https://www.herokucdn.com/deploy/button.svg\" alt=\"Deploy\">\n            </a>\n        </p>\n    </li>\n    <li>\n        Set the enviroment variables as follows\n        <table>\n        <tr>\n          <th>Variable</th>\n          <th>Description</th>\n        </tr>\n        <tr>\n          <td>SF_CONSUMER_KEY</td>\n          <td>Consumer Key of the Connected App</td>\n        </tr>\n        <tr>\n          <td>SF_USERNAME</td>\n          <td>Username of the integration user who has been assigned the <b>Planning Poker Player</b> permission set.</td>\n        </tr>\n        <tr>\n          <td>SF_LOGIN_URL</td>\n          <td>The login URL of your Salesforce org:<br/>\n          <code>https://test.salesforce.com/</code> for scratch orgs and sandboxes<br/>\n          <code>https://login.salesforce.com/</code> for Developer Edition and production</td>\n        </tr>\n        <tr>\n          <td>PRIVATE_KEY</td>\n          <td>Contents of the private.pem file generated from the certificate creation step</td>\n        </tr>\n        <td>SF_NAMESPACE</td>\n          <td>Use <code>planningpokersf</code> if you have installed the host app using the packages listed <a href=\"https://github.com/adityanaag3/planning-poker-salesforce#using-a-package\">here</a>. Else, use the namespace from <a href=\"https://github.com/adityanaag3/planning-poker-salesforce/blob/master/sfdx-project.json\">sfdx-project.json</a> file.</td>\n      </table>\n    </li>\n    <li>Update the <code>Heroku App URL</code> record in the Custom Metadata Type <code>Game Settings</code> with the Heroku App's URL generated in the previous step.</li>\n    <li>Optionally checkout the source code for the app <a href=\"https://github.com/adityanaag3/planning-poker-heroku\">here</a> to make modifications or test locally.</li>\n</ol>\n\n## Game Setup\n\n### Creating a game\n\n1. Create your own Card sets (if needed) by creating new records in the <b>Card Set</b> custom metadata type.\n1. Enter the card values separated by a comma. Optionally you can add <code>?</code> and <code>Pass</code>.\n1. Navigate to the Planning Poker Host App, and click on the Games tab.\n1. Create a new Game by entering a name and optional description\n1. In the \"Game Data Sources\" section on the Game detail page, select the source of your user stories. If you don't have an existing object where you store the user stories, you can use the \"Backlog Item\" object that is provided in this app. Here are the values you need to enter if you choose the \"Backlog Item\" object\n    1. Name Field: User Story\n    1. Description Field: Notes\n    1. Consensus Stored In? : Consensus\n    1. List View: All\n\n### Hosting a game\n\n1. To start hosting the app, navigate to the Host Planning Poker Tab\n2. Select a Game, and click Launch\n3. Share the Game Pin shown with the players and Wait for them to join.\n4. Once they have joined, click on Start.\n5. When the cards are hidden, Players who havent voted are shown in gray color. Whenever a player gives a response, the card's color changes. Once the cards are revealed, the responses are shown.\n6. The Host Controls has the following buttons\n    1. <b>Save Consensus</b> to save the consensus\n    2. <b>Next Story</b> naviagtes to the next story from the list, and also refreshes the players screen with this story.\n    3. <b>Reset Cards</b> deletes all the responses for the current story and forces the players to resubmit their vote.\n    4. <b>End Game</b> ends the current game for the host and all participants. Once a game ends, it cannot be started again.\n\n### Playing a game on Salesforce\n\n1. Navigate to the Play Planning Poker app.\n2. Enter the Game Key that the host gives you.\n3. Once a user story is shown, click on a Card to cast your vote.\n4. Once the host navigates to the next story, your screen refreshes automatically. If not, refresh your screen.\n\n### Playing a game on Heroku\n\n1. Navigate to the unique Game URL shared by the host.\n2. Enter your name.\n3. Once a user story is shown, click on a Card to cast your vote.\n4. Once the host navigates to the next story, your screen refreshes automatically. If not, refresh your screen.\n\n## Roadmap\n\n-   Additional LWC Tests\n\n## Building and contributing\n\nIf you want to build the project from sources and contribute, run `npm install` to install the project build tools.\n"
 },
 {
  "repo": "izqui/Poker.swift",
  "language": "Swift",
  "readme_contents": "Poker.swift [![Build Status](https://travis-ci.org/izqui/Poker.swift.svg?branch=master)](https://travis-ci.org/izqui/Poker.swift)\n=======\n![Playground](https://raw.githubusercontent.com/izqui/Poker.swift/master/assets/value.png)\n\n[This is a work in progress]\n\nYou can play with it opening the Playground through `Poker.xcworkspace`\n\n### Carthage\n```\ngithub \"izqui/Poker.swift\"\n```\n\n### Cocoa Pods\n```\npod \"Poker\"\n```\n"
 },
 {
  "repo": "Yaoir/VideoPoker-Go-WebAssembly",
  "language": "Go",
  "readme_contents": "## Video Poker\n#### by Jay Ts\n\n### Overview\n\nWith the release of version 1.11 in August of 2018, Go came with initial support for WebAssembly, allowing Go to be used for client-side (\"front end\") web development. WebAssembly allows languages other than JavaScript to control the web browser, and it operates as efficiently-executing native compiled code.\n\nThe basic way it works is that the Go compiler produces WebAssembly format rather than a native executable. When the WebAssembly format is loaded by the browser, it is quickly compiled to native machine code and executed.\n\nThere are some very good reasons for preferring to use Go instead of JavaScript, including Go's static typing and efficiency. Since it's a compiled language, most programming errors can be caught by the Go compiler, rather than being found only when the program is running and happens to execute the part of code that contains the bug. Go is designed for concurrency, so you will never have to deal with promises and other constructs that have been added to JavaScript to make it useful for modern web programming.\n\nI was curious about the technology, and as I learned more about it, I noticed an overwhelming consensus that WebAssembly will quickly become a very popular and important technology for web development. There are many plans for the technology, and it is being developed rapidly by collaboration involving Mozilla, Google, and others. All of the major browser developers announced support for WebAssembly in 2017, and this is all very new. So does it work?\n\nI decided to give it a try. I had a video poker game that I wrote in C two years earlier and later translated to both JavaScript and Go. I modified the Go version to be event driven, and then wrote the WebAssembly interface to convert it into a web app.\n\nWith Go's WebAssembly support being so new, I expected to have a lot of problems. But I didn't! I was relieved to find that even with just basic package documentation and a few very simple examples to use as a starting point, it wasn't very difficult to get things working, and everything seems to work almost perfectly. If this is what WebAssembly programming in Go is like at the first release, I'm very enthusiastic about its future.\n\nAt the current release, Video Poker shows the use of client-side Go to implement an MVC (Model-View-Control) web app. The game engine, in `videopoker-web.go`, implements the model. View is handled by the WebAssembly interface in `main.go` that manipulates the DOM, resulting in updates in the web browser, and Control is through mouse clicks and keys typed in the browser window, along with event handling and callbacks in the HTML and the WebAssembly interface in `main.go`.\n\nIt's all written in Go, and I did not need to write a single line of JavaScript. How cool.\n\n## Release Notes\n\nThis has been updated to work with Go version 1.12, which introduced changes to the WebAssembly API in the package syscall/js.\n\nThis release is for late February 2019. The game engine works, and you can see a simple Go/WebAssembly app in action.\n\nI may not have it running at all times, but to play the game, you can try this web page:\n\nhttp://jayts.com/vp\n\nA description of the game and directions for playing are below.\n\nThere are some odd behaviors you may notice in the app:\n\n##### Starting the game\n\nThe app works well with desktop web browsers (Firefox, Chrome, Opera, and Safari), but support on mobile devices is limited. You may need to wait some seconds (up to 15 seconds for Firefox on my old tablet) for the game to load.\n\nOn mobile devices, the app may not load properly either when the app is first started, or when the page is reloaded (refreshed). When it fails, an error message is displayed in the brown text below the \"Video Poker\" title line. This bug seems to be the same as issue #27462:\nhttps://github.com/golang/go/issues/27462\n\nFirefox for Android fails with the error message **Error Loading WebAssembly - out of memory**, and Chromium-based browswers (Google Chrome and Opera) fail with **Error Loading WebAssembly - RangeError: WebAssembly Instantiation: Out of memory: wasm memory**.\n\nIf this happens to you, try restarting the browser, and don't open any other web pages besides the video poker app. This often succeeds with Firefox for Android.\n\n##### Ending the game\n\nUpon a q (\"quit\") or e (\"exit\") keypress, the game shows an end-of-game message,\nthen just stops and becomes completely unresponsive. That is because the Go program\nexited. This is a holdover from the console version, and will work more elegantly\nin a future release. (In other words, this is not a problem with Go/WebAssembly.)\n\nFor now, reload the page to start a new game.\n\n## The Casino Video Poker Game\n\nVideo poker is a popular casino game that is based on five-card draw poker.\n\nThe player is dealt five cards, and is allowed to discard any or all of them.\n(Actually, the player indicates which cards are to be held.)\nThe discarded cards are replaced by cards dealt from the deck.\nThe objective is to obtain a winning hand.\nThere are nine kinds of winning hands. Each has a different probability, with the amount won increasing with the higher improbablity of the hand.\n\n### This Video Poker Game\n\nIt's a great way to practice your strategy for fun, or before going to a casino.\n\nMany variants of video poker are included as options. (Currently accessible only from the keyboard, using the A-I keys.) A few pay better than the default, which is 9/6 Jacks or Better.\n\n### Disclaimer\n\nBy default, Video Poker is intended to closely match the behavior of 9/6\nJacks or Better video poker machines in casinos, and an option allows\nselection of other games and pay tables. However, the author is not an\nexpert on gaming, and no guarantee whatsoever is made that Video Poker's\nbehavior is an exact match to that of any other video poker. Please\ntake that into careful consideration before trying out a real video\npoker machine.\n\n### How to Play Using the Mouse\n\n---\n\nInitally, you may see the following screen:\n\n![loading](images/VideoPoker-01-Loading.png)\n\nJust wait a few seconds for the game to finish loading. If your device is very old or just plain slow, it may take up to 15 seconds. Modern devices will load the game in less than a second.\n\n---\n\nWhen the game is fully loaded, you will see this screen\n\n![gamestart](images/VideoPoker-02-StartGame.png)\n\nClick on the `Deal New Hand` button to see your first hand.\n\n---\n\nYour score drops by 10 each time you deal a new hand because that's how much you are betting.\n\n![draw](images/VideoPoker-03-Draw.png)\n\nNow you can click on the cards you want to hold onto. A green bar appears underneath each card. If you click again, it will \"un-hold\" the card, and the green bar disappears.\n\n---\n\n![draw2](images/VideoPoker-04-Draw-2.png)\n\nThen click on the `Draw Cards` button to replace the cards you want to discard.\n\n---\n\n![nothing](images/VideoPoker-05-00-Nothing.DealNew.png)\n\nOh well, this hand didn't win anything. Maybe next time!\n\nThe game will continue until you either quit or run out of chips.\n\nTo quit, type either `q` or `e`. Your final score will be displayed. To start a new game, reload the web page.\n\n---\n\n#### Winning Hands\n\nHere are the nine types of winning hands.\n\n##### Pair\n\n![pair](images/VideoPoker-05-01-Pair-2.png)\n\nTwo cards of the same value. Here, a pair of queens is shown.\n\nMost variants of video poker pay only when the cards are jacks, queens, kings, or aces. Thus the name \"Jacks or Better\". Tens or Better also pays when the pair is of tens. None of the other hands have this minimal requirement.\n\nThe payout for a pair is the same as the amount of your bet.\n\n---\n\n##### Two Pair\n\n![twopair](images/VideoPoker-05-02-TwoPair-4.png)\n\nTwo different pairs in the same hand. The example shows a pair of 7s and a pair of 5s.\n\nPayout for 9/6 Jacks or Better is twice the bet.\n\n---\n\n##### Three of a Kind\n\n![three](images/VideoPoker-05-03-ThreeOfAKind-6.png)\n\nThree cards of the same value. Three 9s is the example shown.\n\nPayout for 9/6 Jacks or Better is 3 times the bet.\n\n---\n\n##### Straight\n\n![straight](images/VideoPoker-05-04-Straight-1.png)\n\nFive cards with consecutive values. In this case, the cards are 6, 7, 8, 9, and 10.\n\nThey can be any order in the displayed hand.\n\nAn ace can be counted as either one (for example, ace, 1, 2, 3, and 4), or a value above a king. (See the example of a royal flush for that.)\n\nPayout for 9/6 Jacks or Better is 4 times the bet.\n\n---\n\n##### Flush\n\n![flush](images/VideoPoker-05-05-Flush-4.png)\n\nAll cards are in the same suit. This hand shows a flush in hearts.\n\nPayout for 9/6 Jacks or Better is 6 times the bet.\n\n---\n\n##### Full House\n\n![fullhouse](images/VideoPoker-05-06-FullHouse-2.png)\n\nTwo cards of one value, and three cards of another value. This hand has 6s and jacks.\n\nPayout for 9/6 Jacks or Better is 9 times the bet.\n\n---\n\n##### Four of a Kind\n\n![fourofakind](images/VideoPoker-05-07-FourOfAKind-2.png)\n\nFour cards all of the same value. In this case, kings.\n\nPayout for 9/6 Jacks or Better is 25 times the bet.\n\n---\n\n##### Straight Flush\n\n![straightflush](images/VideoPoker-05-08-StraightFlush-1.png)\n\nThe hand is both a straight and a flush. This hand shows a straight flush in clubs, from 5 to 9.\n\nPayout for 9/6 Jacks or Better is 50 times the bet.\n\n---\n\n##### Royal Flush\n\n![royalflush](images/VideoPoker-05-09-RoyalFlush-1.png)\n\nThis is simply an ace-high straight flush (10, jack, queen, king, ace). The example shows a royal flush in hearts.\n\nPayout for 9/6 Jacks or Better is 800 times the bet.\n\n---\n\n### How to Play Using the Keyboard\n\nUsing the keyboard allows for very fast game play.\n\nStart the game and rest the fingers of your right hand on the keyboard\nas when touch typing. Your thumb will be on the space bar, and your\nindex finger through little finger will be on the keys `j`, `k`, `l`, and\nsemicolon (`;`).\n\nPressing the Enter (or Return) key does the same thing as clicking\non the wide button below the five cards.\n\nTo hold or un-hold cards, type the keys corresponding to the cards:\n\n```\nSPACE   Leftmost card\nj       Second card from left\nk       Middle card\nl       Second card from right\n;       Rightmost card\n```\n\nThe keys may be typed in any order, and a key can be entered more than once to toggle the held/discarded state of the card.\n\nThen type the Enter (Return) key to deal. Discarded cards are redealt, and the final hand is shown, along with how it is recognized as either a winning or losing hand, and the new score.\n\n###### Changing Your Bet\n\nYou may change your bet before a new hand is dealt.\nTo increase your bet from the default of 10 chips, type a digit from\n`1` to `5`, along with the keys to hold cards. For example, typing a `3`\nwill change your bet to 30 chips.\n\nIf the number of chips is less than the bet, the bet is automatically reduced to\nmake it equal to the number of chips remaining, where it will stay until you change it.\n\n###### Changing the Variant of Video Poker\n\nThe default is 9/6 Jacks or Better, but you can change it to another variation of video poker game\nby pressing the `A`-`I` keys. Changing the game restarts the game with 1000 chips.\n\n```\n    A\tAll American\n    B\tTens or Better\n    C\tBonus Poker\n    D\tDouble Bonus Poker\n    E\tDouble Bonus Bonus Poker\n    F\t9/6 Jacks or Better (default)\n    G\t9/5 Jacks or Better\n    H\t8/6 Jacks or Better\n    I\t8/5 Jacks or Better\n```\n\nThe variations have slightly different rules and/or pay tables. For the variants of Jacks or Better, the first number is the payout for a full house, and the second is the payout for a flush.\nTens or Better pays for a pair of 10s or better, with only a 6/5 payout for a full house and flush.\nAll American is 8/8, along with 8 times payout for a straight.\n\n### How to Play Using the Debug Console\n\nYou can also play the game in text mode by opening the browser's Developer Tools and playing in the debug console. Make sure to click in the web page's window (that is, the background behind the cards) to put the keyboard focus there instead of in the debug console window.\n\n### Strategy\n\nThere are many websites on the Internet with hints and strategy guides on video poker. Just search for \"video poker strategy\" or something similar.\n\n## Installation and Deployment\n\nThe distribution contains the following files that implement the game:\n\n```\ncss/\n\tnormalize.css\n\tstyles.css\nfavicon.ico\nimg/\n\t01-clubs.png\n\t...\t\t(... card images)\n\t13-spades.png\n\tnocard.png\t(transparent card)\n\tybtile.gif\t(background tile)\nindex.html\nmain.wasm\t(WebAssembly code, produced by compiling main.go and videopoker-web.go)\nwasm_exec.js\t(JavaScript glue code, copied from $GOROOT/misc/wasm)\n```\n\nFor local testing, there is a web server in Go that can be run like this:\n\n```\n$ go run webserver.go\nWeb server running. Listening on \":8080\"\n```\n\nMake sure you are in the directory containing the files in the above list, and start the web server.\n\nThen point your web browser at http://localhost:8080 to run the app.\n\nIf you want to deploy the game on a publicly-accessible web server, copy all of the files in the list to your server. The server must support the wasm MIME type. For Apache 2, you may need to include this line in your `.htaccess` file:\n\n```\nAddType application/wasm wasm\n```\n\n## Building the WebAssembly Program\n\nThe WebAssembly program, `main.wasm`, can be built with the following command:\n\n```\nGOOS=js GOARCH=wasm go build -o main.wasm main.go videopoker-web.go\n```\n\nThe game engine is in `videopoker-web.go`, and the user interface (with calls to `js` package functions) is in `main.go`.\n\nThere is a `Makefile` in the distribution, so if you have `make` installed, you can use the following commands:\n\n```\nmake            # Build main.wasm\n\nmake vet        # run 'go vet' on the sources\n\nmake webserver  # Compile the web server.\nmake test       # Run the web server. (Compile it first!)\n\nmake dep        # Copy the files you need for deployment into a\n                # directory named deploy. (Create it first.)\n```\n\n### Version\n\nThis README is for version 1.0 of the program.\n\n### Author\n\nJay Ts\n\nhttp://jayts.com\n\n### Copyright\n\nCopyright 2016-2019 Jay Ts\n\nReleased under the GNU Public License, version 3.0 (GPLv3)\n(http://www.gnu.org/licenses/gpl.html)\n"
 },
 {
  "repo": "hh2010/hunl",
  "language": "Jupyter Notebook",
  "readme_contents": "## Heads Up No Limit Poker Solver\n\nThe [Jupyter notebook](hunl.ipynb) in this repository largely represents\nthe code from Will Tipton's [Solving Poker with IPython video series](http://www.husng.com/content/will-tipton-hunl-video-pack-2-0).\n\nHowever, I have begun editing the code to add additional features and also\nmake the solver more user friendly.  For example, this code was only intended\nto run on Windows for Python 2, but now also works on Python 3 and MacOS.\n\nThis was accomplished by removing the Equity Array creator functionality.  There are a lot of improvements that need to be made to that part of the program, so for now you can only run the Equity Arrays on the boards that are in the [eqarray](./eqarray) folder.\n\nI have also begun working on a GUI interface for the solver.  Simply type\n``./main.py`` in order to run it.  So far the only functionality are Hand vs Range and\nRange vs Range equity calculations.\n\nThere is a lot of work to do on this project.  I look forward to spending\nmore time on it.  Let me know if you have any questions or comments: [hasan.haq@gmail.com](hasan.haq@gmail.com)\n"
 },
 {
  "repo": "digao-dalpiaz/Planning-Poker",
  "language": "Pascal",
  "readme_contents": "\n# Planning Poker\n\n## Delphi VCL App to send Sprint Planning Estimates remotely\n\n[![ko-fi](https://ko-fi.com/img/githubbutton_sm.svg)](https://ko-fi.com/C0C53LVFN)\n\n## What's New\n\n- 03/09/2021 (Version 1.4.2)\n\n   - New Drop User button in server mode.\n   - Bold font when yourself user in users list.\n\n- 08/10/2020 (Version 1.4.1)\n\n   - Sorting users list by name after sorting by estimate number.\n\n- 07/20/2020 (Version 1.4.0)\n\n   - Updated DzSocket to new authentication control.\n   - Implemented TCriticalSection on client list management.\n   - Implemented check for user name already connected on client connection.\n   - Included server version on wrong version message on client connection.\n\n- 06/16/2020 (Version 1.3.2)\n\n   - Implemented bounds icons on connections list, and sort list by estimate value (issue #5).\n   - Implemented version check on application startup (issue #6).\n\n- 06/07/2020 (Version 1.3.1)\n\n   - Fixed \"Refresh button\" that reveals statistics when a round is in course (issue #4).\n\n- 05/13/2020 (Version 1.3.0)\n\n   - Language support (English and Portuguese-Brazil languages).\n   - Implemented Abstain button, to send an estimate with zero value.\n   - Auto-close round when all clients have estimate done.\n\n## Description\n\nWith this App your team can estimate Sprint task remotely.\nWorking as client/server, your team needs to choose one member to be the Server, and the others will be clients, just like in a Host/Client game.\n\nThe Server and Client App are the same exe, just selecting the operation mode in the Welcome page.\n\nThe App uses my Socket component **DzSocket**.\nYou can get it here: https://github.com/digao-dalpiaz/DzSocket\n\nIt works by default on TCP Port 6696. Of course, you can change this port in the source code.\n\nYou can use in Local Network and/or Internet environment. To use through the Internet, the server side needs to open TCP port, allowing incoming clients connections to the server.\n\nThe operation is quite simple: the users just fill their names and connect to the server. Then the server operator can open a round, when the users will be able to send their estimates. At this time, no one can see the numbers, neither the server. When the estimates are completed, the server operator can close the round, and then the numbers and statistics will be revealed to everyone. :grin:\n\n## Supported languages\n\n- English\n- Portuguese Brazil\n\n## Demo Screens\n\nStart page:\n\n![Start Tab](images/start_tab.png)\n\nPoker page when round is opened:\n\n![Poker Tab Opened](images/poker_tab_opened.png)\n\nPoker page when round is closed:\n\n![Poker Tab Closed](images/poker_tab_closed.png)\n"
 },
 {
  "repo": "xcyuzhen/Poker_server_pomelo",
  "language": "JavaScript",
  "readme_contents": "## Chatofpomelo\n\nA simple chat room experiment using pomelo framework and html5.\nThe chat server currently runs on nodejs v0.8, and should run fine on the latest stable as well.It requires the following npm libraries:\n- pomelo\n- express\n- crc\n\nBoth of them can be installed via 'sh npm-install.sh' (it will install a local copy of all the dependencies in the node_modules directory)\n\n## Viewing\n\n * Visit [demo game github](https://github.com/NetEase/chatofpomelo) to get the source code and install it on your local machine.\n\n## Configuration\n\n * The server setting (server number, host and port, etc.) can be configured in 'game-server/config/servers.json' and 'game-server/config/master.json' files.\n * Other settings (log4js etc.) also can be configured in 'game-server/config' folder.\n\n## Deployment\nEnter chatofpomelo/game-server, and run 'pomelo start' or 'node app.js' in order to start the game server.\nEnter chatofpomelo/web-server, and run 'node app.js' in order to start the web server, and access '3001' port (which can be changed in 'app_express.js') to load game.\n\n## Monitoring\n\nPomelo framework provides monitoring tool: AdminConsole. After game is loaded, you can access '7001' port and monitor the game information(operating-system, process, userInfo, sceneInfo, etc.).\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2013 NetEase, Inc. and other contributors\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OT`HER DEALINGS IN THE SOFTWARE.\n"
 },
 {
  "repo": "lzientek/pokerPlanning",
  "language": "TypeScript",
  "readme_contents": "## Poker planning cards [![Build Status](https://travis-ci.org/lzientek/pockerPlanning.svg?branch=master)](https://travis-ci.org/lzientek/pockerPlanning)\n# Angular2 MEAN - QuickStart application with ExpressJS, MongoDB, Gulp and Typescript (Repository Pattern)\n\n## Run services\n\n#### Start\n\nWith `docker-compose`\n```bash\ndocker-compose up -d\n```\n\n**Or**\n\n```bash\ndocker build -t pokerplanning .\ndocker run -d --name mongo -p 27017:27017 mongo:3.4\ndocker run -d --name pokerplanning --link mongo:mongo -p 80:80 -e PORT=\"80\" -e NODE_ENV=\"production\" -e dbURI=\"mongodb://mongo:27017/pokerPlanning\" pokerplanning\n```\n\n#### Remove\n\nWith `docker-compose`\n```bash\ndocker-compose down\n```\n\n**Or**\n\nContainer\n```bash\ndocker rm -f pokerplanning mongo\n```\nImages\n```bash\ndocker rmi pokerplanning mongo:3.4\n```\n## Prerequisites\n\n1. Latest version of Node to be installed. (7.5.*^)\n2. Install MongoDB and make sure it is running on default port 27017 (if not then please configure constants.ts and change the connection for mongoDB). (3.2.*^)\n\n## Steps to Run\n```sh\nnpm install\nnpm run dev\n```\n\n## Global packages requierement\n```\nnpm install typescript -g\nnpm install typings -g\nnpm install gulp -g\n\n```\n## Dependencies\n\n1. Angular 2\n2. TypeScript\n3. Gulp\n4. ExpressJS\n5. NodeJS\n6. TsLint\n7. MongoDB\n8. Sass\n9. Bootstrap\n"
 },
 {
  "repo": "Nisarg12/pokeruby-tools",
  "language": null,
  "readme_contents": "# pokeruby-tools\n\nThis repository contains Windows binaries of the tools required to build [pokeruby](https://github.com/pret/pokeruby)\nYou may need the Visual C++ runtime DLL to run some of these executables. Please choose the file called `vc_redist.x86.exe`.\n\nCopy the `tools/` folder over the `tools/` folder in your pokeruby directory.\n"
 },
 {
  "repo": "ta-datapt-bcn/lab-poker-odds",
  "language": "Jupyter Notebook",
  "readme_contents": "![Ironhack logo](https://i.imgur.com/1QgrNNw.png)\n\n# Lab | Calculating Game of Chances\n\n## Introduction\n\nIn the lesson we have shown you how to use Python to calculate the probabilities and odds of the royal flush and straight flush in poker. In this lab you will calculate the probabilities of all other hands such as four of a kind, full house, flush, straight, and so on. We'll also provide you a mini lesson on how to apply statistical skills in real poker playing by calculating the pot odds and outs.\n\n## Getting Started\n\nOpen `main.ipynb` in Jupyter Notebook and work on the challenges.\n\n## Deliverables\n\n- `main.ipynb` with your responses.\n\n## Submission\n\nUpon completion, add your version of `main.ipynb` to git. Then commit git and push your branch to the remote.\n\n## Resources\n\n[Learn How to Play Poker - Texas Hold 'Em (aka Texas Holdem)](https://www.instructables.com/id/Learn-To-Play-Poker---Texas-Hold-Em-aka-Texas-Ho/)\n\n[How to play Texas Hold'em](https://www.youtube.com/watch?v=KKMac6tQKiI)\n\n[Poker Odds for Dummies](https://www.cardschat.com/odds-for-dummies.php)\n\n[Texas Hold'em Poker Odds Calculator](https://www.cardplayer.com/poker-tools/odds-calculator/texas-holdem)\n"
 },
 {
  "repo": "Pik-9/PokerTH-Tracker",
  "language": "C++",
  "readme_contents": "# PokerTH Tracker\n\nThis is a simple poker statistics program to analyse your opponents'\nbehaviour.\nIt reads the PokerTH logs, so you should collect them for a more\nprecise analysis.\n\n\n## Prerequirements\n\nIn order to compile and link this application you need the Qt development files.\nOn Ubuntu and derived distributions you can install anything you need with:\n  \n  $ sudo apt-get install git cmake build-essential qt5-default qttools5-dev-tools libqt5sql5-sqlite libqt5xml5\n\n\n## Compile and Install\n\nThis program has two build systems: QMake and CMake. You can choose.\n\n### CMake\n```bash\ncd /path/to/PokerTH_tracker\nmkdir build\ncmake -B build . && make -C build\nsudo make install\n```\n  \n### QMake\n```bash\ncd /path/to/PokerTH_tracker\nmkdir build\ncd build\nqmake ../PokerTH_tracker.pro && make\nsudo make install\n```\n\n  \n## Special thanks to\n\nthe internet portal openclipart.org for providing funny cliparts\nto be used in PokerTH Tracker. All cliparts are published under\nthe terms of an open source license.\n\n\n## PGP\n\nAll precompiled binaries since v0.2.2 are signed with my PGP key 992E9547.\nIf it is not signed or the signature is broken, you should not trust\nthe source!\n\n\n## License\n\n(C) 2015-2021 Daniel Steinhauer (9 of Spades)\n\nPokerTH Tracker is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nPokerTH Tracker is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n"
 },
 {
  "repo": "technologiespro/poker-core",
  "language": "TypeScript",
  "readme_contents": "# @smartholdem/poker-core v1.0.0\n\nA headless no-limit Texas Hold'em engine for SmartHoldem Card Engine\n\n> TechnoL0g\n> technolog@smartholdem.io\n> https://smartholdem.io\n\n## Installation\n\n```bash\nnpm install @smartholdem/poker-core\n```\n\n## Usage\n\nThis engine is designed around an instance of a `Table`. Simply create a new table, seat players, and deal the cards!\n\n```js\nconst { Table } = require(\"@smartholdem/poker-core\");\n\n// new Table(minBuyIn = 1000, smallBlind = 5, bigBlind = 10);\nconst table = new Table();\n\n// table.sitDown(id, buyIn, seatNumber?);\ntable.sitDown(\"Player 1\", 1000);\ntable.sitDown(\"Player 2\", 1000);\ntable.sitDown(\"Player 3\", 1000);\n```\n\nOnce there are two or more players seated at the table you can begin the hand and then read from the player list to find their hole cards.\n\n```js\ntable.dealCards();\n\n// Find all player hole cards.\ntable.players.forEach(player => console.log(player.holeCards));\n```\n\nBegin a game loop and make players take action until the hand is over.\n\n```js\n// Loop until there are no more betting rounds.\nwhile (table.currentRound) {\n\n  // Find what actions are available for the current player.\n  console.log(table.currentActor.legalActions());\n\n  // Make the current player take action.\n  table.currentActor.callAction();\n  // table.currentActor.checkAction();\n  // table.currentActor.betAction(20);\n  // table.currentActor.raiseAction(40);\n  // table.currentActor.foldAction();\n\n}\n```\n\nOnce all betting is done and the hand is over you can read the winners.\n\n```js\nconsole.log(table.winners);\n```\n\n## Example of a complete hand\n\n```js\nconst { Table } = require(\"@smartholdem/poker-core\");\n\nconst table = new Table();\n\ntable.sitDown(\"Player 1\", 1000);\ntable.sitDown(\"Player 2\", 1000);\ntable.sitDown(\"Player 3\", 1000);\n\ntable.dealCards();\n\n// player 1 (dealer) is first to act.\n// Player 2 and 3 posted blinds.\ntable.currentActor.callAction();\n\n// player 2 is first to act on the flop.\ntable.currentActor.checkAction();\n\n// player 3 decides to open the bet on the flop.\ntable.currentActor.betAction(20);\n\n// player 1 raises.\ntable.currentActor.raise(40);\n\n// player 2 calls.\ntable.currentActor.call();\n\n// player 3 calls player 1's raise.\ntable.currentActor.call();\n\n// betting has been met, player 2 is first to act on the turn and all three decide to check.\ntable.currentActor.checkAction();\ntable.currentActor.checkAction();\ntable.currentActor.checkAction();\n\n// player 2 is first to act on the river and decides\n// to open the bet at $40.\ntable.currentActor.betAction(40);\n\n// player 3 raises to $60.\ntable.currentActor.raiseAction(60);\n\n// player 1 folds.\ntable.currentActor.foldAction();\n\n// Declare winner(s)!\n\nconsole.log(table.winners);\n\n```\n\n## Card\n\n### Properties\n\n#### `color: string`\n\nReturns either red (`\"#ff0000\"`) or black (`\"#000000\"`);\n\n#### `rank: string`\n\nReturns one of: `\"A\"`, `\"K\"`, `\"Q\"`, `\"J\"`, `\"T\"`, `\"9\"`, `\"8\"`, `\"7\"`, `\"6\"`, `\"5\"`, `\"4\"`, `\"3\"`, or `\"2\"`.\n\n#### `suit: string`\n\nReturns one of: `\"c\"`, `\"d\"`, `\"h\"`, or `\"s\"` for club, diamond, heart, or spade.\n\n#### `suitChar: string`\n\nReturns one of the following unicode characters: `\"\u2663\"`, `\"\u2666\"`, `\"\u2665\"`, `\"\u2660\"`.\n\n## Table\n\n### Properties\n\n#### `actingPlayers: Player[]`\n\nThis property will return a list of all players that are still in play and able to make decisions. (i.e. players who haven't folded and are not all-in)\n\n#### `activePlayers: Player[]`\n\nThis property will return a list of all players who have not folded. Similar to `actingPlayers` except it does not include players who are all-in.\n\n#### `autoMoveDealer: boolean = true`\n\nThis property determines if the dealer position should automatically increment when `dealCards` is called. By default this is `true`. However it can be useful to know who the next dealer will be _before_ calling `dealCards` to begin a new hand. In that case you can set this to false. Just keep in mind that you will have to manually call `table.moveDealer(table.dealerPosition + 1)` before calling `dealCards` or you will begin a new hand from the same dealer position as the previous hand.\n\n#### `bigBlind: number = 10`\n\nThe amount of the big blind bet for the table. Default is `20`.\n\n#### `bigBlindPlayer?: Player`\n\nIf there is a big blind position then this will return the player in that position. Otherwise this returns `undefined`.\n\n#### `bigBlindPosition?: number`\n\nIf there is an active hand then this property will return the position of the big blind. Otherwise it will return `undefined`.\n\n#### `buyIn: number = 1000`\n\nThe minimum buy-in amount for the table. Default is `1000`.\n\n#### `communityCards: Card[]`\n\nThis is an array of any community cards on the table.\n\n#### `currentActor?: Player`\n\nIf there is an active hand then this property will return the current player who needs to act. Otherwise this will return `undefined`.\n\n#### `currentBet?: number`\n\nIf there is an active bet that other players must call then this property will return that value. If nobody has opened the bet yet during a betting round then this will be `undefined`.\n\n#### `currentPosition?: number`\n\nIf there is an active hand then this property will return the position of the current actor. Otherwise it will return `undefined`.\n\n#### `currentPot: { amount: number, eligiblePlayers: Player[] }`\n\nThis property returns the currently active pot, ignoring any side pots.\n\n#### `currentRound?: string`\n\nIf there is an active betting round then this will return one of: `\"pre-flop\"`, `\"flop\"`, `\"turn\"`, `\"river\"`. Otherwise this will return `undefined`.\n\n#### `dealer?: Player`\n\nIf there is at least one player at the table then the dealer position will be assigned and this property will return the player in the dealer seat. Otherwise this will return `undefined`.\n\n#### `dealerPosition?: number`\n\nIf there is an active hand then this property will return the position of the dealer. Otherwise it will return `undefined`.\n\n#### `handNumber: number`\n\nThis property returns a number representing the number of hands played at this table so far.\n\n#### `lastActor?: Player`\n\nIf `lastPosition` is defined then this will return the player in that position. Otherwise this will return `undefined`.\n\n#### `lastPosition?: number`\n\nIf there is an active hand then this property will return the position of the last person to act for the current betting round. Otherwise this will return `undefined`.\n\n#### `lastRaise?: number`\n\nIf a player has made a raise during the current betting round then this property will return the amount of that raise. Otherwise it will return `undefined`.\n\n#### `players: (Player|null)[]`\n\nThis will return an array of all active players currently at the table. See the `Player` properties below to see what they store.\n\n#### `pots: { amount: number, eligiblePlayers: Player[] }[]`\n\nThis will return an array of all pots on the table. Usually there is only one, but of course side pots can form. Each pot stores the amount and the players eligible to win the pot.\n\n#### `sidePots?: { amount: number, eligiblePlayers: Player[] }[]`\n\nThis will return an array of all pots except for the currently active pot. If there are no side pots then this returns `undefined`.\n\n#### `smallBlind: number = 5`\n\nThe amount of the small blind bet for the table. Default is `10`.\n\n#### `smallBlindPlayer?: Player`\n\nIf there is a small blind position then this will return the player in that position. Otherwise this returns `undefined`.\n\n#### `smallBlindPosition?: number`\n\nIf there is an active hand then this property will return the position of the small blind. Otherwise this will return `undefined`.\n\n#### `winners?: Player[]`\n\nIf winners have been determined then then this property will store them. Usually there is only one winner but there can be split pots, in which case this will contain all of the winners in a draw. If there are no winners then this will return `undefined`.\n\n### Methods\n\n#### `cleanUp(): void`\n\nResets the table. Good for manually clearing out the winner state after a hand if you need to render the clean table before starting the next hand.\n\n#### `dealCards(): void`\n\nThis method begins the hand. Assigns players their hole cards and starts the first round of betting.\n\n#### `moveDealer(seatNumber: number): void`\n\nThis method is mostly used internally but it can also be used externally to force the dealer and subsequent blinds into a new position. By default the `dealCards` method calls this when starting new hands to automatically increment the dealer position. If for some reason you want to manually increment the dealer position between hands then set `autoMoveDealer` to `false`. This can be useful if you need to know who the next dealer will be _before_ you call `dealCards` to start the next hand.\n\n> _**Note:** This method automatically accounts for empty seats and looping back around to seat 0. So calling `table.moveDealer(table.dealerPosition + 1)` is perfectly valid even if `table.dealerPosition` is the last seat at the table or if the next seat is empty._\n\n#### `sitDown(id: string, buyIn: number, seatNumber?: number): number`\n\nThis method allows you to seat a new player at the table. If there is an active hand then they are automatically marked as `folded: true` so that the action will skip them until a new hand is started. This method returns the seat index the player was placed at. You can optionally specify the seat index to put the player into (0 - 9). An error will throw if a player is already in the specified seat.\n\n#### `standUp(player: Player | string): void`\n\nThis method allows you to remove a player from the table. It accepts a `Player` object or an ID string. If there is an active hand then the player is marked to leave but not actually removed. When a new hand is dealt any players marked to leave will be removed. This is so the hand logic is not interrupted when gathering bets from folded players.\n\n## Player\n\n### Properties\n\n#### `bet: number = 0`\n\nThis property stores the amount of the individual player's current bet. By default this is zero until they make a bet.\n\n#### `folded: boolean = false`\n\nThis property stores whether or not the player has folded. By default this is `false`.\n\n#### `hand: { name: string, descr: string }`\n\nThis property returns the user's current hand. `name` is a string representing the type of hand such as `\"Flush\"` or `\"Two Pair\"`. `descr` is a string that contains the type of hand and the cards that make up that hand such as `\"Two Pair, A's and Q's\"`.\n\n#### `holeCards?: [Card, Card]`\n\nIf there is an active hand this property will return a two-element array containing the player's hole cards they have been dealt. Otherwise this will return `undefined`.\n\n#### `id: string`\n\nA unique ID for the player. This is passed into the `table.sitDown` method when adding a player to the table and it allows you to uniquely identify the player in your own code.\n\n#### `left: boolean = false`\n\nThis property is `true` if the player has \"stood up\" from the table but there is an active hand. Players marked with `left: true` will be removed from the table when the hand is over. This way they are still present while the hand they were part of plays out.\n\n#### `raise?: number`\n\nThis property stores the amount of the player's last raise. If they have not made a raise then this property is `undefined`.\n\n#### `showCards: boolean = false`\n\nThis property can be used to determine if the player's hole cards should be shown. This is marked `true` if the player is still in play during showdown where winners are determined.\n\n#### `stackSize: number`\n\nThis property stores the amount of money the player has left. The initial value is passed in as the second argument when you call `table.sitDown`.\n\n#### `table: Table`\n\nThis property is simply a convenience reference back to the table the player is part of.\n"
 },
 {
  "repo": "mproberts/smallblind",
  "language": "JavaScript",
  "readme_contents": "# smallblind\n### A poker library for NodeJS\n\nThis library provides card handling, hand evaluation, table logic, betting rules, and more.\n\n[![Build Status](https://secure.travis-ci.org/mproberts/smallblind.png)](http://travis-ci.org/mproberts/smallblind)\n\n## License\n\nSource code for _smallblind_ is Copyright \u00a9 2012 [Mike Roberts](mailto:mike@kik.com).\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \u201cAS IS,\u201d WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
 },
 {
  "repo": "studiomobile/poker-eval-node",
  "language": "C++",
  "readme_contents": ""
 },
 {
  "repo": "jamak/pokerbot",
  "language": "Python",
  "readme_contents": ""
 },
 {
  "repo": "beli-sk/pokercards",
  "language": "Python",
  "readme_contents": "Poker Cards\n===========\n\nPython modules for working with poker cards and managing games.\n\nLocations\n---------\n\nPoker Cards packages are available from Cheese shop (PyPI)\nat https://pypi.python.org/pypi/pokercards\n\nDocumentation is available at http://pythonhosted.org/PokerCards/\n\nThe `project page <https://github.com/beli-sk/pokercards>`_ is hosted on Github.\n\nIf you've never worked with *git* or contributed to a project on Github,\nthere is a `quick start guide <https://help.github.com/articles/fork-a-repo>`_.\n\nIf you find something wrong or know of a missing feature, please\n`create an issue <https://github.com/beli-sk/pokercards/issues>`_ on the project\npage. If you find that inconvenient or have some security concerns, you could\nalso drop me a line at <devel@beli.sk>.\n\nHow to use\n----------\n\nInstall\n~~~~~~~\n\n::\n\n    pip install pokercards\n\nLicense\n-------\n\nCopyright 2013 Michal Belica <devel@beli.sk>\n\n::\n\n    Poker Cards is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n    \n    Poker Cards is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n    \n    You should have received a copy of the GNU General Public License\n    along with Poker Cards.  If not, see < http://www.gnu.org/licenses/ >.\n\n\n"
 },
 {
  "repo": "jacobhyphenated/JQMPokerPlayerClient",
  "language": "JavaScript",
  "readme_contents": "jQuery Mobile Poker Player Client\n========\n\nThis is a jQuery Mobile application, designed to be cross browser/device. This app will give a player full functionality and control over his/her hand during a poker game that is run by the poker server.  The poker server must be set up and configured separately.  For more information on how the poker game is supposed to run, see the documentation for the Poker Server.\n\nVersion\n----\nThis application is designed to work with Poker Server API Version 0.4. This is subject to change.\n\nTechnical Stuff\n---\nThis app is based entirely on jQuery and jQuery mobile, with no other JavaScript frameworks. I toyed with the idea of adding something like knockout.js, but it seemed like overkill for the scope of this project.  It was also nice to get a feel for what JQM can do by itself, without aid of third party libraries.\n\nAs this project was mostly for me to learn JQM, there are probably some ways to improve performance or other optimizations.  Pull requests are always welcome.\n\nLicense\n----\nThe MIT License (MIT)\n\nCopyright (c) 2013 Jacob Kanipe-Illig\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
 },
 {
  "repo": "montyaahad/PokerStarsBot",
  "language": "C#",
  "readme_contents": "# PokerStarsBot\n\nPoker Bot for Pokerstars.com\n\nCurrently it's able to extract card from hand and community.\nNeed to implement logic and action for regarding cards.\n"
 },
 {
  "repo": "tue-5ARA0-2021-Q3/poker-server-backend",
  "language": "Python",
  "readme_contents": "# Kuhn Poker Server Backend implementation\n\nThis repository contains the server-side implementation for the [Kuhn Poker client](https://github.com/tue-5ARA0-2021-Q3/poker-server-client). Your agent wil interact with the server for game-coordination and administration. You can start this server locally to start a game yourself and test your implementation. \n\nIn order to locally run a game server, you need to create a new python virtual environment (either within your IDE or manually, see this [link](https://code.visualstudio.com/docs/python/environments#_create-a-virtual-environment) for the VSCode as an example):\n\n```bash\n# macOS/Linux\n# You may need to run sudo apt-get install python3-venv first\npython3 -m venv .venv\n\n# Windows\n# You can also use py -3 -m venv .venv\npython -m venv .venv\n```\n\n\nAfter you've created you will need to activate the virtual environment every time you start working on your project or create a new terminal session:\n\n\n```bash\n# macOS/Linux\nsource .venv/bin/activate\n\n# Windows\n.venv\\Scripts\\activate\n```\n\n> **_NOTE:_** On the newer versions of Windows running scripts can be disabled by default. You can use `Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope Process` command to override this setting and to allow running scripts in the current terminal session.\n\nThen install the required packages:\n\n```bash\n# macOS/Linux\npip install -r requirements-linux.txt\n\n# Windows\npip install -r requirements-windows.txt\n```\n\nThen generate the game protocol and setup the database: \n\n```bash\n# macOS/Linux\ngenerate-proto.sh\nmigrate.sh\n\n# Windows\n.\\generate-proto.sh\n.\\migrate.sh\n```\n\nYou can now start a local server instance:\n\n```bash\n# macOS/Linux, you can use `py -3` for Windows instead of `python`\npython manage.py runserver --settings=configurations.dev.settings\n```\n\nServer by default will create several test player's tokens and will print it at startup. \nHere is an output example of 2 test players with `da1ff3c4-69c7-44a9-a217-8ec6c746d875` and \n`8b06fe61-e581-4ef7-b382-6916345052f6` tokens.\n\n```bash\n> python manage.py runserver --settings=configurations.dev.settings\nPerforming system checks...\n\nTest player token: 5e527757-0187-4511-a7dd-825fe2014d0a\nTest player token: f9265243-b208-48b4-9cb9-7a865b6baaed\n```\n\nOnce the local server has been started you can use client application to play games with test tokens locally:\n\n```\n# Example for client application\npython main.py --token \"da1ff3c4-69c7-44a9-a217-8ec6c746d875\" --play \"bot\"\n```\n\n# Bot players\n\nBy default local server instance enables bots, but does not have any bot implementations. To add a new bot create `bots` folder and add a subfolder with the corresponding agent implementation. You may use your own agent as a bot player or simply use skeleton code from the [`poker-server-client`](https://github.com/tue-5ARA0-2021-Q3/poker-server-client) repository that makes random actions.\n\n# Docker Desktop\n\nIt is also possible to run local server instance with Docker. If you have [Docker Desktop](https://www.docker.com/products/docker-desktop) installed and running on your machine use the following command to start local server:\n\n```bash\n# First usage of this command is generally very slow. Subsequent usages will execute faster and will reuse cached docker image\ndocker-compose up\n```\n\n> **_NOTE:_** You may need to run `docker-compose up` twice for the first time to properly generate server database layout.\n  "
 },
 {
  "repo": "VoVampire/poker",
  "language": "Go",
  "readme_contents": "# \u5fb7\u5dde\u6251\u514b\u9898\u76ee\u8bf4\u660e\n\n        \u6251\u514b\u724c52\u5f20\uff0c\u82b1\u8272\u9ed1\u6843spades\uff0c\u7ea2\u5fc3hearts\uff0c\u65b9\u5757diamonds\uff0c\u8349\u82b1clubs\u540413\u5f20\uff0c2-10\uff0cJ\uff0cQ\uff0cK\uff0cA\n        Face\uff1a\u53732-10\uff0cJ\uff0cQ\uff0cK\uff0cA\uff0c\u5176\u4e2d10\u7528T\u6765\u8868\u793a\u3002\n        Color\uff1a\u5373S(spades)\u3001H(hearts)\u3001D(diamonds)\u3001C(clubs)\n        \u7528 Face\u5b57\u6bcd+\u5c0f\u5199Color\u5b57\u6bcd\u8868\u793a\u4e00\u5f20\u724c\uff0c\u6bd4\u5982As\u8868\u793a\u9ed1\u6843A\uff0c\u5176\u4e2dA\u4e3a\u724c\u9762\uff0cs\u4e3aspades\uff0c\u5373\u9ed1\u6843\uff0cAh\u5373\u7ea2\u5fc3A\uff0c\u4ee5\u6b64\u7c7b\u63a8\n        \n        \u5b9e\u73b0\u529f\u80fd:\n        1.\u73b0\u5206\u522b\u7ed9\u5b9a\u4efb\u610f\u4e24\u624b\u724c\u5404\u67095\u5f20\uff0c\u4f8b\u5982\uff1aAsAhQsQhQc\uff0cvs KsKhKdKc2c\uff0c\u8bf7\u6309\u5fb7\u5dde\u6251\u514b\u7684\u5927\u5c0f\u89c4\u5219\u6765\u5224\u65ad\u53cc\u65b9\u5927\u5c0f\u3002\u4ee3\u7801\u8981\u6c42\u6709\u901a\u7528\u6027\uff0c\u53ef\u4ee5\u4efb\u610f\u8f93\u5165\u4e00\u624b\u724c\u6216\u51e0\u624b\u724c\u6765\u8fdb\u884c\u6bd4\u8f83\u3002\n        2.\u6269\u5c55:\u5982\u679c\u7ed9\u5b9a\u4e24\u624b\u54047\u5f20\u724c\uff0c\u5206\u522b\u627e\u51fa\u6700\u5927\u7684\u724c\u578b\uff08\u9009\u53d6\u5176\u4e2d5\u5f20\uff09\uff0c\u5e76\u6bd4\u8f83\u5927\u5c0f\n        3.\u6269\u5c55:\u5982\u679c\u6709\u4e00\u5f20\u724c\u662f\u8d56\u5b50\uff08\u5373\u53ef\u4ee5\u5f53\u4efb\u4f55\u724c\uff09\uff0c\u600e\u4e48\u6bd4\u8f83\n        \n        \u8bc4\u5224\u6807\u51c6\uff1a1\u3001\u7ed3\u679c\u6b63\u786e 2\u3001\u4ee3\u7801\u53ef\u8bfb\u6027 3\u3001\u4ee3\u7801\u884c\u6570 4\u3001\u8fd0\u884c\u901f\u5ea6\uff0c\u6bd4\u5982\u53ef\u4ee5\u63a5\u53d71\u4e07\u624b\u7684\u8f93\u5165\u6765\u8bc4\u4f30\u901f\u5ea6 5\u3001\u53ef\u6269\u5c55\u6027\uff0c\u662f\u5426\u652f\u63017\u5f20\uff1f\u662f\u5426\u53ef\u4ee5\u652f\u6301\u8d56\u5b50?\n        \u5956\u52b1\uff1a\u65f6\u95f4\u8981\u6c422\u6708\u5e95\u5b8c\u6210,\u8fd9\u6b21\u7b2c\u4e00\u540d\u5956\u52b1\u4ef7\u503c500\u7684\u6bd4\u7279\u5e01\u3002\n\n# \u5fb7\u5dde\u6251\u514b\u7684\u5927\u5c0f\u89c4\u5219\n\n       \u7687\u5bb6\u540c\u82b1\u987a\n    \u3000\u3000\u540c\u82b1\u8272\u7684A, K, Q, J\u548c10.\n    \u3000\u3000\u5e73\u624b\u724c\uff1a\u5728\u644a\u724c\u7684\u65f6\u5019\u6709\u4e24\u526f\u591a\u526f\u7687\u5bb6\u540c\u82b1\u987a\u65f6\uff0c\u5e73\u5206\u7b79\u7801\u3002\n    \n    \u3000\u3000\u540c\u82b1\u987a\n    \u3000\u3000\u4e94\u5f20\u540c\u82b1\u8272\u7684\u8fde\u7eed\u724c\u3002\n    \u3000\u3000\u5e73\u624b\u724c\uff1a\u5982\u679c\u644a\u724c\u65f6\u6709\u4e24\u526f\u6216\u591a\u526f\u540c\u82b1\u987a\uff0c\u8fde\u7eed\u724c\u7684\u5934\u5f20\u724c\u5927\u7684\u83b7\u5f97\u7b79\u7801\u3002\u5982\u679c\u662f\u4e24\u526f\u6216\u591a\u526f\u76f8\u540c\u7684\u8fde\u7eed\u724c\uff0c\u5e73\u5206\u7b79\u7801\u3002\n    \n    \u3000\u3000\u56db\u6761\n    \u3000\u3000\u5176\u4e2d\u56db\u5f20\u662f\u76f8\u540c\u70b9\u6570\u4f46\u4e0d\u540c\u82b1\u7684\u6251\u514b\u724c\uff0c\u7b2c\u4e94\u5f20\u662f\u968f\u610f\u7684\u4e00\u5f20\u724c\n    \u3000\u3000\u5e73\u624b\u724c\uff1a\u5982\u679c\u4e24\u7ec4\u6216\u8005\u66f4\u591a\u7ec4\u644a\u724c\uff0c\u5219\u56db\u5f20\u724c\u4e2d\u7684\u6700\u5927\u8005\u8d62\u5c40\uff0c\u5982\u679c\u4e00\u7ec4\u4eba\u6301\u6709\u7684\u56db\u5f20\u724c\u662f\u4e00\u6837\u7684\uff0c\u90a3\u4e48\u7b2c\u4e94\u5f20\u724c\u6700\u5927\u8005\u8d62\u5c40\uff08\u8d77\u811a\u724c\uff09\u3002\u5982\u679c\u8d77\u811a\u724c\u4e5f\u4e00\u6837\uff0c\u5e73\u5206\u5f69\u6c60\u3002\n    \n    \u3000\u3000\u6ee1\u5802\u5f69\uff08\u846b\u82a6\uff0c\u4e09\u5e26\u4e8c\uff09\n    \u3000\u3000\u7531\u4e09\u5f20\u76f8\u540c\u70b9\u6570\u53ca\u4efb\u4f55\u4e24\u5f20\u5176\u4ed6\u76f8\u540c\u70b9\u6570\u7684\u6251\u514b\u724c\u7ec4\u6210\n    \u3000\u3000\u5e73\u624b\u724c\uff1a\u5982\u679c\u4e24\u7ec4\u6216\u8005\u66f4\u591a\u7ec4\u644a\u724c\uff0c\u90a3\u4e48\u4e09\u5f20\u76f8\u540c\u70b9\u6570\u4e2d\u8f83\u5927\u8005\u8d62\u5c40\u3002\u5982\u679c\u4e09\u5f20\u724c\u90fd\u4e00\u6837\uff0c\u5219\u4e24\u5f20\u724c\u4e2d\u70b9\u6570\u8f83\u5927\u8005\u8d62\u5c40\uff0c\u5982\u679c\u6240\u6709\u7684\u724c\u90fd\u4e00\u6837\uff0c\u5219\u5e73\u5206\u5f69\u6c60\u3002\n    \n    \u3000\u3000\u540c\u82b1\n    \u3000\u3000\u6b64\u724c\u7531\u4e94\u5f20\u4e0d\u6309\u987a\u5e8f\u4f46\u76f8\u540c\u82b1\u7684\u6251\u514b\u724c\u7ec4\u6210\n    \u3000\u3000\u5e73\u624b\u724c\uff1a\u5982\u679c\u4e0d\u6b62\u4e00\u4eba\u6293\u5230\u6b64\u724c\u76f8\uff0c\u5219\u724c\u70b9\u6700\u9ad8\u7684\u4eba\u8d62\u5f97\u8be5\u5c40\uff0c\u5982\u679c\u6700\u5927\u70b9\u76f8\u540c\uff0c\u5219\u7531\u7b2c\u4e8c\u3001\u7b2c\u4e09\u3001\u7b2c\u56db\u6216\u8005\u7b2c\u4e94\u5f20\u724c\u6765\u51b3\u5b9a\u80dc\u8d1f\uff0c\u5982\u679c\u6240\u6709\u7684\u724c\u90fd\u76f8\u540c\uff0c\u5e73\u5206\u5f69\u6c60\u3002\n    \n    \u3000\u3000\u987a\u5b50\n    \u3000\u3000\u6b64\u724c\u7531\u4e94\u5f20\u987a\u5e8f\u6251\u514b\u724c\u7ec4\u6210\n    \u3000\u3000\u5e73\u624b\u724c\uff1a\u5982\u679c\u4e0d\u6b62\u4e00\u4eba\u6293\u5230\u6b64\u724c\uff0c\u5219\u4e94\u5f20\u724c\u4e2d\u70b9\u6570\u6700\u5927\u7684\u8d62\u5f97\u6b64\u5c40\uff0c\u5982\u679c\u6240\u6709\u724c\u70b9\u6570\u90fd\u76f8\u540c\uff0c\u5e73\u5206\u5f69\u6c60\u3002\n    \n    \u3000\u3000\u4e09\u6761\n    \u3000\u3000\u7531\u4e09\u5f20\u76f8\u540c\u70b9\u6570\u548c\u4e24\u5f20\u4e0d\u540c\u70b9\u6570\u7684\u6251\u514b\u7ec4\u6210\n    \u3000\u3000\u5e73\u624b\u724c\uff1a\u5982\u679c\u4e0d\u6b62\u4e00\u4eba\u6293\u5230\u6b64\u724c\uff0c\u5219\u4e09\u5f20\u724c\u4e2d\u6700\u5927\u70b9\u6570\u8005\u8d62\u5c40\uff0c\u5982\u679c\u4e09\u5f20\u724c\u90fd\u76f8\u540c\uff0c\u6bd4\u8f83\u7b2c\u56db\u5f20\u724c\uff0c\u5fc5\u8981\u65f6\u6bd4\u8f83\u7b2c\u4e94\u5f20\uff0c\u70b9\u6570\u5927\u7684\u4eba\u8d62\u5c40\u3002\u5982\u679c\u6240\u6709\u724c\u90fd\u76f8\u540c\uff0c\u5219\u5e73\u5206\u5f69\u6c60\u3002\n    \n    \u3000\u3000\u4e24\u5bf9\n    \u3000\u3000\u4e24\u5bf9\u70b9\u6570\u76f8\u540c\u4f46\u4e24\u4e24\u4e0d\u540c\u7684\u6251\u514b\u548c\u968f\u610f\u7684\u4e00\u5f20\u724c\u7ec4\u6210\n    \u3000\u3000\u5e73\u624b\u724c\uff1a\u5982\u679c\u4e0d\u6b62\u4e00\u4eba\u6293\u5927\u6b64\u724c\u76f8\uff0c\u724c\u70b9\u6bd4\u8f83\u5927\u7684\u4eba\u8d62\uff0c\u5982\u679c\u6bd4\u8f83\u5927\u7684\u724c\u70b9\u76f8\u540c\uff0c\u90a3\u4e48\u8f83\u5c0f\n    \u3000\u3000\u724c\u70b9\u4e2d\u7684\u8f83\u5927\u8005\u8d62\uff0c\u5982\u679c\u4e24\u5bf9\u724c\u70b9\u76f8\u540c\uff0c\u90a3\u4e48\u7b2c\u4e94\u5f20\u724c\u70b9\u8f83\u5927\u8005\u8d62\uff08\u8d77\u811a\u724c\uff09\u3002\u5982\u679c\u8d77\u811a\u724c\u4e5f\u76f8\u540c\uff0c\u5219\u5e73\u5206\u5f69\u6c60\u3002\n    \n    \u3000\u3000\u4e00\u5bf9\n    \u3000\u3000\u7531\u4e24\u5f20\u76f8\u540c\u70b9\u6570\u7684\u6251\u514b\u724c\u548c\u53e6\u4e09\u5f20\u968f\u610f\u7684\u724c\u7ec4\u6210\n    \u3000\u3000\u5e73\u624b\u724c\uff1a\u5982\u679c\u4e0d\u6b62\u4e00\u4eba\u6293\u5230\u6b64\u724c\uff0c\u5219\u4e24\u5f20\u724c\u4e2d\u70b9\u6570\u5927\u7684\u8d62\uff0c\u5982\u679c\u5bf9\u724c\u90fd\u4e00\u6837\uff0c\u5219\u6bd4\u8f83\u53e6\u5916\u4e09\u5f20\u724c\n    \u3000\u3000\u4e2d\u5927\u7684\u8d62\uff0c\u5982\u679c\u53e6\u5916\u4e09\u5f20\u724c\u4e2d\u8f83\u5927\u7684\u4e5f\u4e00\u6837\u5219\u6bd4\u8f83\u7b2c\u4e8c\u5927\u7684\u548c\u7b2c\u4e09\u5927\u7684\uff0c\u5982\u679c\u6240\u6709\u7684\u724c\u90fd\u4e00\u6837\uff0c\n    \u5219\u5e73\u5206\u5f69\u6c60\u3002\n    \n    \u3000\u3000\u5355\u5f20\u5927\u724c\n    \u3000\u3000\u65e2\u4e0d\u662f\u540c\u4e00\u82b1\u8272\u4e5f\u4e0d\u662f\u540c\u4e00\u70b9\u6570\u7684\u4e94\u5f20\u724c\u7ec4\u6210\u3002\n    \u3000\u3000\u5e73\u624b\u724c\uff1a\u5982\u679c\u4e0d\u6b62\u4e00\u4eba\u6293\u5230\u6b64\u724c\uff0c\u5219\u6bd4\u8f83\u70b9\u6570\u6700\u5927\u8005\uff0c\u5982\u679c\u70b9\u6570\u6700\u5927\u7684\u76f8\u540c\uff0c\u5219\u6bd4\u8f83\u7b2c\u4e8c\u3001\u7b2c\u4e09\u3001\u7b2c\u56db\u548c\u7b2c\u4e94\u5927\u7684\uff0c\u5982\u679c\u6240\u6709\u724c\u90fd\u76f8\u540c\uff0c\u5219\u5e73\u5206\u5f69\u6c60\u3002\n"
 },
 {
  "repo": "huderlem/pokered_battle_factory",
  "language": "Assembly",
  "readme_contents": "# Pok\u00e9mon Red Battle Factory\n\nThis is a remake of the Battle Factory from the Battle Frontier.  It is a fork of the pokered disassembly project, which is linked to below.\n\nDisassembly of [**Pok\u00e9mon Red**](https://github.com/iimarckus/pokered)\n\nIt also uses the [**Gen 2 Graphics**](https://github.com/dannye/pokered-gen-II) patch created by dannye.\n\nIt uses the following ROM as a base:\n\n\tPokemon Red (UE) [S][!].gb\n\t(MD5: 3d45c1ee9abd5738df46d2bdda8b57dc)\n\nTo set up the repository, see [**INSTALL.md**](INSTALL.md).\n\n\n## See also\n\n* Disassembly of [**Pok\u00e9mon Crystal**](https://github.com/kanzure/pokecrystal)\n\n* irc: **nucleus.kafuka.org** [**#skeetendo**](https://kiwiirc.com/client/irc.nolimitzone.com/?#skeetendo)\n\n"
 },
 {
  "repo": "LRFalk01/pokerboy",
  "language": "JavaScript",
  "readme_contents": "# Pokerboy\n\nTo start your Phoenix app:\n\n  * Install dependencies with `mix deps.get`\n  * Create and migrate your database with `mix ecto.create && mix ecto.migrate`\n  * Start Phoenix endpoint with `mix phoenix.server`\n\nNow you can visit [`localhost:4000`](http://localhost:4000) from your browser.\n\nReady to run in production? Please [check our deployment guides](http://www.phoenixframework.org/docs/deployment).\n\n## Learn more\n\n  * Official website: http://www.phoenixframework.org/\n  * Guides: http://phoenixframework.org/docs/overview\n  * Docs: https://hexdocs.pm/phoenix\n  * Mailing list: http://groups.google.com/group/phoenix-talk\n  * Source: https://github.com/phoenixframework/phoenix\n"
 },
 {
  "repo": "norkator/poker-pocket-backend",
  "language": "JavaScript",
  "readme_contents": "![poker_pocket_promo](./images/poker_pocket.png) \n\n# Poker Pocket Backend\n\nNitramite Poker Pocket back end server currently running Texas Hold'em games. It's powering \n[Nitramite Poker Pocket game](https://pokerpocket.nitramite.com/). This back end is pretty light weight \nand can run thousands of rooms easily. \n\nYou are **NOT** allowed to copy this back end and make your own game but you can join development here. \n\n### Help required\n\nOriginal reason I shared this code here was that I wanted to <b>find someone who wants to \ncreate Virtual Reality front end</b> with Unity or any other game development platform.\nTime has passed so much that it may never happen. If you are interested you can \ncontact me via email at: nitramite@outlook.com or open issue about it.\n\nI currently don't have plan to develop this further but will keep game running.\n\nI currently have two different front end clients. You may want to take a look at them to \nsee what it's all about.\n\nWeb UI: https://pokerpocket.nitramite.com/  \nWeb UI source: https://github.com/norkator/Poker-Pocket-Web-Client  \nAndroid client: https://play.google.com/store/apps/details?id=com.nitramite.pokerpocket\n\nThis web ui can be used for testing this back end. See instructions below.\n\n\n### Prerequisites\n* Download handRanks.dat file from: [https://github.com/christophschmalhofer/poker/blob/master/XPokerEval/XPokerEval.TwoPlusTwo/HandRanks.dat](https://github.com/christophschmalhofer/poker/blob/master/XPokerEval/XPokerEval.TwoPlusTwo/HandRanks.dat)  \nand place it under `/app` folder.\n* Get database platform PostgreSQL https://www.postgresql.org/\n\n\n### Basic setup\n1. config.js has some configurations you may want to change.\n2. create `.env` file with following contents and provide database connection properties.\n\n```dotenv\nDB_DIALECT=postgres\nDB_USER=database_user\nDB_HOST=database_host\nDB_DATABASE=PokerPocket\nDB_PASSWORD=database_password\nDB_PORT=5432\n\nHTTPS_KEY=/.../privkey.pem\nHTTPS_CERT=/.../cert.pem\nHTTPS_CA=/.../chain.pem\n```\n\nhttps key, cert, ca are not needed for development use.\n\n3. Run `npm install`\n4. Run `npm run dev` on development environment (uses nodemon)\n5. Backend is now running.\n6. Open https://pokerpocket.nitramite.com/ and use connection switch set as `dev` to open connection\nto localhost web socket.\n\n\n### Backend & front end communication\n\nTo create front end, it's essential to know how communication works. \nData transmission itself is build on top of web sockets and every message moves with specific `key` name.\n\nI try explain steps in simple way:\n\n1. New connection comes from front end.\n2. Web socket is created and `connectionId` is generated which is basically integer with auto increment. \nAlso webSocket library generates `socketKey` which is also returned and used for verification of requests from front end.\n3. After step 2. front end asks rooms via `getRooms` or `getSpectateRooms` key which is then answered by same key name but result having array of rooms.\n4. Front end renders rooms or spectating rooms and then click is handled by sending `selectRoom` or `selectSpectateRoom` key to back end.\n5. User is then appended to selected room and back end will send room parameters with key `roomParams` to render view according to state of room.\n6. All the other actions like calling, raising, folding, getting stats, login, creating account is only a \nmatter of key and parameters needed to call that specific action. I fill more details later but everything is visible at \ncode how to do it.\n\n\n### Note\n.gitignore is ignoring HandRanks.dat which is huge file\n\n\n### Database\nBefore this project used MySQL NodeJS package but\nit's now changed to Sequelize to support multiple database platforms.\nSee https://github.com/sequelize/sequelize for different connectors. \nThis back end come by default with  `pg` and `pg-hstore` for Postgres.\n\n\n## Authors\n\n* **Martin K.** - *Initial work* - [norkator](https://github.com/norkator)\n\n\n## License\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\"><img alt=\"Creative Commons -licene\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png\" /></a><br />Licensed with <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/\">Creative Commons Attribution - NonCommercial - NoDerivatives 4.0 International - license</a>.\n"
 },
 {
  "repo": "girving/poker",
  "language": "C++",
  "readme_contents": "Poker analysis tools\n====================\n\nThis code consists of two parts: an exact win probability calculator written\nin C++ and OpenCL, and Python code analyzing Nash equilibria.  Here are\ndetails about each one:\n\nExact win/loss probabilities\n----------------------------\n\nThe `exact` program computes the exact rational number probability of a win,\nloss, or tie given any pair of preflop hold'em hands.  The code is written in\na combination of C++ and OpenCL (with a bit of OpenMP to take advantage of\nmultiple OpenCL devices).  The core routine is a vectorized, branch free\nfunction that takes a 7 card hand represented as a bit set and uses bit\ntwiddling to check for the various poker hands (straights, flushes, pairs, etc.).\n\nComputing the entire table of win probabilities for all pairs of preflop hands\ntakes around 5 minutes on a recent machine.  For convenience (and regression\ntesting) the results are included as exact.txt.\n\n### Usage\n\nTo build `exact`, run\n\n    make\n\nCurrently the Makefile is specific to Mac OS X, but this can easily be fixed.\nThe only dependencies are OpenCL and OpenMP.  On Mac this means 10.6 or later\nis required.\n\nTo rebuild the table of exact probabilities from scratch, run\n\n    make exact.txt\n\nwhich does\n\n    time ./exact all > exact.txt\n\nOther ways to invoke exact include\n\n    ./exact           # print usage information\n    ./exact hands     # print the list of two card hold'em hands\n    ./exact test      # run regression tests\n    ./exact some 100  # compute win/loss/tie probabilities for 100 random pairs of hands\n\nNash equilibria\n---------------\n\nThe `heads-up` Python script computes Nash equilibria for an extremely simplified\nhold'em game with the following rules:\n\n1. There are two players, Alice and Bob.\n2. Bob posts a $1 blind.\n3. Alice either folds or raises a fixed amount b, for a total bet of $1+b.\n4. Bob either calls or folds.\n\nTo emphasize, the bet amount b is frozen in advance; Alice does not get to choose it.\n\n### Dependencies\n\n`heads-up` has the following dependencies\n\n* [python](http://python.org)\n* [numpy](http://numpy.scipy.org): Requires a patched version (see below)\n* [scipy](http://www.scipy.org)\n* [matplotlib](http://matplotlib.sourceforge.net)\n* [cvxopt](http://abel.ee.ucla.edu/cvxopt)\n\nOn a Mac, these can be obtained through [MacPorts](http://www.macports.org) via\n\n    sudo port install py26-numpy py26-scipy py26-matplotlib py26-cvxopt\n\ncvxopt is GPL, so we isolate the LP solver interface inside the `cvxopt` script.\nThus, the `cvxopt` script is GPL, but the rest of the code is BSD.\n\n*Update*: In order to take advantage of the exact probabilities provided by `exact`,\n`heads-up` uses a fixed precision rational number dtype that I wrote for numpy.\nUnfortunately, this uncovered several bugs in numpy.  Therefore, in order to use\n`heads-up`, you'll need to get numpy from my temporary fork here:\n\n    https://github.com/girving/numpy/tree/fixuserloops\n\nThese changes should be incorporated in the main numpy git repo fairly soon.\n\n### Usage\n\nHere are some example ways to use `heads-up`:\n\n    ./heads-up -h                    # print usage information\n    ./heads-up -b 2                  # determine the Nash equilibrium for bet level 2\n    ./heads-up --plot -b 10 -n 100   # plot Alice's equity for b = 0 to 10\n    ./heads-up --max -b 10           # find the bet level that maximizes Alice's equity\n\nContributing\n------------\n\nWant to contribute?  Great!  The Nash equilibrium computation could be generalized in\nmany different ways, and `exact` (which is already almost entirely an exercise in\npointless optimization) could always be optimized further.  If you have changes you\nwant to push back, either send pull requests or email to ask for commit access.\n"
 },
 {
  "repo": "juhank/poker",
  "language": "Java",
  "readme_contents": "INTRODUCTION \n============\nThis is a simple 5-card draw poker game written for Android.\n\nINSTALLATION\n============\n\nOpen https://github.com/juhank/poker/blob/master/qrcode.png and scan the qr-code with an Android phone. You must have set the option \"Unknown sources\" under Application Settings. \n\nHOW TO PLAY\n============\n\nThe upper cards show the Dealer cards. The lower cards show your cards. Pot amount and winner info is printed to the middle. Chipcounts are printed on the right side of the screen above/below cards. To choose bet amount, press the leftmost button with bet value on it. This will change the bet value. Press bet to bet, check to check. Dealer never folds at the moment. Also, names are hard-coded so Dealer = Peedu and Player = Juhan. \n\n"
 },
 {
  "repo": "Bitou2k/PokeRPG",
  "language": null,
  "readme_contents": "PokeRPG - Pok\u00e9mon Massively Multiplayer Online RPG\n===================================\nPokeRPG is a project done in HTML5 using Canvas2D. It is based on the Pok\u00e9mon games for GameBoy Advance with multiplayer support. Soon the first Preview of this great game that will be a success.\n\nIn PokeRPG, the player has access to almost all features of the Pok\u00e9mon games released by Nintendo. It can capture Pok\u00e9mon in a variety of versions, face the gym leaders (chiefs), and exchange Pok\u00e9mon duel with thousands of players attending the game.\n\nGeneral Options menu and gameplay are also still in the implementation phase.\n\nLike us on Facebook: www.facebook.com/PokeRPG\nVisit us: www.pokerpg.com.br\n\nCurrent Development Progress\n----------------------------\n\nWorld Data:\n * Kanto region\n * Hoenn region\n * Johto region\n * Map connections\n * NPC spawns\n * Object spawns\n * Signpost spawns\n * Wild encounter rates\n\nPokemon Data:\n * Pokemon data\n * EV support\n * IV support\n * Move learning\n * Evolution support\n * Nature support\n * Ability suport\n * Move data\n\nGraphics Engine:\n * Support for animated tiles \n * Support for basic player customization\n * Warp/Door animations\n * Move animations\n * Cliff jump animation\n\nBattle Engine:\n * Wild encounters \n * Escaping from battle\n * Battle support for Moves\n * Battle support for Switching\n * Battle support for Items\n * PvP Battles\n * Trainer Battles\n\nGame Engine:\n * Account system\n * Trade system\n * Chat system\n * Speech system\n * Interface system\n * Item system\n\nNPC Data:\n * NPC spawns\n * NPC interacting\n * Quests\n\nSound System:\n * Background sounds\n * User Interface sound effects\n * Volume Changer\n * Battle sounds\n * Move sounds\n"
 },
 {
  "repo": "aparrett/poker-api-deprecated",
  "language": "JavaScript",
  "readme_contents": "# poker-api\n\nTexas Hold'em poker! Click [here](https://poker-friends.herokuapp.com/) to play.\n\n## Tech Stack\n\n-   Node.js\n-   Express\n-   MongoDB\n-   Jest\n\n## Project setup\n\n```\nnpm install\n```\n\n### Run the server\n\n```\nnpm run dev\n```\n\n### Run your lint and tests\n\n```\nnpm run test\n```\n\n### Local Database Setup\n\nThese are the Mac instructions for setting up the database in your local. The Windows instructions for installing Mongo are to be added later but a quick Google search should do the trick.\n\n1. Install brew if you don't have it already (this takes a while)\n\n```\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n2. Install and Run MongoDb\n\n```\nbrew tap mongodb/brew\nbrew install mongodb-community@4.2\nbrew services start mongodb-community@4.2\n```\n\n3. Download the database GUI of your choice to view the data in a more user-friendly way. I recommend Robo 3T.\n   https://robomongo.org/download\n\n- Click 'Create' to create a new connection (use the defaults).\n- Click Save\n- Click Connect\n\nOn the first run, there won't be anything in the database. Once you start adding things in the application, those collections will show up.\n\n## How to Contribute\n\n1. Install Git on your machine.\n   https://git-scm.com/book/en/v2/Getting-Started-Installing-Git\n\n2. Fork the repository to your own account.\n\n3. Clone the repository into your projects folder on your computer.\n\n`git clone https://github.com/<your-user-name>/poker-api.git`\n\n3. Make your changes to the code. Feel free to create new branches if you would like but it is not necessary at this point.\n4. Commit your code with a thoughtful message.\n\n`git commit -am 'Added the ability to shuffle cards'`\n\n5. Push to your repository.\n\n`git push`\n\n6. Create a pull request.\n\n-   Go to the [original repository](https://github.com/aparrett/poker-api) and click the \"New Pull Request\" button.\n-   Follow the steps.\n\n7. Once the code is reviewed, it will be merged into master on the original repository.\n\n## Known Issues\n\n* Restarting the server makes a user's hand disappear until they refresh their browser.\n* The styles are not responsive.\n* Because the app is on Heroku and I'm not paying for the live server, the UI and API take serveral seconds to boot up.\n\n## To-Do\n\nSend me an email at `anthonyparrett7@gmail.com` for an invite to the [Trello board](https://trello.com/b/pBbdpTSe/appstories) where I am tracking the to-do list.\n"
 },
 {
  "repo": "aha-develop/planning-poker",
  "language": "TypeScript",
  "readme_contents": "# Planning poker\n\nThis [Aha! Develop](https://www.aha.io/develop/overview) extension enables teams\nto play planning poker for estimating the effort on records in Aha!. Estimates\ncan be entered by multiple users simultaneously. You only see the estimates \nfrom your team mates after entering your own estimate.\n\nIt provides these contributions:\n\n* Planning poker attribute - Add the planning poker attribute to a custom\n  layout for Epics, Features or Requirements.\n\n## Demo\n\n![Demo](planning-poker.gif)\n\n## Installing the extension\n\n**Note: In order to install an extension into your Aha! Develop account, you must be an account administrator.**\n\nInstall the planning poker extension by clicking [here](https://secure.aha.io/settings/account/extensions/install?url=https%3A%2F%2Fsecure.aha.io%2Fextensions%2Faha-develop.planning-poker.gz).\n\n## Working on the extension\n\nInstall `aha-cli`:\n\n```sh\nnpm install -g aha-cli\n```\n\nClone the repo:\n\n```sh\ngit clone https://github.com/aha-develop/planning-poker.git\n```\n\n**Note: In order to install an extension into your Aha! Develop account, you must be an account administrator.**\n\nInstall the extension into Aha! and set up a watcher:\n\n```sh\naha extension:install\naha extension:watch\n```\n\nNow, any change you make inside your working copy will automatically take effect in your Aha! account.\n\nWhen you are finished working on your extension, build it so that others can install it through its URL:\n\n```sh\naha extension:build\n```\n\nTo learn more about developing Aha! Develop extensions, including the API reference, the full documentation is located here: [Aha! Develop Extension API]()\n"
 },
 {
  "repo": "rdvdijk/ruby-poker",
  "language": "Ruby",
  "readme_contents": "A ruby library for playing Texas Hold'em poker.\n\nThe goal is to create an online poker application using this library.\n\nNote: Developed using Ruby 1.9, code breaks in 1.8. The card shorthand\nnotation (7.\u2663) is not possible in 1.8.\n\nStill to-do:\n- Gameplay:\n  - Bet\n  - Raise\n  - Call\n  - Fold\n  - Pot\n  - All-in\n  - Split-pots ..\n- Add generic compare to RankedHand\n- Dealer/blinds when players are sitting out\n\nIdeas:\n- Add poker nicknames for hole cards (Anna Kournikova for Ace-King, etc.)\n\nSome useful wikipedia articles:\n- http://en.wikipedia.org/wiki/Glossary_of_poker_terms\n- http://en.wikipedia.org/wiki/List_of_playing_card_nicknames\n- http://en.wikipedia.org/wiki/Betting_in_poker\n\nSome rules:\n- http://en.wikipedia.org/wiki/Blind_(poker)\n  \"The small blind is placed by the player to the left of the dealer button\n   and the big blind is then posted by the player to the left of the person\n   sitting in the small blind.\n   The one exception to this rule is when there are only 2 players (a\n   \"heads-up\" game). In this case the player on the button is the small blind,\n   and the other player is the big blind.\"\n"
 },
 {
  "repo": "tomo-tomoarch/YokosukaPokerVer0.2",
  "language": "C#",
  "readme_contents": ""
 },
 {
  "repo": "EmeraldCityProgrammingGroup/tracker_poker",
  "language": "Ruby",
  "readme_contents": "=============\nTracker_Poker\n=============\n\nrepo   :: https://github.com/EmeraldCityProgrammingGroup/tracker_poker\nheroku :: http://tracker-poker.herokuapp.com/\n\n\nDESCRIPTION\n------------\n\nTracker_Poker is a way to automate the planning poker \nmeeting on an Agile project using a mobile phone.\n\nTracker_Poker is still in early development, so now \nis the time to make your mark on the project.\n\n\nFEATURES/PROBLEMS\n------------------\n\n* TBD\n\n\nSYNOPSYS\n---------\n\n* % TBD/USAGE\n\n\nINSTALL\n---------\n\n    # Checkout the project\n    $ git clone git://github.com/EmeraldCityProgrammingGroup/tracker_poker\n    $ cd tracker_project\n    \n    # Install the project dependencies\n    $ gem install bundler\n    # If you do not have postgres installed, use this:\n    $ bundle install --without production \n    # If you do have postgres installed, use this:\n    $ bundle install\n\n    # Set up the development database.\n    $ rake db:migrate\n\n    # Start the local web server\n    $ rails server\n\n    You should then be able to navigate to `http://localhost:3000/` in a web browser.\n\n\nHERKOKU SETUP\n---------------\n\n    If you wish to host a publicly available copy of Tracker_Poker,\n    the easiest option is to host it on [Heroku](http://heroku.com/).\n\n    # Make sure you have the Heroku gem\n    $ gem install heroku\n\n    # Create your app. Replace APPNAME with whatever you want to name it.\n    $ heroku create APPNAME --stack bamboo-mri-1.9.2\n   \n    # Define where the user emails will be coming from\n    # (This email address does not need to exist)\n    $ heroku config:add MAILER_SENDER=noreply@example.org\n\n    # Allow emails to be sent\n    $ heroku addons:add sendgrid:starter\n\n    # Deploy the first version\n    $ git push heroku master\n\n    To deploy it to Heroku, make sure you have a local copy of the \n    project; refer to the previous section for instuctions. Then:\n\n    # Set up the database\n    $ heroku rake db:setup\n\n    Once that's done, you will be able to view your site at \n    `http://APPNAME.heroku.com`.\n\n\nTO CONTRIBUTE\n----------------\n\nTracker_Poker is currently welcoming contributions.  If you'd like to help:\n\nHere are some general guidelines for contributing:\n\n* Check the [issue queue] in Pivotal Tracker TBD-URL\n    for a list of the major features which are yet to be implemented.\n    These have the `feature` and `unstarted` labels.  If a feature\n    you'd like isn't there, add  an issue.\n* If you'd like to take ownership of one of the features, leave a\n    comment on the issue queue indicating that you're working on it.\n\n* If you'd like to discuss anything about the issue with other\n    developers, do so on the [Emerald Programming Group]\n    (http://groups.google.com/group/TBD) mailing list.\n\n* Fork github project: \n    https://github.com/EmeraldCityProgrammingGroup/tracker_poker\n* Make your changes on a branch, and use that branch as the base\n    for pull requests.\n* We encourage you try to break changes up into the smallest logical\n    blocks possible. We would prefer to receive many small commits\n    to one large  one in a pull request.\n* Feel free to open unfinished pull requests if you'd like to discuss\n    work in progress, or would like other developers to test it.\n* All patches changes need to be covered by tests and should not\n    break the existing tests, unless a current test is invalidated\n    by a code change. \n\n* Read over documentation.\n\n* Run `rake test` to check the Rails test suite is green.  \n\n* If you have any questions please post them to the <emerald city> group.\n\n* Also attend the <emerald city> Saturday classes.\n\n\nLICENSE\n---------\n\n* **Please put your open source license here.**\n* **If you need help, check out this: http://www.opensource.org/licenses **\n\n\nREADME FORMAT\n--------------\n\nSee http://docutils.sourceforge.net/docs/user/rst/quickref.html\nfor more information about the format used in the file. It is \ncalled **Restructured Text**.\n\n\n\n"
 },
 {
  "repo": "COO-EACH-USP-2021/Poker-ACH2003-04",
  "language": "Java",
  "readme_contents": "# Poker-ACH2003-04\n\nExerc\u00edcio de Computa\u00e7\u00e3o Orientada a Objeto da turma ACH2003-04, ministrada pelo Professor Marcelo Chaim.<br>\n\n## Instru\u00e7\u00f5es e Observa\u00e7\u00f5es\n\nSintam-se livres para editar e adicionar qualquer classe e m\u00e9todo que acharem necess\u00e1rio.<br>\n\nOs m\u00e9todos que devem ser criados est\u00e3o na parte de \"Issues\". Nessas Issues, tem coment\u00e1rios com suges\u00f5es de implementa\u00e7\u00e3o, mas voc\u00eas n\u00e3o precisam segu\u00ed-las, voc\u00eas est\u00e3o livres para implementar esse programa do jeito que quiserem.\n\nMAS \u00c9 IMPORTANTE EXPLICAR O FUNCIONAMENTO DOS M\u00c9TODOS ATRAV\u00c9S DE COMENT\u00c1RIOS E DA DOCUMENTA\u00c7\u00c3O.\n\nOBS: Escrever uma boa documenta\u00e7\u00e3o no README conta como contribui\u00e7\u00e3o ;)\nEnt\u00e3o n\u00e3o deixem de registrar como o programa funciona.\n\nNo final desse README tem uma sess\u00e3o \"Contribuidores\" para voc\u00eas se registrarem.\n\n## Explica\u00e7\u00e3o das classes\n\n### Card\n\nCarta possui dois atributos: seu valor (rank) e seu naipe (suit).\n\n### Player\n\nJogador possui dois atributos: Array de Cards e um valor indicando o qu\u00e3o alta sua m\u00e3o \u00e9\n\n### Table\n\nPossui tr\u00eas atributos:\n\n- Array de Players\n- Valor inteiro highHandIndex\n- Array final de Strings da Classe hands com a sequ\u00eancia ordenada do maior para o menor das poss\u00edveis m\u00e3os do poker\n\nOs m\u00e9todos s\u00e3o:\n\n- defineHand chama os m\u00e9todos que identificam cada uma das m\u00e3os do poker\n- isRoyalFlush, isStraightFlush, isFourKind, isFullHouse, isFlush, isStraight, isThreeKind, isTwoPair, isPair\n- individualTest imprime as 5 cartas testadas e a sua respectiva classifica\u00e7\u00e3o\n- sortCards \u00e9 o m\u00e9todo que ordena da maior carta para a menor carta. Ela utiliza o algoritmo Quicksort. Para isso ela utiliza os m\u00e9todos:\n  - Quicksort, trocaValorEntreCards, particiona\n\n## Contribuidores\n\n<b> Escreva aqui seu nome, NUSP e usu\u00e1rio do Github </b>\n\n- Felipe Furquim - 11208030 - FvFurquim\n- F\u00e1bio Yamada - 5690619 - fabioheiji\n- Silas Bovolin Reis  - 11796739 - SilasReisUSP\n- Felipe Oliveira - 11925242 - felipeoes\n"
 },
 {
  "repo": "Zack-Tillotson/Simple-Poker-Classification",
  "language": "Java",
  "readme_contents": "Simple Poker Classification \n\nZack Tillotson - Colorado School of Mines\nAndrew Fager - Colorado School of Mines\n\n- Source of data: http://poker.cs.ualberta.ca/IRCdata/\n\nfor numeric action\nk=1\nc=2\nb=3\nr=4\nA=5"
 },
 {
  "repo": "samuelneff/poker-tutorial",
  "language": null,
  "readme_contents": ""
 },
 {
  "repo": "AussieSeaweed/pokerface",
  "language": "Python",
  "readme_contents": "PokerFace\n=========\n\nPokerFace is a Python package for various poker tools.\n\nThe following features are present in PokerFace...\n\n- Types for cards and their components and related helper functions\n   - Rank\n   - Suit\n   - Ranks\n   - Card\n   - Hole Card\n- Various types of poker decks\n   - Standard Deck\n   - Short Deck\n- Poker hand evaluations\n   - Standard Evaluator\n   - Greek Evaluator\n   - Omaha Evaluator\n   - Short-Deck Evaluator\n   - Deuce-to-Seven Lowball Evaluator\n   - Ace-to-Five Lowball Evaluator\n   - Badugi Evaluator\n- Poker game variants\n   - Texas Hold'em\n      - Fixed-Limit Texas Hold'em\n      - No-Limit Texas Hold'em\n   - Omaha Hold'em\n      - Pot-Limit Omaha Hold'em\n   - 5-Card Omaha Hold'em\n      - Fixed-Limit 5-Card Omaha Hold'em\n      - Pot-Limit 5-Card Omaha Hold'em\n   - 6-Card Omaha Hold'em\n      - Pot-Limit 6-Card Omaha Hold'em\n   - Greek Hold'em\n      - Fixed-Limit Greek Hold'em\n      - Pot-Limit Greek Hold'em\n      - No-Limit Greek Hold'em\n   - Short-Deck Hold'em\n      - No-Limit Short-Deck Hold'em\n   - 5-Card Draw\n      - Fixed-Limit 5-Card Draw\n      - Pot-Limit 5-Card Draw\n      - No-Limit 5-Card Draw\n   - Badugi\n      - Fixed-Limit Badugi\n   - 2-to-7 Single Draw Lowball\n      - No-Limit 2-to-7 Single Draw Lowball\n   - 2-to-7 Triple Draw Lowball\n      - Fixed-Limit 2-to-7 Triple Draw Lowball\n      - Pot-Limit 2-to-7 Triple Draw Lowball\n   - Kuhn Poker\n      - Fixed-Limit Kuhn Poker\n\nThe full documentation is available at\n`Read the Docs <https://pokerface.readthedocs.io/>`_.\n\nLicense\n-------\n\n`GNU GPLv3 <https://choosealicense.com/licenses/gpl-3.0/>`_\n"
 },
 {
  "repo": "syurisuzuki/PokerAndCoinPusher",
  "language": "C#",
  "readme_contents": ""
 },
 {
  "repo": "Trantect/PlanningPoker",
  "language": "JavaScript",
  "readme_contents": "# PlanningPoker\n\nPlanningPoker is developed by [Trantect](http://www.trantect.com/).\n\n- [website](http://poker.trantect.com)\n\n# Installation\n\nYou need Node installed globally:\n\n1.Install dependencies\n```sh\n$ npm install\n```\n2.Make build files\n```sh\n$ npm run build\n```\n\n3.Run with python simpleHttpServer(default port 3000)\n```sh\n$ cd build && ../script/manifest.py\n```\n\n# Tests\n\nrun test with mocha\n\n```sh\n$ npm run test\n```\n\n# Development\n\nWant to contribute? Great!\n\nOpen your favorite Terminal and run these commands.\n\n1.Listen on http://localhost:8080, make a change in your file and instantanously see your updates!\n```sh\n$ npm run dev\n```\n\n2.If you change any files and want to see your updates on other devices,\nyou need to modify src/offline.manifest version.\n\nAnd then run these commands:\n```sh\n$ npm run build\n$ cd build && ../script/manifest.py\n```\n\n# License\n\n[Apache 2.0 License](http://www.apache.org/licenses/LICENSE-2.0)\n"
 },
 {
  "repo": "einstein95/pokered-de",
  "language": "Assembly",
  "readme_contents": "# Pok\u00e9mon: Rote Edition and Blaue Edition [![Build Status][ci-badge]][ci]\n\nThis is a disassembly of Pok\u00e9mon: Rote Edition and Blaue Edition.\n\nIt builds the following ROMs:\n\n* Pokemon - Rote Edition (G) [S][!].gb  `md5: 8ed0e8d45a81ca34de625d930148a512`\n* Pokemon - Blaue Edition (G) [S][!].gb  `md5: a1ec7f07c7b4251d5fafc50622d546f8`\n\nTo set up the repository, see [**INSTALL.md**](INSTALL.md).\n\n\n## See also\n\n- **Discord:** [pret][discord]\n- **IRC:** [libera#pret][irc]\n\nOther disassembly projects:\n\n- [**Pok\u00e9mon Red & Blue**][pokered]\n- [**Pok\u00e9mon Yellow**][pokeyellow]\n- [**Pok\u00e9mon Gold/Silver**][pokegold]\n- [**Pok\u00e9mon Crystal**][pokecrystal]\n- [**Pok\u00e9mon Pinball**][pokepinball]\n- [**Pok\u00e9mon TCG**][poketcg]\n- [**Pok\u00e9mon Ruby**][pokeruby]\n- [**Pok\u00e9mon FireRed**][pokefirered]\n- [**Pok\u00e9mon Emerald**][pokeemerald]\n\n[pokered]: https://github.com/pret/pokered\n[pokeyellow]: https://github.com/pret/pokeyellow\n[pokegold]: https://github.com/pret/pokegold\n[pokecrystal]: https://github.com/pret/pokecrystal\n[pokepinball]: https://github.com/pret/pokepinball\n[poketcg]: https://github.com/pret/poketcg\n[pokeruby]: https://github.com/pret/pokeruby\n[pokefirered]: https://github.com/pret/pokefirered\n[pokeemerald]: https://github.com/pret/pokeemerald\n[discord]: https://discord.gg/d5dubZ3\n[irc]: https://web.libera.chat/?#pret\n[ci]: https://github.com/pret/pokered/actions\n[ci-badge]: https://github.com/pret/pokered/actions/workflows/main.yml/badge.svg\n"
 },
 {
  "repo": "ostigter/texasholdem-java",
  "language": "Java",
  "readme_contents": "# Texas Hold'em poker (texasholdem-java)\n\n## Introduction\n\nThis project has been created as a platform to experiment with a Texas Hold'em poker game in Java.\n\nIts primary goal is to offer a clean, open source Texas Hold'em poker engine in Java. The game engine strives to follow the famous Robert's Rules of Poker as closely as possible. In order to test the game engine, the project also offers a Swing GUI and bots.\n\nThis project is provided under the Apache License 2.0.\n\n## Status\n\nThe current implementation support the Fixed-Limit and No-Limit variants of the game with a Swing GUI, with the human player playing against 3 bots.\n\n## Building and running\n\nThis Java project has a Maven structure. Build the project with \"mvn clean install\" and find the binary in the 'target' directory. Run the game with \"java -jar texasholdem.jar\".\n\n## Contact\n\nIf you like this project or have any questions please mail me (oscar.stigter@gmail.com). For bug reports or feature requests please create an issue using this GitHub project site Your input is highly appreciated!\n\n## Disclaimer\n\nThis project is created only because of my love for Java and my interest in the game of poker. As a Christian, I strongly oppose to any form of gambling, as I believe it eventually leads to a path of greed, destruction and suffering.\n"
 },
 {
  "repo": "shige0501/android-sdk-pokeri-v2",
  "language": "Java",
  "readme_contents": "## [\u6539\u8a02\u65b0\u7248] Android SDK\u30dd\u30b1\u30c3\u30c8\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\n### \u306f\u3058\u3081\u306b\n\n\u672c\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u30012018\u5e747\u670820\u65e5\u767a\u58f2\u306e [\u6539\u8a02\u65b0\u7248] Android SDK\u30dd\u30b1\u30c3\u30c8\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 \u306b\u5411\u3051\u3066\u4f5c\u6210\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\u4e8b\u524d\u306b\u672c\u66f8\u3092\u8cfc\u5165\u306e\u4e0a\u3001\u5408\u308f\u305b\u3066\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u3068\u7406\u89e3\u304c\u6df1\u307e\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\nhttp://gihyo.jp/book/2018/978-4-7741-9855-2\n\n### \u5229\u7528\u65b9\u6cd5\n\ngit\u30b3\u30de\u30f3\u30c9\u3084\u30c4\u30fc\u30eb\u3092\u7528\u3044\u3066git clone\u3057\u3066\u672c\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u30ed\u30fc\u30ab\u30eb\u4e0a\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u3054\u5229\u7528\u304f\u3060\u3055\u3044\u3002\n\n### License\n```\nCopyright 2018 Koji Shigemura.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n"
 },
 {
  "repo": "kmurf1999/HoldemSolver",
  "language": "TypeScript",
  "readme_contents": "# HoldemSolver\n\nHoldem Solver is an free to use, open source web-application similar to FlopZilla or Equilab with future plans to integrate a cloud-based poker solver.\n\n## Features\n\n![UI so far](/screenshots/2.png?raw=true \"UISo Far\")\n\n- Fast, range vs range equity calculation\n- Range equity heat maps\n- Hand class breakdown (like flopzilla)\n- Easy to use interface\n- Ability to save range vs range analysis\n- Free to use\n\n## **Built With**\n\n- [React.js][1]\n- [Typescript][2]\n- [Rust][3]\n- [Graphql][4]\n\n[1]: https://reactjs.org/\n[2]: https://www.typescriptlang.org/\n[3]: https://www.rust-lang.org/\n[4]: https://graphql.org/\n\n## Getting Started\n\n1. Clone the repository\n\n`git clone https://github.com/kmurf1999/HoldemSolver`\n\n2. Setup environment variables\n\n`mv .env.sample .env.dev`\n\n3. Start the development server\n\n`docker-compose -f docker-compose.dev.yml up`\n\n## Progress\n\nCurrently working on completing UI and dockerizing the application.\n\nContribution is welcome and appreciated.\n\n## License\n\nThis project is MIT Licensed\n\nCopyright (c) 2020 Kyle Murphy\n"
 },
 {
  "repo": "jbPokerStarsSolutions/PokerStars-API",
  "language": "C++",
  "readme_contents": ""
 },
 {
  "repo": "FilippoMandrini/Progetto-J",
  "language": "Java",
  "readme_contents": "# Progetto-J\nPoker\n\nRealizzazione di un sistema per il gioco del Poker nella sua versione \"Texas Hold'Em\". La piattaforma dovr\u00e0 consentire ad un gruppo di giocatori remoti di partecipare ad una partita. Altri elementi:\n\n- sistema client/server;\n- client con interfaccia testuale e grafica;\n- giocatori artificiali;\n- applicazione web (opzionale);\n- applicazione Android (opzionale).\n"
 },
 {
  "repo": "FrancoisHar/Poker",
  "language": "C++",
  "readme_contents": "\"# Poker\" \n\"# Poker\" \n"
 },
 {
  "repo": "wangxiaomo/Poker",
  "language": "PHP",
  "readme_contents": "contribute by wlj"
 },
 {
  "repo": "linuz/Facebook-Auto-Poker",
  "language": "Python",
  "readme_contents": "Requires:\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nPython 2.7 or higher\nPython-Mechanize <http://wwwsearch.sourceforge.net/mechanize/>\n\nInput your Facebook email and password into the source where it says:\nFACEBOOK_USERNAME = \"\"\nFACEBOOK_PASSWORD = \"\"\n\n"
 },
 {
  "repo": "carlosreneas/parcialPoker",
  "language": "HTML",
  "readme_contents": "# parcialPoker\nParcial inicial de poker\n"
 },
 {
  "repo": "omarshammas/pyPoker-Texas-HoldEm",
  "language": "Python",
  "readme_contents": "Author: Omar Shammas <omar DOT shammas A T gmail DOT com>\n"
 },
 {
  "repo": "PolygeneLubricants/planning-poker",
  "language": "C#",
  "readme_contents": "# Just Planning Poker\nJust Planning Poker is a simple lightweight planning poker web application. It runs in-memory, and thus only requires a web application to host and run the tool.\n\nIt is written in .Net Core 3.1, using [Blazor WebAssembly](https://docs.microsoft.com/en-us/aspnet/core/blazor/hosting-models?view=aspnetcore-3.1#blazor-webassembly).\n\nIt is designed to replace face-to-face planning poker, since most development teams are working remotely, following the global pandemic that resulted in office shut-downs in most of the world."
 },
 {
  "repo": "kabirsingh2004/Discord-Mini-Games-Bot",
  "language": "JavaScript",
  "readme_contents": "# **IMPORTANT**\r\n\r\n**Make Sure You Give Credit.. Thank You**\r\n\r\n[Join my Support Server](https://discord.gg/tVWrU5PWZV)\r\n\r\n## HOW TO SELFHOSt\r\n\r\n- download `nodejs` v12 or higher, and `ffmpeg`\r\n\r\n- install all dependeces with `npm install` and `npm i `\r\n\r\n- start your Bot with `node index.js`\r\n\r\nEnjoy ;)\r\n\r\n[REPLIT](https://replit.com/@KabirJaipal/Advance-Discord-Mini-Games-Discord-Bot-With-Advance-Games-Yo?v=1)\r\n\r\n*Yes It Works on REPLIT*\r\n\r\n**Discord Server:**\r\n[https://discord.gg/tVWrU5PWZV](https://discord.gg/tVWrU5PWZV)\r\n\r\n\r\n\r\n"
 },
 {
  "repo": "jonaskeisu/Poker",
  "language": "C#",
  "readme_contents": ""
 },
 {
  "repo": "hsylx1992/Texas-Hold-em-poker-AI",
  "language": "C",
  "readme_contents": "# Texas-Hold-em-poker-AI\n\u534e\u4e3a\u8f6f\u4ef6\u7cbe\u82f1\u8d5b\uff0c\u5fb7\u5dde\u6251\u514bAI\u6e90\u4ee3\u7801\n"
 },
 {
  "repo": "Barros42/ShellBox-Planning-Poker",
  "language": "TypeScript",
  "readme_contents": "# Shellbox Planning Poker @ v1.0.1\n\n## \ud83d\udcbb Motivo\n\nO **Planning Poker** \u00e9 uma estrat\u00e9gia muito aplicada em projetos que utilizam metodologias \u00e1geis, especialmente o Scrum, cujo objetivo \u00e9 estimar o esfor\u00e7o necess\u00e1rio para o desenvolvimento das funcionalidades de uma aplica\u00e7\u00e3o. \nTendo em vista que a maioria dos servi\u00e7os de Planning Poker s\u00e3o pagos este projeto tem como objetivo disponibilizar um aplicativo customizado de forma simples, pr\u00e1tica e r\u00e1pida para cada empresa e/ou time.\n\nEste projeto n\u00e3o tem a inten\u00e7\u00e3o de ficar pronto um dia, ou seja, ele ser\u00e1 eternamente aberto a novas contribui\u00e7\u00f5es e melhorias.\n\n## Features\n- Possibilidade de Multi Salas (on demand)\n- Possibilidade de esconder/mostrar votos\n- Possibilidade de alterar hist\u00f3ria vigente\n- Sistema localizado\n- Sem nescessidade de banco de dados\n- Eventos em tempo real\n- Poss\u00edbilidade de deploy com Docker\n- Local Storage em Codificado\n\n## Idiomas\n- Portugu\u00eas\n- Espanhol\n- Ingl\u00eas\n\n## Termos de Uso\nO **ShellBox Planning Poker** \u00e9 uma iniciativa feita pelos desenvolvedores do time de tecnologia do **Shellbox** na **Ra\u00edzen**. Este projeto **n\u00e3o tem nenhuma liga\u00e7\u00e3o com a marca Shell** e seus correlacionados. \nEste projeto tem em sua natureza inten\u00e7\u00e3o de ajudar outros desenvolvedores a estimar de melhor forma o esfor\u00e7o necess\u00e1rio para o desenvolvimento das funcionalidades de uma aplica\u00e7\u00e3o.\n\nAo clonar este reposit\u00f3rios, por favor substitua os dados \n\n## \ud83d\ude80 Tecnologias\n\nEsse projeto foi desenvolvido com as seguintes tecnologias:\n\n- \ud83d\udc9a [Node.js](https://nodejs.org/en/)\n- \u269b\ufe0f  [React](https://reactjs.org/)\n- \ud83c\udfab [Javascript](https://developer.mozilla.org/pt-BR/docs/Web/JavaScript)\n- \u2328\ufe0f[Typescript](https://www.typescriptlang.org/)\n- \ud83d\udece\ufe0f [Socket IO](https://socket.io/)\n- \ud83d\udc0b[Docker (Optional)](https://www.docker.com/)\n\n## Inicializar\n\nPara instalar e utilizar a aplica\u00e7\u00e3o dentro da sua empresa e/ou time, basta clonar este reposit\u00f3rio e rodar o comando abaixo dentro das pastas **API** e **APP**\n\n    yarn install\n    yarn start\nou\n\n    npm install\n    npm start\n\nLogo ap\u00f3s o projeto estar\u00e1 pronto para uso, por\u00e9m, n\u00e3o se esque\u00e7a de customizar de acordo com a sua empresa. \n\nPara isso basta alterar os arquivos abaixo. \n\n- \ud83d\udcc1**API** \n\t- \ud83d\udcc2 src\n\t\t- \ud83d\uddc4\ufe0f [API - appConfig.json](https://github.com/Barros42/SB-Planning-Poker/blob/6e7d64659214102ce045a17a2fcf2b7e9cf2600d/api/appConfig.json)\n- \ud83d\udcc2 **APP**\n\t-  \ud83d\udcc2 src \n\t\t- \ud83d\uddc4\ufe0f [APP - appConfig.json](https://github.com/Barros42/SB-Planning-Poker/blob/559eebf411ebaa55bb7ff1fc5eb04af7780e31d6/app/src/appConfig.json)\n\t-  \ud83d\udcc2 assets/images\n\t\t- \ud83d\uddc4\ufe0f [APP - logo.svg](https://github.com/Barros42/SB-Planning-Poker/blob/67f3de56947ea739ac40cb33b84187410b174111/app/src/assets/images/logo.svg)\n\t-  \ud83d\udcc2 styles\n\t\t- \ud83d\uddc4\ufe0f [APP - variables.css](https://github.com/Barros42/SB-Planning-Poker/blob/67f3de56947ea739ac40cb33b84187410b174111/app/src/Styles/variables.css)\n\n## \ud83e\udd14  Como contribuir\n\n-   Fa\u00e7a um fork desse reposit\u00f3rio;\n-   Crie uma branch com a sua feature:  `git checkout -b minha-feature`;\n-   Fa\u00e7a commit das suas altera\u00e7\u00f5es:  `git commit -m 'feat: Minha nova feature'`;\n-   Fa\u00e7a push para a sua branch:  `git push origin minha-feature`.\n\nDepois que o merge da sua pull request for feito, voc\u00ea pode deletar a sua branch.\n\n## Autores\n\n<table>\n<thead>\n<tr>\n<th align=\"center\"><a href=\"https://github.com/barros42\"><img src=\"https://avatars.githubusercontent.com/u/34094891?v=4\" width=\"115\" style=\"max-width:100%;\"><br><sub>@Barros42</sub></a></th>\n</tr>\n</thead>\n</table>\n"
 },
 {
  "repo": "CragonGame/CasinosClient",
  "language": "C#",
  "readme_contents": "\ufeff## \u679c\u6d3e\u5fb7\u5dde\uff0c\u5ba2\u6237\u7aefUnity3D\u6e90\u4ee3\u7801\n[![licence badge]][licence]\n[![stars badge]][stars]\n[![forks badge]][forks]\n[![issues badge]][issues]\n\n### \u679c\u6d3e\u5fb7\u5dde\u4ecb\u7ecd\n- \u679c\u6d3e\u5fb7\u5dde\u662f\u4e00\u6b3e\u4e13\u6ce8\u6d77\u5916\u53d1\u884c\u7684\u4f11\u95f2\u5fb7\u5dde\u6251\u514b\uff0c\u5305\u542b\u5e38\u89c4\u684c\uff0c\u8d5b\u4e8b\u573a\uff0c\u767e\u4eba\u684c\uff0c\u65f6\u65f6\u5f69\u7b49\u73a9\u6cd5\u3002\n- master\u5206\u652f\u7684\u4ee3\u7801\u4e3aILRuntime\u91cd\u6784\u7684\u534a\u6210\u54c1\uff0c\u5df2\u8f6c\u4e3a\u5546\u4e1a\u95ed\u6e90\uff0c\u4e0d\u518d\u66f4\u65b0Github\u4ed3\u5e93\u30021.1\u5206\u652f\u4e3axLua\u8f83\u5b8c\u6574\u7684\u7248\u672c\uff0c\u53ef\u5728u3d\u4e2d\u8fd0\u884c\uff0c\u4ee5\u53ca\u53d1\u5e03Android\u7248\u672c\u8fd0\u884c\u3002\n\nWe are recruitsing agents worldwide, please contact us at lion@cragon.cn\n\n### GooglePlay\u4e0b\u8f7d\u94fe\u63a5\n- https://play.google.com/store/apps/details?id=com.Cragon.KingTexas\n\n### \u6253\u724c\u573a\u89c6\u9891\n- https://v.youku.com/v_show/id_XMzUzMTEzNjg2NA==.html?spm=a2h0k.11417342.soresults.dtitle\n\n### \u679c\u6d3e\u5fb7\u5dde\u4f9d\u8d56\u7684\u7b2c\u4e09\u65b9SDK\n- https://unity3d.com\n- https://beecloud.cn\n- https://bugly.qq.com/v2/\n- https://www.dataeye.com/\n- http://www.fairygui.com/\n- https://msgpack.org/\n- https://www.openinstall.io/\n- http://sdk.weixin.senparc.com/\n- http://www.mob.com/\n- http://zh.esotericsoftware.com/spine-unity\n- https://github.com/Tencent/xLua\n- https://www.getui.com/cn/index.html\n\n### \u679c\u6d3e\u5fb7\u5ddeQQ\u6280\u672f\u4ea4\u6d41\u7fa4\n558157909\n\n### License\n[MIT](/LICENSE)\n\n### \u679c\u6d3e\u5fb7\u5dde\u6e38\u620f\u622a\u56fe\n![e](https://github.com/CragonGame/CasinosClient/blob/master/Doc/Images/e.png)\n![b](https://github.com/CragonGame/CasinosClient/blob/master/Doc/Images/b.png)\n![a](https://github.com/CragonGame/CasinosClient/blob/master/Doc/Images/a.png)\n![c](https://github.com/CragonGame/CasinosClient/blob/master/Doc/Images/c.png)\n![d](https://github.com/CragonGame/CasinosClient/blob/master/Doc/Images/d.png)\n![f](https://github.com/CragonGame/CasinosClient/blob/master/Doc/Images/f.png)\n![g](https://github.com/CragonGame/CasinosClient/blob/master/Doc/Images/g.png)\n![h](https://github.com/CragonGame/CasinosClient/blob/master/Doc/Images/h.png)\n![i](https://github.com/CragonGame/CasinosClient/blob/master/Doc/Images/i.png)\n![j](https://github.com/CragonGame/CasinosClient/blob/master/Doc/Images/j.jpg)\n![k](https://github.com/CragonGame/CasinosClient/blob/master/Doc/Images/k.jpg)\n\n[licence badge]:https://img.shields.io/badge/license-MIT-blue.svg\n[stars badge]:https://img.shields.io/github/stars/CragonGame/CasinosClient.svg\n[forks badge]:https://img.shields.io/github/forks/CragonGame/CasinosClient.svg\n[issues badge]:https://img.shields.io/github/issues/CragonGame/CasinosClient.svg\n\n[licence]:https://github.com/CragonGame/CasinosClient/blob/master/LICENSE\n[stars]:https://github.com/CragonGame/CasinosClient/stargazers\n[forks]:https://github.com/CragonGame/CasinosClient/network\n[issues]:https://github.com/CragonGame/CasinosClient/issues\n"
 },
 {
  "repo": "davidxmoody/mctsbot",
  "language": "Java",
  "readme_contents": "## MCTSBot\n\nThis is the source code for my 3rd year Cambridge University dissertation project. It is a **Texas Hold 'em poker-bot** which uses the **Monte Carlo Tree Search algorithm**.\n\nI also wrote a [blog post about the project](https://davidxmoody.com/2014/mcts-in-texas-hold-em-poker-a-retrospective/). It contains some screenshots/graphs and commentary on how it went.\n\nTo be perfectly honest, this project does *not* represent my best work. I just wanted to upload this to prove I'd done it and in case it might be useful to someone.\n\nUnfortunately the project won't build in its current state. Sorry about that. There are several missing files that I no longer have a copy of. Also, the bot runs as a plugin to [Poker Academy Pro](http://www.poker-academy.com/poker-software/) which I no longer have access to. [opentestbed](https://code.google.com/p/opentestbed/) may also work (although I have never tried it).\n\nThe dissertation itself is probably the most important part. I recommend reading the *Preparation* section for what the project does and how it does it. The *Evaluation* section also contains some interesting results and graphs.\n\n## License\n\nThe source code for the project (everything in the `src` directory) is licensed under the [MIT License](http://opensource.org/licenses/MIT).\n\nThe dissertation and everything else is licensed under the [Creative Commons Attribution 4.0 International License](http://creativecommons.org/licenses/by/4.0/). You may use it but you must give attribution.\n"
 },
 {
  "repo": "flambaum/flame-poker",
  "language": "JavaScript",
  "readme_contents": ""
 },
 {
  "repo": "moneypool/ranking-poker-hands",
  "language": "Ruby",
  "readme_contents": "# Ranking Poker Hands\n\nDifficulty: **Easy**\n\nWrite a program that accepts two poker hands and returns the winner.\n\n---\n\n### Setup instructions\n\nFork and setup the exercise repository:\n\n```\ngit clone <YOUR FORK ADDRESS>\ncd ranking-poker-hands\nbin/setup\n```\n\n---\n\n### Exercise instructions\n\nWrite a program to evaluate poker hands and determine a winner.\n\nThis [guide to poker hand strengths](https://www.pokerstars.com/poker/games/rules/hand-rankings/) may be useful.\n\nYour program should accept hands in the following representation:\n\n```\n# This is a hand with\n# an Ace of spades,\n# a King of diamonds,\n# a Ten of hearts,\n# a Jack of clubs,\n# and a Queen of hearts.\n[\"AS\", \"KD\", \"TH\", \"JC\", \"QH\"]\n\n# Another hand:\n[\"2C\", \"5D\", \"9S\", \"3H\", \"TS\"]\n```\n\nAssume all hands have five cards.\n\nYour program should accept two hands and return the winning hand.\n\nExample usage:\n\n```\nhand_1 = %w(2S 2D AH 3S 5S)\nhand_2 = %w(2H 2C KH 5H 9C)\n\nHandEvaluator.new.return_stronger_hand(hand1, hand2)\n  # => [\"2S\", \"2D\", \"AH\", \"3S\", \"5S\"]\n```\n\nNote that you must handle ties. In the example above, both hands have a pair, but hand_1 has a higher \"kicker\" (the Ace).\n\nMake sure your test suite encodes these rules as clearly as possible. Imagine someone wasn't familiar with the rules of hand rankings\u2014would your tests be a good guide?\n\n---\n\n### Push your Solution\n\nOnce you're finished, commit your changes and then push your solution to your fork:\n\n```\ngit push origin master\n```\n"
 },
 {
  "repo": "listingslab/react-playing-cards",
  "language": "JavaScript",
  "readme_contents": "\n## React Playing Cards\n\n[github.io docs](https://listingslab.github.io/react-playing-cards/)\n\nA framework for creating responsive animated SVG graphics in react implemented as a deck of playing cards. It has no need for jQuery or bitmap graphics. It's lightweight and easily deployable within any JS project\n\n- [Animated with Greensock](./animation/README.md)\n- Newfangled SVG graphic system; no bitmaps\n- Material UI desgin system\n\n#### Install & Run Demo\n\n```bash\ngit clone https://github.com/listingslab/react-playing-cards.git\ncd react-playing-cards\nyarn && yarn start\n```\n\n#### Add to an existing project\n\n- Copy `/Cards` directory and paste it anywhere you need in your app\n- Install the Greensock animation package\n\n```yarn add gsap```\n\n### Implement\n\n- Copy `/Cards` directory from [react-playing-cards](https://github.com/listingslab/react-playing-cards) \n\n- Import & Use in an existing component\n\n```bash\nimport { CardSingle } from '<path>/Cards'\n\n<CardSingle\n    id={`S_A`}\n    card={ {\n        suit: `S`, \n        rank: `A`, \n        backColor: `#1A1919`,\n        color: item.suit === 'D' || item.suit === 'H' ? `#D33E43` : `#1A1919`\n    } }\n/>\n&trade; should __just work__ \n"
 },
 {
  "repo": "ChornHulio/TexasHoldem",
  "language": "Java",
  "readme_contents": ""
 },
 {
  "repo": "simbo1905/sprint-planning",
  "language": "Scala",
  "readme_contents": "# Sprint Planning\n\n[![Join the chat at https://gitter.im/simbo1905/sprint-planning](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/simbo1905/sprint-planning?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nA lightweight implementation of a Sprint Planning (aka Scrum Poker) web application. \n\nThe browser code uses HTML5 [websockets](http://www.websocket.org/). The server logic is written in [Scala](http://www.scala-lang.org/) using the core [Akka](http://akka.io/) libraries for concurrency and [reactive programming](http://www.reactivemanifesto.org/). The networking layer is [Netty 4](https://github.com/netty/netty) with HTTP routing provided by the awesome [Socko](https://github.com/mashupbots/socko) server. \n\nWhen the browser does not support websockets or if a websocket cannot be opened due to proxy issues the browser code does a [graceful fallback](https://github.com/ffdead/jquery-graceful-websocket) to AJAX polling. \n\nThe server is a single jar file which runs on a standard Java JVM. \n\n## Build Prerequisites\n\n  - Java Platform (JDK 6+) http://www.oracle.com/technetwork/java/javase/downloads/index.html\n  - SBT http://www.scala-sbt.org/release/docs/Getting-Started/Setup.html#installing-sbt\n\n## Building\n\n```sh\ngit clone https://github.com/simbo1905/sprint-planning.git\ncd sprint-planning\nsbt test\n```\n\n## Running\n\nFor local testing you can run the code from the build folder with:\n\n```sh\nsbt run\n```\n\nCreate then launch a runnable jar for a server deployment with:\n\n```sh\nsbt assembly\njava -jar ./target/scala-2.10/sprint-planning-runnable.jar 127.0.0.1 80\n```\nN.B. You would need to use sudo to run the command as root to bind the server to port 80 on Mac OSX or Linux. \n\nYou should see the output: \n\n```\nServing web content out of src/main/resources\nOpen a few browsers and navigate to http://localhost:80. Start playing!\n```\n\nYou can now go to that local url and play. \n\nPress ```Ctrl+c``` to kill the process which stops the server. \n\nThe process takes two mandatory and two optional arguments:\n\n1. IP/interface to bind to\n2. Port to serve static content\n3. Websocket alternative port (defaults to static content port)\n4. Graceful websocket polling port (defaults to static content port)\n\n## Running Behind A Reverse Proxy\n\nTo run the socko server on port 8888 behind an nginx reverse proxy running \non port 80 first start socko with: \n\n```\njava -jar sprint-planning-runnable.jar 127.0.0.1 8888 80 80\n``` \n\nThat specifies that the websocket and polling fallback ports given to the browser will point \nto the reverse proxy running on port 80. The nginx reverse proxy configuration \nis then set to forward regular and websocket traffic to socko running on 8888: \n\n```\nserver {\n        server_name www.sprint-planning.info;\n\n        location / {\n                proxy_set_header X-Real-IP  $remote_addr;\n                proxy_set_header X-Forwarded-For $remote_addr;\n                proxy_set_header Host $host;\n                proxy_pass http://www.sprint-planning.info:8888;\n        }\n\n        location /websocket/ {\n                proxy_pass http://www.sprint-planning.info:8888;\n                proxy_http_version 1.1;\n                proxy_set_header Upgrade $http_upgrade;\n                proxy_set_header Connection \"upgrade\";\n        }\n}\n\n```\n\n## Creating A Skin\n\nThe site is effectively two pages under ```src/main/resources``` which are ```index.html``` and ```poker.html```. The messages sent and received from the server show up on the browsers javascript console (e.g. firefox / chrome web developers console) as ```out>``` and ```in>``` entries which mean *out* from the browser to the server else *in* from the server to the browser, e.g. \n\n```sh\nout> {\"mType\":\"Reveal\"}\nin>  {\"cards\":[{\"player\":\"417007700350734336\",\"card\":13,\"mType\":\"CardDrawn\"},{\"player\":\"417007962322767872\",\"card\":8,\"mType\":\"CardDrawn\"}],\"mType\":\"CardSet\"}\"\n```\n\nshows that a player had hit the reveal cards button which sent a message of type \"Reveal\" to the server. The server responded with a message of type \"CardSet\" which contained two \"CardDrawn\" entries for two players which had values \"8\" and \"13\". \n\nThe complete set of JSON messages are defined in the file ```sprint-planning/src/main/scala/scrumpoker/game/Messages.scala```\n\nSent from server to browser:\n\n- RoomSize: Sent to all browsers when a player enters the room. Should be used to give a visual indication that more players have joined the room. Also sent to all browsers in response to a reset message. \n- DrawnSize: Sent to all browsers when a player selects a card. Should be used to indicate how many players in the room have selected a card. A message is also sent to all browsers in response to a reset message to show zero cards drawn. \n- CardSet: Sent to all browsers when the cards are revealed in response to a Reveal message. Contains the complete state of the game as the list of CardDrawn messages sent by all the players. \n\nSent from browser to server: \n\n- CardDrawn: Sent from the browser when a player selects a card.\n- CardUndrawn: Sent from the browser when a player unselects the card they had selected. \n- PlayerExit: Sent from the browser to the server when the browser window is closed. \n- Reveal: Sent from the browser to the server when a player presses the reveal button. Results in a CardSet being sent to all browsers. \n- Reset: Sent from the browser to the server when a player presses the reset button. Results in a Reset, RoomSize and DrawnSize zero messages all being sent to all browsers to cause the game state to be cleared. \n\nWhat's with all the ports? \n----\n\nAt the time of writing the app RedHat OpenShift required that you run with ports \"8080 8000 80\". Thats the port to bind to, the port websockets is running on and the port to fallback to polling if the browser is behind a proxy which does not support websockets.  \n\nLicense\n----\n\nApache 2.0 http://apache.org/licenses/LICENSE-2.0.html\n\nTODO\n----\n\n[_] Port to Backbone.js and have it so that it remembers your card selection if you reload the page. \n\nEnd.\n"
 },
 {
  "repo": "riddlesio/poker-engine-java",
  "language": "Java",
  "readme_contents": "# Poker game engine\nThis repository contains the engine for the poker games for the Riddles.io platform.\n\n## Setting up\n\nThis guide assumes the following software to be installed and globally\naccessible:\n\n- Gradle 2.14\n- JVM 1.8.0_91\n\n## Opening this project in IntelliJ IDEA\n\n- Select 'Import Project'\n- Browse to project directory root\n- Select build.gradle\n- Check settings:\n- * Use local gradle distribution\n- * Gradle home: /usr/share/gradle-2.14\n- * Gradle JVM: 1.8\n- * Project format: .idea (directory based)\n\n*Note: for other IDEs, look at online documentation*\n\n## Building the engine\n\nUse Gradle to build a .jar of the engine. Go to Tasks -> build -> jar.  \nThe .jar file can be found at `build/libs/`.\n\n## Running \n\nRunning is handled by the MatchWrapper. This application handles all communication between\nthe engine and bots and stores the results of the match. To run, firstly edit the \n`wrapper-commands.json` file. This should be pretty self-explanatory. Just change the command\nfields to the right values to run the engine and the bots. In the example, the starterbot\nis run twice, plus the command for the engine built in the previous step.\n \nTo run the MatchWrapper, use the following command (Linux):\n````\njava -jar match-wrapper*.jar \"$(cat wrapper-commands.json)\"\n````\nYou can also use the run_wrapper.sh file, which contains this line.\n\n*Note: if running on other systems, find how to put the content of wrapper-commands.json as\nargument when running the match-wrapper.jar*"
 },
 {
  "repo": "RobertCorey/column-poker",
  "language": "JavaScript",
  "readme_contents": "column-poker\n============\n\nA poker variation where players take turns drawing cards from a deck and adding them to a hand that runs in terminal.\nBuilt with nodejs.\n\nInstall\n===========\n1. Install node ( nodejs.org)\n2. $ git clone https://github.com/RobertCorey/column-poker.git\n3. $ cd column-poker\n4. $ npm install\n\nRunning\n==========\n$ node src/main.js\n"
 },
 {
  "repo": "bjrnmrtns/poker",
  "language": "C++",
  "readme_contents": "This is a fast poker hand evaluator which evaluates projecteuler 54 hands. This code doesn't uses conditional branches. Could be even faster using more threads. \n"
 },
 {
  "repo": "treyarnold/poker-face",
  "language": "ShaderLab",
  "readme_contents": "# Poker Face\n\n> [Deployed Poker Site](https://treyarnold.github.io/poker-face/).\n\n## Project Summary\n\n> To create a multiplayer-functional application that allows users to play texas holdem and chat in real time from the safety of their own laptop. \n> The unity build is done using WebGL and the sprites were created on [Pixil Art](https://www.pixilart.com/moadeep). \n> To see the Unity build in the Unity UI, Use Unity 2018.3.12f and open the project folder inside the unityWorkingFolder\n\n## Developers\n\n- Trey Arnold: Front End\n  - [heytrey.dev](https://heytrey.dev)\n  - [Github](https://github.com/treyarnold)\n  - [LinkedIn](https://www.linkedin.com/in/trey-arnold/)\n- Don Newman: Back End\n  - [Portfolio](https://djn94.github.io/Bootstrap-portfolio/)\n  - [Github](https://github.com/Djn94)\n  - [LikedIn](https://www.linkedin.com/in/don-newman-20042b179/)\n\n## Animated Gifs/Pictures of App\n\n![alt text](https://media.giphy.com/media/gIAh11mlYJa4jEeFga/giphy.gif)\n\n## Tech Stack\n\n- C#, Unity, HTML5, CSS3, JavaScript, Git, Firebase\n- Bootstrap4, jQuery\n\n## APIs\n\n- WebGL\n- Web Audio\n\n## MVP\n\n- Login Authorization\n- Persistent cash level\n- Live Chat\n- Turn based multiplayer\n- Visual interface\n- unsplash for choosing avatar\n\n## Stretch Goals\n\n- Upgrade graphics\n- Unsplash for chosing card backing\n- Achievements \n\n## Future Development\n\n- Rework the backend to work with the Firebase API and Unity assets in order to work in the realtime database\n- Once interactivity is established, track players bets and add a slider for controlling the amount to bet\n- Display chat and login functionalities \n\n## Credits/Resources\n\n- [2D Unity and C# Udemy course](https://www.udemy.com/unitycourse/) by [gamedev.tv](https://www.gamedev.tv/)\n"
 },
 {
  "repo": "coffee4tw/poker-hhdb",
  "language": null,
  "readme_contents": "Poker Handhistory Database\n==========\n\nLibrary for parsing and working with the hand history database originally created by indiana@pokerai.org\n\nPublished 2014-03-29 on poker-ai.org:  \nForum:  http://poker-ai.org/phpbb/viewforum.php?f=34  \nPost:   http://poker-ai.org/phpbb/viewtopic.php?f=34&t=2728  \n"
 },
 {
  "repo": "mdashx/pangea-poker-frontend",
  "language": "JavaScript",
  "readme_contents": "# Pangea Frontend API Overview\n\n## Where to find more info\n\nThe sample servers print JSON strings to the terminal as they are sent. Looking at this output is a good way to get example API calls.\n\nCheck out `api.js` to see how the various API calls are dispatched to the various methods.\n\nThe list of available API calls is in the `pangea.onMessage` method:\n\n```\npangea.onMessage = function(message){\n  var handlers = {'action':pangea.API.action, 'game':pangea.API.game, 'seats':pangea.API.seats, 'player':pangea.API.player, 'deal':pangea.API.deal, 'chat':pangea.API.chat}\n  message = JSON.parse(message)\n  console.log('Recieved: ', message)\n  for (var key in message){\n    if (message.hasOwnProperty(key)){\n      var handler = handlers[key]\n      handler(message[key])\n    }\n  }\n}\n```\n\nThe keys of the `handlers` associative array make up the valid API calls. To expand the API, simply add a new handler and specify the method for it to call.\n\nI will answer any and all questions about the Pangea API as quickly as I can, just email <tom@hobofife.com>. Thanks.\n\n## Available API Calls\n\n* 'game'\n\nUpdate any properties of the pangea.game object.\n\n`gametype`: HTML Displayed in the top left corner of the screen. Use to display the name of the table, the limit, the type of game, etc.\n\n`pot`: A list `[]` of pots, starting with the main pot, and then the side pots.\n\n`bigblind`: Set the big blind, this is used by the bet amount slider.\n\n`tocall`: Set the amount to call, this is used by the bet amount slider.\n\n`limit`: Set the limit, this is used by the bet amount slider.\n\n`myturn`: Set to '1' if it is the first person player's turn. This enables showing the red countdown timer.\n\n`timer`: Set to '1' to show the 9 second countdown timer on the player's turn.\n\n`seats`: Set to '9', '6', or '2' to add/remove seats from the table.\n\n* 'seats'\n\n`seat`: The seat number (0-8).\n\n`name`: The name of the player at that seat.\n\n`stack`: This value will be displayed as the seat's chip stack amount.\n\n`action`: This value will be displayed as the seat's status bar. An empty string ('') hides the status bar.\n\n`playing`: Set to '0' to sit out, or '1' to play.\n\n`player`: Set to '1' if the first person player is in this seat.\n\n`empty`: Set to '1' if the seat is empty (will make it available in the GUI to choose as a seat), set to '0' when it is occupied.\n\n`playercards`: A list of the cards to display at the seat, ex: `['AH', 'AS']`.\n\n`bet`: This value is used to place chips in front of the seat and adjust the bet amount label in front of the seat.\n\n* 'action'\n\n`chipsToPot`: Moves all chips from the seat's bets to the pots. No assoc. array necessary. Ex: `{'action':{'chipsToPot':'whatever'}}`.\n\n`chipsToPlayer`: Moves all chips to a seat. (does not update the seat's stack value). Specify the number of the seat to move the chips to. Ex: `{'action':{'chipsToPlayer':3}}`.\n\n`returnPlayerCards`: Fold/Muck/Return a seat's cards to the deck. Ex: `{'action':{'returnPlayerCards':7}}`.\n\n* 'player'\n\n`seat`: Set the first person player's seat.\n\n`stack`: Set the first person player's stack (the stack value for the seat may need to be updated inependently).\n\n`holecards`:Set the player's cards, ex: `['2C', '7H']`\n\n`sitting`: Set to 1 when the player is sitting at the table. This value is used to control the seat selection GUI.\n\n* 'deal'\n\n`dealer`: Places the dealer button and determines which seat dealing animation starts with.\n\n`holecards`: Used to display the seat's holecards. Set to 'null' until the showdown.\n\n`boardcards`: Used to display flop, turn and river. See example in the following section.\n\n* 'chat'\n\nJust send a list of messages to display in the chatbox. Each member of the list will be printed on a new line.\n\n{'chat':['Dealer: LaurePalmer bets 666', 'Dealer: Audrey folds']}\n\n# Examples\n\n### Connecting To A Backend Using The WebSocket Protocol\n\nThe websocket URI is set in the `pangeapoker.js` file on the `pangea.wsURI` property, ex: `pangea.wsURI = 'ws://localhost:9000'`.\n\nThe file ./client/server.py contains an example server listening for web socket connections, using the ws4py module.\n\n`server = make_server('', 9000, server_class=WSGIServer,\n                     handler_class=WebSocketWSGIRequestHandler,\n                     app=WebSocketWSGIApplication(handler_cls=myserver))`\n\nSo just make sure that the server's URI is the same that the Pangea frontend expects, and the frontend will connect to it when the page loads.\n\nThe example server is single threaded, so don't get confused by that if you use it and the frontend doesn't connect... another window might already be connected to it.\n\n### API Basics & Setting Up A Game\n\nAs described in the YouTube videos, some of the API verbs simply allow for updating associative arrays in the `pangea` object. This is how a game is set up.\n\nAll of the properties of `pangea.game` are found in `game.js`:\n\nExample:\n```\npangea.game.gametype = \"NL Hold'em<br>Blinds: 3/6\"\npangea.game.pot = [0]  // List of pots and side pots\npangea.game.bigblind = 6\npangea.game.seats = 9 // 2, 6 and 9 configurations available\n```\n\nSo to setup a game, the backend sends a JSON string with the API call 'game', followed by an assoc. array setting game properties. The API is 'update only', i.e. any property not set by the API will remain in it's current state. So to set the pot to zero, {'game':{'pot':[0]}} must be sent to the frontend from the server.\n\n*Reminder:* \"Setting the pot to zero\" on the frontend does not change the game in any way, it is simply a display. The actual pot amount must be kept up to date on the backend. Everything on the frontend is purely an interface and all constraints, etc. must be enforced by the server.\n\n### API Calls For A Hand Of Poker\n\nWriting the JSON for the API calls by hand would be a nightmare, you never want to do that. I'll be using JSON generated for the sample  server by the functions in `sample_games.py`. The JSON string is created by the json.dumps() method of the built-in json lib.\n\n* Setup Game\n\n`{\"game\": {\"tocall\": 0, \"pot\": [0], \"bigblind\": 3, \"gametype\": \"NL Hold'em<br>Blinds: 3/6\"}}`\n\n* Add Seat Information (Players) To Table\n\nThe players don't need to be added all at once like this. The API works the same whether upating 1 seat or all 9. Any number of seats and properties can be updated.\n\n`{\"seats\": [{\"name\": \"espasasp4\", \"seat\": 0, \"stack\": 563.67, \"empty\": 0, \"playing\": 1}, {\"name\": \"aikokj\", \"seat\": 1, \"stack\": 397.32, \"empty\": 0, \"playing\": 1}, {\"name\": \"hondan87\", \"seat\": 2, \"stack\": 712.93, \"empty\": 0, \"playing\": 1}, {\"name\": \"mietlicada\", \"seat\": 3, \"stack\": 93.83, \"empty\": 0, \"playing\": 1}, {\"name\": \"outflowbs\", \"seat\": 4, \"stack\": 197.88, \"empty\": 0, \"playing\": 1}, {\"name\": \"duvaye62\", \"seat\": 5, \"stack\": 66.82, \"empty\": 0, \"playing\": 1}, {\"name\": \"possano9s\", \"seat\": 6, \"stack\": 285.65, \"empty\": 0, \"playing\": 1}, {\"name\": \"fliblySnallbr\", \"seat\": 7, \"stack\": 254.9, \"empty\": 0, \"playing\": 1}, {\"name\": \"oklepankal6\", \"seat\": 8, \"stack\": 2.34, \"empty\": 0, \"playing\": 1}]}`\n\nFor example, just one player:\n\n`{\"seats\": [{\"name\": \"espasasp4\", \"seat\": 0, \"stack\": 563.67, \"empty\": 0, \"playing\": 1}]}`\n\n...and then another:\n\n`{\"seats\": [{\"name\": \"fliblySnallbr\", \"seat\": 7, \"stack\": 254.9, \"empty\": 0, \"playing\": 1}]}`\n\nThe 'seats' value does need to be a list of seats, even if updating only one seat.\n\n* Join A Game\n\n`{\"player\": {\"sitting\": 1, \"stack\": 504.88, \"seat\": 1}}`\n\nIn addition to updating the player object, the seat (seat 1 in this case) needs to be updated too.\n\n`{\"seats\": [{\"player\": 1, \"name\": \"LauraPalmer\", \"playercards\": null, \"playing\": 1, \"stack\": 504.88, \"empty\": 0, \"seat\": 1}]}`\n\nI apologize for including silly properties like 'sitting' and 'player', but they are used right now to manage various states of the seat information elements.\n\n* Dealing And Betting\n\nFirst, the holecards:\n\n`{\"deal\": {\"holecards\": [null, null], \"dealer\": 0}}`\n\n\"dealer\" specifies where to place the dealer button. The dealing animation will start with the following occupied seat.\n\nCheck;\n\n`{\"seats\": [{\"action\": \"<span>Check<br></span>\", \"bet\": 0, \"seat\": 2}]}`\n\nWhen the player bets, we update the seat infomation, and also the game info for the pot and the \"to call\" amount:\n\nBet:\n\n`{\"game\": {\"tocall\": 6, \"pot\": [\"6\"]}, \"seats\": [{\"action\": \"<span>Bet<br>6</span>\", \"bet\": 6, \"seat\": 0}]}`\n\nThe 'action' property of the seat displays a status bar on top of the seat. An empty string will clear the status bar. This should probably be renamed to 'status' avoid confusion.\n\nFold:\n\n`{\"action\": {\"returnPlayerCards\": \"1\"}, \"seats\": [{\"action\": \"<span>Fold</span>\", \"seat\": 1}]}`\n\nThe 'action' API call is used to return player cards to the deck, move chips to the pot, and move chips to a player.\n\nCall:\n\n`{\"game\": {\"pot\": [\"12\"]}, \"seats\": [{\"action\": \"<span>Call<br>6</span>\", \"bet\": 6, \"seat\": 2}, {\"action\": \"\", \"seat\": 1}]}`\n\nRaise:\n\n`{\"game\": {\"tocall\": 24, \"pot\": [\"42\"]}, \"seats\": [{\"action\": \"<span>Raise<br>24</span>\", \"bet\": 24, \"seat\": 8}, {\"action\": \"\", \"seat\": 7}]}`\n\nRaising is not different from betting as far as the frontend is concerned, just use the status \"Raise\" instead of \"Bet\" and change the 'tocall' amount appropriately.\n\n* End A Round Of Betting\n\n`{\"action\": {\"chipsToPot\": 0}, \"seats\": [{\"action\": \"\", \"seat\": 0}, {\"action\": \"\", \"seat\": 1}, {\"action\": \"\", \"seat\": 2}, {\"action\": \"\", \"seat\": 3}, {\"action\": \"\", \"seat\": 4}, {\"action\": \"\", \"seat\": 5}, {\"action\": \"\", \"seat\": 6}, {\"action\": \"\", \"seat\": 7}, {\"action\": \"\", \"seat\": 8}]}`\n\nMost important is 'chipsToPot'. The 0 following chipsToPot doesn't actually matter, what determines how the pots are displayed is the list of pot and side pot amounts.\n\n* More Dealing\n\n`{\"deal\": {\"board\": {\"0\": \"AH\", \"1\": \"2C\", \"2\": \"6S\"}}}`\n\nFor the board cards, the position needs to be paired with the code for the card to show.\n\nSuits: \"S\", \"D\", \"H\", \"C\"\nRanks: \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"\n\nThe Turn:\n\n`{\"deal\": {\"board\": {\"3\": \"6H\"}}}`\n\nThe River:\n\n`{\"deal\": {\"board\": {\"4\": \"JD\"}}}`\n\n# WebSocket Messages To Listen For\n\nThe GUI won't do much without checking with the server first, for instance, instead of letting the player just take a seat, a request is sent to the server.\n\n* Request to join a table:\n\n`{\"action\":{\"join\":<seat_num>}}`\n\n`{\"action\":{\"join\":1}}`\n\n* First person player makes a bet:\n\n{\"action\":{\"bet\":\"145\"}}\n\n* First person player folds:\n\n`{\"action\":{\"fold\":\"1\"}}`\n\n* First person sends chat:\n\n`{\"chat\":\"This is a chat message\"}`\n\n\n\n\n\n"
 },
 {
  "repo": "tterava/PokerTrainingFramework",
  "language": "Python",
  "readme_contents": "# PokerTrainingFramework\nFramework for training Heads up no limit hold'em AI\n\nA simple python based framework for pitting HU NLHE bots against each other.\nThe framework is light weight and includes a C-based hand evaluator that is extremely fast, capable of evaluation more than 3 million 5-7 card hands per second. This is an order of magnitude faster than any pure-python based evaluator I've found. Also includes a PCG random number generator to improve speed and randomness.\n\nA GUI is included to play against an AI or observe two AI's battling it out.\n\n# Usage:\nBuild C-extension by running command \"python3 setup.py build_ext --inplace\".\nYou can run GUI.py if you want to play against a bot yourself or to spectate match between two bots.\nRunning HUGame.py allows for maximum speed without a GUI.\n"
 },
 {
  "repo": "charlesabarnes/pointing-poker",
  "language": "TypeScript",
  "readme_contents": "# Pointing-poker\n\nPointing poker is an easy self hosted solution for Agile teams wanting to add points to their user stories.\n\n## Releases\n\n* **[Latest Release](https://github.com/charlesabarnes/SPFtoolbox/pointing-poker/latest)**\n* **[All Releases](https://github.com/charlesabarnes/SPFtoolbox/pointing-poker)**\n\n## Contribute\n\nThere are many ways to contribute to pointing-poker.\n* **[Submit bugs](https://github.com/charlesabarnes/pointing-poker/issues)** and help us verify fixes as they are checked in.\n* Review **[source code changes](https://github.com/charlesabarnes/pointing-poker/pulls)**.\n\n## Screenshot\n\n![big screenshot](https://i.imgur.com/xs7PhY0.png \"Screenshot\")\n\n## How to run Pointing Poker\n\n* **Heroku**\n\n[![Deploy](https://www.herokucdn.com/deploy/button.svg)](https://heroku.com/deploy?template=https://github.com/charlesabarnes/pointing-poker)\n\n* **Manually start**\n\n1. Clone the repository\n2. cd into the directory\n3. run `npm run build`\n4. run `node dist/server` (a node process manager such as PM2 could be used for this)\n5. The app should now be running by default on port 4000\n\n## Questions, Concerns, and Feature Request\n\n* Please create an **[issue](https://github.com/charlesabarnes/pointing-poker/issues)** or send me an email if you have feedback to give\n\nCreated by **[Charles Barnes](https://charlesabarnes.com)**\n\n"
 },
 {
  "repo": "phongcao/pokerbot",
  "language": "JavaScript",
  "readme_contents": "# Skype Poker Bot\nA bot that plays Texas Hold'em with you on Skype. It's developed using [Microsoft Bot Framework](https://dev.botframework.com/). You can search for it in the [Bot Directory](https://bots.botframework.com/) and try it yourself.\n![alt tag](https://github.com/phongcao/pokerbot/blob/master/docs/gameplay.png)\n# Debugging\nYou can easily [configure your bot to run locally using ngrok](https://docs.botframework.com/en-us/node/builder/guides/core-concepts/#installation).\n# Deploying to Azure\nPlease follow [these instructions](https://docs.botframework.com/en-us/node/builder/guides/deploying-to-azure/) and then configure MICROSOFT_APP_ID, MICROSOFT_APP_PASSWORD and MICROSOFT_APP_URL.\n# Assets\n* [Playing Cards - Byron Knoll](http://opengameart.org/content/playing-cards-vector-png)\n* [Colorful Poker Card Back - jeffshee](http://opengameart.org/content/colorful-poker-card-back)\n* [Board Game Pack - Kenney](http://www.kenney.nl)\n* [Roboto Font](http://www.dafont.com/roboto.font)\n"
 },
 {
  "repo": "nikita-volkov/ptr-poker",
  "language": "Haskell",
  "readme_contents": ""
 },
 {
  "repo": "beachgrub/PokerHandSolidity",
  "language": "JavaScript",
  "readme_contents": "# PokerHandUtils\n\nLibrary of Solidity code to evaluate a 5 card poker hand.\nUsed as an exercise in non-trivial solidity development.\nThis is still a work in progress and can definitely be improved, optimized, and bugs may occur.\n\n### Overview\n\nLibrary for handling of poker hands consisting of cards numbered 0-51\nAce = 0, King = 12 in the suits Clubs, Diamonds, Hearts, Spades\n\nFunction: \t\nevaluateHand takes a list of 5 cards (0-51)\n\nReturns:\nenum of Hand type and up to 5 values of the cards sorted to break ties\n\nNotes: \t\t\nState of the art poker hand evals use data tables and hash to run fast.\nFor in contract, wanted an old school analytic approach with low memory or external data\nReturn list of cards for tie breaker is pretty basic and could be updated easily to a hash value\n\n### Usage\n\n    int8[5] memory hand = [ int8(PokerHandUtils.CardId.Six_Clubs), int8(PokerHandUtils.CardId.Three_Clubs), int8(PokerHandUtils.CardId.Jack_Diamonds), int8(PokerHandUtils.CardId.Two_Clubs), int8(PokerHandUtils.CardId.Seven_Clubs)];\n    PokerHandUtils.HandEnum handVal;\n    int8[5] memory result;\n    (handVal, result) = poker.evaluateHand(hand);\n\nExample returns:\n    (HandEnum.HighCard, [Jack, Eight, Six, Three, Two])\n\nThis project and uses [truffle](https://github.com/trufflesuite/truffle) Ethereum smart contracts development framework. In order to run it, install truffle first:\n\n    npm install -g truffle\n\n### Running tests\n\nTo run all of the smart contract tests use following command in your console:\n\n    truffle test\n\n## Contributions\n\nAll comments, ideas for improvements and pull requests are welcomed.\n\n## License\n\nMIT License\n\nCopyright (c) 2018 Darwin 3D, LLC. (Jeff Lander jeffl@darwin3d.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
 },
 {
  "repo": "nowakowsky/PokerStars",
  "language": "Python",
  "readme_contents": "# This app doesn't work anymore\r\nYou can take a look at working one right there [github](https://github.com/nowakowsky/Pokerstars-Api)\r\n\r\n\r\n\r\n\r\n## Run software.py after running PokerStars game.\r\n\r\n#### Working features:\r\n#####    -> Recon cards on table\r\n#####    -> Recon game stage\r\n#####    -> Recon player's cards\r\n#####    -> Recon player's turn\r\n#####    -> Recon possible moves\r\n#####    -> Gives you tight-aggressive rating.\r\n\r\n#### Example output:\r\n    Cards on table: S8 H7 ST\r\n    Game stage: Floop\r\n    Player cards: D9 HA\r\n    Tight-agressive rating: trash\r\n    Possible moves: raise fold call\r\n\r\n**This project has been made to learn some python basics, it's far from being perfect. Sorry!**\r\n\r\nUpdate. If anything in PokerStars GUI has changed it won't work anymore.\r\n"
 },
 {
  "repo": "Ahineya/js-workshop-poker-boilerplate",
  "language": "JavaScript",
  "readme_contents": "###Javascript workshop: poker\n[![Build Status](https://travis-ci.org/Ahineya/js-workshop-poker-boilerplate.svg?branch=master)](https://travis-ci.org/Ahineya/js-workshop-poker-boilerplate)\n#####Development\n\n######Initial setup\nTo do initial project setup you need bower, grunt and grunt-cli installed globally:\n\n```\nnpm install -g bower grunt grunt-cli\n```\n\nThen execute next command for dependencies installation:\n```\nnpm install && bower install\n```\n\n######Running\nTo run development livereload environment, execute ```grunt develop```\nTo build project without running, use ```grunt build```\nTo run tests use ```grunt test``` command\n\nTo start project without tests and livereload use ```npm start``` command and open http://127.0.0.1:8080 in browser\n\nDo not forget to reload manually when adding new files and folders!\n\n######Structure\n\nAll project code is lying under /src folder.\n\nIn /src/client folder there are another folders:\n\n* img for storing images\n* js for javascript classes\n* less for less files (they will be compiled into one style.css file)\n* polymer-components for storing Polymer .html components\n\nYou can create .ejs files in /src/client directory, or create something like \"/srv/client/views\" folder - \ngrunt is smart enough to work with them :)\n\nAfter build grunt creates a /public folder and stores all built files in it.\n\n* /public/vendor - folder that contains third-party libraries, e.g. Polymer\n* /public/components - folder with copied /src/client/polymer-components folder\n\n######Testing\nThere are /tests folder for tests. Feel free to create additional folders under /tests/client and /tests/server directories.\nAny test file should be named as [name].tests.js\n\n* Client tests runs under PhantomJS using Karma + Jasmine + Sinon\n* Server tests runs using Mocha + Chai\n\nGrunt creates /coverage directory after running tests with Istanbul reports.\n"
 },
 {
  "repo": "David-H-Bolton/PokerEval",
  "language": "C++",
  "readme_contents": "# PokerEval\nA C++ program for Windows in C++ 11, it compares single v multi tasking using a million poker hands\n"
 },
 {
  "repo": "IMGameDesigner/PokerGame",
  "language": "JavaScript",
  "readme_contents": "### \u6ee1\u610f\u8bf7\u7ed9\u4e2astar\n### [1.0\u539f\u7248js](https://github.com/IMGameDesigner/PokerGame/blob/master/a.js)\n* \u9488\u5bf9CocosCreator1.9.3,\u4e00\u526f\u724c\u6597\u5730\u4e3b\n* onload\u65b9\u6cd5\uff1a\u5185\u542b\u6d4b\u8bd5\u6570\u636e\u548c\u4f7f\u7528\u65b9\u6cd5\n* can_out_poker\u65b9\u6cd5\uff1a\u8f93\u5165\u4e24\u4e2a\u65e0\u5e8f\uff08\u542b1~54\uff09\u6570\u7ec4\uff08\u5bf9\u624b\u7684\u51fa\u724c+\u81ea\u5df1\u6253\u7b97\u51fa\u7684\u724c\uff09\uff0c\u8fdb\u884c\u8ddf\u724c\u6b63\u8bef\u5224\u65ad\uff0c\u8f93\u51fafalse or true\n* AI_chupai\u65b9\u6cd5\uff1a\u8f93\u5165\u4e24\u4e2a\u65e0\u5e8f\uff08\u542b1~54\uff09\u6570\u7ec4\uff08\u5bf9\u624b\u7684\u51fa\u724c+\u81ea\u5df1\u7684\u5168\u90e8\u624b\u724c\uff09\uff0c\u8f93\u51fa\u4e00\u4e2a\u65e0\u5e8f\u961f\u5217\u5305\u542bAI\u667a\u80fd\u51fa\u724c\u7ed3\u679c\uff081\u4ee3\u8868\u5c0f\u4e09\uff0c13\u4ee3\u88682\uff0c14\u4ee3\u8868\u5927\u5c0f\u738b\uff0c\u65e0\u82b1\u8272\u533a\u5206\uff09\n* \uff081~54\uff091\uff1aA\uff0c2\uff1a2\uff0c13\uff1aK\uff0c14\uff1aA\uff0c53\uff1a\u5c0f\u738b\uff0c54\uff1a\u5927\u738b\n### [1.1java\u7248\uff08\u4fee\u6539\u4e86AI_chupai\u7684\u90e8\u5206bug\uff09](https://github.com/IMGameDesigner/PokerGame/blob/master/landowner.java)\n* \u6784\u9020\u65b9\u6cd5\uff1a\u5185\u542b\u6d4b\u8bd5\u6570\u636e\u548c\u4f7f\u7528\u65b9\u6cd5\n* AI_chupai\u65b9\u6cd5\uff1a\u8f93\u5165\u4e24\u4e2a\u65e0\u5e8f\uff08\u542b1~54\uff09\u6570\u7ec4\uff08\u5bf9\u624b\u7684\u51fa\u724c+\u81ea\u5df1\u7684\u624b\u724c\uff09\uff0c\u8f93\u51fa\u4e00\u4e2a\u65e0\u5e8f\u961f\u5217\u5305\u542bAI\u667a\u80fd\u51fa\u724c\u7ed3\u679c\uff081\u4ee3\u8868\u5c0f\u4e09\uff0c13\u4ee3\u88682\uff0c14\u4ee3\u8868\u5927\u5c0f\u738b\uff0c\u65e0\u82b1\u8272\u533a\u5206\uff09\n\n"
 },
 {
  "repo": "houen/PokerFace",
  "language": "ActionScript",
  "readme_contents": "This [Actionscript Flash poker (5-card & Texas Hold\u2019em)](http://blog.houen.net/actionscript-3-poker-hand-evaluator/ \"Actionscript Flash poker (5-card & Texas Hold\u2019em)\") evaluator will evaluate more than 14,000 hands per second, with a size of around 6 kb. It also includes classes to wrap everything up nice and tight for convenience.\n\nStarting from [this post](http://www.codingthewheel.com/archives/poker-hand-evaluator-roundup \"Poker blog post\") about poker hand evaluators, i converted the improved version of [Cactukev\u2019s poker hand evaluator](http://www.suffecool.net/poker/evaluator.html \"Cactukev\u2019s poker hand evaluator\") to AS3 some time ago, and wrapped it in some nice OO classes to make it easily accessible.\n\nThe OO classes include ways to handle a Deck of cards, a Dealer to draw cards from it, objects to represent a 5- and 7-card hand and compare strengths, and a Card class to make card strength and textual representation easy.\n\nThe straight dope is that I have tested it to evaluate approx. 2.6 mio. 5-card poker hands in 6.3 seconds, and 133 mio. 7-card poker hands in approx. 2.5 hours, or about 14.000 hands per second. The test evaluated the correct evaluation of all possible 5- and 7-card poker hands.\nThe tests were run on a 2.8 gHz Macbook Pro with 4Gb RAM\n\n*Included in the library*\n\nsource code\n.swc binary\nAPI reference\nThe test to evaluate that it runs correctly here (AIR application)\n\n*License:*\nThe original code i ported it from was released to the public domain, and is as such free to use, modify and redistribute.\nI am releasing this code under the MIT license. License info is found in the source files."
 },
 {
  "repo": "ngocbd/pokerserver",
  "language": "Java",
  "readme_contents": "# pokerserver\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/61b2af6402014b01bf7505e9179108e4)](https://app.codacy.com/app/ngocbd/pokerserver?utm_source=github.com&utm_medium=referral&utm_content=ngocbd/pokerserver&utm_campaign=Badge_Grade_Dashboard)\n[![codecov](https://codecov.io/gh/ngocbd/pokerserver/branch/master/graph/badge.svg)](https://codecov.io/gh/ngocbd/pokerserver)\n[![Build Status](https://travis-ci.org/ngocbd/pokerserver.svg?branch=master)](https://travis-ci.org/ngocbd/pokerserver)\n\n"
 },
 {
  "repo": "mikaelbr/AI-Poker-Player",
  "language": "Python",
  "readme_contents": "# AI Poker Player\n===============================================================\nInitial commit for the AI Poker Player student project at NTNU. \n\nCode done by and for Mikael Brevik and Martin Akre Midsund\n"
 },
 {
  "repo": "ProPanek/PlanningPoker",
  "language": "JavaScript",
  "readme_contents": "# Planning Poker\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/bc4ede09cfb34695993224552e1cb2af)](https://www.codacy.com/app/ProPanek/PlanningPoker?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=ProPanek/PlanningPoker&amp;utm_campaign=Badge_Grade)\n[![dependencies Status](https://david-dm.org/ProPanek/PlanningPoker/status.svg)](https://david-dm.org/ProPanek/PlanningPoker)\n[![devDependencies Status](https://david-dm.org/ProPanek/PlanningPoker/dev-status.svg)](https://david-dm.org/ProPanek/PlanningPoker?type=dev)\n\nLet's make your planning session go online!\n\n## Getting Started\n\nIf you want to start project locally follow the instructions below.\n\n### Prerequisites\n\n```\nnode.js ^8.*.*\n\nnpm or yarn as package manager\n```\n\n### Installing\n\nFirst install packages in root folder of the project.\n\n```\nyarn install\n```\n\nThen go to `/client` folder and repeat\n\n```\ncd client/\nyarn install \n```\n\nNext you need to go to the `package.json` in your `/client` and change or add line to\n\n```\n\"proxy\": \"http://localhost:5000\",\n```\n\nThis allow our `create-react-app` application to know where our api is running (which port and domain if you have server on different machine).\nAfter you finish just type in `root` folder\n\n```\nyarn dev\n```\n\nAnd that's it!\n\n## Testing\n\n```\njest, enzyme, sinon\n```\n\nTo test type\n\n`yarn test`\n\n## Deployment\n\nAfter you deploy this program into some kind of hosting you need to remember to change `proxy` in our `package.json` in `/client/package.json` to\n\n```\n\"proxy\": \"yourdomain\",\n```\n\n## Built With\n\n*   [create-react-app](https://github.com/facebook/create-react-app) - client side\n*   [node.js](https://github.com/nodejs) - server\n*   [socket.io](https://github.com/socketio/socket.io) - WebSockets\n\n## Authors\n\n*   **Sebastian Ogarek** - *Main work* - [ProPanek](https://github.com/ProPanek)\n\nSee also the list of [contributors](https://github.com/ProPanek/PlanningPoker/contributors) who participated in this project.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE.md](https://github.com/ProPanek/PlanningPoker/blob/master/LICENSE) file for details\n"
 }
]